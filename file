
C:\Users\David\dev\RNU\.\zig-cache\kernel.elf:	file format elf64-littleriscv

Disassembly of section .text:

0000000080200000 <kernel_start>:
80200000: 17 41 67 00  	auipc	sp, 1652
80200004: 13 01 01 00  	mv	sp, sp
80200008: a1 62        	lui	t0, 8
8020000a: b3 82 a2 02  	mul	t0, t0, a0
8020000e: 33 01 51 40  	sub	sp, sp, t0
80200012: 0a 84        	mv	s0, sp

0000000080200014 <.Lpcrel_hi1>:
80200014: 97 02 00 00  	auipc	t0, 0
80200018: 93 82 42 01  	addi	t0, t0, 20
8020001c: 73 90 52 10  	csrw	stvec, t0
80200020: 97 30 00 00  	auipc	ra, 3
80200024: e7 80 c0 8c  	jalr	-1844(ra)

0000000080200028 <kernel_raw_interrupt_handler>:
80200028: 6d 71        	addi	sp, sp, -272
8020002a: 06 e0        	sd	ra, 0(sp)
8020002c: 0a e4        	sd	sp, 8(sp)
8020002e: 0e e8        	sd	gp, 16(sp)
80200030: 12 ec        	sd	tp, 24(sp)
80200032: 16 f0        	sd	t0, 32(sp)
80200034: 1a f4        	sd	t1, 40(sp)
80200036: 1e f8        	sd	t2, 48(sp)
80200038: aa e4        	sd	a0, 72(sp)
8020003a: ae e8        	sd	a1, 80(sp)
8020003c: b2 ec        	sd	a2, 88(sp)
8020003e: b6 f0        	sd	a3, 96(sp)
80200040: ba f4        	sd	a4, 104(sp)
80200042: be f8        	sd	a5, 112(sp)
80200044: c2 fc        	sd	a6, 120(sp)
80200046: 46 e1        	sd	a7, 128(sp)
80200048: f2 ed        	sd	t3, 216(sp)
8020004a: f6 f1        	sd	t4, 224(sp)
8020004c: fa f5        	sd	t5, 232(sp)
8020004e: fe f9        	sd	t6, 240(sp)
80200050: f3 24 00 10  	csrr	s1, sstatus
80200054: 73 29 10 14  	csrr	s2, sepc
80200058: 26 e2        	sd	s1, 256(sp)
8020005a: 4a e6        	sd	s2, 264(sp)
8020005c: 0a 85        	mv	a0, sp
8020005e: f3 25 20 14  	csrr	a1, scause
80200062: 73 26 30 14  	csrr	a2, stval
80200066: ef 40 60 7d  	jal	0x8020483c <kernel_interrupt_handler>
8020006a: 92 64        	ld	s1, 256(sp)
8020006c: 32 69        	ld	s2, 264(sp)
8020006e: 73 90 04 10  	csrw	sstatus, s1
80200072: 73 10 19 14  	csrw	sepc, s2
80200076: 82 60        	ld	ra, 0(sp)
80200078: c2 61        	ld	gp, 16(sp)
8020007a: 82 72        	ld	t0, 32(sp)
8020007c: 22 73        	ld	t1, 40(sp)
8020007e: c2 73        	ld	t2, 48(sp)
80200080: 26 65        	ld	a0, 72(sp)
80200082: c6 65        	ld	a1, 80(sp)
80200084: 66 66        	ld	a2, 88(sp)
80200086: 86 76        	ld	a3, 96(sp)
80200088: 26 77        	ld	a4, 104(sp)
8020008a: c6 77        	ld	a5, 112(sp)
8020008c: 66 78        	ld	a6, 120(sp)
8020008e: 8a 68        	ld	a7, 128(sp)
80200090: 6e 6e        	ld	t3, 216(sp)
80200092: 8e 7e        	ld	t4, 224(sp)
80200094: 2e 7f        	ld	t5, 232(sp)
80200096: ce 7f        	ld	t6, 240(sp)
80200098: 22 61        	ld	sp, 8(sp)
8020009a: 51 61        	addi	sp, sp, 272
8020009c: 73 00 20 10  	sret	

00000000802000a0 <panic>:
; pub fn panic(message: []const u8, _: ?*std.builtin.StackTrace) noreturn {
802000a0: 79 71        	addi	sp, sp, -48
802000a2: 06 f4        	sd	ra, 40(sp)
802000a4: 22 f0        	sd	s0, 32(sp)
802000a6: 00 18        	addi	s0, sp, 48
802000a8: 23 3c b4 fc  	sd	a1, -40(s0)
;     kernel.panic("{s}", .{message});
802000ac: 0c 61        	ld	a1, 0(a0)
802000ae: 23 30 b4 fe  	sd	a1, -32(s0)
802000b2: 08 65        	ld	a0, 8(a0)
802000b4: 23 34 a4 fe  	sd	a0, -24(s0)
802000b8: 13 05 04 fe  	addi	a0, s0, -32
802000bc: 97 00 00 00  	auipc	ra, 0
802000c0: e7 80 00 28  	jalr	640(ra)

00000000802000c4 <std.target.Feature.feature_set_fns(std.target.riscv.Feature).featureSet>:
;                     pub fn featureSet(features: []const F) Set {
802000c4: 59 71        	addi	sp, sp, -112
802000c6: 86 f4        	sd	ra, 104(sp)
802000c8: a2 f0        	sd	s0, 96(sp)
802000ca: 80 18        	addi	s0, sp, 112
802000cc: 23 34 b4 fa  	sd	a1, -88(s0)
;                         var x = Set.empty_workaround(); // TODO remove empty_workaround
802000d0: 23 30 a4 fa  	sd	a0, -96(s0)
802000d4: 13 05 84 fc  	addi	a0, s0, -56
802000d8: 97 00 00 00  	auipc	ra, 0
802000dc: e7 80 20 2a  	jalr	674(ra)
802000e0: 83 35 84 fa  	ld	a1, -88(s0)
802000e4: 01 45        	mv	a0, zero
;                         for (features) |feature| {
802000e6: 23 30 a4 fc  	sd	a0, -64(s0)
802000ea: 88 65        	ld	a0, 8(a1)
802000ec: 23 38 a4 fa  	sd	a0, -80(s0)
802000f0: 09 a0        	j	0x802000f2 <std.target.Feature.feature_set_fns(std.target.riscv.Feature).featureSet+0x2e>
802000f2: 83 35 04 fb  	ld	a1, -80(s0)
802000f6: 03 35 04 fc  	ld	a0, -64(s0)
802000fa: 23 3c a4 f8  	sd	a0, -104(s0)
802000fe: 63 79 b5 02  	bgeu	a0, a1, 0x80200130 <std.target.Feature.feature_set_fns(std.target.riscv.Feature).featureSet+0x6c>
80200102: 09 a0        	j	0x80200104 <std.target.Feature.feature_set_fns(std.target.riscv.Feature).featureSet+0x40>
80200104: 83 35 84 f9  	ld	a1, -104(s0)
80200108: 03 35 84 fa  	ld	a0, -88(s0)
8020010c: 08 61        	ld	a0, 0(a0)
8020010e: 2e 95        	add	a0, a0, a1
80200110: 83 45 05 00  	lbu	a1, 0(a0)
80200114: a3 0f b4 fa  	sb	a1, -65(s0)
80200118: 13 05 84 fc  	addi	a0, s0, -56
;                             x.addFeature(@enumToInt(feature));
8020011c: 97 00 00 00  	auipc	ra, 0
80200120: e7 80 c0 28  	jalr	652(ra)
80200124: 03 35 84 f9  	ld	a0, -104(s0)
;                         for (features) |feature| {
80200128: 05 05        	addi	a0, a0, 1
8020012a: 23 30 a4 fc  	sd	a0, -64(s0)
8020012e: d1 b7        	j	0x802000f2 <std.target.Feature.feature_set_fns(std.target.riscv.Feature).featureSet+0x2e>
;                         return x;
80200130: 83 35 04 fa  	ld	a1, -96(s0)
80200134: 03 35 84 fe  	ld	a0, -24(s0)
80200138: 88 f1        	sd	a0, 32(a1)
8020013a: 03 35 04 fe  	ld	a0, -32(s0)
8020013e: 88 ed        	sd	a0, 24(a1)
80200140: 03 35 84 fd  	ld	a0, -40(s0)
80200144: 88 e9        	sd	a0, 16(a1)
80200146: 03 35 04 fd  	ld	a0, -48(s0)
8020014a: 88 e5        	sd	a0, 8(a1)
8020014c: 03 35 84 fc  	ld	a0, -56(s0)
80200150: 88 e1        	sd	a0, 0(a1)
80200152: 06 74        	ld	s0, 96(sp)
80200154: a6 70        	ld	ra, 104(sp)
80200156: 65 61        	addi	sp, sp, 112
80200158: 82 80        	ret

000000008020015a <std.debug.assert>:
; pub fn assert(ok: bool) void {
8020015a: 01 11        	addi	sp, sp, -32
8020015c: 06 ec        	sd	ra, 24(sp)
8020015e: 22 e8        	sd	s0, 16(sp)
80200160: 00 10        	addi	s0, sp, 32
80200162: aa 85        	mv	a1, a0
80200164: 13 f5 15 00  	andi	a0, a1, 1
80200168: a3 07 a4 fe  	sb	a0, -17(s0)
8020016c: 81 45        	mv	a1, zero
;     if (!ok) unreachable; // assertion failure
8020016e: 63 1c b5 00  	bne	a0, a1, 0x80200186 <.LBB2_4+0x12>
80200172: 09 a0        	j	0x80200174 <.LBB2_4>

0000000080200174 <.LBB2_4>:
80200174: 17 d5 01 00  	auipc	a0, 29
80200178: 13 05 c5 31  	addi	a0, a0, 796
8020017c: 81 45        	mv	a1, zero
8020017e: 97 00 00 00  	auipc	ra, 0
80200182: e7 80 20 f2  	jalr	-222(ra)
80200186: 09 a0        	j	0x80200188 <.LBB2_4+0x14>
; pub fn assert(ok: bool) void {
80200188: 42 64        	ld	s0, 16(sp)
8020018a: e2 60        	ld	ra, 24(sp)
8020018c: 05 61        	addi	sp, sp, 32
8020018e: 82 80        	ret

0000000080200190 <arch.riscv.write>:
; pub inline fn write(bytes: []const u8) void {
80200190: 29 71        	addi	sp, sp, -320
80200192: 06 fe        	sd	ra, 312(sp)
80200194: 2a 86        	mv	a2, a0
80200196: 01 45        	mv	a0, zero
80200198: 2a e0        	sd	a0, 0(sp)
8020019a: 2a f0        	sd	a0, 32(sp)
8020019c: 28 18        	addi	a0, sp, 56
8020019e: 2a f4        	sd	a0, 40(sp)
802001a0: 13 05 00 02  	addi	a0, zero, 32
802001a4: 2a f8        	sd	a0, 48(sp)
802001a6: 08 08        	addi	a0, sp, 16
802001a8: 0c 10        	addi	a1, sp, 32
;     _ = writer.write(bytes) catch unreachable;
802001aa: 97 10 00 00  	auipc	ra, 1
802001ae: e7 80 20 a9  	jalr	-1390(ra)
802001b2: 82 65        	ld	a1, 0(sp)
802001b4: 03 55 81 01  	lhu	a0, 24(sp)
802001b8: 2a e4        	sd	a0, 8(sp)
802001ba: 63 09 b5 00  	beq	a0, a1, 0x802001cc <arch.riscv.write+0x3c>
802001be: 09 a0        	j	0x802001c0 <arch.riscv.write+0x30>
802001c0: a2 65        	ld	a1, 8(sp)
802001c2: 08 10        	addi	a0, sp, 32
802001c4: 97 00 00 00  	auipc	ra, 0
802001c8: e7 80 a0 42  	jalr	1066(ra)
; pub inline fn write(bytes: []const u8) void {
802001cc: f2 70        	ld	ra, 312(sp)
802001ce: 31 61        	addi	sp, sp, 320
802001d0: 82 80        	ret

00000000802001d2 <panic.TODO>:
; pub fn TODO(src: SourceLocation) noreturn {
802001d2: 39 71        	addi	sp, sp, -64
;     panic("TODO: {s}:{}:{} {s}()\n", .{ src.file, src.line, src.column, src.fn_name });
802001d4: 06 fc        	sd	ra, 56(sp)
802001d6: 22 f8        	sd	s0, 48(sp)
802001d8: 80 00        	addi	s0, sp, 64
802001da: 0c 65        	ld	a1, 8(a0)
802001dc: 23 38 b4 fc  	sd	a1, -48(s0)
802001e0: 0c 61        	ld	a1, 0(a0)
802001e2: 23 34 b4 fc  	sd	a1, -56(s0)
802001e6: 0c 51        	lw	a1, 32(a0)
802001e8: 23 2c b4 fc  	sw	a1, -40(s0)
802001ec: 4c 51        	lw	a1, 36(a0)
802001ee: 23 2e b4 fc  	sw	a1, -36(s0)
802001f2: 0c 69        	ld	a1, 16(a0)
802001f4: 23 30 b4 fe  	sd	a1, -32(s0)
802001f8: 08 6d        	ld	a0, 24(a0)
802001fa: 23 34 a4 fe  	sd	a0, -24(s0)
802001fe: 13 05 84 fc  	addi	a0, s0, -56
80200202: 97 30 01 00  	auipc	ra, 19
80200206: e7 80 c0 35  	jalr	860(ra)

000000008020020a <std.atomic.spinLoopHint>:
; pub inline fn spinLoopHint() void {
8020020a: 82 80        	ret

000000008020020c <assertion.assert>:
; pub fn assert(src: std.builtin.SourceLocation, condition: bool) void {
8020020c: 5d 71        	addi	sp, sp, -80
8020020e: 86 e4        	sd	ra, 72(sp)
80200210: a2 e0        	sd	s0, 64(sp)
80200212: 80 08        	addi	s0, sp, 80
80200214: 23 3c a4 fa  	sd	a0, -72(s0)
80200218: 13 f5 15 00  	andi	a0, a1, 1
8020021c: a3 03 a4 fc  	sb	a0, -57(s0)
80200220: 81 45        	mv	a1, zero
;     if (!condition) kernel.panic("Assert failed at {s}:{}:{} {s}()\n", .{ src.file, src.line, src.column, src.fn_name });
80200222: 63 1d b5 02  	bne	a0, a1, 0x8020025c <assertion.assert+0x50>
80200226: 09 a0        	j	0x80200228 <assertion.assert+0x1c>
80200228: 03 35 84 fb  	ld	a0, -72(s0)
8020022c: 0c 65        	ld	a1, 8(a0)
8020022e: 23 38 b4 fc  	sd	a1, -48(s0)
80200232: 0c 61        	ld	a1, 0(a0)
80200234: 23 34 b4 fc  	sd	a1, -56(s0)
80200238: 0c 51        	lw	a1, 32(a0)
8020023a: 23 2c b4 fc  	sw	a1, -40(s0)
8020023e: 4c 51        	lw	a1, 36(a0)
80200240: 23 2e b4 fc  	sw	a1, -36(s0)
80200244: 0c 69        	ld	a1, 16(a0)
80200246: 23 30 b4 fe  	sd	a1, -32(s0)
8020024a: 08 6d        	ld	a0, 24(a0)
8020024c: 23 34 a4 fe  	sd	a0, -24(s0)
80200250: 13 05 84 fc  	addi	a0, s0, -56
80200254: 97 30 01 00  	auipc	ra, 19
80200258: e7 80 40 f6  	jalr	-156(ra)
8020025c: 09 a0        	j	0x8020025e <assertion.assert+0x52>
; pub fn assert(src: std.builtin.SourceLocation, condition: bool) void {
8020025e: 06 64        	ld	s0, 64(sp)
80200260: a6 60        	ld	ra, 72(sp)
80200262: 61 61        	addi	sp, sp, 80
80200264: 82 80        	ret

0000000080200266 <data_manipulation.string_eq>:
; pub inline fn string_eq(a: []const u8, b: []const u8) bool {
80200266: 79 71        	addi	sp, sp, -48
;     return std.mem.eql(u8, a, b);
80200268: 06 f4        	sd	ra, 40(sp)
8020026a: 10 65        	ld	a2, 8(a0)
8020026c: 32 ec        	sd	a2, 24(sp)
8020026e: 10 61        	ld	a2, 0(a0)
80200270: 32 e8        	sd	a2, 16(sp)
80200272: 90 61        	ld	a2, 0(a1)
80200274: 32 e0        	sd	a2, 0(sp)
80200276: 90 65        	ld	a2, 8(a1)
80200278: 32 e4        	sd	a2, 8(sp)
8020027a: 97 40 01 00  	auipc	ra, 20
8020027e: e7 80 a0 0a  	jalr	170(ra)
80200282: 93 75 15 00  	andi	a1, a0, 1
80200286: a3 03 b1 02  	sb	a1, 39(sp)
8020028a: a2 70        	ld	ra, 40(sp)
8020028c: 45 61        	addi	sp, sp, 48
8020028e: 82 80        	ret

0000000080200290 <data_manipulation.string_starts_with>:
; pub inline fn string_starts_with(str: []const u8, slice: []const u8) bool {
80200290: 79 71        	addi	sp, sp, -48
;     return std.mem.startsWith(u8, str, slice);
80200292: 06 f4        	sd	ra, 40(sp)
80200294: 10 65        	ld	a2, 8(a0)
80200296: 32 ec        	sd	a2, 24(sp)
80200298: 10 61        	ld	a2, 0(a0)
8020029a: 32 e8        	sd	a2, 16(sp)
8020029c: 90 61        	ld	a2, 0(a1)
8020029e: 32 e0        	sd	a2, 0(sp)
802002a0: 90 65        	ld	a2, 8(a1)
802002a2: 32 e4        	sd	a2, 8(sp)
802002a4: 97 60 01 00  	auipc	ra, 22
802002a8: e7 80 a0 48  	jalr	1162(ra)
802002ac: 93 75 15 00  	andi	a1, a0, 1
802002b0: a3 03 b1 02  	sb	a1, 39(sp)
802002b4: a2 70        	ld	ra, 40(sp)
802002b6: 45 61        	addi	sp, sp, 48
802002b8: 82 80        	ret

00000000802002ba <data_manipulation.string_ends_with>:
; pub inline fn string_ends_with(str: []const u8, slice: []const u8) bool {
802002ba: 79 71        	addi	sp, sp, -48
;     return std.mem.endsWith(u8, str, slice);
802002bc: 06 f4        	sd	ra, 40(sp)
802002be: 10 65        	ld	a2, 8(a0)
802002c0: 32 ec        	sd	a2, 24(sp)
802002c2: 10 61        	ld	a2, 0(a0)
802002c4: 32 e8        	sd	a2, 16(sp)
802002c6: 90 61        	ld	a2, 0(a1)
802002c8: 32 e0        	sd	a2, 0(sp)
802002ca: 90 65        	ld	a2, 8(a1)
802002cc: 32 e4        	sd	a2, 8(sp)
802002ce: 97 70 01 00  	auipc	ra, 23
802002d2: e7 80 00 d7  	jalr	-656(ra)
802002d6: 93 75 15 00  	andi	a1, a0, 1
802002da: a3 03 b1 02  	sb	a1, 39(sp)
802002de: a2 70        	ld	ra, 40(sp)
802002e0: 45 61        	addi	sp, sp, 48
802002e2: 82 80        	ret

00000000802002e4 <data_manipulation.align_forward>:
; pub inline fn align_forward(n: u64, alignment: u64) u64 {
802002e4: 39 71        	addi	sp, sp, -64
802002e6: 2a f0        	sd	a0, 32(sp)
802002e8: 2e ec        	sd	a1, 24(sp)
;     const mask: u64 = alignment - 1;
802002ea: 13 85 f5 ff  	addi	a0, a1, -1
802002ee: 2a e8        	sd	a0, 16(sp)
802002f0: 63 fc a5 00  	bgeu	a1, a0, 0x80200308 <.LBB10_5+0x12>
802002f4: 09 a0        	j	0x802002f6 <.LBB10_5>

00000000802002f6 <.LBB10_5>:
802002f6: 17 d5 01 00  	auipc	a0, 29
802002fa: 13 05 a5 18  	addi	a0, a0, 394
802002fe: 81 45        	mv	a1, zero
80200300: 97 00 00 00  	auipc	ra, 0
80200304: e7 80 00 da  	jalr	-608(ra)
80200308: 42 65        	ld	a0, 16(sp)
8020030a: 2a f8        	sd	a0, 48(sp)
;     const result = (n + mask) & ~mask;
8020030c: 82 75        	ld	a1, 32(sp)
8020030e: 2e 95        	add	a0, a0, a1
80200310: 2a e4        	sd	a0, 8(sp)
80200312: 63 7c b5 00  	bgeu	a0, a1, 0x8020032a <.LBB10_6+0x12>
80200316: 09 a0        	j	0x80200318 <.LBB10_6>

0000000080200318 <.LBB10_6>:
80200318: 17 d5 01 00  	auipc	a0, 29
8020031c: 13 05 85 16  	addi	a0, a0, 360
80200320: 81 45        	mv	a1, zero
80200322: 97 00 00 00  	auipc	ra, 0
80200326: e7 80 e0 d7  	jalr	-642(ra)
8020032a: 22 65        	ld	a0, 8(sp)
8020032c: c2 75        	ld	a1, 48(sp)
8020032e: 93 c5 f5 ff  	not	a1, a1
80200332: 6d 8d        	and	a0, a0, a1
80200334: 2a f4        	sd	a0, 40(sp)
;     return result;
80200336: 2a fc        	sd	a0, 56(sp)
80200338: 21 61        	addi	sp, sp, 64
8020033a: 82 80        	ret

000000008020033c <panic.panic>:
; pub fn panic(comptime format: []const u8, args: anytype) noreturn {
8020033c: 79 71        	addi	sp, sp, -48
8020033e: 06 f4        	sd	ra, 40(sp)
80200340: 22 f0        	sd	s0, 32(sp)
80200342: 00 18        	addi	s0, sp, 48
80200344: 23 3c a4 fc  	sd	a0, -40(s0)
;     kernel.arch.disable_interrupts();
80200348: 97 00 00 00  	auipc	ra, 0
8020034c: e7 80 c0 17  	jalr	380(ra)
80200350: 03 35 84 fd  	ld	a0, -40(s0)

0000000080200354 <.LBB11_2>:
;     kernel.arch.Writer.should_lock = true;
80200354: 17 46 67 00  	auipc	a2, 1652
80200358: 13 06 c6 ca  	addi	a2, a2, -852
8020035c: 85 45        	addi	a1, zero, 1
8020035e: 23 00 b6 00  	sb	a1, 0(a2)
;     log.err(format, args);
80200362: 0c 61        	ld	a1, 0(a0)
80200364: 23 30 b4 fe  	sd	a1, -32(s0)
80200368: 0c 65        	ld	a1, 8(a0)
8020036a: 23 34 b4 fe  	sd	a1, -24(s0)
8020036e: 97 00 00 00  	auipc	ra, 0
80200372: e7 80 c0 16  	jalr	364(ra)
;     while (true) {}
80200376: 09 a0        	j	0x80200378 <.LBB11_2+0x24>
80200378: 01 a0        	j	0x80200378 <.LBB11_2+0x24>

000000008020037a <std.target.Set.empty_workaround>:
;                 pub fn empty_workaround() Set {
8020037a: 41 11        	addi	sp, sp, -16
8020037c: 06 e4        	sd	ra, 8(sp)
8020037e: 22 e0        	sd	s0, 0(sp)
80200380: 00 08        	addi	s0, sp, 16
80200382: aa 85        	mv	a1, a0

0000000080200384 <.LBB12_1>:
80200384: 17 d5 01 00  	auipc	a0, 29
80200388: 13 05 45 f2  	addi	a0, a0, -220
;                     return Set{ .ints = [1]usize{0} ** usize_count };
8020038c: 10 71        	ld	a2, 32(a0)
8020038e: 90 f1        	sd	a2, 32(a1)
80200390: 10 6d        	ld	a2, 24(a0)
80200392: 90 ed        	sd	a2, 24(a1)
80200394: 10 69        	ld	a2, 16(a0)
80200396: 90 e9        	sd	a2, 16(a1)
80200398: 10 65        	ld	a2, 8(a0)
8020039a: 90 e5        	sd	a2, 8(a1)
8020039c: 08 61        	ld	a0, 0(a0)
8020039e: 88 e1        	sd	a0, 0(a1)
802003a0: 02 64        	ld	s0, 0(sp)
802003a2: a2 60        	ld	ra, 8(sp)
802003a4: 41 01        	addi	sp, sp, 16
802003a6: 82 80        	ret

00000000802003a8 <std.target.Set.addFeature>:
;                 pub fn addFeature(set: *Set, arch_feature_index: Index) void {
802003a8: 5d 71        	addi	sp, sp, -80
802003aa: 86 e4        	sd	ra, 72(sp)
802003ac: a2 e0        	sd	s0, 64(sp)
802003ae: 80 08        	addi	s0, sp, 80
802003b0: 23 30 a4 fe  	sd	a0, -32(s0)
802003b4: 13 f5 f5 1f  	andi	a0, a1, 511
802003b8: 23 1f a4 fc  	sh	a0, -34(s0)
802003bc: 23 38 b4 fc  	sd	a1, -48(s0)
802003c0: 81 45        	mv	a1, zero
802003c2: 05 45        	addi	a0, zero, 1
;                     const usize_index = arch_feature_index / @bitSizeOf(usize);
802003c4: 63 1c b5 00  	bne	a0, a1, 0x802003dc <.LBB13_9+0x12>
802003c8: 09 a0        	j	0x802003ca <.LBB13_9>

00000000802003ca <.LBB13_9>:
802003ca: 17 d5 01 00  	auipc	a0, 29
802003ce: 13 05 65 f0  	addi	a0, a0, -250
802003d2: 81 45        	mv	a1, zero
802003d4: 97 00 00 00  	auipc	ra, 0
802003d8: e7 80 c0 cc  	jalr	-820(ra)
802003dc: 03 35 04 fd  	ld	a0, -48(s0)
802003e0: 13 75 05 1c  	andi	a0, a0, 448
802003e4: 19 81        	srli	a0, a0, 6
802003e6: 23 17 a4 fe  	sh	a0, -18(s0)
;                     const bit_index = @intCast(ShiftInt, arch_feature_index % @bitSizeOf(usize));
802003ea: 03 15 e4 fd  	lh	a0, -34(s0)
802003ee: 23 34 a4 fc  	sd	a0, -56(s0)
802003f2: 01 45        	mv	a0, zero
802003f4: 63 1e a5 00  	bne	a0, a0, 0x80200410 <.LBB13_10>
802003f8: 09 a0        	j	0x802003fa <.LBB13_9+0x30>
802003fa: 03 35 84 fc  	ld	a0, -56(s0)
802003fe: 13 75 f5 03  	andi	a0, a0, 63
80200402: 23 30 a4 fc  	sd	a0, -64(s0)
80200406: 81 45        	mv	a1, zero
80200408: 05 45        	addi	a0, zero, 1
8020040a: 63 1c b5 00  	bne	a0, a1, 0x80200422 <.LBB13_10+0x12>
8020040e: 15 a8        	j	0x80200442 <.LBB13_11>

0000000080200410 <.LBB13_10>:
80200410: 17 d5 01 00  	auipc	a0, 29
80200414: 13 05 05 ed  	addi	a0, a0, -304
80200418: 81 45        	mv	a1, zero
8020041a: 97 00 00 00  	auipc	ra, 0
8020041e: e7 80 60 c8  	jalr	-890(ra)
80200422: 03 35 04 fc  	ld	a0, -64(s0)
80200426: a3 06 a4 fe  	sb	a0, -19(s0)
;                     set.ints[usize_index] |= @as(usize, 1) << bit_index;
8020042a: 03 35 04 fe  	ld	a0, -32(s0)
8020042e: 23 38 a4 fa  	sd	a0, -80(s0)
80200432: 03 55 e4 fe  	lhu	a0, -18(s0)
80200436: 23 3c a4 fa  	sd	a0, -72(s0)
8020043a: 95 45        	addi	a1, zero, 5
8020043c: 63 65 b5 02  	bltu	a0, a1, 0x80200466 <.LBB13_12+0x12>
80200440: 11 a8        	j	0x80200454 <.LBB13_12>

0000000080200442 <.LBB13_11>:
;                     const bit_index = @intCast(ShiftInt, arch_feature_index % @bitSizeOf(usize));
80200442: 17 d5 01 00  	auipc	a0, 29
80200446: 13 05 e5 ea  	addi	a0, a0, -338
8020044a: 81 45        	mv	a1, zero
8020044c: 97 00 00 00  	auipc	ra, 0
80200450: e7 80 40 c5  	jalr	-940(ra)

0000000080200454 <.LBB13_12>:
;                     set.ints[usize_index] |= @as(usize, 1) << bit_index;
80200454: 17 d5 01 00  	auipc	a0, 29
80200458: 13 05 c5 ea  	addi	a0, a0, -340
8020045c: 81 45        	mv	a1, zero
8020045e: 97 00 00 00  	auipc	ra, 0
80200462: e7 80 20 c4  	jalr	-958(ra)
80200466: 03 35 04 fb  	ld	a0, -80(s0)
8020046a: 83 35 84 fb  	ld	a1, -72(s0)
8020046e: 8e 05        	slli	a1, a1, 3
80200470: aa 95        	add	a1, a1, a0
80200472: 88 61        	ld	a0, 0(a1)
80200474: 83 46 d4 fe  	lbu	a3, -19(s0)
80200478: 05 46        	addi	a2, zero, 1
8020047a: 33 16 d6 00  	sll	a2, a2, a3
8020047e: 51 8d        	or	a0, a0, a2
80200480: 88 e1        	sd	a0, 0(a1)
;                 pub fn addFeature(set: *Set, arch_feature_index: Index) void {
80200482: 06 64        	ld	s0, 64(sp)
80200484: a6 60        	ld	ra, 72(sp)
80200486: 61 61        	addi	sp, sp, 80
80200488: 82 80        	ret

000000008020048a <std.target.Arch.isWasm>:
;             pub fn isWasm(arch: Arch) bool {
8020048a: 01 11        	addi	sp, sp, -32
8020048c: 06 ec        	sd	ra, 24(sp)
8020048e: 22 e8        	sd	s0, 16(sp)
80200490: 00 10        	addi	s0, sp, 32
80200492: 93 75 f5 03  	andi	a1, a0, 63
80200496: 23 07 b4 fe  	sb	a1, -18(s0)
;                 return switch (arch) {
8020049a: 3d 05        	addi	a0, a0, 15
8020049c: 13 75 f5 03  	andi	a0, a0, 63
802004a0: 89 45        	addi	a1, zero, 2
802004a2: 63 67 b5 00  	bltu	a0, a1, 0x802004b0 <std.target.Arch.isWasm+0x26>
802004a6: 09 a0        	j	0x802004a8 <std.target.Arch.isWasm+0x1e>
802004a8: 01 45        	mv	a0, zero
;                     else => false,
802004aa: a3 07 a4 fe  	sb	a0, -17(s0)
;                 return switch (arch) {
802004ae: 29 a0        	j	0x802004b8 <std.target.Arch.isWasm+0x2e>
802004b0: 05 45        	addi	a0, zero, 1
;                     .wasm32, .wasm64 => true,
802004b2: a3 07 a4 fe  	sb	a0, -17(s0)
;                 return switch (arch) {
802004b6: 09 a0        	j	0x802004b8 <std.target.Arch.isWasm+0x2e>
802004b8: 03 05 f4 fe  	lb	a0, -17(s0)
802004bc: 42 64        	ld	s0, 16(sp)
802004be: e2 60        	ld	ra, 24(sp)
802004c0: 05 61        	addi	sp, sp, 32
802004c2: 82 80        	ret

00000000802004c4 <arch.riscv.disable_interrupts>:
; pub fn disable_interrupts() void {
802004c4: 41 11        	addi	sp, sp, -16
802004c6: 06 e4        	sd	ra, 8(sp)
802004c8: 22 e0        	sd	s0, 0(sp)
802004ca: 00 08        	addi	s0, sp, 16
802004cc: 09 45        	addi	a0, zero, 2
;             asm volatile ("csrc " ++ reg_name ++ ", %[arg1]"
802004ce: 73 30 05 10  	csrc	sstatus, a0
; pub fn disable_interrupts() void {
802004d2: 02 64        	ld	s0, 0(sp)
802004d4: a2 60        	ld	ra, 8(sp)
802004d6: 41 01        	addi	sp, sp, 16
802004d8: 82 80        	ret

00000000802004da <std.log.scoped(PANIC).err>:
;         pub fn err(
802004da: 01 11        	addi	sp, sp, -32
;             log(.err, scope, format, args);
802004dc: 06 ec        	sd	ra, 24(sp)
802004de: 22 e8        	sd	s0, 16(sp)
802004e0: 00 10        	addi	s0, sp, 32
802004e2: 0c 65        	ld	a1, 8(a0)
802004e4: 23 34 b4 fe  	sd	a1, -24(s0)
802004e8: 0c 61        	ld	a1, 0(a0)
802004ea: 23 30 b4 fe  	sd	a1, -32(s0)
802004ee: 97 00 00 00  	auipc	ra, 0
802004f2: e7 80 00 01  	jalr	16(ra)
;         ) void {
802004f6: 42 64        	ld	s0, 16(sp)
802004f8: e2 60        	ld	ra, 24(sp)
802004fa: 05 61        	addi	sp, sp, 32
802004fc: 82 80        	ret

00000000802004fe <std.log.log>:
; fn log(
802004fe: 79 71        	addi	sp, sp, -48
;     args: anytype,
80200500: 06 f4        	sd	ra, 40(sp)
80200502: 22 f0        	sd	s0, 32(sp)
80200504: 00 18        	addi	s0, sp, 48
80200506: 23 38 a4 fc  	sd	a0, -48(s0)
8020050a: 0d 45        	addi	a0, zero, 3
;         break :blk level;
8020050c: a3 07 a4 fe  	sb	a0, -17(s0)
80200510: 09 a0        	j	0x80200512 <std.log.log+0x14>
;             root.log(message_level, scope, format, args);
80200512: 03 35 04 fd  	ld	a0, -48(s0)
80200516: 0c 61        	ld	a1, 0(a0)
80200518: 23 3c b4 fc  	sd	a1, -40(s0)
8020051c: 0c 65        	ld	a1, 8(a0)
8020051e: 23 30 b4 fe  	sd	a1, -32(s0)
80200522: 97 00 00 00  	auipc	ra, 0
80200526: e7 80 00 01  	jalr	16(ra)
; ) void {
8020052a: 02 74        	ld	s0, 32(sp)
8020052c: a2 70        	ld	ra, 40(sp)
8020052e: 45 61        	addi	sp, sp, 48
80200530: 82 80        	ret

0000000080200532 <log.0>:
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80200532: 4d 71        	addi	sp, sp, -336
80200534: 86 e6        	sd	ra, 328(sp)
80200536: a2 e2        	sd	s0, 320(sp)
80200538: 80 0a        	addi	s0, sp, 336
8020053a: aa 85        	mv	a1, a0
8020053c: 01 45        	mv	a0, zero
8020053e: 23 38 a4 ea  	sd	a0, -336(s0)
80200542: 23 3c a4 ec  	sd	a0, -296(s0)
80200546: 13 05 04 ef  	addi	a0, s0, -272
8020054a: 23 30 a4 ee  	sd	a0, -288(s0)
8020054e: 13 05 00 02  	addi	a0, zero, 32
80200552: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80200556: 88 61        	ld	a0, 0(a1)
80200558: 23 34 a4 ec  	sd	a0, -312(s0)
8020055c: 88 65        	ld	a0, 8(a1)
8020055e: 23 38 a4 ec  	sd	a0, -304(s0)
80200562: 13 05 84 ed  	addi	a0, s0, -296
80200566: 97 00 00 00  	auipc	ra, 0
8020056a: e7 80 80 03  	jalr	56(ra)
8020056e: 83 35 04 eb  	ld	a1, -336(s0)
80200572: 23 13 a4 ec  	sh	a0, -314(s0)
80200576: 41 66        	lui	a2, 16
80200578: 7d 36        	addiw	a2, a2, -1
8020057a: 71 8d        	and	a0, a0, a2
8020057c: 23 3c a4 ea  	sd	a0, -328(s0)
80200580: 63 0b b5 00  	beq	a0, a1, 0x80200596 <log.0+0x64>
80200584: 09 a0        	j	0x80200586 <log.0+0x54>
80200586: 83 35 84 eb  	ld	a1, -328(s0)
8020058a: 13 05 84 ed  	addi	a0, s0, -296
8020058e: 97 00 00 00  	auipc	ra, 0
80200592: e7 80 00 06  	jalr	96(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80200596: 16 64        	ld	s0, 320(sp)
80200598: b6 60        	ld	ra, 328(sp)
8020059a: 71 61        	addi	sp, sp, 336
8020059c: 82 80        	ret

000000008020059e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8020059e: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
802005a0: 06 f4        	sd	ra, 40(sp)
802005a2: 22 f0        	sd	s0, 32(sp)
802005a4: 00 18        	addi	s0, sp, 48
802005a6: 23 38 a4 fc  	sd	a0, -48(s0)
802005aa: 90 65        	ld	a2, 8(a1)
802005ac: 23 30 c4 fe  	sd	a2, -32(s0)
802005b0: 90 61        	ld	a2, 0(a1)
802005b2: 23 3c c4 fc  	sd	a2, -40(s0)
802005b6: 97 00 00 00  	auipc	ra, 0
802005ba: e7 80 40 27  	jalr	628(ra)
802005be: aa 85        	mv	a1, a0
802005c0: 41 65        	lui	a0, 16
802005c2: 7d 35        	addiw	a0, a0, -1
802005c4: 6d 8d        	and	a0, a0, a1
802005c6: 23 17 b4 fe  	sh	a1, -18(s0)
802005ca: 81 45        	mv	a1, zero
802005cc: 63 0a b5 00  	beq	a0, a1, 0x802005e0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print+0x42>
802005d0: 09 a0        	j	0x802005d2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print+0x34>
802005d2: 03 35 04 fd  	ld	a0, -48(s0)
802005d6: 97 00 00 00  	auipc	ra, 0
802005da: e7 80 c0 2c  	jalr	716(ra)
802005de: 11 a0        	j	0x802005e2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print+0x44>
802005e0: 09 a0        	j	0x802005e2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print+0x44>
802005e2: 03 15 e4 fe  	lh	a0, -18(s0)
802005e6: 02 74        	ld	s0, 32(sp)
802005e8: a2 70        	ld	ra, 40(sp)
802005ea: 45 61        	addi	sp, sp, 48
802005ec: 82 80        	ret

00000000802005ee <__zig_fail_unwrap>:
802005ee: 59 71        	addi	sp, sp, -112
802005f0: 86 f4        	sd	ra, 104(sp)
802005f2: a2 f0        	sd	s0, 96(sp)
802005f4: 80 18        	addi	s0, sp, 112
802005f6: 23 3c a4 f8  	sd	a0, -104(s0)
802005fa: 13 95 05 03  	slli	a0, a1, 48
802005fe: 41 95        	srai	a0, a0, 48
80200600: 12 05        	slli	a0, a0, 4

0000000080200602 <.LBB20_1>:
80200602: 97 d5 01 00  	auipc	a1, 29
80200606: 93 85 e5 d1  	addi	a1, a1, -738
8020060a: 2e 95        	add	a0, a0, a1
8020060c: 0c 61        	ld	a1, 0(a0)
8020060e: 10 65        	ld	a2, 8(a0)
80200610: 23 30 c4 fa  	sd	a2, -96(s0)
80200614: 13 05 00 02  	addi	a0, zero, 32
80200618: 23 08 a4 fc  	sb	a0, -48(s0)
8020061c: 37 e5 74 00  	lui	a0, 1870
80200620: 1b 05 f5 4d  	addiw	a0, a0, 1247
80200624: 3a 05        	slli	a0, a0, 14
80200626: 13 05 95 93  	addi	a0, a0, -1735
8020062a: 32 05        	slli	a0, a0, 12
8020062c: 13 05 95 32  	addi	a0, a0, 809
80200630: 36 05        	slli	a0, a0, 13
80200632: 13 05 05 07  	addi	a0, a0, 112
80200636: 23 34 a4 fc  	sd	a0, -56(s0)
8020063a: 37 25 17 06  	lui	a0, 24946
8020063e: 1b 05 75 77  	addiw	a0, a0, 1911
80200642: 32 05        	slli	a0, a0, 12
80200644: 13 05 55 e7  	addi	a0, a0, -395
80200648: 32 05        	slli	a0, a0, 12
8020064a: 13 05 75 20  	addi	a0, a0, 519
8020064e: 32 05        	slli	a0, a0, 12
80200650: 13 05 45 f7  	addi	a0, a0, -140
80200654: 23 30 a4 fc  	sd	a0, -64(s0)
80200658: 37 45 07 02  	lui	a0, 8308
8020065c: 1b 05 75 70  	addiw	a0, a0, 1799
80200660: 32 05        	slli	a0, a0, 12
80200662: 13 05 55 d6  	addi	a0, a0, -667
80200666: 32 05        	slli	a0, a0, 12
80200668: 13 05 75 74  	addi	a0, a0, 1863
8020066c: 32 05        	slli	a0, a0, 12
8020066e: 13 05 15 46  	addi	a0, a0, 1121
80200672: 23 3c a4 fa  	sd	a0, -72(s0)
80200676: 13 05 14 fd  	addi	a0, s0, -47
8020067a: 97 c0 01 00  	auipc	ra, 28
8020067e: e7 80 40 6b  	jalr	1716(ra)
80200682: 83 35 84 f9  	ld	a1, -104(s0)
80200686: 03 35 04 fa  	ld	a0, -96(s0)
8020068a: 13 06 84 fb  	addi	a2, s0, -72
8020068e: 23 34 c4 fa  	sd	a2, -88(s0)
80200692: 65 05        	addi	a0, a0, 25
80200694: 23 38 a4 fa  	sd	a0, -80(s0)
80200698: 13 05 84 fa  	addi	a0, s0, -88
8020069c: 97 00 00 00  	auipc	ra, 0
802006a0: e7 80 40 a0  	jalr	-1532(ra)

00000000802006a4 <arch.riscv.Writer.write>:
;     fn write(_: void, bytes: []const u8) Error!usize {
802006a4: 01 11        	addi	sp, sp, -32
802006a6: 06 ec        	sd	ra, 24(sp)
802006a8: 22 e8        	sd	s0, 16(sp)
802006aa: 00 10        	addi	s0, sp, 32
802006ac: 23 30 c4 fe  	sd	a2, -32(s0)
;         if (should_lock) uart.write_bytes(bytes, true) else uart.write_bytes(bytes, false);
802006b0: 23 34 a4 fe  	sd	a0, -24(s0)

00000000802006b4 <.LBB21_4>:
802006b4: 17 45 67 00  	auipc	a0, 1652
802006b8: 13 05 c5 94  	addi	a0, a0, -1716
802006bc: 03 45 05 00  	lbu	a0, 0(a0)
802006c0: 81 45        	mv	a1, zero
802006c2: 63 0e b5 00  	beq	a0, a1, 0x802006de <.LBB21_5+0x12>
802006c6: 09 a0        	j	0x802006c8 <.LBB21_4+0x14>
802006c8: 83 35 04 fe  	ld	a1, -32(s0)

00000000802006cc <.LBB21_5>:
802006cc: 17 55 02 00  	auipc	a0, 37
802006d0: 13 05 45 93  	addi	a0, a0, -1740
802006d4: 97 00 00 00  	auipc	ra, 0
802006d8: e7 80 a0 03  	jalr	58(ra)
802006dc: 21 a8        	j	0x802006f4 <.LBB21_6+0x12>
802006de: 83 35 04 fe  	ld	a1, -32(s0)

00000000802006e2 <.LBB21_6>:
802006e2: 17 55 02 00  	auipc	a0, 37
802006e6: 13 05 e5 91  	addi	a0, a0, -1762
802006ea: 97 00 00 00  	auipc	ra, 0
802006ee: e7 80 e0 0b  	jalr	190(ra)
802006f2: 09 a0        	j	0x802006f4 <.LBB21_6+0x12>
;         return bytes.len;
802006f4: 83 35 84 fe  	ld	a1, -24(s0)
802006f8: 03 35 04 fe  	ld	a0, -32(s0)
802006fc: 08 65        	ld	a0, 8(a0)
802006fe: 01 46        	mv	a2, zero
80200700: 23 94 c5 00  	sh	a2, 8(a1)
80200704: 88 e1        	sd	a0, 0(a1)
80200706: 42 64        	ld	s0, 16(sp)
80200708: e2 60        	ld	ra, 24(sp)
8020070a: 05 61        	addi	sp, sp, 32
8020070c: 82 80        	ret

000000008020070e <arch.riscv64.uart.UART(268435456).write_bytes>:
;         pub fn write_bytes(self: *@This(), bytes: []const u8, comptime lock: bool) void {
8020070e: 5d 71        	addi	sp, sp, -80
80200710: 86 e4        	sd	ra, 72(sp)
80200712: a2 e0        	sd	s0, 64(sp)
80200714: 80 08        	addi	s0, sp, 80
80200716: 23 30 b4 fc  	sd	a1, -64(s0)
8020071a: 23 38 a4 fc  	sd	a0, -48(s0)
;             if (lock) self.lock.acquire();
8020071e: 97 00 00 00  	auipc	ra, 0
80200722: e7 80 a0 1c  	jalr	458(ra)
80200726: 83 35 04 fc  	ld	a1, -64(s0)
8020072a: 01 45        	mv	a0, zero
;             for (bytes) |byte| {
8020072c: 23 30 a4 fe  	sd	a0, -32(s0)
80200730: 88 65        	ld	a0, 8(a1)
80200732: 23 34 a4 fc  	sd	a0, -56(s0)
80200736: 09 a0        	j	0x80200738 <arch.riscv64.uart.UART(268435456).write_bytes+0x2a>
80200738: 83 35 84 fc  	ld	a1, -56(s0)
8020073c: 03 35 04 fe  	ld	a0, -32(s0)
80200740: 23 3c a4 fa  	sd	a0, -72(s0)
80200744: 63 78 b5 04  	bgeu	a0, a1, 0x80200794 <arch.riscv64.uart.UART(268435456).write_bytes+0x86>
80200748: 09 a0        	j	0x8020074a <arch.riscv64.uart.UART(268435456).write_bytes+0x3c>
8020074a: 83 35 84 fb  	ld	a1, -72(s0)
8020074e: 03 35 04 fc  	ld	a0, -64(s0)
80200752: 08 61        	ld	a0, 0(a0)
80200754: 2e 95        	add	a0, a0, a1
80200756: 03 05 05 00  	lb	a0, 0(a0)
8020075a: a3 0f a4 fc  	sb	a0, -33(s0)
8020075e: a3 07 a4 fe  	sb	a0, -17(s0)
;             while (ptr[5] & (1 << 5) == 0) {}
80200762: 09 a0        	j	0x80200764 <arch.riscv64.uart.UART(268435456).write_bytes+0x56>
80200764: 37 05 00 10  	lui	a0, 65536
80200768: 15 25        	addiw	a0, a0, 5
;             while (ptr[5] & (1 << 5) == 0) {}
8020076a: 03 45 05 00  	lbu	a0, 0(a0)
8020076e: 13 75 05 02  	andi	a0, a0, 32
80200772: 81 45        	mv	a1, zero
80200774: 63 14 b5 00  	bne	a0, a1, 0x8020077c <arch.riscv64.uart.UART(268435456).write_bytes+0x6e>
80200778: 09 a0        	j	0x8020077a <arch.riscv64.uart.UART(268435456).write_bytes+0x6c>
8020077a: ed b7        	j	0x80200764 <arch.riscv64.uart.UART(268435456).write_bytes+0x56>
;             ptr[0] = byte;
8020077c: 03 35 84 fb  	ld	a0, -72(s0)
80200780: 83 05 f4 fe  	lb	a1, -17(s0)
80200784: 37 06 00 10  	lui	a2, 65536
80200788: 23 00 b6 00  	sb	a1, 0(a2)
;             for (bytes) |byte| {
8020078c: 05 05        	addi	a0, a0, 1
8020078e: 23 30 a4 fe  	sd	a0, -32(s0)
80200792: 5d b7        	j	0x80200738 <arch.riscv64.uart.UART(268435456).write_bytes+0x2a>
;             defer if (lock) self.lock.release();
80200794: 03 35 04 fd  	ld	a0, -48(s0)
80200798: 97 00 00 00  	auipc	ra, 0
8020079c: e7 80 40 24  	jalr	580(ra)
;         pub fn write_bytes(self: *@This(), bytes: []const u8, comptime lock: bool) void {
802007a0: 06 64        	ld	s0, 64(sp)
802007a2: a6 60        	ld	ra, 72(sp)
802007a4: 61 61        	addi	sp, sp, 80
802007a6: 82 80        	ret

00000000802007a8 <arch.riscv64.uart.UART(268435456).write_bytes.12>:
802007a8: 5d 71        	addi	sp, sp, -80
802007aa: 86 e4        	sd	ra, 72(sp)
802007ac: a2 e0        	sd	s0, 64(sp)
802007ae: 80 08        	addi	s0, sp, 80
802007b0: 23 30 b4 fc  	sd	a1, -64(s0)
802007b4: 23 38 a4 fc  	sd	a0, -48(s0)
802007b8: 01 45        	mv	a0, zero
;             for (bytes) |byte| {
802007ba: 23 30 a4 fe  	sd	a0, -32(s0)
802007be: 88 65        	ld	a0, 8(a1)
802007c0: 23 34 a4 fc  	sd	a0, -56(s0)
802007c4: 09 a0        	j	0x802007c6 <arch.riscv64.uart.UART(268435456).write_bytes.12+0x1e>
802007c6: 83 35 84 fc  	ld	a1, -56(s0)
802007ca: 03 35 04 fe  	ld	a0, -32(s0)
802007ce: 23 3c a4 fa  	sd	a0, -72(s0)
802007d2: 63 78 b5 04  	bgeu	a0, a1, 0x80200822 <arch.riscv64.uart.UART(268435456).write_bytes.12+0x7a>
802007d6: 09 a0        	j	0x802007d8 <arch.riscv64.uart.UART(268435456).write_bytes.12+0x30>
802007d8: 83 35 84 fb  	ld	a1, -72(s0)
802007dc: 03 35 04 fc  	ld	a0, -64(s0)
802007e0: 08 61        	ld	a0, 0(a0)
802007e2: 2e 95        	add	a0, a0, a1
802007e4: 03 05 05 00  	lb	a0, 0(a0)
802007e8: a3 0f a4 fc  	sb	a0, -33(s0)
802007ec: a3 07 a4 fe  	sb	a0, -17(s0)
;             while (ptr[5] & (1 << 5) == 0) {}
802007f0: 09 a0        	j	0x802007f2 <arch.riscv64.uart.UART(268435456).write_bytes.12+0x4a>
802007f2: 37 05 00 10  	lui	a0, 65536
802007f6: 15 25        	addiw	a0, a0, 5
;             while (ptr[5] & (1 << 5) == 0) {}
802007f8: 03 45 05 00  	lbu	a0, 0(a0)
802007fc: 13 75 05 02  	andi	a0, a0, 32
80200800: 81 45        	mv	a1, zero
80200802: 63 14 b5 00  	bne	a0, a1, 0x8020080a <arch.riscv64.uart.UART(268435456).write_bytes.12+0x62>
80200806: 09 a0        	j	0x80200808 <arch.riscv64.uart.UART(268435456).write_bytes.12+0x60>
80200808: ed b7        	j	0x802007f2 <arch.riscv64.uart.UART(268435456).write_bytes.12+0x4a>
;             ptr[0] = byte;
8020080a: 03 35 84 fb  	ld	a0, -72(s0)
8020080e: 83 05 f4 fe  	lb	a1, -17(s0)
80200812: 37 06 00 10  	lui	a2, 65536
80200816: 23 00 b6 00  	sb	a1, 0(a2)
;             for (bytes) |byte| {
8020081a: 05 05        	addi	a0, a0, 1
8020081c: 23 30 a4 fe  	sd	a0, -32(s0)
80200820: 5d b7        	j	0x802007c6 <arch.riscv64.uart.UART(268435456).write_bytes.12+0x1e>
;         pub fn write_bytes(self: *@This(), bytes: []const u8, comptime lock: bool) void {
80200822: 06 64        	ld	s0, 64(sp)
80200824: a6 60        	ld	ra, 72(sp)
80200826: 61 61        	addi	sp, sp, 80
80200828: 82 80        	ret

000000008020082a <std.fmt.format>:
; pub fn format(
8020082a: 39 71        	addi	sp, sp, -64
;     args: anytype,
8020082c: 06 fc        	sd	ra, 56(sp)
8020082e: 22 f8        	sd	s0, 48(sp)
80200830: 80 00        	addi	s0, sp, 64
80200832: 23 30 b4 fc  	sd	a1, -64(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
80200836: 23 34 a4 fc  	sd	a0, -56(s0)

000000008020083a <.LBB24_1>:
8020083a: 97 d5 01 00  	auipc	a1, 29
8020083e: 93 85 65 b9  	addi	a1, a1, -1130
80200842: 97 00 00 00  	auipc	ra, 0
80200846: e7 80 00 27  	jalr	624(ra)
8020084a: 83 35 04 fc  	ld	a1, -64(s0)
8020084e: 2a 86        	mv	a2, a0
80200850: 03 35 84 fc  	ld	a0, -56(s0)
80200854: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
80200858: 90 61        	ld	a2, 0(a1)
8020085a: 23 3c c4 fc  	sd	a2, -40(s0)
8020085e: 90 65        	ld	a2, 8(a1)
80200860: 23 30 c4 fe  	sd	a2, -32(s0)

0000000080200864 <.LBB24_2>:
;         try formatType(
80200864: 17 d6 01 00  	auipc	a2, 29
80200868: 13 06 46 be  	addi	a2, a2, -1052
8020086c: 8d 46        	addi	a3, zero, 3
8020086e: 97 00 00 00  	auipc	ra, 0
80200872: e7 80 40 32  	jalr	804(ra)
80200876: aa 85        	mv	a1, a0
80200878: 03 35 84 fc  	ld	a0, -56(s0)
8020087c: 23 1b b4 fc  	sh	a1, -42(s0)

0000000080200880 <.LBB24_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
80200880: 97 d5 01 00  	auipc	a1, 29
80200884: 93 85 05 bf  	addi	a1, a1, -1040
80200888: 97 00 00 00  	auipc	ra, 0
8020088c: e7 80 a0 22  	jalr	554(ra)
80200890: 23 1a a4 fc  	sh	a0, -44(s0)
80200894: 01 45        	mv	a0, zero
; ) !void {
80200896: 23 17 a4 fe  	sh	a0, -18(s0)
8020089a: 42 74        	ld	s0, 48(sp)
8020089c: e2 70        	ld	ra, 56(sp)
8020089e: 21 61        	addi	sp, sp, 64
802008a0: 82 80        	ret

00000000802008a2 <__zig_return_error>:
802008a2: 01 11        	addi	sp, sp, -32
802008a4: 06 ec        	sd	ra, 24(sp)
802008a6: 22 e8        	sd	s0, 16(sp)
802008a8: 00 10        	addi	s0, sp, 32
802008aa: 23 30 a4 fe  	sd	a0, -32(s0)
802008ae: 23 34 14 fe  	sd	ra, -24(s0)
802008b2: 81 45        	mv	a1, zero
802008b4: 63 17 b5 00  	bne	a0, a1, 0x802008c2 <__zig_return_error+0x20>
802008b8: 09 a0        	j	0x802008ba <__zig_return_error+0x18>
802008ba: 42 64        	ld	s0, 16(sp)
802008bc: e2 60        	ld	ra, 24(sp)
802008be: 05 61        	addi	sp, sp, 32
802008c0: 82 80        	ret
802008c2: 83 35 04 fe  	ld	a1, -32(s0)
802008c6: 03 36 84 fe  	ld	a2, -24(s0)
802008ca: 94 69        	ld	a3, 16(a1)
802008cc: 88 61        	ld	a0, 0(a1)
802008ce: fd 16        	addi	a3, a3, -1
802008d0: 33 77 d5 00  	and	a4, a0, a3
802008d4: 94 65        	ld	a3, 8(a1)
802008d6: 0e 07        	slli	a4, a4, 3
802008d8: ba 96        	add	a3, a3, a4
802008da: 90 e2        	sd	a2, 0(a3)
802008dc: 05 05        	addi	a0, a0, 1
802008de: 88 e1        	sd	a0, 0(a1)
802008e0: 42 64        	ld	s0, 16(sp)
802008e2: e2 60        	ld	ra, 24(sp)
802008e4: 05 61        	addi	sp, sp, 32
802008e6: 82 80        	ret

00000000802008e8 <arch.riscv64.spinlock.acquire>:
; pub fn acquire(self: *@This()) void {
802008e8: 59 71        	addi	sp, sp, -112
802008ea: 86 f4        	sd	ra, 104(sp)
802008ec: a2 f0        	sd	s0, 96(sp)
802008ee: 80 18        	addi	s0, sp, 112
802008f0: 23 3c a4 fa  	sd	a0, -72(s0)
802008f4: 23 30 a4 fc  	sd	a0, -64(s0)
;     if (self._lock == 1) {
802008f8: 08 61        	ld	a0, 0(a0)
802008fa: 85 45        	addi	a1, zero, 1
802008fc: 63 10 b5 06  	bne	a0, a1, 0x8020095c <.LBB26_15+0x12>
80200900: 09 a0        	j	0x80200902 <arch.riscv64.spinlock.acquire+0x1a>
;         if (self.hart) |hart| {
80200902: 03 35 04 fc  	ld	a0, -64(s0)
80200906: 93 05 85 00  	addi	a1, a0, 8
8020090a: 23 38 b4 fa  	sd	a1, -80(s0)
8020090e: 03 45 05 01  	lbu	a0, 16(a0)
80200912: 81 45        	mv	a1, zero
80200914: 63 0b b5 02  	beq	a0, a1, 0x8020094a <.LBB26_15>
80200918: 09 a0        	j	0x8020091a <arch.riscv64.spinlock.acquire+0x32>
8020091a: 03 35 04 fb  	ld	a0, -80(s0)
8020091e: 08 61        	ld	a0, 0(a0)
80200920: 23 34 a4 fa  	sd	a0, -88(s0)
80200924: 23 34 a4 fc  	sd	a0, -56(s0)
;             if (hart == arch.sync.hart_id()) return true;
80200928: 97 10 00 00  	auipc	ra, 1
8020092c: e7 80 40 e6  	jalr	-412(ra)
80200930: aa 85        	mv	a1, a0
80200932: 03 35 84 fa  	ld	a0, -88(s0)
80200936: 63 19 b5 00  	bne	a0, a1, 0x80200948 <arch.riscv64.spinlock.acquire+0x60>
8020093a: 09 a0        	j	0x8020093c <arch.riscv64.spinlock.acquire+0x54>
8020093c: 05 45        	addi	a0, zero, 1
;             if (hart == arch.sync.hart_id()) return true;
8020093e: a3 0b a4 fc  	sb	a0, -41(s0)
80200942: 23 30 a4 fa  	sd	a0, -96(s0)
80200946: 15 a0        	j	0x8020096a <.LBB26_15+0x20>
;     if (self._lock == 1) {
80200948: 19 a8        	j	0x8020095e <.LBB26_15+0x14>

000000008020094a <.LBB26_15>:
;         } else @panic("lock has no hart id");
8020094a: 17 d5 01 00  	auipc	a0, 29
8020094e: 13 05 e5 bb  	addi	a0, a0, -1090
80200952: 81 45        	mv	a1, zero
80200954: 97 f0 ff ff  	auipc	ra, 1048575
80200958: e7 80 c0 74  	jalr	1868(ra)
;     if (self._lock == 1) {
8020095c: 09 a0        	j	0x8020095e <.LBB26_15+0x14>
8020095e: 01 45        	mv	a0, zero
;     return false;
80200960: a3 0b a4 fc  	sb	a0, -41(s0)
80200964: 23 30 a4 fa  	sd	a0, -96(s0)
80200968: 09 a0        	j	0x8020096a <.LBB26_15+0x20>
8020096a: 03 35 04 fa  	ld	a0, -96(s0)
8020096e: 81 45        	mv	a1, zero
;     if (self.is_locked()) {
80200970: 63 0c b5 00  	beq	a0, a1, 0x80200988 <.LBB26_16+0x12>
80200974: 09 a0        	j	0x80200976 <.LBB26_16>

0000000080200976 <.LBB26_16>:
;         @panic("lock already held");
80200976: 17 d5 01 00  	auipc	a0, 29
8020097a: 13 05 25 b6  	addi	a0, a0, -1182
8020097e: 81 45        	mv	a1, zero
80200980: 97 f0 ff ff  	auipc	ra, 1048575
80200984: e7 80 00 72  	jalr	1824(ra)
;         arch.disable_interrupts(); // disable interrupts to avoid deadlock
80200988: 97 00 00 00  	auipc	ra, 0
8020098c: e7 80 c0 b3  	jalr	-1220(ra)
;         while (arch.sync.lock_test_and_set(&self._lock, 1) == 0) {}
80200990: 09 a0        	j	0x80200992 <.LBB26_16+0x1c>
80200992: 03 35 84 fb  	ld	a0, -72(s0)
80200996: 23 30 a4 fe  	sd	a0, -32(s0)
8020099a: 85 45        	addi	a1, zero, 1
8020099c: 23 3c b4 fc  	sd	a1, -40(s0)
;     return @atomicRmw(usize, a, .Xchg, b, .Acquire);
802009a0: 2f 35 b5 0c  	amoswap.d.aq	a0, a1, (a0)
802009a4: 23 34 a4 fe  	sd	a0, -24(s0)
802009a8: 81 45        	mv	a1, zero
;         while (arch.sync.lock_test_and_set(&self._lock, 1) == 0) {}
802009aa: 63 14 b5 00  	bne	a0, a1, 0x802009b2 <.LBB26_16+0x3c>
802009ae: 09 a0        	j	0x802009b0 <.LBB26_16+0x3a>
802009b0: cd b7        	j	0x80200992 <.LBB26_16+0x1c>
;     asm volatile ("fence");
802009b2: 0f 00 f0 0f  	fence
;         self.hart = arch.sync.hart_id(); // Set hart ID
802009b6: 03 35 84 fb  	ld	a0, -72(s0)
802009ba: 23 3c a4 f8  	sd	a0, -104(s0)
802009be: 97 10 00 00  	auipc	ra, 1
802009c2: e7 80 e0 dc  	jalr	-562(ra)
802009c6: 83 35 84 f9  	ld	a1, -104(s0)
802009ca: 05 46        	addi	a2, zero, 1
802009cc: 23 88 c5 00  	sb	a2, 16(a1)
802009d0: 88 e5        	sd	a0, 8(a1)
;     if (self.is_locked()) {
802009d2: 09 a0        	j	0x802009d4 <.LBB26_16+0x5e>
; pub fn acquire(self: *@This()) void {
802009d4: 06 74        	ld	s0, 96(sp)
802009d6: a6 70        	ld	ra, 104(sp)
802009d8: 65 61        	addi	sp, sp, 112
802009da: 82 80        	ret

00000000802009dc <arch.riscv64.spinlock.release>:
; pub fn release(self: *@This()) void {
802009dc: 5d 71        	addi	sp, sp, -80
802009de: 86 e4        	sd	ra, 72(sp)
802009e0: a2 e0        	sd	s0, 64(sp)
802009e2: 80 08        	addi	s0, sp, 80
802009e4: 23 34 a4 fc  	sd	a0, -56(s0)
802009e8: 23 38 a4 fc  	sd	a0, -48(s0)
;     if (self._lock == 1) {
802009ec: 08 61        	ld	a0, 0(a0)
802009ee: 85 45        	addi	a1, zero, 1
802009f0: 63 10 b5 06  	bne	a0, a1, 0x80200a50 <.LBB27_12+0x12>
802009f4: 09 a0        	j	0x802009f6 <arch.riscv64.spinlock.release+0x1a>
;         if (self.hart) |hart| {
802009f6: 03 35 04 fd  	ld	a0, -48(s0)
802009fa: 93 05 85 00  	addi	a1, a0, 8
802009fe: 23 30 b4 fc  	sd	a1, -64(s0)
80200a02: 03 45 05 01  	lbu	a0, 16(a0)
80200a06: 81 45        	mv	a1, zero
80200a08: 63 0b b5 02  	beq	a0, a1, 0x80200a3e <.LBB27_12>
80200a0c: 09 a0        	j	0x80200a0e <arch.riscv64.spinlock.release+0x32>
80200a0e: 03 35 04 fc  	ld	a0, -64(s0)
80200a12: 08 61        	ld	a0, 0(a0)
80200a14: 23 3c a4 fa  	sd	a0, -72(s0)
80200a18: 23 3c a4 fc  	sd	a0, -40(s0)
;             if (hart == arch.sync.hart_id()) return true;
80200a1c: 97 10 00 00  	auipc	ra, 1
80200a20: e7 80 00 d7  	jalr	-656(ra)
80200a24: aa 85        	mv	a1, a0
80200a26: 03 35 84 fb  	ld	a0, -72(s0)
80200a2a: 63 19 b5 00  	bne	a0, a1, 0x80200a3c <arch.riscv64.spinlock.release+0x60>
80200a2e: 09 a0        	j	0x80200a30 <arch.riscv64.spinlock.release+0x54>
80200a30: 05 45        	addi	a0, zero, 1
;             if (hart == arch.sync.hart_id()) return true;
80200a32: a3 03 a4 fe  	sb	a0, -25(s0)
80200a36: 23 38 a4 fa  	sd	a0, -80(s0)
80200a3a: 15 a0        	j	0x80200a5e <.LBB27_12+0x20>
;     if (self._lock == 1) {
80200a3c: 19 a8        	j	0x80200a52 <.LBB27_12+0x14>

0000000080200a3e <.LBB27_12>:
;         } else @panic("lock has no hart id");
80200a3e: 17 d5 01 00  	auipc	a0, 29
80200a42: 13 05 a5 ac  	addi	a0, a0, -1334
80200a46: 81 45        	mv	a1, zero
80200a48: 97 f0 ff ff  	auipc	ra, 1048575
80200a4c: e7 80 80 65  	jalr	1624(ra)
;     if (self._lock == 1) {
80200a50: 09 a0        	j	0x80200a52 <.LBB27_12+0x14>
80200a52: 01 45        	mv	a0, zero
;     return false;
80200a54: a3 03 a4 fe  	sb	a0, -25(s0)
80200a58: 23 38 a4 fa  	sd	a0, -80(s0)
80200a5c: 09 a0        	j	0x80200a5e <.LBB27_12+0x20>
80200a5e: 03 35 04 fb  	ld	a0, -80(s0)
80200a62: 81 45        	mv	a1, zero
;     if (self.is_locked()) {
80200a64: 63 1c b5 00  	bne	a0, a1, 0x80200a7c <.LBB27_13+0x12>
80200a68: 09 a0        	j	0x80200a6a <.LBB27_13>

0000000080200a6a <.LBB27_13>:
;         @panic("not holding lock");
80200a6a: 17 d5 01 00  	auipc	a0, 29
80200a6e: 13 05 e5 a7  	addi	a0, a0, -1410
80200a72: 81 45        	mv	a1, zero
80200a74: 97 f0 ff ff  	auipc	ra, 1048575
80200a78: e7 80 c0 62  	jalr	1580(ra)
;         self.hart = null;
80200a7c: 83 35 84 fc  	ld	a1, -56(s0)

0000000080200a80 <.LBB27_14>:
80200a80: 17 45 02 00  	auipc	a0, 36
80200a84: 13 05 05 2e  	addi	a0, a0, 736
;         self.hart = null;
80200a88: 10 65        	ld	a2, 8(a0)
80200a8a: 90 e9        	sd	a2, 16(a1)
80200a8c: 08 61        	ld	a0, 0(a0)
80200a8e: 88 e5        	sd	a0, 8(a1)
;     asm volatile ("fence");
80200a90: 0f 00 f0 0f  	fence
;         arch.sync.lock_release(&self._lock);
80200a94: 03 35 84 fc  	ld	a0, -56(s0)
80200a98: 23 34 a4 fe  	sd	a0, -24(s0)
;     asm volatile ("amoswap.w zero, zero, (%[arg])"
80200a9c: 2f 20 05 08  	amoswap.w	zero, zero, (a0)
;         arch.enable_interrupts();
80200aa0: 97 10 00 00  	auipc	ra, 1
80200aa4: e7 80 20 d0  	jalr	-766(ra)
;     if (self.is_locked()) {
80200aa8: 09 a0        	j	0x80200aaa <.LBB27_14+0x2a>
; pub fn release(self: *@This()) void {
80200aaa: 06 64        	ld	s0, 64(sp)
80200aac: a6 60        	ld	ra, 72(sp)
80200aae: 61 61        	addi	sp, sp, 80
80200ab0: 82 80        	ret

0000000080200ab2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).writeAll>:
;         pub fn writeAll(self: Self, bytes: []const u8) Error!void {
80200ab2: 59 71        	addi	sp, sp, -112
80200ab4: 86 f4        	sd	ra, 104(sp)
80200ab6: a2 f0        	sd	s0, 96(sp)
80200ab8: 80 18        	addi	s0, sp, 112
80200aba: 23 38 b4 fa  	sd	a1, -80(s0)
80200abe: 23 3c a4 fa  	sd	a0, -72(s0)
80200ac2: 01 45        	mv	a0, zero
;             var index: usize = 0;
80200ac4: 23 30 a4 fe  	sd	a0, -32(s0)
;             while (index != bytes.len) {
80200ac8: 09 a0        	j	0x80200aca <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).writeAll+0x18>
80200aca: 83 35 04 fb  	ld	a1, -80(s0)
80200ace: 03 35 04 fe  	ld	a0, -32(s0)
80200ad2: 8c 65        	ld	a1, 8(a1)
80200ad4: 63 02 b5 02  	beq	a0, a1, 0x80200af8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).writeAll+0x46>
80200ad8: 09 a0        	j	0x80200ada <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).writeAll+0x28>
;                 index += try self.write(bytes[index..]);
80200ada: 03 35 04 fb  	ld	a0, -80(s0)
80200ade: 83 35 04 fe  	ld	a1, -32(s0)
80200ae2: 23 3c b4 f8  	sd	a1, -104(s0)
80200ae6: 2e 86        	mv	a2, a1
80200ae8: 23 30 c4 fa  	sd	a2, -96(s0)
80200aec: 08 65        	ld	a0, 8(a0)
80200aee: 23 34 a4 fa  	sd	a0, -88(s0)
80200af2: 63 73 b5 02  	bgeu	a0, a1, 0x80200b18 <.LBB28_10+0x12>
80200af6: 01 a8        	j	0x80200b06 <.LBB28_10>
80200af8: 01 45        	mv	a0, zero
;         pub fn writeAll(self: Self, bytes: []const u8) Error!void {
80200afa: 23 17 a4 fe  	sh	a0, -18(s0)
80200afe: 06 74        	ld	s0, 96(sp)
80200b00: a6 70        	ld	ra, 104(sp)
80200b02: 65 61        	addi	sp, sp, 112
80200b04: 82 80        	ret

0000000080200b06 <.LBB28_10>:
;                 index += try self.write(bytes[index..]);
80200b06: 17 c5 01 00  	auipc	a0, 28
80200b0a: 13 05 a5 7f  	addi	a0, a0, 2042
80200b0e: 81 45        	mv	a1, zero
80200b10: 97 f0 ff ff  	auipc	ra, 1048575
80200b14: e7 80 00 59  	jalr	1424(ra)
80200b18: 81 45        	mv	a1, zero
80200b1a: 05 45        	addi	a0, zero, 1
;                 index += try self.write(bytes[index..]);
80200b1c: 63 1c b5 00  	bne	a0, a1, 0x80200b34 <.LBB28_11+0x12>
80200b20: 09 a0        	j	0x80200b22 <.LBB28_11>

0000000080200b22 <.LBB28_11>:
80200b22: 17 c5 01 00  	auipc	a0, 28
80200b26: 13 05 e5 7d  	addi	a0, a0, 2014
80200b2a: 81 45        	mv	a1, zero
80200b2c: 97 f0 ff ff  	auipc	ra, 1048575
80200b30: e7 80 40 57  	jalr	1396(ra)
80200b34: 83 35 84 fb  	ld	a1, -72(s0)
80200b38: 03 35 84 fa  	ld	a0, -88(s0)
80200b3c: 83 36 84 f9  	ld	a3, -104(s0)
80200b40: 03 36 04 fb  	ld	a2, -80(s0)
80200b44: 10 62        	ld	a2, 0(a2)
80200b46: 36 96        	add	a2, a2, a3
80200b48: 15 8d        	sub	a0, a0, a3
80200b4a: 23 38 c4 fc  	sd	a2, -48(s0)
80200b4e: 23 3c a4 fc  	sd	a0, -40(s0)
80200b52: 13 05 04 fc  	addi	a0, s0, -64
80200b56: 13 06 04 fd  	addi	a2, s0, -48
80200b5a: 97 00 00 00  	auipc	ra, 0
80200b5e: e7 80 20 0e  	jalr	226(ra)
80200b62: 83 35 04 fa  	ld	a1, -96(s0)
80200b66: 03 35 04 fc  	ld	a0, -64(s0)
80200b6a: 2e 95        	add	a0, a0, a1
80200b6c: 23 38 a4 f8  	sd	a0, -112(s0)
80200b70: 63 7c b5 00  	bgeu	a0, a1, 0x80200b88 <.LBB28_12+0x12>
80200b74: 09 a0        	j	0x80200b76 <.LBB28_12>

0000000080200b76 <.LBB28_12>:
80200b76: 17 d5 01 00  	auipc	a0, 29
80200b7a: 13 05 a5 90  	addi	a0, a0, -1782
80200b7e: 81 45        	mv	a1, zero
80200b80: 97 f0 ff ff  	auipc	ra, 1048575
80200b84: e7 80 00 52  	jalr	1312(ra)
80200b88: 03 35 04 f9  	ld	a0, -112(s0)
80200b8c: 23 30 a4 fe  	sd	a0, -32(s0)
;             while (index != bytes.len) {
80200b90: 2d bf        	j	0x80200aca <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).writeAll+0x18>

0000000080200b92 <std.fmt.formatType>:
; pub fn formatType(
80200b92: 39 71        	addi	sp, sp, -64
;     options: FormatOptions,
80200b94: 06 fc        	sd	ra, 56(sp)
80200b96: 22 f8        	sd	s0, 48(sp)
80200b98: 80 00        	addi	s0, sp, 64
80200b9a: 23 34 c4 fc  	sd	a2, -56(s0)
;     value: anytype,
80200b9e: 23 38 b4 fc  	sd	a1, -48(s0)
80200ba2: 23 3c a4 fc  	sd	a0, -40(s0)
80200ba6: 23 30 d4 fe  	sd	a3, -32(s0)
80200baa: 01 45        	mv	a0, zero
;                 if (max_depth == 0) {
80200bac: 63 95 a6 04  	bne	a3, a0, 0x80200bf6 <.LBB29_10+0x40>
80200bb0: 09 a0        	j	0x80200bb2 <std.fmt.formatType+0x20>
;                     return writer.writeAll("{ ... }");
80200bb2: 03 35 84 fd  	ld	a0, -40(s0)

0000000080200bb6 <.LBB29_10>:
80200bb6: 97 d5 01 00  	auipc	a1, 29
80200bba: 93 85 25 91  	addi	a1, a1, -1774
80200bbe: 97 00 00 00  	auipc	ra, 0
80200bc2: e7 80 40 ef  	jalr	-268(ra)
80200bc6: aa 85        	mv	a1, a0
80200bc8: 41 65        	lui	a0, 16
80200bca: 7d 35        	addiw	a0, a0, -1
80200bcc: 6d 8d        	and	a0, a0, a1
80200bce: 23 17 b4 fe  	sh	a1, -18(s0)
80200bd2: 81 45        	mv	a1, zero
80200bd4: 63 0a b5 00  	beq	a0, a1, 0x80200be8 <.LBB29_10+0x32>
80200bd8: 09 a0        	j	0x80200bda <.LBB29_10+0x24>
80200bda: 03 35 84 fd  	ld	a0, -40(s0)
80200bde: 97 00 00 00  	auipc	ra, 0
80200be2: e7 80 40 cc  	jalr	-828(ra)
80200be6: 11 a0        	j	0x80200bea <.LBB29_10+0x34>
80200be8: 09 a0        	j	0x80200bea <.LBB29_10+0x34>
80200bea: 03 15 e4 fe  	lh	a0, -18(s0)
80200bee: 42 74        	ld	s0, 48(sp)
80200bf0: e2 70        	ld	ra, 56(sp)
80200bf2: 21 61        	addi	sp, sp, 64
80200bf4: 82 80        	ret
;                 if (max_depth == 0) {
80200bf6: 09 a0        	j	0x80200bf8 <.LBB29_10+0x42>
;                             return formatBuf(value, options, writer);
80200bf8: 03 36 84 fc  	ld	a2, -56(s0)
80200bfc: 83 35 04 fd  	ld	a1, -48(s0)
80200c00: 03 35 84 fd  	ld	a0, -40(s0)
80200c04: 97 10 00 00  	auipc	ra, 1
80200c08: e7 80 00 86  	jalr	-1952(ra)
80200c0c: aa 85        	mv	a1, a0
80200c0e: 41 65        	lui	a0, 16
80200c10: 7d 35        	addiw	a0, a0, -1
80200c12: 6d 8d        	and	a0, a0, a1
80200c14: 23 17 b4 fe  	sh	a1, -18(s0)
80200c18: 81 45        	mv	a1, zero
80200c1a: 63 0a b5 00  	beq	a0, a1, 0x80200c2e <.LBB29_10+0x78>
80200c1e: 09 a0        	j	0x80200c20 <.LBB29_10+0x6a>
80200c20: 03 35 84 fd  	ld	a0, -40(s0)
80200c24: 97 00 00 00  	auipc	ra, 0
80200c28: e7 80 e0 c7  	jalr	-898(ra)
80200c2c: 11 a0        	j	0x80200c30 <.LBB29_10+0x7a>
80200c2e: 09 a0        	j	0x80200c30 <.LBB29_10+0x7a>
80200c30: 03 15 e4 fe  	lh	a0, -18(s0)
80200c34: 42 74        	ld	s0, 48(sp)
80200c36: e2 70        	ld	ra, 56(sp)
80200c38: 21 61        	addi	sp, sp, 64
80200c3a: 82 80        	ret

0000000080200c3c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).write>:
;         pub fn write(self: Self, bytes: []const u8) Error!usize {
80200c3c: 01 11        	addi	sp, sp, -32
80200c3e: 06 ec        	sd	ra, 24(sp)
80200c40: 22 e8        	sd	s0, 16(sp)
80200c42: 00 10        	addi	s0, sp, 32
80200c44: 23 30 b4 fe  	sd	a1, -32(s0)
;             return writeFn(self.context, bytes);
80200c48: 23 34 a4 fe  	sd	a0, -24(s0)
80200c4c: 97 00 00 00  	auipc	ra, 0
80200c50: e7 80 80 a5  	jalr	-1448(ra)
80200c54: 03 35 84 fe  	ld	a0, -24(s0)
80200c58: 03 55 85 00  	lhu	a0, 8(a0)
80200c5c: 81 45        	mv	a1, zero
80200c5e: 63 0a b5 00  	beq	a0, a1, 0x80200c72 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).write+0x36>
80200c62: 09 a0        	j	0x80200c64 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).write+0x28>
80200c64: 03 35 04 fe  	ld	a0, -32(s0)
80200c68: 97 00 00 00  	auipc	ra, 0
80200c6c: e7 80 a0 c3  	jalr	-966(ra)
80200c70: 11 a0        	j	0x80200c74 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).write+0x38>
80200c72: 09 a0        	j	0x80200c74 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).write+0x38>
80200c74: 42 64        	ld	s0, 16(sp)
80200c76: e2 60        	ld	ra, 24(sp)
80200c78: 05 61        	addi	sp, sp, 32
80200c7a: 82 80        	ret

0000000080200c7c <std.fmt.Parser.specifier>:
;     fn specifier(self: *@This()) !Specifier {
80200c7c: 1d 71        	addi	sp, sp, -96
80200c7e: 86 ec        	sd	ra, 88(sp)
80200c80: a2 e8        	sd	s0, 80(sp)
80200c82: 80 10        	addi	s0, sp, 96
80200c84: 23 38 c4 fa  	sd	a2, -80(s0)
80200c88: 23 34 b4 fa  	sd	a1, -88(s0)
80200c8c: aa 85        	mv	a1, a0
80200c8e: 03 35 04 fb  	ld	a0, -80(s0)
80200c92: 23 3c b4 fa  	sd	a1, -72(s0)
80200c96: 23 30 a4 fc  	sd	a0, -64(s0)
80200c9a: 93 05 b0 05  	addi	a1, zero, 91
;         if (self.maybe('[')) {
80200c9e: 97 00 00 00  	auipc	ra, 0
80200ca2: e7 80 40 0e  	jalr	228(ra)
80200ca6: 05 89        	andi	a0, a0, 1
80200ca8: 81 45        	mv	a1, zero
80200caa: 63 0e b5 06  	beq	a0, a1, 0x80200d26 <std.fmt.Parser.specifier+0xaa>
80200cae: 09 a0        	j	0x80200cb0 <std.fmt.Parser.specifier+0x34>
;             const arg_name = self.until(']');
80200cb0: 83 35 04 fc  	ld	a1, -64(s0)
80200cb4: 13 05 04 fe  	addi	a0, s0, -32
80200cb8: 13 06 d0 05  	addi	a2, zero, 93
80200cbc: 23 30 c4 fa  	sd	a2, -96(s0)
80200cc0: 97 00 00 00  	auipc	ra, 0
80200cc4: e7 80 80 19  	jalr	408(ra)
80200cc8: 83 35 04 fa  	ld	a1, -96(s0)
;             if (!self.maybe(']'))
80200ccc: 03 35 04 fc  	ld	a0, -64(s0)
80200cd0: 97 00 00 00  	auipc	ra, 0
80200cd4: e7 80 20 0b  	jalr	178(ra)
80200cd8: 05 89        	andi	a0, a0, 1
80200cda: 81 45        	mv	a1, zero
80200cdc: 63 12 b5 02  	bne	a0, a1, 0x80200d00 <std.fmt.Parser.specifier+0x84>
80200ce0: 09 a0        	j	0x80200ce2 <std.fmt.Parser.specifier+0x66>
80200ce2: 03 35 84 fa  	ld	a0, -88(s0)
80200ce6: 03 36 84 fb  	ld	a2, -72(s0)
80200cea: 85 45        	addi	a1, zero, 1
;                 return @field(anyerror, "Expected closing ]");
80200cec: 23 1c b6 00  	sh	a1, 24(a2)
80200cf0: 97 00 00 00  	auipc	ra, 0
80200cf4: e7 80 20 bb  	jalr	-1102(ra)
80200cf8: 46 64        	ld	s0, 80(sp)
80200cfa: e6 60        	ld	ra, 88(sp)
80200cfc: 25 61        	addi	sp, sp, 96
80200cfe: 82 80        	ret
;             if (!self.maybe(']'))
80200d00: 09 a0        	j	0x80200d02 <std.fmt.Parser.specifier+0x86>
80200d02: 83 35 84 fb  	ld	a1, -72(s0)
80200d06: 01 45        	mv	a0, zero
;             return Specifier{ .named = arg_name };
80200d08: 23 9c a5 00  	sh	a0, 24(a1)
80200d0c: 09 45        	addi	a0, zero, 2
80200d0e: 23 88 a5 00  	sb	a0, 16(a1)
80200d12: 03 35 04 fe  	ld	a0, -32(s0)
80200d16: 88 e1        	sd	a0, 0(a1)
80200d18: 03 35 84 fe  	ld	a0, -24(s0)
80200d1c: 88 e5        	sd	a0, 8(a1)
80200d1e: 46 64        	ld	s0, 80(sp)
80200d20: e6 60        	ld	ra, 88(sp)
80200d22: 25 61        	addi	sp, sp, 96
80200d24: 82 80        	ret
;         if (self.maybe('[')) {
80200d26: 09 a0        	j	0x80200d28 <std.fmt.Parser.specifier+0xac>
;         if (self.number()) |i|
80200d28: 83 35 04 fc  	ld	a1, -64(s0)
80200d2c: 13 05 04 fd  	addi	a0, s0, -48
80200d30: 97 00 00 00  	auipc	ra, 0
80200d34: e7 80 40 26  	jalr	612(ra)
80200d38: 03 45 84 fd  	lbu	a0, -40(s0)
80200d3c: 81 45        	mv	a1, zero
80200d3e: 63 06 b5 02  	beq	a0, a1, 0x80200d6a <std.fmt.Parser.specifier+0xee>
80200d42: 09 a0        	j	0x80200d44 <std.fmt.Parser.specifier+0xc8>
80200d44: 83 35 84 fb  	ld	a1, -72(s0)
80200d48: 03 35 04 fd  	ld	a0, -48(s0)
80200d4c: 23 34 a4 fc  	sd	a0, -56(s0)
80200d50: 01 45        	mv	a0, zero
;             return Specifier{ .number = i };
80200d52: 23 9c a5 00  	sh	a0, 24(a1)
80200d56: 05 45        	addi	a0, zero, 1
80200d58: 23 88 a5 00  	sb	a0, 16(a1)
80200d5c: 03 35 84 fc  	ld	a0, -56(s0)
80200d60: 88 e1        	sd	a0, 0(a1)
80200d62: 46 64        	ld	s0, 80(sp)
80200d64: e6 60        	ld	ra, 88(sp)
80200d66: 25 61        	addi	sp, sp, 96
80200d68: 82 80        	ret
;         if (self.number()) |i|
80200d6a: 09 a0        	j	0x80200d6c <std.fmt.Parser.specifier+0xf0>
80200d6c: 83 35 84 fb  	ld	a1, -72(s0)
80200d70: 01 45        	mv	a0, zero
;         return Specifier{ .none = {} };
80200d72: 23 9c a5 00  	sh	a0, 24(a1)
80200d76: 23 88 a5 00  	sb	a0, 16(a1)
80200d7a: 46 64        	ld	s0, 80(sp)
80200d7c: e6 60        	ld	ra, 88(sp)
80200d7e: 25 61        	addi	sp, sp, 96
80200d80: 82 80        	ret

0000000080200d82 <std.fmt.Parser.maybe>:
;     fn maybe(self: *@This(), val: u8) bool {
80200d82: 1d 71        	addi	sp, sp, -96
80200d84: 86 ec        	sd	ra, 88(sp)
80200d86: a2 e8        	sd	s0, 80(sp)
80200d88: 80 10        	addi	s0, sp, 96
80200d8a: 23 34 b4 fc  	sd	a1, -56(s0)
80200d8e: aa 85        	mv	a1, a0
80200d90: 03 35 84 fc  	ld	a0, -56(s0)
80200d94: 23 30 b4 fe  	sd	a1, -32(s0)
80200d98: a3 0f a4 fc  	sb	a0, -33(s0)
;         if (self.pos < self.buf.len and self.buf[self.pos] == val) {
80200d9c: 88 69        	ld	a0, 16(a1)
80200d9e: 8c 65        	ld	a1, 8(a1)
80200da0: 33 36 b5 00  	sltu	a2, a0, a1
80200da4: 23 38 c4 fc  	sd	a2, -48(s0)
80200da8: 63 7e b5 00  	bgeu	a0, a1, 0x80200dc4 <std.fmt.Parser.maybe+0x42>
80200dac: 09 a0        	j	0x80200dae <std.fmt.Parser.maybe+0x2c>
80200dae: 83 35 04 fe  	ld	a1, -32(s0)
80200db2: 23 3c b4 fa  	sd	a1, -72(s0)
80200db6: 88 69        	ld	a0, 16(a1)
80200db8: 23 30 a4 fc  	sd	a0, -64(s0)
80200dbc: 8c 65        	ld	a1, 8(a1)
80200dbe: 63 68 b5 04  	bltu	a0, a1, 0x80200e0e <.LBB32_10+0x12>
80200dc2: 2d a8        	j	0x80200dfc <.LBB32_10>
80200dc4: 03 35 04 fd  	ld	a0, -48(s0)
80200dc8: 81 45        	mv	a1, zero
80200dca: 63 01 b5 02  	beq	a0, a1, 0x80200dec <std.fmt.Parser.maybe+0x6a>
80200dce: 09 a0        	j	0x80200dd0 <std.fmt.Parser.maybe+0x4e>
;             self.pos += 1;
80200dd0: 03 35 04 fe  	ld	a0, -32(s0)
80200dd4: 93 05 05 01  	addi	a1, a0, 16
80200dd8: 23 34 b4 fa  	sd	a1, -88(s0)
80200ddc: 0c 69        	ld	a1, 16(a0)
80200dde: 13 85 15 00  	addi	a0, a1, 1
80200de2: 23 38 a4 fa  	sd	a0, -80(s0)
80200de6: 63 64 b5 04  	bltu	a0, a1, 0x80200e2e <.LBB32_11>
80200dea: 99 a8        	j	0x80200e40 <.LBB32_11+0x12>
;         if (self.pos < self.buf.len and self.buf[self.pos] == val) {
80200dec: 09 a0        	j	0x80200dee <std.fmt.Parser.maybe+0x6c>
80200dee: 01 45        	mv	a0, zero
;         return false;
80200df0: a3 07 a4 fe  	sb	a0, -17(s0)
80200df4: 46 64        	ld	s0, 80(sp)
80200df6: e6 60        	ld	ra, 88(sp)
80200df8: 25 61        	addi	sp, sp, 96
80200dfa: 82 80        	ret

0000000080200dfc <.LBB32_10>:
;         if (self.pos < self.buf.len and self.buf[self.pos] == val) {
80200dfc: 17 c5 01 00  	auipc	a0, 28
80200e00: 13 05 45 50  	addi	a0, a0, 1284
80200e04: 81 45        	mv	a1, zero
80200e06: 97 f0 ff ff  	auipc	ra, 1048575
80200e0a: e7 80 a0 29  	jalr	666(ra)
80200e0e: 83 35 04 fc  	ld	a1, -64(s0)
80200e12: 03 35 84 fb  	ld	a0, -72(s0)
80200e16: 08 61        	ld	a0, 0(a0)
80200e18: 2e 95        	add	a0, a0, a1
80200e1a: 03 45 05 00  	lbu	a0, 0(a0)
80200e1e: 83 45 f4 fd  	lbu	a1, -33(s0)
80200e22: 2d 8d        	xor	a0, a0, a1
80200e24: 13 35 15 00  	seqz	a0, a0
80200e28: 23 38 a4 fc  	sd	a0, -48(s0)
80200e2c: 61 bf        	j	0x80200dc4 <std.fmt.Parser.maybe+0x42>

0000000080200e2e <.LBB32_11>:
;             self.pos += 1;
80200e2e: 17 c5 01 00  	auipc	a0, 28
80200e32: 13 05 25 65  	addi	a0, a0, 1618
80200e36: 81 45        	mv	a1, zero
80200e38: 97 f0 ff ff  	auipc	ra, 1048575
80200e3c: e7 80 80 26  	jalr	616(ra)
80200e40: 03 35 04 fb  	ld	a0, -80(s0)
80200e44: 83 35 84 fa  	ld	a1, -88(s0)
80200e48: 88 e1        	sd	a0, 0(a1)
80200e4a: 05 45        	addi	a0, zero, 1
;             return true;
80200e4c: a3 07 a4 fe  	sb	a0, -17(s0)
80200e50: 46 64        	ld	s0, 80(sp)
80200e52: e6 60        	ld	ra, 88(sp)
80200e54: 25 61        	addi	sp, sp, 96
80200e56: 82 80        	ret

0000000080200e58 <std.fmt.Parser.until>:
;     fn until(self: *@This(), ch: u8) []const u8 {
80200e58: 59 71        	addi	sp, sp, -112
80200e5a: 86 f4        	sd	ra, 104(sp)
80200e5c: a2 f0        	sd	s0, 96(sp)
80200e5e: 80 18        	addi	s0, sp, 112
80200e60: 23 38 a4 fc  	sd	a0, -48(s0)
80200e64: 23 30 b4 fe  	sd	a1, -32(s0)
80200e68: a3 0f c4 fc  	sb	a2, -33(s0)
;         const start = self.pos;
80200e6c: 88 69        	ld	a0, 16(a1)
80200e6e: 23 34 a4 fe  	sd	a0, -24(s0)
;         if (start >= self.buf.len)
80200e72: 8c 65        	ld	a1, 8(a1)
80200e74: 63 6c b5 00  	bltu	a0, a1, 0x80200e8c <std.fmt.Parser.until+0x34>
80200e78: 09 a0        	j	0x80200e7a <std.fmt.Parser.until+0x22>
80200e7a: 83 35 04 fd  	ld	a1, -48(s0)
80200e7e: 01 45        	mv	a0, zero
;             return &[_]u8{};
80200e80: 88 e5        	sd	a0, 8(a1)
80200e82: 88 e1        	sd	a0, 0(a1)
80200e84: 06 74        	ld	s0, 96(sp)
80200e86: a6 70        	ld	ra, 104(sp)
80200e88: 65 61        	addi	sp, sp, 112
80200e8a: 82 80        	ret
;         if (start >= self.buf.len)
80200e8c: 09 a0        	j	0x80200e8e <std.fmt.Parser.until+0x36>
;         while (self.pos < self.buf.len) : (self.pos += 1) {
80200e8e: 09 a0        	j	0x80200e90 <std.fmt.Parser.until+0x38>
80200e90: 83 35 04 fe  	ld	a1, -32(s0)
80200e94: 88 69        	ld	a0, 16(a1)
80200e96: 8c 65        	ld	a1, 8(a1)
80200e98: 63 7e b5 02  	bgeu	a0, a1, 0x80200ed4 <std.fmt.Parser.until+0x7c>
80200e9c: 09 a0        	j	0x80200e9e <std.fmt.Parser.until+0x46>
;             if (self.buf[self.pos] == ch) break;
80200e9e: 83 35 04 fe  	ld	a1, -32(s0)
80200ea2: 23 30 b4 fc  	sd	a1, -64(s0)
80200ea6: 88 69        	ld	a0, 16(a1)
80200ea8: 23 34 a4 fc  	sd	a0, -56(s0)
80200eac: 8c 65        	ld	a1, 8(a1)
80200eae: 63 6d b5 04  	bltu	a0, a1, 0x80200f08 <.LBB33_18+0x12>
80200eb2: 91 a0        	j	0x80200ef6 <.LBB33_18>
80200eb4: 05 a0        	j	0x80200ed4 <std.fmt.Parser.until+0x7c>
80200eb6: 09 a0        	j	0x80200eb8 <std.fmt.Parser.until+0x60>
;         while (self.pos < self.buf.len) : (self.pos += 1) {
80200eb8: 03 35 04 fe  	ld	a0, -32(s0)
80200ebc: 93 05 05 01  	addi	a1, a0, 16
80200ec0: 23 38 b4 fa  	sd	a1, -80(s0)
80200ec4: 0c 69        	ld	a1, 16(a0)
80200ec6: 13 85 15 00  	addi	a0, a1, 1
80200eca: 23 3c a4 fa  	sd	a0, -72(s0)
80200ece: 63 6a b5 04  	bltu	a0, a1, 0x80200f22 <.LBB33_19>
80200ed2: 8d a0        	j	0x80200f34 <.LBB33_19+0x12>
;         return self.buf[start..self.pos];
80200ed4: 03 36 04 fe  	ld	a2, -32(s0)
80200ed8: 23 38 c4 f8  	sd	a2, -112(s0)
80200edc: 83 35 84 fe  	ld	a1, -24(s0)
80200ee0: 23 3c b4 f8  	sd	a1, -104(s0)
80200ee4: 08 6a        	ld	a0, 16(a2)
80200ee6: 23 30 a4 fa  	sd	a0, -96(s0)
80200eea: 10 66        	ld	a2, 8(a2)
80200eec: 23 34 c4 fa  	sd	a2, -88(s0)
80200ef0: 63 71 b5 06  	bgeu	a0, a1, 0x80200f52 <.LBB33_20+0x12>
80200ef4: b1 a0        	j	0x80200f40 <.LBB33_20>

0000000080200ef6 <.LBB33_18>:
;             if (self.buf[self.pos] == ch) break;
80200ef6: 17 c5 01 00  	auipc	a0, 28
80200efa: 13 05 a5 40  	addi	a0, a0, 1034
80200efe: 81 45        	mv	a1, zero
80200f00: 97 f0 ff ff  	auipc	ra, 1048575
80200f04: e7 80 00 1a  	jalr	416(ra)
80200f08: 83 35 84 fc  	ld	a1, -56(s0)
80200f0c: 03 35 04 fc  	ld	a0, -64(s0)
80200f10: 08 61        	ld	a0, 0(a0)
80200f12: 2e 95        	add	a0, a0, a1
80200f14: 03 45 05 00  	lbu	a0, 0(a0)
80200f18: 83 45 f4 fd  	lbu	a1, -33(s0)
80200f1c: e3 0c b5 f8  	beq	a0, a1, 0x80200eb4 <std.fmt.Parser.until+0x5c>
80200f20: 59 bf        	j	0x80200eb6 <std.fmt.Parser.until+0x5e>

0000000080200f22 <.LBB33_19>:
;         while (self.pos < self.buf.len) : (self.pos += 1) {
80200f22: 17 c5 01 00  	auipc	a0, 28
80200f26: 13 05 e5 55  	addi	a0, a0, 1374
80200f2a: 81 45        	mv	a1, zero
80200f2c: 97 f0 ff ff  	auipc	ra, 1048575
80200f30: e7 80 40 17  	jalr	372(ra)
80200f34: 03 35 84 fb  	ld	a0, -72(s0)
80200f38: 83 35 04 fb  	ld	a1, -80(s0)
80200f3c: 88 e1        	sd	a0, 0(a1)
80200f3e: 89 bf        	j	0x80200e90 <std.fmt.Parser.until+0x38>

0000000080200f40 <.LBB33_20>:
;         return self.buf[start..self.pos];
80200f40: 17 c5 01 00  	auipc	a0, 28
80200f44: 13 05 05 3c  	addi	a0, a0, 960
80200f48: 81 45        	mv	a1, zero
80200f4a: 97 f0 ff ff  	auipc	ra, 1048575
80200f4e: e7 80 60 15  	jalr	342(ra)
80200f52: 03 35 84 fa  	ld	a0, -88(s0)
80200f56: 83 35 04 fa  	ld	a1, -96(s0)
80200f5a: 63 7c b5 00  	bgeu	a0, a1, 0x80200f72 <.LBB33_21+0x12>
80200f5e: 09 a0        	j	0x80200f60 <.LBB33_21>

0000000080200f60 <.LBB33_21>:
80200f60: 17 c5 01 00  	auipc	a0, 28
80200f64: 13 05 05 3a  	addi	a0, a0, 928
80200f68: 81 45        	mv	a1, zero
80200f6a: 97 f0 ff ff  	auipc	ra, 1048575
80200f6e: e7 80 60 13  	jalr	310(ra)
80200f72: 83 35 04 fd  	ld	a1, -48(s0)
80200f76: 03 35 04 fa  	ld	a0, -96(s0)
80200f7a: 83 36 84 f9  	ld	a3, -104(s0)
80200f7e: 03 36 04 f9  	ld	a2, -112(s0)
80200f82: 10 62        	ld	a2, 0(a2)
80200f84: 36 96        	add	a2, a2, a3
80200f86: 15 8d        	sub	a0, a0, a3
80200f88: 90 e1        	sd	a2, 0(a1)
80200f8a: 88 e5        	sd	a0, 8(a1)
80200f8c: 06 74        	ld	s0, 96(sp)
80200f8e: a6 70        	ld	ra, 104(sp)
80200f90: 65 61        	addi	sp, sp, 112
80200f92: 82 80        	ret

0000000080200f94 <std.fmt.Parser.number>:
;     fn number(self: *@This()) ?usize {
80200f94: 75 71        	addi	sp, sp, -144
80200f96: 06 e5        	sd	ra, 136(sp)
80200f98: 22 e1        	sd	s0, 128(sp)
80200f9a: 00 09        	addi	s0, sp, 144
80200f9c: 23 38 a4 fc  	sd	a0, -48(s0)
80200fa0: 23 3c b4 fc  	sd	a1, -40(s0)

0000000080200fa4 <.LBB34_27>:
80200fa4: 17 45 02 00  	auipc	a0, 36
80200fa8: 13 05 c5 d8  	addi	a0, a0, -628
;         var r: ?usize = null;
80200fac: 0c 61        	ld	a1, 0(a0)
80200fae: 23 30 b4 fe  	sd	a1, -32(s0)
80200fb2: 08 65        	ld	a0, 8(a0)
80200fb4: 23 34 a4 fe  	sd	a0, -24(s0)
;         while (self.pos < self.buf.len) : (self.pos += 1) {
80200fb8: 09 a0        	j	0x80200fba <.LBB34_27+0x16>
80200fba: 83 35 84 fd  	ld	a1, -40(s0)
80200fbe: 88 69        	ld	a0, 16(a1)
80200fc0: 8c 65        	ld	a1, 8(a1)
80200fc2: 63 71 b5 06  	bgeu	a0, a1, 0x80201024 <.LBB34_27+0x80>
80200fc6: 09 a0        	j	0x80200fc8 <.LBB34_27+0x24>
;             switch (self.buf[self.pos]) {
80200fc8: 83 35 84 fd  	ld	a1, -40(s0)
80200fcc: 23 30 b4 fc  	sd	a1, -64(s0)
80200fd0: 88 69        	ld	a0, 16(a1)
80200fd2: 23 34 a4 fc  	sd	a0, -56(s0)
80200fd6: 8c 65        	ld	a1, 8(a1)
80200fd8: 63 6c b5 06  	bltu	a0, a1, 0x80201050 <.LBB34_28+0x12>
80200fdc: 8d a0        	j	0x8020103e <.LBB34_28>
;                     if (r == null) r = 0;
80200fde: 03 45 84 fe  	lbu	a0, -24(s0)
80200fe2: 81 45        	mv	a1, zero
80200fe4: 63 1a b5 00  	bne	a0, a1, 0x80200ff8 <.LBB34_27+0x54>
80200fe8: 09 a0        	j	0x80200fea <.LBB34_27+0x46>
80200fea: 05 45        	addi	a0, zero, 1
;                     if (r == null) r = 0;
80200fec: 23 04 a4 fe  	sb	a0, -24(s0)
80200ff0: 01 45        	mv	a0, zero
80200ff2: 23 30 a4 fe  	sd	a0, -32(s0)
80200ff6: 19 a0        	j	0x80200ffc <.LBB34_27+0x58>
80200ff8: 11 a0        	j	0x80200ffc <.LBB34_27+0x58>
;                 else => break,
80200ffa: 2d a0        	j	0x80201024 <.LBB34_27+0x80>
;                     r.? *= 10;
80200ffc: 03 45 84 fe  	lbu	a0, -24(s0)
80201000: 81 45        	mv	a1, zero
80201002: 63 13 b5 08  	bne	a0, a1, 0x80201088 <.LBB34_29+0x12>
80201006: 85 a8        	j	0x80201076 <.LBB34_29>
;         while (self.pos < self.buf.len) : (self.pos += 1) {
80201008: 03 35 84 fd  	ld	a0, -40(s0)
8020100c: 93 05 05 01  	addi	a1, a0, 16
80201010: 23 38 b4 fa  	sd	a1, -80(s0)
80201014: 0c 69        	ld	a1, 16(a0)
80201016: 13 85 15 00  	addi	a0, a1, 1
8020101a: 23 3c a4 fa  	sd	a0, -72(s0)
8020101e: 63 64 b5 16  	bltu	a0, a1, 0x80201186 <.LBB34_35>
80201022: 9d aa        	j	0x80201198 <.LBB34_35+0x12>
;         return r;
80201024: 83 35 04 fd  	ld	a1, -48(s0)
80201028: 03 35 84 fe  	ld	a0, -24(s0)
8020102c: 88 e5        	sd	a0, 8(a1)
8020102e: 03 35 04 fe  	ld	a0, -32(s0)
80201032: 88 e1        	sd	a0, 0(a1)
80201034: 0a 64        	ld	s0, 128(sp)
80201036: aa 60        	ld	ra, 136(sp)
80201038: 49 61        	addi	sp, sp, 144
8020103a: 82 80        	ret
;             switch (self.buf[self.pos]) {
8020103c: 7d bf        	j	0x80200ffa <.LBB34_27+0x56>

000000008020103e <.LBB34_28>:
8020103e: 17 c5 01 00  	auipc	a0, 28
80201042: 13 05 25 2c  	addi	a0, a0, 706
80201046: 81 45        	mv	a1, zero
80201048: 97 f0 ff ff  	auipc	ra, 1048575
8020104c: e7 80 80 05  	jalr	88(ra)
80201050: 83 35 84 fc  	ld	a1, -56(s0)
80201054: 03 35 04 fc  	ld	a0, -64(s0)
80201058: 08 61        	ld	a0, 0(a0)
8020105a: 2e 95        	add	a0, a0, a1
8020105c: 83 45 05 00  	lbu	a1, 0(a0)
80201060: 13 05 f0 02  	addi	a0, zero, 47
;                 '0'...'9' => {
80201064: 33 35 b5 00  	sltu	a0, a0, a1
80201068: 93 b5 a5 03  	sltiu	a1, a1, 58
8020106c: 6d 8d        	and	a0, a0, a1
8020106e: 81 45        	mv	a1, zero
80201070: e3 17 b5 f6  	bne	a0, a1, 0x80200fde <.LBB34_27+0x3a>
80201074: e1 b7        	j	0x8020103c <.LBB34_27+0x98>

0000000080201076 <.LBB34_29>:
;                     r.? *= 10;
80201076: 17 c5 01 00  	auipc	a0, 28
8020107a: 13 05 a5 42  	addi	a0, a0, 1066
8020107e: 81 45        	mv	a1, zero
80201080: 97 f0 ff ff  	auipc	ra, 1048575
80201084: e7 80 00 02  	jalr	32(ra)
80201088: 13 05 04 fe  	addi	a0, s0, -32
;                     r.? *= 10;
8020108c: 23 30 a4 fa  	sd	a0, -96(s0)
80201090: 03 35 04 fe  	ld	a0, -32(s0)
80201094: a9 45        	addi	a1, zero, 10
80201096: 33 06 b5 02  	mul	a2, a0, a1
8020109a: 23 34 c4 fa  	sd	a2, -88(s0)
8020109e: 33 35 b5 02  	mulhu	a0, a0, a1
802010a2: 81 45        	mv	a1, zero
802010a4: 63 0c b5 00  	beq	a0, a1, 0x802010bc <.LBB34_30+0x12>
802010a8: 09 a0        	j	0x802010aa <.LBB34_30>

00000000802010aa <.LBB34_30>:
802010aa: 17 c5 01 00  	auipc	a0, 28
802010ae: 13 05 65 3d  	addi	a0, a0, 982
802010b2: 81 45        	mv	a1, zero
802010b4: 97 f0 ff ff  	auipc	ra, 1048575
802010b8: e7 80 c0 fe  	jalr	-20(ra)
802010bc: 03 35 84 fa  	ld	a0, -88(s0)
802010c0: 83 35 04 fa  	ld	a1, -96(s0)
802010c4: 88 e1        	sd	a0, 0(a1)
;                     r.? += self.buf[self.pos] - '0';
802010c6: 03 45 84 fe  	lbu	a0, -24(s0)
802010ca: 81 45        	mv	a1, zero
802010cc: 63 1c b5 00  	bne	a0, a1, 0x802010e4 <.LBB34_31+0x12>
802010d0: 09 a0        	j	0x802010d2 <.LBB34_31>

00000000802010d2 <.LBB34_31>:
802010d2: 17 c5 01 00  	auipc	a0, 28
802010d6: 13 05 e5 3c  	addi	a0, a0, 974
802010da: 81 45        	mv	a1, zero
802010dc: 97 f0 ff ff  	auipc	ra, 1048575
802010e0: e7 80 40 fc  	jalr	-60(ra)
802010e4: 13 05 04 fe  	addi	a0, s0, -32
;                     r.? += self.buf[self.pos] - '0';
802010e8: 23 30 a4 f8  	sd	a0, -128(s0)
802010ec: 03 35 04 fe  	ld	a0, -32(s0)
802010f0: 23 34 a4 f8  	sd	a0, -120(s0)
802010f4: 83 35 84 fd  	ld	a1, -40(s0)
802010f8: 23 38 b4 f8  	sd	a1, -112(s0)
802010fc: 88 69        	ld	a0, 16(a1)
802010fe: 23 3c a4 f8  	sd	a0, -104(s0)
80201102: 8c 65        	ld	a1, 8(a1)
80201104: 63 6c b5 00  	bltu	a0, a1, 0x8020111c <.LBB34_32+0x12>
80201108: 09 a0        	j	0x8020110a <.LBB34_32>

000000008020110a <.LBB34_32>:
8020110a: 17 c5 01 00  	auipc	a0, 28
8020110e: 13 05 65 1f  	addi	a0, a0, 502
80201112: 81 45        	mv	a1, zero
80201114: 97 f0 ff ff  	auipc	ra, 1048575
80201118: e7 80 c0 f8  	jalr	-116(ra)
8020111c: 83 35 84 f9  	ld	a1, -104(s0)
80201120: 03 35 04 f9  	ld	a0, -112(s0)
80201124: 08 61        	ld	a0, 0(a0)
80201126: 2e 95        	add	a0, a0, a1
80201128: 03 45 05 00  	lbu	a0, 0(a0)
8020112c: 93 05 05 fd  	addi	a1, a0, -48
80201130: 23 3c b4 f6  	sd	a1, -136(s0)
80201134: 13 f5 f5 0f  	andi	a0, a1, 255
80201138: 63 0c b5 00  	beq	a0, a1, 0x80201150 <.LBB34_33+0x12>
8020113c: 09 a0        	j	0x8020113e <.LBB34_33>

000000008020113e <.LBB34_33>:
8020113e: 17 c5 01 00  	auipc	a0, 28
80201142: 13 05 25 34  	addi	a0, a0, 834
80201146: 81 45        	mv	a1, zero
80201148: 97 f0 ff ff  	auipc	ra, 1048575
8020114c: e7 80 80 f5  	jalr	-168(ra)
80201150: 83 35 84 f8  	ld	a1, -120(s0)
80201154: 03 35 84 f7  	ld	a0, -136(s0)
80201158: 13 75 f5 0f  	andi	a0, a0, 255
8020115c: 2e 95        	add	a0, a0, a1
8020115e: 23 38 a4 f6  	sd	a0, -144(s0)
80201162: 63 7c b5 00  	bgeu	a0, a1, 0x8020117a <.LBB34_34+0x12>
80201166: 09 a0        	j	0x80201168 <.LBB34_34>

0000000080201168 <.LBB34_34>:
80201168: 17 c5 01 00  	auipc	a0, 28
8020116c: 13 05 85 31  	addi	a0, a0, 792
80201170: 81 45        	mv	a1, zero
80201172: 97 f0 ff ff  	auipc	ra, 1048575
80201176: e7 80 e0 f2  	jalr	-210(ra)
8020117a: 03 35 04 f7  	ld	a0, -144(s0)
8020117e: 83 35 04 f8  	ld	a1, -128(s0)
80201182: 88 e1        	sd	a0, 0(a1)
;             switch (self.buf[self.pos]) {
80201184: 51 b5        	j	0x80201008 <.LBB34_27+0x64>

0000000080201186 <.LBB34_35>:
;         while (self.pos < self.buf.len) : (self.pos += 1) {
80201186: 17 c5 01 00  	auipc	a0, 28
8020118a: 13 05 a5 2f  	addi	a0, a0, 762
8020118e: 81 45        	mv	a1, zero
80201190: 97 f0 ff ff  	auipc	ra, 1048575
80201194: e7 80 00 f1  	jalr	-240(ra)
80201198: 03 35 84 fb  	ld	a0, -72(s0)
8020119c: 83 35 04 fb  	ld	a1, -80(s0)
802011a0: 88 e1        	sd	a0, 0(a1)
802011a2: 21 bd        	j	0x80200fba <.LBB34_27+0x16>

00000000802011a4 <std.fmt.Parser.char>:
;     fn char(self: *@This()) ?u8 {
802011a4: 5d 71        	addi	sp, sp, -80
802011a6: 86 e4        	sd	ra, 72(sp)
802011a8: a2 e0        	sd	s0, 64(sp)
802011aa: 80 08        	addi	s0, sp, 80
802011ac: 23 3c a4 fc  	sd	a0, -40(s0)
802011b0: 23 30 b4 fe  	sd	a1, -32(s0)
;         if (self.pos < self.buf.len) {
802011b4: 88 69        	ld	a0, 16(a1)
802011b6: 8c 65        	ld	a1, 8(a1)
802011b8: 63 7e b5 00  	bgeu	a0, a1, 0x802011d4 <std.fmt.Parser.char+0x30>
802011bc: 09 a0        	j	0x802011be <std.fmt.Parser.char+0x1a>
;             const ch = self.buf[self.pos];
802011be: 83 35 04 fe  	ld	a1, -32(s0)
802011c2: 23 34 b4 fc  	sd	a1, -56(s0)
802011c6: 88 69        	ld	a0, 16(a1)
802011c8: 23 38 a4 fc  	sd	a0, -48(s0)
802011cc: 8c 65        	ld	a1, 8(a1)
802011ce: 63 6f b5 02  	bltu	a0, a1, 0x8020120c <.LBB35_9+0x12>
802011d2: 25 a0        	j	0x802011fa <.LBB35_9>
;         if (self.pos < self.buf.len) {
802011d4: 09 a0        	j	0x802011d6 <std.fmt.Parser.char+0x32>
802011d6: 83 35 84 fd  	ld	a1, -40(s0)

00000000802011da <.LBB35_8>:
802011da: 17 c5 01 00  	auipc	a0, 28
802011de: 13 05 65 2d  	addi	a0, a0, 726
;         return null;
802011e2: 03 06 15 00  	lb	a2, 1(a0)
802011e6: a3 80 c5 00  	sb	a2, 1(a1)
802011ea: 03 05 05 00  	lb	a0, 0(a0)
802011ee: 23 80 a5 00  	sb	a0, 0(a1)
802011f2: 06 64        	ld	s0, 64(sp)
802011f4: a6 60        	ld	ra, 72(sp)
802011f6: 61 61        	addi	sp, sp, 80
802011f8: 82 80        	ret

00000000802011fa <.LBB35_9>:
;             const ch = self.buf[self.pos];
802011fa: 17 c5 01 00  	auipc	a0, 28
802011fe: 13 05 65 10  	addi	a0, a0, 262
80201202: 81 45        	mv	a1, zero
80201204: 97 f0 ff ff  	auipc	ra, 1048575
80201208: e7 80 c0 e9  	jalr	-356(ra)
8020120c: 83 35 04 fd  	ld	a1, -48(s0)
80201210: 03 35 84 fc  	ld	a0, -56(s0)
80201214: 08 61        	ld	a0, 0(a0)
80201216: 2e 95        	add	a0, a0, a1
80201218: 03 05 05 00  	lb	a0, 0(a0)
8020121c: a3 07 a4 fe  	sb	a0, -17(s0)
;             self.pos += 1;
80201220: 03 35 04 fe  	ld	a0, -32(s0)
80201224: 93 05 05 01  	addi	a1, a0, 16
80201228: 23 3c b4 fa  	sd	a1, -72(s0)
8020122c: 0c 69        	ld	a1, 16(a0)
8020122e: 13 85 15 00  	addi	a0, a1, 1
80201232: 23 30 a4 fc  	sd	a0, -64(s0)
80201236: 63 7c b5 00  	bgeu	a0, a1, 0x8020124e <.LBB35_10+0x12>
8020123a: 09 a0        	j	0x8020123c <.LBB35_10>

000000008020123c <.LBB35_10>:
8020123c: 17 c5 01 00  	auipc	a0, 28
80201240: 13 05 45 24  	addi	a0, a0, 580
80201244: 81 45        	mv	a1, zero
80201246: 97 f0 ff ff  	auipc	ra, 1048575
8020124a: e7 80 a0 e5  	jalr	-422(ra)
8020124e: 83 35 84 fd  	ld	a1, -40(s0)
80201252: 03 35 04 fc  	ld	a0, -64(s0)
80201256: 03 36 84 fb  	ld	a2, -72(s0)
8020125a: 08 e2        	sd	a0, 0(a2)
;             return ch;
8020125c: 03 05 f4 fe  	lb	a0, -17(s0)
80201260: 05 46        	addi	a2, zero, 1
80201262: a3 80 c5 00  	sb	a2, 1(a1)
80201266: 23 80 a5 00  	sb	a0, 0(a1)
8020126a: 06 64        	ld	s0, 64(sp)
8020126c: a6 60        	ld	ra, 72(sp)
8020126e: 61 61        	addi	sp, sp, 80
80201270: 82 80        	ret

0000000080201272 <std.fmt.Parser.peek>:
;     fn peek(self: *@This(), n: usize) ?u8 {
80201272: 5d 71        	addi	sp, sp, -80
80201274: 86 e4        	sd	ra, 72(sp)
80201276: a2 e0        	sd	s0, 64(sp)
80201278: 80 08        	addi	s0, sp, 80
8020127a: 23 34 a4 fc  	sd	a0, -56(s0)
8020127e: 23 30 b4 fe  	sd	a1, -32(s0)
80201282: 23 3c c4 fc  	sd	a2, -40(s0)
;         return if (self.pos + n < self.buf.len) self.buf[self.pos + n] else null;
80201286: 8c 69        	ld	a1, 16(a1)
80201288: 33 85 c5 00  	add	a0, a1, a2
8020128c: 23 38 a4 fc  	sd	a0, -48(s0)
80201290: 63 63 b5 04  	bltu	a0, a1, 0x802012d6 <.LBB36_11>
80201294: 91 a8        	j	0x802012e8 <.LBB36_11+0x12>
80201296: 03 35 04 fe  	ld	a0, -32(s0)
8020129a: 23 3c a4 fa  	sd	a0, -72(s0)
8020129e: 0c 69        	ld	a1, 16(a0)
802012a0: 03 35 84 fd  	ld	a0, -40(s0)
802012a4: 2e 95        	add	a0, a0, a1
802012a6: 23 30 a4 fc  	sd	a0, -64(s0)
802012aa: 63 67 b5 04  	bltu	a0, a1, 0x802012f8 <.LBB36_12>
802012ae: b1 a8        	j	0x8020130a <.LBB36_12+0x12>
802012b0: 83 35 84 fc  	ld	a1, -56(s0)

00000000802012b4 <.LBB36_10>:
802012b4: 17 c5 01 00  	auipc	a0, 28
802012b8: 13 05 e5 1f  	addi	a0, a0, 510
;         return if (self.pos + n < self.buf.len) self.buf[self.pos + n] else null;
802012bc: 03 06 15 00  	lb	a2, 1(a0)
802012c0: a3 80 c5 00  	sb	a2, 1(a1)
802012c4: 03 05 05 00  	lb	a0, 0(a0)
802012c8: 23 80 a5 00  	sb	a0, 0(a1)
802012cc: 09 a0        	j	0x802012ce <.LBB36_10+0x1a>
802012ce: 06 64        	ld	s0, 64(sp)
802012d0: a6 60        	ld	ra, 72(sp)
802012d2: 61 61        	addi	sp, sp, 80
802012d4: 82 80        	ret

00000000802012d6 <.LBB36_11>:
802012d6: 17 c5 01 00  	auipc	a0, 28
802012da: 13 05 a5 1a  	addi	a0, a0, 426
802012de: 81 45        	mv	a1, zero
802012e0: 97 f0 ff ff  	auipc	ra, 1048575
802012e4: e7 80 00 dc  	jalr	-576(ra)
802012e8: 03 35 04 fd  	ld	a0, -48(s0)
802012ec: 83 35 04 fe  	ld	a1, -32(s0)
802012f0: 8c 65        	ld	a1, 8(a1)
802012f2: e3 62 b5 fa  	bltu	a0, a1, 0x80201296 <std.fmt.Parser.peek+0x24>
802012f6: 6d bf        	j	0x802012b0 <std.fmt.Parser.peek+0x3e>

00000000802012f8 <.LBB36_12>:
802012f8: 17 c5 01 00  	auipc	a0, 28
802012fc: 13 05 85 18  	addi	a0, a0, 392
80201300: 81 45        	mv	a1, zero
80201302: 97 f0 ff ff  	auipc	ra, 1048575
80201306: e7 80 e0 d9  	jalr	-610(ra)
8020130a: 03 35 04 fc  	ld	a0, -64(s0)
8020130e: 83 35 84 fb  	ld	a1, -72(s0)
80201312: 8c 65        	ld	a1, 8(a1)
80201314: 63 6c b5 00  	bltu	a0, a1, 0x8020132c <.LBB36_13+0x12>
80201318: 09 a0        	j	0x8020131a <.LBB36_13>

000000008020131a <.LBB36_13>:
8020131a: 17 c5 01 00  	auipc	a0, 28
8020131e: 13 05 65 fe  	addi	a0, a0, -26
80201322: 81 45        	mv	a1, zero
80201324: 97 f0 ff ff  	auipc	ra, 1048575
80201328: e7 80 c0 d7  	jalr	-644(ra)
8020132c: 03 36 84 fc  	ld	a2, -56(s0)
80201330: 83 35 04 fc  	ld	a1, -64(s0)
80201334: 03 35 84 fb  	ld	a0, -72(s0)
80201338: 08 61        	ld	a0, 0(a0)
8020133a: 2e 95        	add	a0, a0, a1
8020133c: 83 05 05 00  	lb	a1, 0(a0)
80201340: 05 45        	addi	a0, zero, 1
80201342: a3 00 a6 00  	sb	a0, 1(a2)
80201346: 23 00 b6 00  	sb	a1, 0(a2)
8020134a: 23 04 b4 fe  	sb	a1, -24(s0)
8020134e: a3 04 a4 fe  	sb	a0, -23(s0)
80201352: b5 bf        	j	0x802012ce <.LBB36_10+0x1a>

0000000080201354 <std.fmt.ArgState.nextArg>:
;     fn nextArg(self: *@This(), arg_index: ?usize) ?usize {
80201354: 59 71        	addi	sp, sp, -112
80201356: 86 f4        	sd	ra, 104(sp)
80201358: a2 f0        	sd	s0, 96(sp)
8020135a: 80 18        	addi	s0, sp, 112
8020135c: 23 34 c4 fc  	sd	a2, -56(s0)
80201360: 23 38 a4 fc  	sd	a0, -48(s0)
80201364: 23 3c b4 fc  	sd	a1, -40(s0)
;         const next_index = arg_index orelse init: {
80201368: 03 45 86 00  	lbu	a0, 8(a2)
8020136c: 81 45        	mv	a1, zero
8020136e: 63 17 b5 02  	bne	a0, a1, 0x8020139c <std.fmt.ArgState.nextArg+0x48>
80201372: 09 a0        	j	0x80201374 <std.fmt.ArgState.nextArg+0x20>
;             const arg = self.next_arg;
80201374: 03 35 84 fd  	ld	a0, -40(s0)
80201378: 23 3c a4 fa  	sd	a0, -72(s0)
8020137c: 0c 61        	ld	a1, 0(a0)
8020137e: 23 34 b4 fe  	sd	a1, -24(s0)
;             self.next_arg += 1;
80201382: 0c 61        	ld	a1, 0(a0)
80201384: 13 85 15 00  	addi	a0, a1, 1
80201388: 23 30 a4 fc  	sd	a0, -64(s0)
8020138c: 63 68 b5 06  	bltu	a0, a1, 0x802013fc <.LBB37_13>
80201390: bd a8        	j	0x8020140e <.LBB37_13+0x12>
;         const next_index = arg_index orelse init: {
80201392: 03 35 04 fb  	ld	a0, -80(s0)
80201396: 23 30 a4 fe  	sd	a0, -32(s0)
8020139a: 39 a0        	j	0x802013a8 <std.fmt.ArgState.nextArg+0x54>
8020139c: 03 35 84 fc  	ld	a0, -56(s0)
802013a0: 08 61        	ld	a0, 0(a0)
802013a2: 23 30 a4 fe  	sd	a0, -32(s0)
802013a6: 09 a0        	j	0x802013a8 <std.fmt.ArgState.nextArg+0x54>
;         if (next_index >= self.args_len) {
802013a8: 03 35 04 fe  	ld	a0, -32(s0)
802013ac: 83 35 84 fd  	ld	a1, -40(s0)
802013b0: 8c 69        	ld	a1, 16(a1)
802013b2: 63 61 b5 02  	bltu	a0, a1, 0x802013d4 <.LBB37_12+0x18>
802013b6: 09 a0        	j	0x802013b8 <std.fmt.ArgState.nextArg+0x64>
802013b8: 83 35 04 fd  	ld	a1, -48(s0)

00000000802013bc <.LBB37_12>:
802013bc: 17 45 02 00  	auipc	a0, 36
802013c0: 13 05 45 99  	addi	a0, a0, -1644
;             return null;
802013c4: 10 65        	ld	a2, 8(a0)
802013c6: 90 e5        	sd	a2, 8(a1)
802013c8: 08 61        	ld	a0, 0(a0)
802013ca: 88 e1        	sd	a0, 0(a1)
802013cc: 06 74        	ld	s0, 96(sp)
802013ce: a6 70        	ld	ra, 104(sp)
802013d0: 65 61        	addi	sp, sp, 112
802013d2: 82 80        	ret
;         if (next_index >= self.args_len) {
802013d4: 09 a0        	j	0x802013d6 <.LBB37_12+0x1a>
;         self.used_args |= @as(ArgSetType, 1) << @intCast(u5, next_index);
802013d6: 03 35 84 fd  	ld	a0, -40(s0)
802013da: 93 05 85 00  	addi	a1, a0, 8
802013de: 23 3c b4 f8  	sd	a1, -104(s0)
802013e2: 03 65 85 00  	lwu	a0, 8(a0)
802013e6: 23 30 a4 fa  	sd	a0, -96(s0)
802013ea: 03 35 04 fe  	ld	a0, -32(s0)
802013ee: 23 34 a4 fa  	sd	a0, -88(s0)
802013f2: 93 75 f5 01  	andi	a1, a0, 31
802013f6: 63 08 b5 02  	beq	a0, a1, 0x80201426 <.LBB37_13+0x2a>
802013fa: a1 a8        	j	0x80201452 <.LBB37_14>

00000000802013fc <.LBB37_13>:
;             self.next_arg += 1;
802013fc: 17 c5 01 00  	auipc	a0, 28
80201400: 13 05 45 08  	addi	a0, a0, 132
80201404: 81 45        	mv	a1, zero
80201406: 97 f0 ff ff  	auipc	ra, 1048575
8020140a: e7 80 a0 c9  	jalr	-870(ra)
8020140e: 03 35 04 fc  	ld	a0, -64(s0)
80201412: 83 35 84 fb  	ld	a1, -72(s0)
80201416: 88 e1        	sd	a0, 0(a1)
;             break :init arg;
80201418: 03 35 84 fe  	ld	a0, -24(s0)
8020141c: 23 38 a4 fa  	sd	a0, -80(s0)
80201420: 23 30 a4 fe  	sd	a0, -32(s0)
80201424: bd b7        	j	0x80201392 <std.fmt.ArgState.nextArg+0x3e>
80201426: 83 35 04 fd  	ld	a1, -48(s0)
8020142a: 83 36 84 f9  	ld	a3, -104(s0)
8020142e: 03 35 04 fa  	ld	a0, -96(s0)
80201432: 03 37 84 fa  	ld	a4, -88(s0)
80201436: 05 46        	addi	a2, zero, 1
;         self.used_args |= @as(ArgSetType, 1) << @intCast(u5, next_index);
80201438: 3b 17 e6 00  	sllw	a4, a2, a4
8020143c: 59 8d        	or	a0, a0, a4
8020143e: 88 c2        	sw	a0, 0(a3)
;         return next_index;
80201440: 03 35 04 fe  	ld	a0, -32(s0)
80201444: 23 84 c5 00  	sb	a2, 8(a1)
80201448: 88 e1        	sd	a0, 0(a1)
8020144a: 06 74        	ld	s0, 96(sp)
8020144c: a6 70        	ld	ra, 104(sp)
8020144e: 65 61        	addi	sp, sp, 112
80201450: 82 80        	ret

0000000080201452 <.LBB37_14>:
;         self.used_args |= @as(ArgSetType, 1) << @intCast(u5, next_index);
80201452: 17 c5 01 00  	auipc	a0, 28
80201456: 13 05 e5 e9  	addi	a0, a0, -354
8020145a: 81 45        	mv	a1, zero
8020145c: 97 f0 ff ff  	auipc	ra, 1048575
80201460: e7 80 40 c4  	jalr	-956(ra)

0000000080201464 <std.fmt.formatBuf>:
; pub fn formatBuf(
80201464: 71 71        	addi	sp, sp, -176
;     options: FormatOptions,
80201466: 06 f5        	sd	ra, 168(sp)
80201468: 22 f1        	sd	s0, 160(sp)
8020146a: 00 19        	addi	s0, sp, 176
8020146c: 23 3c c4 f6  	sd	a2, -136(s0)
;     buf: []const u8,
80201470: 23 30 b4 f8  	sd	a1, -128(s0)
;     if (options.width) |min_width| {
80201474: 23 34 a4 f8  	sd	a0, -120(s0)
80201478: 13 05 06 01  	addi	a0, a2, 16
8020147c: 23 38 a4 f8  	sd	a0, -112(s0)
80201480: 03 45 86 01  	lbu	a0, 24(a2)
80201484: 81 45        	mv	a1, zero
80201486: 63 0c b5 16  	beq	a0, a1, 0x802015fe <.LBB38_31+0x8c>
8020148a: 09 a0        	j	0x8020148c <std.fmt.formatBuf+0x28>
8020148c: 03 36 04 f8  	ld	a2, -128(s0)
80201490: 83 35 84 f8  	ld	a1, -120(s0)
80201494: 03 35 04 f9  	ld	a0, -112(s0)
80201498: 08 61        	ld	a0, 0(a0)
8020149a: 23 30 a4 fe  	sd	a0, -32(s0)
8020149e: 13 05 04 fd  	addi	a0, s0, -48
;         const width = unicode.utf8CountCodepoints(buf) catch buf.len;
802014a2: 97 00 00 00  	auipc	ra, 0
802014a6: e7 80 60 31  	jalr	790(ra)
802014aa: 03 55 84 fd  	lhu	a0, -40(s0)
802014ae: 81 45        	mv	a1, zero
802014b0: 63 09 b5 00  	beq	a0, a1, 0x802014c2 <std.fmt.formatBuf+0x5e>
802014b4: 09 a0        	j	0x802014b6 <std.fmt.formatBuf+0x52>
802014b6: 03 35 04 f8  	ld	a0, -128(s0)
802014ba: 08 65        	ld	a0, 8(a0)
802014bc: 23 34 a4 fc  	sd	a0, -56(s0)
802014c0: 31 a0        	j	0x802014cc <std.fmt.formatBuf+0x68>
802014c2: 03 35 04 fd  	ld	a0, -48(s0)
802014c6: 23 34 a4 fc  	sd	a0, -56(s0)
802014ca: 09 a0        	j	0x802014cc <std.fmt.formatBuf+0x68>
;         const padding = if (width < min_width) min_width - width else 0;
802014cc: 03 35 84 fc  	ld	a0, -56(s0)
802014d0: 83 35 04 fe  	ld	a1, -32(s0)
802014d4: 63 7e b5 00  	bgeu	a0, a1, 0x802014f0 <std.fmt.formatBuf+0x8c>
802014d8: 09 a0        	j	0x802014da <std.fmt.formatBuf+0x76>
802014da: 03 35 04 fe  	ld	a0, -32(s0)
802014de: 83 35 84 fc  	ld	a1, -56(s0)
802014e2: b3 05 b5 40  	sub	a1, a0, a1
802014e6: 23 38 b4 f6  	sd	a1, -144(s0)
802014ea: 63 6c b5 12  	bltu	a0, a1, 0x80201622 <.LBB38_32>
802014ee: 99 a2        	j	0x80201634 <.LBB38_32+0x12>
802014f0: 01 45        	mv	a0, zero
;         const padding = if (width < min_width) min_width - width else 0;
802014f2: 23 30 a4 fc  	sd	a0, -64(s0)
802014f6: 09 a0        	j	0x802014f8 <std.fmt.formatBuf+0x94>
;         if (padding == 0)
802014f8: 03 35 04 fc  	ld	a0, -64(s0)
802014fc: 81 45        	mv	a1, zero
802014fe: 63 13 b5 04  	bne	a0, a1, 0x80201544 <std.fmt.formatBuf+0xe0>
80201502: 09 a0        	j	0x80201504 <std.fmt.formatBuf+0xa0>
;             return writer.writeAll(buf);
80201504: 83 35 04 f8  	ld	a1, -128(s0)
80201508: 03 35 84 f8  	ld	a0, -120(s0)
8020150c: 97 f0 ff ff  	auipc	ra, 1048575
80201510: e7 80 60 5a  	jalr	1446(ra)
80201514: aa 85        	mv	a1, a0
80201516: 41 65        	lui	a0, 16
80201518: 7d 35        	addiw	a0, a0, -1
8020151a: 6d 8d        	and	a0, a0, a1
8020151c: 23 17 b4 fe  	sh	a1, -18(s0)
80201520: 81 45        	mv	a1, zero
80201522: 63 0a b5 00  	beq	a0, a1, 0x80201536 <std.fmt.formatBuf+0xd2>
80201526: 09 a0        	j	0x80201528 <std.fmt.formatBuf+0xc4>
80201528: 03 35 84 f8  	ld	a0, -120(s0)
8020152c: 97 f0 ff ff  	auipc	ra, 1048575
80201530: e7 80 60 37  	jalr	886(ra)
80201534: 11 a0        	j	0x80201538 <std.fmt.formatBuf+0xd4>
80201536: 09 a0        	j	0x80201538 <std.fmt.formatBuf+0xd4>
80201538: 03 15 e4 fe  	lh	a0, -18(s0)
8020153c: 0a 74        	ld	s0, 160(sp)
8020153e: aa 70        	ld	ra, 168(sp)
80201540: 4d 61        	addi	sp, sp, 176
80201542: 82 80        	ret
;         if (padding == 0)
80201544: 09 a0        	j	0x80201546 <std.fmt.formatBuf+0xe2>
;         switch (options.alignment) {
80201546: 03 35 84 f7  	ld	a0, -136(s0)
8020154a: 03 45 05 02  	lbu	a0, 32(a0)
8020154e: 23 34 a4 f6  	sd	a0, -152(s0)
80201552: 89 45        	addi	a1, zero, 2
80201554: 63 0a b5 06  	beq	a0, a1, 0x802015c8 <.LBB38_31+0x56>
80201558: 09 a0        	j	0x8020155a <std.fmt.formatBuf+0xf6>
8020155a: 03 35 84 f6  	ld	a0, -152(s0)
8020155e: 81 45        	mv	a1, zero
;         switch (options.alignment) {
80201560: 63 02 b5 02  	beq	a0, a1, 0x80201584 <.LBB38_31+0x12>
80201564: 09 a0        	j	0x80201566 <std.fmt.formatBuf+0x102>
80201566: 03 35 84 f6  	ld	a0, -152(s0)
8020156a: 85 45        	addi	a1, zero, 1
;         switch (options.alignment) {
8020156c: 63 06 b5 04  	beq	a0, a1, 0x802015b8 <.LBB38_31+0x46>
80201570: 09 a0        	j	0x80201572 <.LBB38_31>

0000000080201572 <.LBB38_31>:
80201572: 17 c5 01 00  	auipc	a0, 28
80201576: 13 05 e5 f1  	addi	a0, a0, -226
8020157a: 81 45        	mv	a1, zero
8020157c: 97 f0 ff ff  	auipc	ra, 1048575
80201580: e7 80 40 b2  	jalr	-1244(ra)
;                 try writer.writeAll(buf);
80201584: 03 35 84 f8  	ld	a0, -120(s0)
80201588: 83 35 04 f8  	ld	a1, -128(s0)
8020158c: 97 f0 ff ff  	auipc	ra, 1048575
80201590: e7 80 60 52  	jalr	1318(ra)
80201594: 83 35 84 f7  	ld	a1, -136(s0)
80201598: 2a 86        	mv	a2, a0
8020159a: 03 35 84 f8  	ld	a0, -120(s0)
8020159e: 23 1f c4 fa  	sh	a2, -66(s0)
;                 try writer.writeByteNTimes(options.fill, padding);
802015a2: 03 36 04 fc  	ld	a2, -64(s0)
802015a6: 83 85 15 02  	lb	a1, 33(a1)
802015aa: 97 00 00 00  	auipc	ra, 0
802015ae: e7 80 e0 5e  	jalr	1518(ra)
802015b2: 23 1e a4 fa  	sh	a0, -68(s0)
;         switch (options.alignment) {
802015b6: 99 a0        	j	0x802015fc <.LBB38_31+0x8a>
;                 const left_padding = padding / 2;
802015b8: 03 35 04 fc  	ld	a0, -64(s0)
802015bc: 23 30 a4 f6  	sd	a0, -160(s0)
802015c0: 01 45        	mv	a0, zero
802015c2: 63 1e a5 06  	bne	a0, a0, 0x8020163e <.LBB38_33>
802015c6: 69 a0        	j	0x80201650 <.LBB38_33+0x12>
;                 try writer.writeByteNTimes(options.fill, padding);
802015c8: 03 35 84 f8  	ld	a0, -120(s0)
802015cc: 83 35 84 f7  	ld	a1, -136(s0)
802015d0: 03 36 04 fc  	ld	a2, -64(s0)
802015d4: 83 85 15 02  	lb	a1, 33(a1)
802015d8: 97 00 00 00  	auipc	ra, 0
802015dc: e7 80 00 5c  	jalr	1472(ra)
802015e0: 83 35 04 f8  	ld	a1, -128(s0)
802015e4: 2a 86        	mv	a2, a0
802015e6: 03 35 84 f8  	ld	a0, -120(s0)
802015ea: 23 10 c4 fa  	sh	a2, -96(s0)
;                 try writer.writeAll(buf);
802015ee: 97 f0 ff ff  	auipc	ra, 1048575
802015f2: e7 80 40 4c  	jalr	1220(ra)
802015f6: 23 1f a4 f8  	sh	a0, -98(s0)
;         switch (options.alignment) {
802015fa: 09 a0        	j	0x802015fc <.LBB38_31+0x8a>
;     if (options.width) |min_width| {
802015fc: 21 a8        	j	0x80201614 <.LBB38_31+0xa2>
;         try writer.writeAll(buf);
802015fe: 83 35 04 f8  	ld	a1, -128(s0)
80201602: 03 35 84 f8  	ld	a0, -120(s0)
80201606: 97 f0 ff ff  	auipc	ra, 1048575
8020160a: e7 80 c0 4a  	jalr	1196(ra)
8020160e: 23 1e a4 f8  	sh	a0, -100(s0)
;     if (options.width) |min_width| {
80201612: 09 a0        	j	0x80201614 <.LBB38_31+0xa2>
80201614: 01 45        	mv	a0, zero
; ) !void {
80201616: 23 17 a4 fe  	sh	a0, -18(s0)
8020161a: 0a 74        	ld	s0, 160(sp)
8020161c: aa 70        	ld	ra, 168(sp)
8020161e: 4d 61        	addi	sp, sp, 176
80201620: 82 80        	ret

0000000080201622 <.LBB38_32>:
;         const padding = if (width < min_width) min_width - width else 0;
80201622: 17 c5 01 00  	auipc	a0, 28
80201626: 13 05 e5 e5  	addi	a0, a0, -418
8020162a: 81 45        	mv	a1, zero
8020162c: 97 f0 ff ff  	auipc	ra, 1048575
80201630: e7 80 40 a7  	jalr	-1420(ra)
80201634: 03 35 04 f7  	ld	a0, -144(s0)
80201638: 23 30 a4 fc  	sd	a0, -64(s0)
8020163c: 75 bd        	j	0x802014f8 <std.fmt.formatBuf+0x94>

000000008020163e <.LBB38_33>:
;                 const left_padding = padding / 2;
8020163e: 17 c5 01 00  	auipc	a0, 28
80201642: 13 05 25 c9  	addi	a0, a0, -878
80201646: 81 45        	mv	a1, zero
80201648: 97 f0 ff ff  	auipc	ra, 1048575
8020164c: e7 80 80 a5  	jalr	-1448(ra)
80201650: 03 35 04 f6  	ld	a0, -160(s0)
80201654: 05 81        	srli	a0, a0, 1
80201656: 23 38 a4 fa  	sd	a0, -80(s0)
;                 const right_padding = (padding + 1) / 2;
8020165a: 83 35 04 fc  	ld	a1, -64(s0)
8020165e: 13 85 15 00  	addi	a0, a1, 1
80201662: 23 3c a4 f4  	sd	a0, -168(s0)
80201666: 63 7c b5 00  	bgeu	a0, a1, 0x8020167e <.LBB38_34+0x12>
8020166a: 09 a0        	j	0x8020166c <.LBB38_34>

000000008020166c <.LBB38_34>:
8020166c: 17 c5 01 00  	auipc	a0, 28
80201670: 13 05 45 e1  	addi	a0, a0, -492
80201674: 81 45        	mv	a1, zero
80201676: 97 f0 ff ff  	auipc	ra, 1048575
8020167a: e7 80 a0 a2  	jalr	-1494(ra)
8020167e: 81 45        	mv	a1, zero
80201680: 05 45        	addi	a0, zero, 1
;                 const right_padding = (padding + 1) / 2;
80201682: 63 1c b5 00  	bne	a0, a1, 0x8020169a <.LBB38_35+0x12>
80201686: 09 a0        	j	0x80201688 <.LBB38_35>

0000000080201688 <.LBB38_35>:
80201688: 17 c5 01 00  	auipc	a0, 28
8020168c: 13 05 85 c4  	addi	a0, a0, -952
80201690: 81 45        	mv	a1, zero
80201692: 97 f0 ff ff  	auipc	ra, 1048575
80201696: e7 80 e0 a0  	jalr	-1522(ra)
8020169a: 03 35 84 f8  	ld	a0, -120(s0)
8020169e: 83 35 84 f7  	ld	a1, -136(s0)
802016a2: 03 36 84 f5  	ld	a2, -168(s0)
802016a6: 05 82        	srli	a2, a2, 1
802016a8: 23 34 c4 fa  	sd	a2, -88(s0)
;                 try writer.writeByteNTimes(options.fill, left_padding);
802016ac: 03 36 04 fb  	ld	a2, -80(s0)
802016b0: 83 85 15 02  	lb	a1, 33(a1)
802016b4: 97 00 00 00  	auipc	ra, 0
802016b8: e7 80 40 4e  	jalr	1252(ra)
802016bc: 83 35 04 f8  	ld	a1, -128(s0)
802016c0: 2a 86        	mv	a2, a0
802016c2: 03 35 84 f8  	ld	a0, -120(s0)
802016c6: 23 13 c4 fa  	sh	a2, -90(s0)
;                 try writer.writeAll(buf);
802016ca: 97 f0 ff ff  	auipc	ra, 1048575
802016ce: e7 80 80 3e  	jalr	1000(ra)
802016d2: 83 35 84 f7  	ld	a1, -136(s0)
802016d6: 2a 86        	mv	a2, a0
802016d8: 03 35 84 f8  	ld	a0, -120(s0)
802016dc: 23 12 c4 fa  	sh	a2, -92(s0)
;                 try writer.writeByteNTimes(options.fill, right_padding);
802016e0: 03 36 84 fa  	ld	a2, -88(s0)
802016e4: 83 85 15 02  	lb	a1, 33(a1)
802016e8: 97 00 00 00  	auipc	ra, 0
802016ec: e7 80 00 4b  	jalr	1200(ra)
802016f0: 23 11 a4 fa  	sh	a0, -94(s0)
;         switch (options.alignment) {
802016f4: 21 b7        	j	0x802015fc <.LBB38_31+0x8a>

00000000802016f6 <std.fmt.ArgState.hasUnusedArgs>:
;     fn hasUnusedArgs(self: *@This()) bool {
802016f6: 01 11        	addi	sp, sp, -32
802016f8: 06 ec        	sd	ra, 24(sp)
802016fa: 22 e8        	sd	s0, 16(sp)
802016fc: 00 10        	addi	s0, sp, 32
802016fe: aa 85        	mv	a1, a0
80201700: 23 30 b4 fe  	sd	a1, -32(s0)
;         return @popCount(ArgSetType, self.used_args) != self.args_len;
80201704: 03 e5 85 00  	lwu	a0, 8(a1)
80201708: 13 56 15 00  	srli	a2, a0, 1
8020170c: b7 56 55 55  	lui	a3, 349525
80201710: 9b 86 56 55  	addiw	a3, a3, 1365
80201714: 75 8e        	and	a2, a2, a3
80201716: 11 8d        	sub	a0, a0, a2
80201718: 13 56 25 00  	srli	a2, a0, 2
8020171c: b7 36 33 03  	lui	a3, 13107
80201720: 9b 86 36 33  	addiw	a3, a3, 819
80201724: b2 06        	slli	a3, a3, 12
80201726: 93 86 36 33  	addi	a3, a3, 819
8020172a: b2 06        	slli	a3, a3, 12
8020172c: 93 86 36 33  	addi	a3, a3, 819
80201730: b2 06        	slli	a3, a3, 12
80201732: 93 86 36 33  	addi	a3, a3, 819
80201736: 75 8e        	and	a2, a2, a3
80201738: 75 8d        	and	a0, a0, a3
8020173a: 32 95        	add	a0, a0, a2
8020173c: 13 56 45 00  	srli	a2, a0, 4
80201740: 32 95        	add	a0, a0, a2
80201742: 37 f6 f0 00  	lui	a2, 3855
80201746: 1b 06 16 0f  	addiw	a2, a2, 241
8020174a: 32 06        	slli	a2, a2, 12
8020174c: 13 06 f6 f0  	addi	a2, a2, -241
80201750: 32 06        	slli	a2, a2, 12
80201752: 13 06 16 0f  	addi	a2, a2, 241
80201756: 32 06        	slli	a2, a2, 12
80201758: 13 06 f6 f0  	addi	a2, a2, -241
8020175c: 71 8d        	and	a0, a0, a2
8020175e: 37 06 01 01  	lui	a2, 4112
80201762: 1b 06 16 10  	addiw	a2, a2, 257
80201766: 42 06        	slli	a2, a2, 16
80201768: 13 06 16 10  	addi	a2, a2, 257
8020176c: 42 06        	slli	a2, a2, 16
8020176e: 13 06 16 10  	addi	a2, a2, 257
80201772: 33 05 c5 02  	mul	a0, a0, a2
80201776: 61 91        	srli	a0, a0, 56
80201778: 8c 69        	ld	a1, 16(a1)
8020177a: 2d 8d        	xor	a0, a0, a1
8020177c: 33 35 a0 00  	snez	a0, a0
80201780: a3 07 a4 fe  	sb	a0, -17(s0)
80201784: 42 64        	ld	s0, 16(sp)
80201786: e2 60        	ld	ra, 24(sp)
80201788: 05 61        	addi	sp, sp, 32
8020178a: 82 80        	ret

000000008020178c <arch.riscv64.sync.hart_id>:
; pub fn hart_id() usize {
8020178c: 01 11        	addi	sp, sp, -32
;     return asm volatile ("mv %[result], tp"
8020178e: 06 ec        	sd	ra, 24(sp)
80201790: 22 e8        	sd	s0, 16(sp)
80201792: 00 10        	addi	s0, sp, 32
80201794: 12 85        	mv	a0, tp
80201796: 23 34 a4 fe  	sd	a0, -24(s0)
8020179a: 42 64        	ld	s0, 16(sp)
8020179c: e2 60        	ld	ra, 24(sp)
8020179e: 05 61        	addi	sp, sp, 32
802017a0: 82 80        	ret

00000000802017a2 <arch.riscv.enable_interrupts>:
; pub fn enable_interrupts() void {
802017a2: 41 11        	addi	sp, sp, -16
802017a4: 06 e4        	sd	ra, 8(sp)
802017a6: 22 e0        	sd	s0, 0(sp)
802017a8: 00 08        	addi	s0, sp, 16
802017aa: 09 45        	addi	a0, zero, 2
;             asm volatile ("csrs " ++ reg_name ++ ", %[arg1]"
802017ac: 73 20 05 10  	csrs	sstatus, a0
; pub fn enable_interrupts() void {
802017b0: 02 64        	ld	s0, 0(sp)
802017b2: a2 60        	ld	ra, 8(sp)
802017b4: 41 01        	addi	sp, sp, 16
802017b6: 82 80        	ret

00000000802017b8 <std.unicode.utf8CountCodepoints>:
; pub fn utf8CountCodepoints(s: []const u8) !usize {
802017b8: 2d 71        	addi	sp, sp, -288
802017ba: 06 ee        	sd	ra, 280(sp)
802017bc: 22 ea        	sd	s0, 272(sp)
802017be: 00 12        	addi	s0, sp, 288
802017c0: 23 30 c4 f6  	sd	a2, -160(s0)
802017c4: 23 34 b4 f6  	sd	a1, -152(s0)
802017c8: 23 38 a4 f6  	sd	a0, -144(s0)
802017cc: 01 45        	mv	a0, zero
;     var len: usize = 0;
802017ce: 23 34 a4 fe  	sd	a0, -24(s0)
;     var i: usize = 0;
802017d2: 23 30 a4 fe  	sd	a0, -32(s0)
;     while (i < s.len) {
802017d6: 09 a0        	j	0x802017d8 <std.unicode.utf8CountCodepoints+0x20>
802017d8: 83 35 04 f6  	ld	a1, -160(s0)
802017dc: 03 35 04 fe  	ld	a0, -32(s0)
802017e0: 8c 65        	ld	a1, 8(a1)
802017e2: 63 7e b5 12  	bgeu	a0, a1, 0x8020191e <std.unicode.utf8CountCodepoints+0x166>
802017e6: 09 a0        	j	0x802017e8 <std.unicode.utf8CountCodepoints+0x30>
;         while (i + N <= s.len) : (i += N) {
802017e8: 09 a0        	j	0x802017ea <std.unicode.utf8CountCodepoints+0x32>
802017ea: 83 35 04 fe  	ld	a1, -32(s0)
802017ee: 13 85 85 00  	addi	a0, a1, 8
802017f2: 23 3c a4 f4  	sd	a0, -168(s0)
802017f6: 63 60 b5 14  	bltu	a0, a1, 0x80201936 <.LBB42_51>
802017fa: b9 a2        	j	0x80201948 <.LBB42_51+0x12>
;             const v = mem.readIntNative(usize, s[i..][0..N]);
802017fc: 03 35 04 f6  	ld	a0, -160(s0)
80201800: 83 35 04 fe  	ld	a1, -32(s0)
80201804: 23 34 b4 f4  	sd	a1, -184(s0)
80201808: 08 65        	ld	a0, 8(a0)
8020180a: 23 38 a4 f4  	sd	a0, -176(s0)
8020180e: 63 7e b5 14  	bgeu	a0, a1, 0x8020196a <.LBB42_52+0x12>
80201812: 99 a2        	j	0x80201958 <.LBB42_52>
;             if (v & MASK != 0) break;
80201814: 19 a8        	j	0x8020182a <std.unicode.utf8CountCodepoints+0x72>
80201816: 09 a0        	j	0x80201818 <std.unicode.utf8CountCodepoints+0x60>
;             len += N;
80201818: 83 35 84 fe  	ld	a1, -24(s0)
8020181c: 13 85 85 00  	addi	a0, a1, 8
80201820: 23 30 a4 f4  	sd	a0, -192(s0)
80201824: 63 67 b5 1e  	bltu	a0, a1, 0x80201a12 <.LBB42_56>
80201828: f5 aa        	j	0x80201a24 <.LBB42_56+0x12>
;         if (i < s.len) {
8020182a: 83 35 04 f6  	ld	a1, -160(s0)
8020182e: 03 35 04 fe  	ld	a0, -32(s0)
80201832: 8c 65        	ld	a1, 8(a1)
80201834: 63 73 b5 0e  	bgeu	a0, a1, 0x8020191a <std.unicode.utf8CountCodepoints+0x162>
80201838: 09 a0        	j	0x8020183a <std.unicode.utf8CountCodepoints+0x82>
;             const n = try utf8ByteSequenceLength(s[i]);
8020183a: 83 35 04 f6  	ld	a1, -160(s0)
8020183e: 03 35 04 fe  	ld	a0, -32(s0)
80201842: 23 3c a4 f2  	sd	a0, -200(s0)
80201846: 8c 65        	ld	a1, 8(a1)
80201848: 63 62 b5 22  	bltu	a0, a1, 0x80201a6c <.LBB42_58+0x12>
8020184c: 39 a4        	j	0x80201a5a <.LBB42_58>
8020184e: 03 35 84 f6  	ld	a0, -152(s0)
80201852: 03 36 04 f7  	ld	a2, -144(s0)
80201856: 83 15 a4 fb  	lh	a1, -70(s0)
8020185a: 23 38 b4 f2  	sd	a1, -208(s0)
8020185e: 23 14 b6 00  	sh	a1, 8(a2)
80201862: 97 f0 ff ff  	auipc	ra, 1048575
80201866: e7 80 00 04  	jalr	64(ra)
8020186a: 03 35 04 f3  	ld	a0, -208(s0)
8020186e: 23 18 a4 fa  	sh	a0, -80(s0)
80201872: 52 64        	ld	s0, 272(sp)
80201874: f2 60        	ld	ra, 280(sp)
80201876: 15 61        	addi	sp, sp, 288
80201878: 82 80        	ret
8020187a: 03 45 84 fb  	lbu	a0, -72(s0)
8020187e: a3 03 a4 fa  	sb	a0, -89(s0)
;             if (i + n > s.len) return error.TruncatedInput;
80201882: 83 35 04 fe  	ld	a1, -32(s0)
80201886: 2e 95        	add	a0, a0, a1
80201888: 23 34 a4 f2  	sd	a0, -216(s0)
8020188c: 63 66 b5 20  	bltu	a0, a1, 0x80201a98 <.LBB42_59>
80201890: 29 ac        	j	0x80201aaa <.LBB42_59+0x12>
80201892: 03 35 84 f6  	ld	a0, -152(s0)
80201896: 03 36 04 f7  	ld	a2, -144(s0)
8020189a: 8d 45        	addi	a1, zero, 3
;             if (i + n > s.len) return error.TruncatedInput;
8020189c: 23 14 b6 00  	sh	a1, 8(a2)
802018a0: 97 f0 ff ff  	auipc	ra, 1048575
802018a4: e7 80 20 00  	jalr	2(ra)
802018a8: 52 64        	ld	s0, 272(sp)
802018aa: f2 60        	ld	ra, 280(sp)
802018ac: 15 61        	addi	sp, sp, 288
802018ae: 82 80        	ret
802018b0: 09 a0        	j	0x802018b2 <std.unicode.utf8CountCodepoints+0xfa>
;             switch (n) {
802018b2: 03 45 74 fa  	lbu	a0, -89(s0)
802018b6: 85 45        	addi	a1, zero, 1
802018b8: 63 06 b5 04  	beq	a0, a1, 0x80201904 <std.unicode.utf8CountCodepoints+0x14c>
802018bc: 09 a0        	j	0x802018be <std.unicode.utf8CountCodepoints+0x106>
;                 else => _ = try utf8Decode(s[i .. i + n]),
802018be: 83 35 04 fe  	ld	a1, -32(s0)
802018c2: 23 3c b4 f0  	sd	a1, -232(s0)
802018c6: 03 45 74 fa  	lbu	a0, -89(s0)
802018ca: 2e 95        	add	a0, a0, a1
802018cc: 23 30 a4 f2  	sd	a0, -224(s0)
802018d0: 63 65 b5 1e  	bltu	a0, a1, 0x80201aba <.LBB42_60>
802018d4: e5 aa        	j	0x80201acc <.LBB42_60+0x12>
802018d6: 03 35 84 f6  	ld	a0, -152(s0)
802018da: 03 36 04 f7  	ld	a2, -144(s0)
802018de: 83 15 c4 f8  	lh	a1, -116(s0)
802018e2: 23 38 b4 f0  	sd	a1, -240(s0)
802018e6: 23 14 b6 00  	sh	a1, 8(a2)
802018ea: 97 f0 ff ff  	auipc	ra, 1048575
802018ee: e7 80 80 fb  	jalr	-72(ra)
802018f2: 03 35 04 f1  	ld	a0, -240(s0)
802018f6: 23 10 a4 f8  	sh	a0, -128(s0)
802018fa: 52 64        	ld	s0, 272(sp)
802018fc: f2 60        	ld	ra, 280(sp)
802018fe: 15 61        	addi	sp, sp, 288
80201900: 82 80        	ret
;             switch (n) {
80201902: 11 a0        	j	0x80201906 <std.unicode.utf8CountCodepoints+0x14e>
80201904: 09 a0        	j	0x80201906 <std.unicode.utf8CountCodepoints+0x14e>
;             i += n;
80201906: 83 35 04 fe  	ld	a1, -32(s0)
8020190a: 03 45 74 fa  	lbu	a0, -89(s0)
8020190e: 2e 95        	add	a0, a0, a1
80201910: 23 34 a4 f0  	sd	a0, -248(s0)
80201914: 63 6e b5 22  	bltu	a0, a1, 0x80201b50 <.LBB42_63>
80201918: a9 a4        	j	0x80201b62 <.LBB42_63+0x12>
;         if (i < s.len) {
8020191a: 09 a0        	j	0x8020191c <std.unicode.utf8CountCodepoints+0x164>
;     while (i < s.len) {
8020191c: 75 bd        	j	0x802017d8 <std.unicode.utf8CountCodepoints+0x20>
;     return len;
8020191e: 83 35 04 f7  	ld	a1, -144(s0)
80201922: 03 35 84 fe  	ld	a0, -24(s0)
80201926: 01 46        	mv	a2, zero
80201928: 23 94 c5 00  	sh	a2, 8(a1)
8020192c: 88 e1        	sd	a0, 0(a1)
8020192e: 52 64        	ld	s0, 272(sp)
80201930: f2 60        	ld	ra, 280(sp)
80201932: 15 61        	addi	sp, sp, 288
80201934: 82 80        	ret

0000000080201936 <.LBB42_51>:
;         while (i + N <= s.len) : (i += N) {
80201936: 17 c5 01 00  	auipc	a0, 28
8020193a: 13 05 a5 b4  	addi	a0, a0, -1206
8020193e: 81 45        	mv	a1, zero
80201940: 97 e0 ff ff  	auipc	ra, 1048574
80201944: e7 80 00 76  	jalr	1888(ra)
80201948: 83 35 84 f5  	ld	a1, -168(s0)
8020194c: 03 35 04 f6  	ld	a0, -160(s0)
80201950: 08 65        	ld	a0, 8(a0)
80201952: e3 75 b5 ea  	bgeu	a0, a1, 0x802017fc <std.unicode.utf8CountCodepoints+0x44>
80201956: d1 bd        	j	0x8020182a <std.unicode.utf8CountCodepoints+0x72>

0000000080201958 <.LBB42_52>:
;             const v = mem.readIntNative(usize, s[i..][0..N]);
80201958: 17 c5 01 00  	auipc	a0, 28
8020195c: 13 05 85 9a  	addi	a0, a0, -1624
80201960: 81 45        	mv	a1, zero
80201962: 97 e0 ff ff  	auipc	ra, 1048574
80201966: e7 80 e0 73  	jalr	1854(ra)
8020196a: 81 45        	mv	a1, zero
8020196c: 05 45        	addi	a0, zero, 1
;             const v = mem.readIntNative(usize, s[i..][0..N]);
8020196e: 63 1c b5 00  	bne	a0, a1, 0x80201986 <.LBB42_53+0x12>
80201972: 09 a0        	j	0x80201974 <.LBB42_53>

0000000080201974 <.LBB42_53>:
80201974: 17 c5 01 00  	auipc	a0, 28
80201978: 13 05 c5 98  	addi	a0, a0, -1652
8020197c: 81 45        	mv	a1, zero
8020197e: 97 e0 ff ff  	auipc	ra, 1048574
80201982: e7 80 20 72  	jalr	1826(ra)
80201986: 03 35 04 f5  	ld	a0, -176(s0)
8020198a: 03 36 84 f4  	ld	a2, -184(s0)
8020198e: 83 35 04 f6  	ld	a1, -160(s0)
80201992: 8c 61        	ld	a1, 0(a1)
80201994: b2 95        	add	a1, a1, a2
80201996: 11 8d        	sub	a0, a0, a2
80201998: 23 30 a4 f0  	sd	a0, -256(s0)
8020199c: 23 38 b4 fc  	sd	a1, -48(s0)
802019a0: 23 3c a4 fc  	sd	a0, -40(s0)
802019a4: 81 45        	mv	a1, zero
802019a6: 05 45        	addi	a0, zero, 1
802019a8: 63 1c b5 00  	bne	a0, a1, 0x802019c0 <.LBB42_54+0x12>
802019ac: 09 a0        	j	0x802019ae <.LBB42_54>

00000000802019ae <.LBB42_54>:
802019ae: 17 c5 01 00  	auipc	a0, 28
802019b2: 13 05 25 95  	addi	a0, a0, -1710
802019b6: 81 45        	mv	a1, zero
802019b8: 97 e0 ff ff  	auipc	ra, 1048574
802019bc: e7 80 80 6e  	jalr	1768(ra)
802019c0: 83 35 04 f0  	ld	a1, -256(s0)
802019c4: 1d 45        	addi	a0, zero, 7
;             const v = mem.readIntNative(usize, s[i..][0..N]);
802019c6: 63 6c b5 00  	bltu	a0, a1, 0x802019de <.LBB42_55+0x12>
802019ca: 09 a0        	j	0x802019cc <.LBB42_55>

00000000802019cc <.LBB42_55>:
802019cc: 17 c5 01 00  	auipc	a0, 28
802019d0: 13 05 45 93  	addi	a0, a0, -1740
802019d4: 81 45        	mv	a1, zero
802019d6: 97 e0 ff ff  	auipc	ra, 1048574
802019da: e7 80 a0 6c  	jalr	1738(ra)
802019de: 03 35 04 fd  	ld	a0, -48(s0)
802019e2: 23 34 a4 fc  	sd	a0, -56(s0)
802019e6: 97 00 00 00  	auipc	ra, 0
802019ea: e7 80 00 2f  	jalr	752(ra)
802019ee: 23 30 a4 fc  	sd	a0, -64(s0)
802019f2: b7 15 10 f0  	lui	a1, 983297
802019f6: 92 05        	slli	a1, a1, 4
802019f8: 93 85 15 10  	addi	a1, a1, 257
802019fc: c2 05        	slli	a1, a1, 16
802019fe: 93 85 15 10  	addi	a1, a1, 257
80201a02: be 05        	slli	a1, a1, 15
80201a04: 93 85 05 08  	addi	a1, a1, 128
;             if (v & MASK != 0) break;
80201a08: 6d 8d        	and	a0, a0, a1
80201a0a: 81 45        	mv	a1, zero
80201a0c: e3 14 b5 e0  	bne	a0, a1, 0x80201814 <std.unicode.utf8CountCodepoints+0x5c>
80201a10: 19 b5        	j	0x80201816 <std.unicode.utf8CountCodepoints+0x5e>

0000000080201a12 <.LBB42_56>:
;             len += N;
80201a12: 17 c5 01 00  	auipc	a0, 28
80201a16: 13 05 e5 a6  	addi	a0, a0, -1426
80201a1a: 81 45        	mv	a1, zero
80201a1c: 97 e0 ff ff  	auipc	ra, 1048574
80201a20: e7 80 40 68  	jalr	1668(ra)
80201a24: 03 35 04 f4  	ld	a0, -192(s0)
80201a28: 23 34 a4 fe  	sd	a0, -24(s0)
;         while (i + N <= s.len) : (i += N) {
80201a2c: 83 35 04 fe  	ld	a1, -32(s0)
80201a30: 13 85 85 00  	addi	a0, a1, 8
80201a34: 23 3c a4 ee  	sd	a0, -264(s0)
80201a38: 63 7c b5 00  	bgeu	a0, a1, 0x80201a50 <.LBB42_57+0x12>
80201a3c: 09 a0        	j	0x80201a3e <.LBB42_57>

0000000080201a3e <.LBB42_57>:
80201a3e: 17 c5 01 00  	auipc	a0, 28
80201a42: 13 05 25 a4  	addi	a0, a0, -1470
80201a46: 81 45        	mv	a1, zero
80201a48: 97 e0 ff ff  	auipc	ra, 1048574
80201a4c: e7 80 80 65  	jalr	1624(ra)
80201a50: 03 35 84 ef  	ld	a0, -264(s0)
80201a54: 23 30 a4 fe  	sd	a0, -32(s0)
80201a58: 49 bb        	j	0x802017ea <std.unicode.utf8CountCodepoints+0x32>

0000000080201a5a <.LBB42_58>:
;             const n = try utf8ByteSequenceLength(s[i]);
80201a5a: 17 c5 01 00  	auipc	a0, 28
80201a5e: 13 05 65 8a  	addi	a0, a0, -1882
80201a62: 81 45        	mv	a1, zero
80201a64: 97 e0 ff ff  	auipc	ra, 1048574
80201a68: e7 80 c0 63  	jalr	1596(ra)
80201a6c: 83 35 84 f6  	ld	a1, -152(s0)
80201a70: 03 36 84 f3  	ld	a2, -200(s0)
80201a74: 03 35 04 f6  	ld	a0, -160(s0)
80201a78: 08 61        	ld	a0, 0(a0)
80201a7a: 32 95        	add	a0, a0, a2
80201a7c: 03 06 05 00  	lb	a2, 0(a0)
80201a80: 13 05 84 fb  	addi	a0, s0, -72
80201a84: 97 00 00 00  	auipc	ra, 0
80201a88: e7 80 a0 2c  	jalr	714(ra)
80201a8c: 03 55 a4 fb  	lhu	a0, -70(s0)
80201a90: 81 45        	mv	a1, zero
80201a92: e3 1e b5 da  	bne	a0, a1, 0x8020184e <std.unicode.utf8CountCodepoints+0x96>
80201a96: d5 b3        	j	0x8020187a <std.unicode.utf8CountCodepoints+0xc2>

0000000080201a98 <.LBB42_59>:
;             if (i + n > s.len) return error.TruncatedInput;
80201a98: 17 c5 01 00  	auipc	a0, 28
80201a9c: 13 05 85 9e  	addi	a0, a0, -1560
80201aa0: 81 45        	mv	a1, zero
80201aa2: 97 e0 ff ff  	auipc	ra, 1048574
80201aa6: e7 80 e0 5f  	jalr	1534(ra)
80201aaa: 83 35 84 f2  	ld	a1, -216(s0)
80201aae: 03 35 04 f6  	ld	a0, -160(s0)
80201ab2: 08 65        	ld	a0, 8(a0)
80201ab4: e3 6f b5 dc  	bltu	a0, a1, 0x80201892 <std.unicode.utf8CountCodepoints+0xda>
80201ab8: e5 bb        	j	0x802018b0 <std.unicode.utf8CountCodepoints+0xf8>

0000000080201aba <.LBB42_60>:
;                 else => _ = try utf8Decode(s[i .. i + n]),
80201aba: 17 c5 01 00  	auipc	a0, 28
80201abe: 13 05 65 9c  	addi	a0, a0, -1594
80201ac2: 81 45        	mv	a1, zero
80201ac4: 97 e0 ff ff  	auipc	ra, 1048574
80201ac8: e7 80 c0 5d  	jalr	1500(ra)
80201acc: 03 35 04 f2  	ld	a0, -224(s0)
80201ad0: 83 35 84 f1  	ld	a1, -232(s0)
80201ad4: 03 36 04 f6  	ld	a2, -160(s0)
80201ad8: 10 66        	ld	a2, 8(a2)
80201ada: 23 38 c4 ee  	sd	a2, -272(s0)
80201ade: 63 7c b5 00  	bgeu	a0, a1, 0x80201af6 <.LBB42_61+0x12>
80201ae2: 09 a0        	j	0x80201ae4 <.LBB42_61>

0000000080201ae4 <.LBB42_61>:
80201ae4: 17 c5 01 00  	auipc	a0, 28
80201ae8: 13 05 c5 81  	addi	a0, a0, -2020
80201aec: 81 45        	mv	a1, zero
80201aee: 97 e0 ff ff  	auipc	ra, 1048574
80201af2: e7 80 20 5b  	jalr	1458(ra)
80201af6: 03 35 04 ef  	ld	a0, -272(s0)
80201afa: 83 35 04 f2  	ld	a1, -224(s0)
80201afe: 63 7c b5 00  	bgeu	a0, a1, 0x80201b16 <.LBB42_62+0x12>
80201b02: 09 a0        	j	0x80201b04 <.LBB42_62>

0000000080201b04 <.LBB42_62>:
80201b04: 17 b5 01 00  	auipc	a0, 27
80201b08: 13 05 c5 7f  	addi	a0, a0, 2044
80201b0c: 81 45        	mv	a1, zero
80201b0e: 97 e0 ff ff  	auipc	ra, 1048574
80201b12: e7 80 20 59  	jalr	1426(ra)
80201b16: 83 35 84 f6  	ld	a1, -152(s0)
80201b1a: 03 35 04 f2  	ld	a0, -224(s0)
80201b1e: 83 36 84 f1  	ld	a3, -232(s0)
80201b22: 03 36 04 f6  	ld	a2, -160(s0)
80201b26: 10 62        	ld	a2, 0(a2)
80201b28: 36 96        	add	a2, a2, a3
80201b2a: 15 8d        	sub	a0, a0, a3
80201b2c: 23 38 c4 f8  	sd	a2, -112(s0)
80201b30: 23 3c a4 f8  	sd	a0, -104(s0)
80201b34: 13 05 84 f8  	addi	a0, s0, -120
80201b38: 13 06 04 f9  	addi	a2, s0, -112
80201b3c: 97 00 00 00  	auipc	ra, 0
80201b40: e7 80 40 34  	jalr	836(ra)
80201b44: 03 55 c4 f8  	lhu	a0, -116(s0)
80201b48: 81 45        	mv	a1, zero
80201b4a: e3 16 b5 d8  	bne	a0, a1, 0x802018d6 <std.unicode.utf8CountCodepoints+0x11e>
80201b4e: 55 bb        	j	0x80201902 <std.unicode.utf8CountCodepoints+0x14a>

0000000080201b50 <.LBB42_63>:
;             i += n;
80201b50: 17 c5 01 00  	auipc	a0, 28
80201b54: 13 05 05 93  	addi	a0, a0, -1744
80201b58: 81 45        	mv	a1, zero
80201b5a: 97 e0 ff ff  	auipc	ra, 1048574
80201b5e: e7 80 60 54  	jalr	1350(ra)
80201b62: 03 35 84 f0  	ld	a0, -248(s0)
80201b66: 23 30 a4 fe  	sd	a0, -32(s0)
;             len += 1;
80201b6a: 83 35 84 fe  	ld	a1, -24(s0)
80201b6e: 13 85 15 00  	addi	a0, a1, 1
80201b72: 23 34 a4 ee  	sd	a0, -280(s0)
80201b76: 63 7c b5 00  	bgeu	a0, a1, 0x80201b8e <.LBB42_64+0x12>
80201b7a: 09 a0        	j	0x80201b7c <.LBB42_64>

0000000080201b7c <.LBB42_64>:
80201b7c: 17 c5 01 00  	auipc	a0, 28
80201b80: 13 05 45 90  	addi	a0, a0, -1788
80201b84: 81 45        	mv	a1, zero
80201b86: 97 e0 ff ff  	auipc	ra, 1048574
80201b8a: e7 80 a0 51  	jalr	1306(ra)
80201b8e: 03 35 84 ee  	ld	a0, -280(s0)
80201b92: 23 34 a4 fe  	sd	a0, -24(s0)
;         if (i < s.len) {
80201b96: 59 b3        	j	0x8020191c <std.unicode.utf8CountCodepoints+0x164>

0000000080201b98 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).writeByteNTimes>:
;         pub fn writeByteNTimes(self: Self, byte: u8, n: usize) Error!void {
80201b98: 65 71        	addi	sp, sp, -400
80201b9a: 06 e7        	sd	ra, 392(sp)
80201b9c: 22 e3        	sd	s0, 384(sp)
80201b9e: 00 0b        	addi	s0, sp, 400
80201ba0: 23 34 a4 e8  	sd	a0, -376(s0)
80201ba4: a3 0e b4 e8  	sb	a1, -355(s0)
80201ba8: 23 38 c4 e8  	sd	a2, -368(s0)
80201bac: 13 05 e4 ee  	addi	a0, s0, -274
80201bb0: 93 05 a0 0a  	addi	a1, zero, 170
80201bb4: 13 06 00 10  	addi	a2, zero, 256
;             var bytes: [256]u8 = undefined;
80201bb8: 97 b0 01 00  	auipc	ra, 27
80201bbc: e7 80 80 15  	jalr	344(ra)
80201bc0: 81 45        	mv	a1, zero
80201bc2: 05 45        	addi	a0, zero, 1
;             mem.set(u8, bytes[0..], byte);
80201bc4: 63 1c b5 04  	bne	a0, a1, 0x80201c1c <.LBB43_12+0x12>
80201bc8: 89 a0        	j	0x80201c0a <.LBB43_12>
;             while (remaining > 0) {
80201bca: 03 35 04 ec  	ld	a0, -320(s0)
80201bce: 81 45        	mv	a1, zero
80201bd0: 63 06 b5 02  	beq	a0, a1, 0x80201bfc <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).writeByteNTimes+0x64>
80201bd4: 09 a0        	j	0x80201bd6 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).writeByteNTimes+0x3e>
;                 const to_write = std.math.min(remaining, bytes.len);
80201bd6: 03 35 04 ec  	ld	a0, -320(s0)
80201bda: 23 3c a4 ea  	sd	a0, -328(s0)
80201bde: 93 05 00 10  	addi	a1, zero, 256
80201be2: 97 10 00 00  	auipc	ra, 1
80201be6: e7 80 40 cd  	jalr	-812(ra)
80201bea: 23 38 a4 ea  	sd	a0, -336(s0)
80201bee: 23 30 a4 e8  	sd	a0, -384(s0)
80201bf2: 81 45        	mv	a1, zero
80201bf4: 05 45        	addi	a0, zero, 1
;                 try self.writeAll(bytes[0..to_write]);
80201bf6: 63 15 b5 06  	bne	a0, a1, 0x80201c60 <.LBB43_13+0x12>
80201bfa: 91 a8        	j	0x80201c4e <.LBB43_13>
80201bfc: 01 45        	mv	a0, zero
;         pub fn writeByteNTimes(self: Self, byte: u8, n: usize) Error!void {
80201bfe: 23 17 a4 fe  	sh	a0, -18(s0)
80201c02: 1a 64        	ld	s0, 384(sp)
80201c04: ba 60        	ld	ra, 392(sp)
80201c06: 59 61        	addi	sp, sp, 400
80201c08: 82 80        	ret

0000000080201c0a <.LBB43_12>:
;             mem.set(u8, bytes[0..], byte);
80201c0a: 17 b5 01 00  	auipc	a0, 27
80201c0e: 13 05 65 6f  	addi	a0, a0, 1782
80201c12: 81 45        	mv	a1, zero
80201c14: 97 e0 ff ff  	auipc	ra, 1048574
80201c18: e7 80 c0 48  	jalr	1164(ra)
80201c1c: 13 05 e4 ee  	addi	a0, s0, -274
;             mem.set(u8, bytes[0..], byte);
80201c20: 23 30 a4 ee  	sd	a0, -288(s0)
80201c24: 83 05 d4 e9  	lb	a1, -355(s0)
80201c28: a3 0f b4 ec  	sb	a1, -289(s0)
80201c2c: 23 34 a4 ec  	sd	a0, -312(s0)
80201c30: 13 05 00 10  	addi	a0, zero, 256
80201c34: 23 38 a4 ec  	sd	a0, -304(s0)
80201c38: 13 05 84 ec  	addi	a0, s0, -312
80201c3c: 97 10 00 00  	auipc	ra, 1
80201c40: e7 80 00 c2  	jalr	-992(ra)
;             var remaining: usize = n;
80201c44: 03 35 04 e9  	ld	a0, -368(s0)
80201c48: 23 30 a4 ec  	sd	a0, -320(s0)
;             while (remaining > 0) {
80201c4c: bd bf        	j	0x80201bca <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).writeByteNTimes+0x32>

0000000080201c4e <.LBB43_13>:
;                 try self.writeAll(bytes[0..to_write]);
80201c4e: 17 b5 01 00  	auipc	a0, 27
80201c52: 13 05 25 6b  	addi	a0, a0, 1714
80201c56: 81 45        	mv	a1, zero
80201c58: 97 e0 ff ff  	auipc	ra, 1048574
80201c5c: e7 80 80 44  	jalr	1096(ra)
80201c60: 03 35 04 e8  	ld	a0, -384(s0)
80201c64: 93 05 10 10  	addi	a1, zero, 257
;                 try self.writeAll(bytes[0..to_write]);
80201c68: 63 6c b5 00  	bltu	a0, a1, 0x80201c80 <.LBB43_14+0x12>
80201c6c: 09 a0        	j	0x80201c6e <.LBB43_14>

0000000080201c6e <.LBB43_14>:
80201c6e: 17 b5 01 00  	auipc	a0, 27
80201c72: 13 05 25 69  	addi	a0, a0, 1682
80201c76: 81 45        	mv	a1, zero
80201c78: 97 e0 ff ff  	auipc	ra, 1048574
80201c7c: e7 80 80 42  	jalr	1064(ra)
80201c80: 03 35 84 e8  	ld	a0, -376(s0)
80201c84: 83 35 04 e8  	ld	a1, -384(s0)
80201c88: 13 06 e4 ee  	addi	a2, s0, -274
;                 try self.writeAll(bytes[0..to_write]);
80201c8c: 23 30 c4 ea  	sd	a2, -352(s0)
80201c90: 23 34 b4 ea  	sd	a1, -344(s0)
80201c94: 93 05 04 ea  	addi	a1, s0, -352
80201c98: 97 f0 ff ff  	auipc	ra, 1048575
80201c9c: e7 80 a0 e1  	jalr	-486(ra)
80201ca0: 23 1f a4 e8  	sh	a0, -354(s0)
;                 remaining -= to_write;
80201ca4: 03 35 04 ec  	ld	a0, -320(s0)
80201ca8: 83 35 04 eb  	ld	a1, -336(s0)
80201cac: b3 05 b5 40  	sub	a1, a0, a1
80201cb0: 23 3c b4 e6  	sd	a1, -392(s0)
80201cb4: 63 7c b5 00  	bgeu	a0, a1, 0x80201ccc <.LBB43_15+0x12>
80201cb8: 09 a0        	j	0x80201cba <.LBB43_15>

0000000080201cba <.LBB43_15>:
80201cba: 17 b5 01 00  	auipc	a0, 27
80201cbe: 13 05 65 7c  	addi	a0, a0, 1990
80201cc2: 81 45        	mv	a1, zero
80201cc4: 97 e0 ff ff  	auipc	ra, 1048574
80201cc8: e7 80 c0 3d  	jalr	988(ra)
80201ccc: 03 35 84 e7  	ld	a0, -392(s0)
80201cd0: 23 30 a4 ec  	sd	a0, -320(s0)
;             while (remaining > 0) {
80201cd4: dd bd        	j	0x80201bca <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).writeByteNTimes+0x32>

0000000080201cd6 <std.mem.readIntNative>:
; pub fn readIntNative(comptime T: type, bytes: *const [@divExact(@typeInfo(T).Int.bits, 8)]u8) T {
80201cd6: 79 71        	addi	sp, sp, -48
80201cd8: 06 f4        	sd	ra, 40(sp)
80201cda: 22 f0        	sd	s0, 32(sp)
80201cdc: 00 18        	addi	s0, sp, 48
80201cde: 23 30 a4 fe  	sd	a0, -32(s0)
;     return @ptrCast(*align(1) const T, bytes).*;
80201ce2: aa 85        	mv	a1, a0
80201ce4: 23 3c b4 fc  	sd	a1, -40(s0)
80201ce8: 81 45        	mv	a1, zero
80201cea: 63 1c b5 00  	bne	a0, a1, 0x80201d02 <.LBB44_3+0x12>
80201cee: 09 a0        	j	0x80201cf0 <.LBB44_3>

0000000080201cf0 <.LBB44_3>:
80201cf0: 17 c5 01 00  	auipc	a0, 28
80201cf4: 13 05 85 80  	addi	a0, a0, -2040
80201cf8: 81 45        	mv	a1, zero
80201cfa: 97 e0 ff ff  	auipc	ra, 1048574
80201cfe: e7 80 60 3a  	jalr	934(ra)
80201d02: 03 35 84 fd  	ld	a0, -40(s0)
80201d06: 03 46 05 00  	lbu	a2, 0(a0)
80201d0a: 83 45 15 00  	lbu	a1, 1(a0)
80201d0e: a2 05        	slli	a1, a1, 8
80201d10: 4d 8e        	or	a2, a2, a1
80201d12: 83 46 25 00  	lbu	a3, 2(a0)
80201d16: 83 45 35 00  	lbu	a1, 3(a0)
80201d1a: a2 05        	slli	a1, a1, 8
80201d1c: d5 8d        	or	a1, a1, a3
80201d1e: c2 05        	slli	a1, a1, 16
80201d20: d1 8d        	or	a1, a1, a2
80201d22: 83 46 45 00  	lbu	a3, 4(a0)
80201d26: 03 46 55 00  	lbu	a2, 5(a0)
80201d2a: 22 06        	slli	a2, a2, 8
80201d2c: 55 8e        	or	a2, a2, a3
80201d2e: 83 46 65 00  	lbu	a3, 6(a0)
80201d32: 03 45 75 00  	lbu	a0, 7(a0)
80201d36: 22 05        	slli	a0, a0, 8
80201d38: 55 8d        	or	a0, a0, a3
80201d3a: 42 05        	slli	a0, a0, 16
80201d3c: 51 8d        	or	a0, a0, a2
80201d3e: 02 15        	slli	a0, a0, 32
80201d40: 4d 8d        	or	a0, a0, a1
80201d42: 23 34 a4 fe  	sd	a0, -24(s0)
80201d46: 02 74        	ld	s0, 32(sp)
80201d48: a2 70        	ld	ra, 40(sp)
80201d4a: 45 61        	addi	sp, sp, 48
80201d4c: 82 80        	ret

0000000080201d4e <std.unicode.utf8ByteSequenceLength>:
; pub fn utf8ByteSequenceLength(first_byte: u8) !u3 {
80201d4e: 39 71        	addi	sp, sp, -64
80201d50: 06 fc        	sd	ra, 56(sp)
80201d52: 22 f8        	sd	s0, 48(sp)
80201d54: 80 00        	addi	s0, sp, 64
80201d56: 23 38 b4 fc  	sd	a1, -48(s0)
80201d5a: 23 3c a4 fc  	sd	a0, -40(s0)
80201d5e: 13 15 86 03  	slli	a0, a2, 56
80201d62: 61 95        	srai	a0, a0, 56
80201d64: a3 07 c4 fe  	sb	a2, -17(s0)
;     return switch (first_byte) {
80201d68: 93 75 f6 0f  	andi	a1, a2, 255
80201d6c: 23 30 b4 fe  	sd	a1, -32(s0)
80201d70: 81 45        	mv	a1, zero
;         0b0000_0000...0b0111_1111 => 1,
80201d72: 63 42 b5 02  	blt	a0, a1, 0x80201d96 <.LBB45_14+0xe>
80201d76: 09 a0        	j	0x80201d78 <std.unicode.utf8ByteSequenceLength+0x2a>
80201d78: 83 35 84 fd  	ld	a1, -40(s0)
80201d7c: 01 45        	mv	a0, zero
;         0b0000_0000...0b0111_1111 => 1,
80201d7e: 23 91 a5 00  	sh	a0, 2(a1)
80201d82: 05 45        	addi	a0, zero, 1
80201d84: 23 80 a5 00  	sb	a0, 0(a1)

0000000080201d88 <.LBB45_14>:
80201d88: 17 35 02 00  	auipc	a0, 35
80201d8c: 13 05 85 06  	addi	a0, a0, 104
;     return switch (first_byte) {
80201d90: 23 34 a4 fc  	sd	a0, -56(s0)
80201d94: d1 a0        	j	0x80201e58 <.LBB45_18+0xe>
;         0b1100_0000...0b1101_1111 => 2,
80201d96: 03 36 04 fe  	ld	a2, -32(s0)
80201d9a: 13 35 06 0c  	sltiu	a0, a2, 192
80201d9e: 93 05 f0 0d  	addi	a1, zero, 223
80201da2: b3 b5 c5 00  	sltu	a1, a1, a2
80201da6: 4d 8d        	or	a0, a0, a1
80201da8: 81 45        	mv	a1, zero
80201daa: 63 12 b5 02  	bne	a0, a1, 0x80201dce <.LBB45_15+0xe>
80201dae: 09 a0        	j	0x80201db0 <.LBB45_14+0x28>
80201db0: 83 35 84 fd  	ld	a1, -40(s0)
80201db4: 01 45        	mv	a0, zero
;         0b1100_0000...0b1101_1111 => 2,
80201db6: 23 91 a5 00  	sh	a0, 2(a1)
80201dba: 09 45        	addi	a0, zero, 2
80201dbc: 23 80 a5 00  	sb	a0, 0(a1)

0000000080201dc0 <.LBB45_15>:
80201dc0: 17 35 02 00  	auipc	a0, 35
80201dc4: 13 05 45 03  	addi	a0, a0, 52
;     return switch (first_byte) {
80201dc8: 23 34 a4 fc  	sd	a0, -56(s0)
80201dcc: 71 a0        	j	0x80201e58 <.LBB45_18+0xe>
;         0b1110_0000...0b1110_1111 => 3,
80201dce: 03 36 04 fe  	ld	a2, -32(s0)
80201dd2: 13 35 06 0e  	sltiu	a0, a2, 224
80201dd6: 93 05 f0 0e  	addi	a1, zero, 239
80201dda: b3 b5 c5 00  	sltu	a1, a1, a2
80201dde: 4d 8d        	or	a0, a0, a1
80201de0: 81 45        	mv	a1, zero
80201de2: 63 12 b5 02  	bne	a0, a1, 0x80201e06 <.LBB45_16+0xe>
80201de6: 09 a0        	j	0x80201de8 <.LBB45_15+0x28>
80201de8: 83 35 84 fd  	ld	a1, -40(s0)
80201dec: 01 45        	mv	a0, zero
;         0b1110_0000...0b1110_1111 => 3,
80201dee: 23 91 a5 00  	sh	a0, 2(a1)
80201df2: 0d 45        	addi	a0, zero, 3
80201df4: 23 80 a5 00  	sb	a0, 0(a1)

0000000080201df8 <.LBB45_16>:
80201df8: 17 35 02 00  	auipc	a0, 35
80201dfc: 13 05 05 00  	mv	a0, a0
;     return switch (first_byte) {
80201e00: 23 34 a4 fc  	sd	a0, -56(s0)
80201e04: 91 a8        	j	0x80201e58 <.LBB45_18+0xe>
;         0b1111_0000...0b1111_0111 => 4,
80201e06: 03 36 04 fe  	ld	a2, -32(s0)
80201e0a: 13 35 06 0f  	sltiu	a0, a2, 240
80201e0e: 93 05 70 0f  	addi	a1, zero, 247
80201e12: b3 b5 c5 00  	sltu	a1, a1, a2
80201e16: 4d 8d        	or	a0, a0, a1
80201e18: 81 45        	mv	a1, zero
80201e1a: 63 12 b5 02  	bne	a0, a1, 0x80201e3e <.LBB45_17+0xe>
80201e1e: 09 a0        	j	0x80201e20 <.LBB45_16+0x28>
80201e20: 83 35 84 fd  	ld	a1, -40(s0)
80201e24: 01 45        	mv	a0, zero
;         0b1111_0000...0b1111_0111 => 4,
80201e26: 23 91 a5 00  	sh	a0, 2(a1)
80201e2a: 11 45        	addi	a0, zero, 4
80201e2c: 23 80 a5 00  	sb	a0, 0(a1)

0000000080201e30 <.LBB45_17>:
80201e30: 17 35 02 00  	auipc	a0, 35
80201e34: 13 05 c5 fc  	addi	a0, a0, -52
;     return switch (first_byte) {
80201e38: 23 34 a4 fc  	sd	a0, -56(s0)
80201e3c: 31 a8        	j	0x80201e58 <.LBB45_18+0xe>
80201e3e: 09 a0        	j	0x80201e40 <.LBB45_17+0x10>
80201e40: 83 35 84 fd  	ld	a1, -40(s0)
80201e44: 09 45        	addi	a0, zero, 2
;         else => error.Utf8InvalidStartByte,
80201e46: 23 91 a5 00  	sh	a0, 2(a1)

0000000080201e4a <.LBB45_18>:
80201e4a: 17 35 02 00  	auipc	a0, 35
80201e4e: 13 05 65 fb  	addi	a0, a0, -74
;     return switch (first_byte) {
80201e52: 23 34 a4 fc  	sd	a0, -56(s0)
80201e56: 09 a0        	j	0x80201e58 <.LBB45_18+0xe>
80201e58: 03 35 84 fc  	ld	a0, -56(s0)
80201e5c: 03 55 25 00  	lhu	a0, 2(a0)
80201e60: 81 45        	mv	a1, zero
80201e62: 63 0a b5 00  	beq	a0, a1, 0x80201e76 <.LBB45_18+0x2c>
80201e66: 09 a0        	j	0x80201e68 <.LBB45_18+0x1e>
80201e68: 03 35 04 fd  	ld	a0, -48(s0)
80201e6c: 97 f0 ff ff  	auipc	ra, 1048575
80201e70: e7 80 60 a3  	jalr	-1482(ra)
80201e74: 11 a0        	j	0x80201e78 <.LBB45_18+0x2e>
80201e76: 09 a0        	j	0x80201e78 <.LBB45_18+0x2e>
80201e78: 42 74        	ld	s0, 48(sp)
80201e7a: e2 70        	ld	ra, 56(sp)
80201e7c: 21 61        	addi	sp, sp, 64
80201e7e: 82 80        	ret

0000000080201e80 <std.unicode.utf8Decode>:
; pub fn utf8Decode(bytes: []const u8) Utf8DecodeError!u21 {
80201e80: 39 71        	addi	sp, sp, -64
80201e82: 06 fc        	sd	ra, 56(sp)
80201e84: 22 f8        	sd	s0, 48(sp)
80201e86: 80 00        	addi	s0, sp, 64
80201e88: 23 34 c4 fc  	sd	a2, -56(s0)
80201e8c: 23 38 b4 fc  	sd	a1, -48(s0)
;     return switch (bytes.len) {
80201e90: 23 3c a4 fc  	sd	a0, -40(s0)
80201e94: 08 66        	ld	a0, 8(a2)
80201e96: 23 30 a4 fe  	sd	a0, -32(s0)
80201e9a: 85 45        	addi	a1, zero, 1
80201e9c: 63 0e b5 02  	beq	a0, a1, 0x80201ed8 <.LBB46_15+0x12>
80201ea0: 09 a0        	j	0x80201ea2 <std.unicode.utf8Decode+0x22>
80201ea2: 03 35 04 fe  	ld	a0, -32(s0)
80201ea6: 89 45        	addi	a1, zero, 2
;     return switch (bytes.len) {
80201ea8: 63 0f b5 02  	beq	a0, a1, 0x80201ee6 <.LBB46_15+0x20>
80201eac: 09 a0        	j	0x80201eae <std.unicode.utf8Decode+0x2e>
80201eae: 03 35 04 fe  	ld	a0, -32(s0)
80201eb2: 8d 45        	addi	a1, zero, 3
;     return switch (bytes.len) {
80201eb4: 63 0c b5 04  	beq	a0, a1, 0x80201f0c <.LBB46_15+0x46>
80201eb8: 09 a0        	j	0x80201eba <std.unicode.utf8Decode+0x3a>
80201eba: 03 35 04 fe  	ld	a0, -32(s0)
80201ebe: 91 45        	addi	a1, zero, 4
;     return switch (bytes.len) {
80201ec0: 63 09 b5 06  	beq	a0, a1, 0x80201f32 <.LBB46_15+0x6c>
80201ec4: 09 a0        	j	0x80201ec6 <.LBB46_15>

0000000080201ec6 <.LBB46_15>:
;         else => unreachable,
80201ec6: 17 b5 01 00  	auipc	a0, 27
80201eca: 13 05 a5 5c  	addi	a0, a0, 1482
80201ece: 81 45        	mv	a1, zero
80201ed0: 97 e0 ff ff  	auipc	ra, 1048574
80201ed4: e7 80 00 1d  	jalr	464(ra)
;         1 => @as(u21, bytes[0]),
80201ed8: 03 35 84 fc  	ld	a0, -56(s0)
80201edc: 08 65        	ld	a0, 8(a0)
80201ede: 81 45        	mv	a1, zero
80201ee0: 63 19 b5 0a  	bne	a0, a1, 0x80201f92 <.LBB46_16+0x12>
80201ee4: 71 a8        	j	0x80201f80 <.LBB46_16>
;         2 => utf8Decode2(bytes),
80201ee6: 03 35 84 fd  	ld	a0, -40(s0)
80201eea: 03 36 84 fc  	ld	a2, -56(s0)
80201eee: 83 35 04 fd  	ld	a1, -48(s0)
80201ef2: 97 00 00 00  	auipc	ra, 0
80201ef6: e7 80 20 0d  	jalr	210(ra)
80201efa: 03 35 84 fd  	ld	a0, -40(s0)
80201efe: 4c 41        	lw	a1, 4(a0)
80201f00: 4c c1        	sw	a1, 4(a0)
80201f02: 0c 41        	lw	a1, 0(a0)
80201f04: 0c c1        	sw	a1, 0(a0)
;     return switch (bytes.len) {
80201f06: 23 30 a4 fc  	sd	a0, -64(s0)
80201f0a: b9 a0        	j	0x80201f58 <.LBB46_15+0x92>
;         3 => utf8Decode3(bytes),
80201f0c: 03 35 84 fd  	ld	a0, -40(s0)
80201f10: 03 36 84 fc  	ld	a2, -56(s0)
80201f14: 83 35 04 fd  	ld	a1, -48(s0)
80201f18: 97 00 00 00  	auipc	ra, 0
80201f1c: e7 80 40 27  	jalr	628(ra)
80201f20: 03 35 84 fd  	ld	a0, -40(s0)
80201f24: 4c 41        	lw	a1, 4(a0)
80201f26: 4c c1        	sw	a1, 4(a0)
80201f28: 0c 41        	lw	a1, 0(a0)
80201f2a: 0c c1        	sw	a1, 0(a0)
;     return switch (bytes.len) {
80201f2c: 23 30 a4 fc  	sd	a0, -64(s0)
80201f30: 25 a0        	j	0x80201f58 <.LBB46_15+0x92>
;         4 => utf8Decode4(bytes),
80201f32: 03 35 84 fd  	ld	a0, -40(s0)
80201f36: 03 36 84 fc  	ld	a2, -56(s0)
80201f3a: 83 35 04 fd  	ld	a1, -48(s0)
80201f3e: 97 00 00 00  	auipc	ra, 0
80201f42: e7 80 20 56  	jalr	1378(ra)
80201f46: 03 35 84 fd  	ld	a0, -40(s0)
80201f4a: 4c 41        	lw	a1, 4(a0)
80201f4c: 4c c1        	sw	a1, 4(a0)
80201f4e: 0c 41        	lw	a1, 0(a0)
80201f50: 0c c1        	sw	a1, 0(a0)
;     return switch (bytes.len) {
80201f52: 23 30 a4 fc  	sd	a0, -64(s0)
80201f56: 09 a0        	j	0x80201f58 <.LBB46_15+0x92>
80201f58: 03 35 04 fc  	ld	a0, -64(s0)
80201f5c: 03 55 45 00  	lhu	a0, 4(a0)
80201f60: 81 45        	mv	a1, zero
80201f62: 63 0a b5 00  	beq	a0, a1, 0x80201f76 <.LBB46_15+0xb0>
80201f66: 09 a0        	j	0x80201f68 <.LBB46_15+0xa2>
80201f68: 03 35 04 fd  	ld	a0, -48(s0)
80201f6c: 97 f0 ff ff  	auipc	ra, 1048575
80201f70: e7 80 60 93  	jalr	-1738(ra)
80201f74: 11 a0        	j	0x80201f78 <.LBB46_15+0xb2>
80201f76: 09 a0        	j	0x80201f78 <.LBB46_15+0xb2>
80201f78: 42 74        	ld	s0, 48(sp)
80201f7a: e2 70        	ld	ra, 56(sp)
80201f7c: 21 61        	addi	sp, sp, 64
80201f7e: 82 80        	ret

0000000080201f80 <.LBB46_16>:
;         1 => @as(u21, bytes[0]),
80201f80: 17 b5 01 00  	auipc	a0, 27
80201f84: 13 05 05 38  	addi	a0, a0, 896
80201f88: 81 45        	mv	a1, zero
80201f8a: 97 e0 ff ff  	auipc	ra, 1048574
80201f8e: e7 80 60 11  	jalr	278(ra)
80201f92: 03 36 84 fd  	ld	a2, -40(s0)
80201f96: 03 35 84 fc  	ld	a0, -56(s0)
80201f9a: 08 61        	ld	a0, 0(a0)
80201f9c: 83 45 05 00  	lbu	a1, 0(a0)
80201fa0: 01 45        	mv	a0, zero
80201fa2: 23 12 a6 00  	sh	a0, 4(a2)
80201fa6: 23 01 a6 00  	sb	a0, 2(a2)
80201faa: 23 10 b6 00  	sh	a1, 0(a2)
80201fae: 23 16 a4 fe  	sh	a0, -20(s0)
80201fb2: 23 14 b4 fe  	sh	a1, -24(s0)
80201fb6: 23 05 a4 fe  	sb	a0, -22(s0)
80201fba: 13 05 84 fe  	addi	a0, s0, -24
;     return switch (bytes.len) {
80201fbe: 23 30 a4 fc  	sd	a0, -64(s0)
80201fc2: 59 bf        	j	0x80201f58 <.LBB46_15+0x92>

0000000080201fc4 <std.unicode.utf8Decode2>:
; pub fn utf8Decode2(bytes: []const u8) Utf8Decode2Error!u21 {
80201fc4: 39 71        	addi	sp, sp, -64
80201fc6: 06 fc        	sd	ra, 56(sp)
80201fc8: 22 f8        	sd	s0, 48(sp)
80201fca: 80 00        	addi	s0, sp, 64
80201fcc: 23 30 c4 fe  	sd	a2, -32(s0)
80201fd0: 23 38 b4 fc  	sd	a1, -48(s0)
;     assert(bytes.len == 2);
80201fd4: 23 3c a4 fc  	sd	a0, -40(s0)
80201fd8: 08 66        	ld	a0, 8(a2)
80201fda: 79 15        	addi	a0, a0, -2
80201fdc: 13 35 15 00  	seqz	a0, a0
80201fe0: 97 e0 ff ff  	auipc	ra, 1048574
80201fe4: e7 80 a0 17  	jalr	378(ra)
80201fe8: 03 36 04 fe  	ld	a2, -32(s0)
;     assert(bytes[0] & 0b11100000 == 0b11000000);
80201fec: 08 66        	ld	a0, 8(a2)
80201fee: 81 45        	mv	a1, zero
80201ff0: 63 1c b5 08  	bne	a0, a1, 0x80202088 <.LBB47_17+0x12>
80201ff4: 49 a0        	j	0x80202076 <.LBB47_17>
80201ff6: 03 35 04 fd  	ld	a0, -48(s0)
80201ffa: 03 36 84 fd  	ld	a2, -40(s0)
80201ffe: 91 45        	addi	a1, zero, 4
;     if (bytes[1] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;
80202000: 23 12 b6 00  	sh	a1, 4(a2)
80202004: 97 f0 ff ff  	auipc	ra, 1048575
80202008: e7 80 e0 89  	jalr	-1890(ra)
8020200c: 42 74        	ld	s0, 48(sp)
8020200e: e2 70        	ld	ra, 56(sp)
80202010: 21 61        	addi	sp, sp, 64
80202012: 82 80        	ret
80202014: 09 a0        	j	0x80202016 <std.unicode.utf8Decode2+0x52>
;     value <<= 6;
80202016: 03 05 e4 fe  	lb	a0, -18(s0)
8020201a: 93 15 05 01  	slli	a1, a0, 16
8020201e: 03 55 c4 fe  	lhu	a0, -20(s0)
80202022: 4d 8d        	or	a0, a0, a1
80202024: 23 34 a4 fc  	sd	a0, -56(s0)
80202028: 81 45        	mv	a1, zero
8020202a: 05 45        	addi	a0, zero, 1
8020202c: 63 1b b5 0e  	bne	a0, a1, 0x80202122 <.LBB47_20+0x12>
80202030: c5 a0        	j	0x80202110 <.LBB47_20>
80202032: 03 35 04 fd  	ld	a0, -48(s0)
80202036: 03 36 84 fd  	ld	a2, -40(s0)
8020203a: 95 45        	addi	a1, zero, 5
;     if (value < 0x80) return error.Utf8OverlongEncoding;
8020203c: 23 12 b6 00  	sh	a1, 4(a2)
80202040: 97 f0 ff ff  	auipc	ra, 1048575
80202044: e7 80 20 86  	jalr	-1950(ra)
80202048: 42 74        	ld	s0, 48(sp)
8020204a: e2 70        	ld	ra, 56(sp)
8020204c: 21 61        	addi	sp, sp, 64
8020204e: 82 80        	ret
80202050: 09 a0        	j	0x80202052 <std.unicode.utf8Decode2+0x8e>
;     return value;
80202052: 83 35 84 fd  	ld	a1, -40(s0)
80202056: 03 45 e4 fe  	lbu	a0, -18(s0)
8020205a: 03 56 c4 fe  	lhu	a2, -20(s0)
8020205e: 81 46        	mv	a3, zero
80202060: 23 92 d5 00  	sh	a3, 4(a1)
80202064: 23 90 c5 00  	sh	a2, 0(a1)
80202068: 7d 89        	andi	a0, a0, 31
8020206a: 23 81 a5 00  	sb	a0, 2(a1)
8020206e: 42 74        	ld	s0, 48(sp)
80202070: e2 70        	ld	ra, 56(sp)
80202072: 21 61        	addi	sp, sp, 64
80202074: 82 80        	ret

0000000080202076 <.LBB47_17>:
;     assert(bytes[0] & 0b11100000 == 0b11000000);
80202076: 17 b5 01 00  	auipc	a0, 27
8020207a: 13 05 a5 28  	addi	a0, a0, 650
8020207e: 81 45        	mv	a1, zero
80202080: 97 e0 ff ff  	auipc	ra, 1048574
80202084: e7 80 00 02  	jalr	32(ra)
80202088: 03 35 04 fe  	ld	a0, -32(s0)
8020208c: 08 61        	ld	a0, 0(a0)
8020208e: 03 45 05 00  	lbu	a0, 0(a0)
80202092: 13 75 05 0e  	andi	a0, a0, 224
80202096: 13 05 05 f4  	addi	a0, a0, -192
8020209a: 13 35 15 00  	seqz	a0, a0
8020209e: 97 e0 ff ff  	auipc	ra, 1048574
802020a2: e7 80 c0 0b  	jalr	188(ra)
802020a6: 03 35 04 fe  	ld	a0, -32(s0)
;     var value: u21 = bytes[0] & 0b00011111;
802020aa: 08 65        	ld	a0, 8(a0)
802020ac: 81 45        	mv	a1, zero
802020ae: 63 1c b5 00  	bne	a0, a1, 0x802020c6 <.LBB47_18+0x12>
802020b2: 09 a0        	j	0x802020b4 <.LBB47_18>

00000000802020b4 <.LBB47_18>:
802020b4: 17 b5 01 00  	auipc	a0, 27
802020b8: 13 05 c5 24  	addi	a0, a0, 588
802020bc: 81 45        	mv	a1, zero
802020be: 97 e0 ff ff  	auipc	ra, 1048574
802020c2: e7 80 20 fe  	jalr	-30(ra)
802020c6: 03 35 04 fe  	ld	a0, -32(s0)
802020ca: 0c 61        	ld	a1, 0(a0)
802020cc: 83 c5 05 00  	lbu	a1, 0(a1)
802020d0: fd 89        	andi	a1, a1, 31
802020d2: 01 46        	mv	a2, zero
802020d4: 23 07 c4 fe  	sb	a2, -18(s0)
802020d8: 23 16 b4 fe  	sh	a1, -20(s0)
;     if (bytes[1] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;
802020dc: 0c 65        	ld	a1, 8(a0)
802020de: 05 45        	addi	a0, zero, 1
802020e0: 63 6c b5 00  	bltu	a0, a1, 0x802020f8 <.LBB47_19+0x12>
802020e4: 09 a0        	j	0x802020e6 <.LBB47_19>

00000000802020e6 <.LBB47_19>:
802020e6: 17 b5 01 00  	auipc	a0, 27
802020ea: 13 05 a5 21  	addi	a0, a0, 538
802020ee: 81 45        	mv	a1, zero
802020f0: 97 e0 ff ff  	auipc	ra, 1048574
802020f4: e7 80 00 fb  	jalr	-80(ra)
802020f8: 03 35 04 fe  	ld	a0, -32(s0)
802020fc: 08 61        	ld	a0, 0(a0)
802020fe: 03 45 15 00  	lbu	a0, 1(a0)
80202102: 13 75 05 0c  	andi	a0, a0, 192
80202106: 93 05 00 08  	addi	a1, zero, 128
8020210a: e3 16 b5 ee  	bne	a0, a1, 0x80201ff6 <std.unicode.utf8Decode2+0x32>
8020210e: 19 b7        	j	0x80202014 <std.unicode.utf8Decode2+0x50>

0000000080202110 <.LBB47_20>:
;     value <<= 6;
80202110: 17 b5 01 00  	auipc	a0, 27
80202114: 13 05 85 40  	addi	a0, a0, 1032
80202118: 81 45        	mv	a1, zero
8020211a: 97 e0 ff ff  	auipc	ra, 1048574
8020211e: e7 80 60 f8  	jalr	-122(ra)
80202122: 03 35 04 fe  	ld	a0, -32(s0)
80202126: 83 35 84 fc  	ld	a1, -56(s0)
8020212a: 13 96 65 00  	slli	a2, a1, 6
8020212e: 23 30 c4 fc  	sd	a2, -64(s0)
80202132: 23 16 c4 fe  	sh	a2, -20(s0)
80202136: a9 81        	srli	a1, a1, 10
80202138: fd 89        	andi	a1, a1, 31
8020213a: 23 07 b4 fe  	sb	a1, -18(s0)
;     value |= bytes[1] & 0b00111111;
8020213e: 0c 65        	ld	a1, 8(a0)
80202140: 05 45        	addi	a0, zero, 1
80202142: 63 6c b5 00  	bltu	a0, a1, 0x8020215a <.LBB47_21+0x12>
80202146: 09 a0        	j	0x80202148 <.LBB47_21>

0000000080202148 <.LBB47_21>:
80202148: 17 b5 01 00  	auipc	a0, 27
8020214c: 13 05 85 1b  	addi	a0, a0, 440
80202150: 81 45        	mv	a1, zero
80202152: 97 e0 ff ff  	auipc	ra, 1048574
80202156: e7 80 e0 f4  	jalr	-178(ra)
8020215a: 03 35 04 fc  	ld	a0, -64(s0)
8020215e: 83 35 04 fe  	ld	a1, -32(s0)
80202162: 8c 61        	ld	a1, 0(a1)
80202164: 83 c5 15 00  	lbu	a1, 1(a1)
80202168: 93 f5 f5 03  	andi	a1, a1, 63
8020216c: c9 8d        	or	a1, a1, a0
8020216e: 37 05 20 00  	lui	a0, 512
80202172: 7d 35        	addiw	a0, a0, -1
80202174: 6d 8d        	and	a0, a0, a1
80202176: 23 16 b4 fe  	sh	a1, -20(s0)
8020217a: 93 55 05 01  	srli	a1, a0, 16
8020217e: 23 07 b4 fe  	sb	a1, -18(s0)
80202182: 93 05 00 08  	addi	a1, zero, 128
;     if (value < 0x80) return error.Utf8OverlongEncoding;
80202186: e3 66 b5 ea  	bltu	a0, a1, 0x80202032 <std.unicode.utf8Decode2+0x6e>
8020218a: d9 b5        	j	0x80202050 <std.unicode.utf8Decode2+0x8c>

000000008020218c <std.unicode.utf8Decode3>:
; pub fn utf8Decode3(bytes: []const u8) Utf8Decode3Error!u21 {
8020218c: 1d 71        	addi	sp, sp, -96
8020218e: 86 ec        	sd	ra, 88(sp)
80202190: a2 e8        	sd	s0, 80(sp)
80202192: 80 10        	addi	s0, sp, 96
80202194: 23 30 c4 fe  	sd	a2, -32(s0)
80202198: 23 38 b4 fc  	sd	a1, -48(s0)
;     assert(bytes.len == 3);
8020219c: 23 3c a4 fc  	sd	a0, -40(s0)
802021a0: 08 66        	ld	a0, 8(a2)
802021a2: 75 15        	addi	a0, a0, -3
802021a4: 13 35 15 00  	seqz	a0, a0
802021a8: 97 e0 ff ff  	auipc	ra, 1048574
802021ac: e7 80 20 fb  	jalr	-78(ra)
802021b0: 03 36 04 fe  	ld	a2, -32(s0)
;     assert(bytes[0] & 0b11110000 == 0b11100000);
802021b4: 08 66        	ld	a0, 8(a2)
802021b6: 81 45        	mv	a1, zero
802021b8: 63 1e b5 12  	bne	a0, a1, 0x802022f4 <.LBB48_31+0x12>
802021bc: 1d a2        	j	0x802022e2 <.LBB48_31>
802021be: 03 35 04 fd  	ld	a0, -48(s0)
802021c2: 03 36 84 fd  	ld	a2, -40(s0)
802021c6: 91 45        	addi	a1, zero, 4
;     if (bytes[1] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;
802021c8: 23 12 b6 00  	sh	a1, 4(a2)
802021cc: 97 e0 ff ff  	auipc	ra, 1048574
802021d0: e7 80 60 6d  	jalr	1750(ra)
802021d4: 46 64        	ld	s0, 80(sp)
802021d6: e6 60        	ld	ra, 88(sp)
802021d8: 25 61        	addi	sp, sp, 96
802021da: 82 80        	ret
802021dc: 09 a0        	j	0x802021de <std.unicode.utf8Decode3+0x52>
;     value <<= 6;
802021de: 03 05 e4 fe  	lb	a0, -18(s0)
802021e2: 93 15 05 01  	slli	a1, a0, 16
802021e6: 03 55 c4 fe  	lhu	a0, -20(s0)
802021ea: 4d 8d        	or	a0, a0, a1
802021ec: 23 34 a4 fc  	sd	a0, -56(s0)
802021f0: 81 45        	mv	a1, zero
802021f2: 05 45        	addi	a0, zero, 1
802021f4: 63 1d b5 18  	bne	a0, a1, 0x8020238e <.LBB48_34+0x12>
802021f8: 51 a2        	j	0x8020237c <.LBB48_34>
802021fa: 03 35 04 fd  	ld	a0, -48(s0)
802021fe: 03 36 84 fd  	ld	a2, -40(s0)
80202202: 91 45        	addi	a1, zero, 4
;     if (bytes[2] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;
80202204: 23 12 b6 00  	sh	a1, 4(a2)
80202208: 97 e0 ff ff  	auipc	ra, 1048574
8020220c: e7 80 a0 69  	jalr	1690(ra)
80202210: 46 64        	ld	s0, 80(sp)
80202212: e6 60        	ld	ra, 88(sp)
80202214: 25 61        	addi	sp, sp, 96
80202216: 82 80        	ret
80202218: 09 a0        	j	0x8020221a <std.unicode.utf8Decode3+0x8e>
;     value <<= 6;
8020221a: 03 05 e4 fe  	lb	a0, -18(s0)
8020221e: 93 15 05 01  	slli	a1, a0, 16
80202222: 03 55 c4 fe  	lhu	a0, -20(s0)
80202226: 4d 8d        	or	a0, a0, a1
80202228: 23 30 a4 fc  	sd	a0, -64(s0)
8020222c: 81 45        	mv	a1, zero
8020222e: 05 45        	addi	a0, zero, 1
80202230: 63 11 b5 20  	bne	a0, a1, 0x80202432 <.LBB48_37+0x12>
80202234: f5 a2        	j	0x80202420 <.LBB48_37>
80202236: 03 35 04 fd  	ld	a0, -48(s0)
8020223a: 03 36 84 fd  	ld	a2, -40(s0)
8020223e: 95 45        	addi	a1, zero, 5
;     if (value < 0x800) return error.Utf8OverlongEncoding;
80202240: 23 12 b6 00  	sh	a1, 4(a2)
80202244: 97 e0 ff ff  	auipc	ra, 1048574
80202248: e7 80 e0 65  	jalr	1630(ra)
8020224c: 46 64        	ld	s0, 80(sp)
8020224e: e6 60        	ld	ra, 88(sp)
80202250: 25 61        	addi	sp, sp, 96
80202252: 82 80        	ret
80202254: 09 a0        	j	0x80202256 <std.unicode.utf8Decode3+0xca>
;     if (0xd800 <= value and value <= 0xdfff) return error.Utf8EncodesSurrogateHalf;
80202256: 03 45 e4 fe  	lbu	a0, -18(s0)
8020225a: 93 15 05 01  	slli	a1, a0, 16
8020225e: 03 55 c4 fe  	lhu	a0, -20(s0)
80202262: 4d 8d        	or	a0, a0, a1
80202264: 2d 81        	srli	a0, a0, 11
80202266: e9 45        	addi	a1, zero, 26
80202268: 33 b6 a5 00  	sltu	a2, a1, a0
8020226c: ed 45        	addi	a1, zero, 27
8020226e: 23 3c c4 fa  	sd	a2, -72(s0)
80202272: 63 60 b5 02  	bltu	a0, a1, 0x80202292 <std.unicode.utf8Decode3+0x106>
80202276: 09 a0        	j	0x80202278 <std.unicode.utf8Decode3+0xec>
80202278: 03 45 e4 fe  	lbu	a0, -18(s0)
8020227c: 93 15 05 01  	slli	a1, a0, 16
80202280: 03 55 c4 fe  	lhu	a0, -20(s0)
80202284: 4d 8d        	or	a0, a0, a1
80202286: 35 81        	srli	a0, a0, 13
80202288: 13 35 75 00  	sltiu	a0, a0, 7
8020228c: 23 3c a4 fa  	sd	a0, -72(s0)
80202290: 09 a0        	j	0x80202292 <std.unicode.utf8Decode3+0x106>
80202292: 03 35 84 fb  	ld	a0, -72(s0)
80202296: 81 45        	mv	a1, zero
80202298: 63 02 b5 02  	beq	a0, a1, 0x802022bc <std.unicode.utf8Decode3+0x130>
8020229c: 09 a0        	j	0x8020229e <std.unicode.utf8Decode3+0x112>
8020229e: 03 35 04 fd  	ld	a0, -48(s0)
802022a2: 03 36 84 fd  	ld	a2, -40(s0)
802022a6: 99 45        	addi	a1, zero, 6
;     if (0xd800 <= value and value <= 0xdfff) return error.Utf8EncodesSurrogateHalf;
802022a8: 23 12 b6 00  	sh	a1, 4(a2)
802022ac: 97 e0 ff ff  	auipc	ra, 1048574
802022b0: e7 80 60 5f  	jalr	1526(ra)
802022b4: 46 64        	ld	s0, 80(sp)
802022b6: e6 60        	ld	ra, 88(sp)
802022b8: 25 61        	addi	sp, sp, 96
802022ba: 82 80        	ret
802022bc: 09 a0        	j	0x802022be <std.unicode.utf8Decode3+0x132>
;     return value;
802022be: 83 35 84 fd  	ld	a1, -40(s0)
802022c2: 03 45 e4 fe  	lbu	a0, -18(s0)
802022c6: 03 56 c4 fe  	lhu	a2, -20(s0)
802022ca: 81 46        	mv	a3, zero
802022cc: 23 92 d5 00  	sh	a3, 4(a1)
802022d0: 23 90 c5 00  	sh	a2, 0(a1)
802022d4: 7d 89        	andi	a0, a0, 31
802022d6: 23 81 a5 00  	sb	a0, 2(a1)
802022da: 46 64        	ld	s0, 80(sp)
802022dc: e6 60        	ld	ra, 88(sp)
802022de: 25 61        	addi	sp, sp, 96
802022e0: 82 80        	ret

00000000802022e2 <.LBB48_31>:
;     assert(bytes[0] & 0b11110000 == 0b11100000);
802022e2: 17 b5 01 00  	auipc	a0, 27
802022e6: 13 05 e5 01  	addi	a0, a0, 30
802022ea: 81 45        	mv	a1, zero
802022ec: 97 e0 ff ff  	auipc	ra, 1048574
802022f0: e7 80 40 db  	jalr	-588(ra)
802022f4: 03 35 04 fe  	ld	a0, -32(s0)
802022f8: 08 61        	ld	a0, 0(a0)
802022fa: 03 45 05 00  	lbu	a0, 0(a0)
802022fe: 13 75 05 0f  	andi	a0, a0, 240
80202302: 13 05 05 f2  	addi	a0, a0, -224
80202306: 13 35 15 00  	seqz	a0, a0
8020230a: 97 e0 ff ff  	auipc	ra, 1048574
8020230e: e7 80 00 e5  	jalr	-432(ra)
80202312: 03 35 04 fe  	ld	a0, -32(s0)
;     var value: u21 = bytes[0] & 0b00001111;
80202316: 08 65        	ld	a0, 8(a0)
80202318: 81 45        	mv	a1, zero
8020231a: 63 1c b5 00  	bne	a0, a1, 0x80202332 <.LBB48_32+0x12>
8020231e: 09 a0        	j	0x80202320 <.LBB48_32>

0000000080202320 <.LBB48_32>:
80202320: 17 b5 01 00  	auipc	a0, 27
80202324: 13 05 05 fe  	addi	a0, a0, -32
80202328: 81 45        	mv	a1, zero
8020232a: 97 e0 ff ff  	auipc	ra, 1048574
8020232e: e7 80 60 d7  	jalr	-650(ra)
80202332: 03 35 04 fe  	ld	a0, -32(s0)
80202336: 0c 61        	ld	a1, 0(a0)
80202338: 83 c5 05 00  	lbu	a1, 0(a1)
8020233c: bd 89        	andi	a1, a1, 15
8020233e: 01 46        	mv	a2, zero
80202340: 23 07 c4 fe  	sb	a2, -18(s0)
80202344: 23 16 b4 fe  	sh	a1, -20(s0)
;     if (bytes[1] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;
80202348: 0c 65        	ld	a1, 8(a0)
8020234a: 05 45        	addi	a0, zero, 1
8020234c: 63 6c b5 00  	bltu	a0, a1, 0x80202364 <.LBB48_33+0x12>
80202350: 09 a0        	j	0x80202352 <.LBB48_33>

0000000080202352 <.LBB48_33>:
80202352: 17 b5 01 00  	auipc	a0, 27
80202356: 13 05 e5 fa  	addi	a0, a0, -82
8020235a: 81 45        	mv	a1, zero
8020235c: 97 e0 ff ff  	auipc	ra, 1048574
80202360: e7 80 40 d4  	jalr	-700(ra)
80202364: 03 35 04 fe  	ld	a0, -32(s0)
80202368: 08 61        	ld	a0, 0(a0)
8020236a: 03 45 15 00  	lbu	a0, 1(a0)
8020236e: 13 75 05 0c  	andi	a0, a0, 192
80202372: 93 05 00 08  	addi	a1, zero, 128
80202376: e3 14 b5 e4  	bne	a0, a1, 0x802021be <std.unicode.utf8Decode3+0x32>
8020237a: 8d b5        	j	0x802021dc <std.unicode.utf8Decode3+0x50>

000000008020237c <.LBB48_34>:
;     value <<= 6;
8020237c: 17 b5 01 00  	auipc	a0, 27
80202380: 13 05 c5 19  	addi	a0, a0, 412
80202384: 81 45        	mv	a1, zero
80202386: 97 e0 ff ff  	auipc	ra, 1048574
8020238a: e7 80 a0 d1  	jalr	-742(ra)
8020238e: 03 35 04 fe  	ld	a0, -32(s0)
80202392: 83 35 84 fc  	ld	a1, -56(s0)
80202396: 13 96 65 00  	slli	a2, a1, 6
8020239a: 23 38 c4 fa  	sd	a2, -80(s0)
8020239e: 23 16 c4 fe  	sh	a2, -20(s0)
802023a2: a9 81        	srli	a1, a1, 10
802023a4: fd 89        	andi	a1, a1, 31
802023a6: 23 07 b4 fe  	sb	a1, -18(s0)
;     value |= bytes[1] & 0b00111111;
802023aa: 0c 65        	ld	a1, 8(a0)
802023ac: 05 45        	addi	a0, zero, 1
802023ae: 63 6c b5 00  	bltu	a0, a1, 0x802023c6 <.LBB48_35+0x12>
802023b2: 09 a0        	j	0x802023b4 <.LBB48_35>

00000000802023b4 <.LBB48_35>:
802023b4: 17 b5 01 00  	auipc	a0, 27
802023b8: 13 05 c5 f4  	addi	a0, a0, -180
802023bc: 81 45        	mv	a1, zero
802023be: 97 e0 ff ff  	auipc	ra, 1048574
802023c2: e7 80 20 ce  	jalr	-798(ra)
802023c6: 03 35 04 fe  	ld	a0, -32(s0)
802023ca: 83 35 04 fb  	ld	a1, -80(s0)
802023ce: 10 61        	ld	a2, 0(a0)
802023d0: 03 46 16 00  	lbu	a2, 1(a2)
802023d4: 13 76 f6 03  	andi	a2, a2, 63
802023d8: d1 8d        	or	a1, a1, a2
802023da: 23 16 b4 fe  	sh	a1, -20(s0)
802023de: 37 06 20 00  	lui	a2, 512
802023e2: 7d 36        	addiw	a2, a2, -1
802023e4: f1 8d        	and	a1, a1, a2
802023e6: c1 81        	srli	a1, a1, 16
802023e8: 23 07 b4 fe  	sb	a1, -18(s0)
;     if (bytes[2] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;
802023ec: 0c 65        	ld	a1, 8(a0)
802023ee: 09 45        	addi	a0, zero, 2
802023f0: 63 6c b5 00  	bltu	a0, a1, 0x80202408 <.LBB48_36+0x12>
802023f4: 09 a0        	j	0x802023f6 <.LBB48_36>

00000000802023f6 <.LBB48_36>:
802023f6: 17 b5 01 00  	auipc	a0, 27
802023fa: 13 05 a5 f0  	addi	a0, a0, -246
802023fe: 81 45        	mv	a1, zero
80202400: 97 e0 ff ff  	auipc	ra, 1048574
80202404: e7 80 00 ca  	jalr	-864(ra)
80202408: 03 35 04 fe  	ld	a0, -32(s0)
8020240c: 08 61        	ld	a0, 0(a0)
8020240e: 03 45 25 00  	lbu	a0, 2(a0)
80202412: 13 75 05 0c  	andi	a0, a0, 192
80202416: 93 05 00 08  	addi	a1, zero, 128
8020241a: e3 10 b5 de  	bne	a0, a1, 0x802021fa <std.unicode.utf8Decode3+0x6e>
8020241e: ed bb        	j	0x80202218 <std.unicode.utf8Decode3+0x8c>

0000000080202420 <.LBB48_37>:
;     value <<= 6;
80202420: 17 b5 01 00  	auipc	a0, 27
80202424: 13 05 85 0f  	addi	a0, a0, 248
80202428: 81 45        	mv	a1, zero
8020242a: 97 e0 ff ff  	auipc	ra, 1048574
8020242e: e7 80 60 c7  	jalr	-906(ra)
80202432: 03 35 04 fe  	ld	a0, -32(s0)
80202436: 83 35 04 fc  	ld	a1, -64(s0)
8020243a: 13 96 65 00  	slli	a2, a1, 6
8020243e: 23 34 c4 fa  	sd	a2, -88(s0)
80202442: 23 16 c4 fe  	sh	a2, -20(s0)
80202446: a9 81        	srli	a1, a1, 10
80202448: fd 89        	andi	a1, a1, 31
8020244a: 23 07 b4 fe  	sb	a1, -18(s0)
;     value |= bytes[2] & 0b00111111;
8020244e: 0c 65        	ld	a1, 8(a0)
80202450: 09 45        	addi	a0, zero, 2
80202452: 63 6c b5 00  	bltu	a0, a1, 0x8020246a <.LBB48_38+0x12>
80202456: 09 a0        	j	0x80202458 <.LBB48_38>

0000000080202458 <.LBB48_38>:
80202458: 17 b5 01 00  	auipc	a0, 27
8020245c: 13 05 85 ea  	addi	a0, a0, -344
80202460: 81 45        	mv	a1, zero
80202462: 97 e0 ff ff  	auipc	ra, 1048574
80202466: e7 80 e0 c3  	jalr	-962(ra)
8020246a: 83 35 84 fa  	ld	a1, -88(s0)
8020246e: 03 35 04 fe  	ld	a0, -32(s0)
80202472: 08 61        	ld	a0, 0(a0)
80202474: 03 45 25 00  	lbu	a0, 2(a0)
80202478: 93 76 f5 03  	andi	a3, a0, 63
8020247c: 37 06 20 00  	lui	a2, 512
80202480: 1b 05 06 80  	addiw	a0, a2, -2048
80202484: 6d 8d        	and	a0, a0, a1
80202486: d5 8d        	or	a1, a1, a3
80202488: 23 16 b4 fe  	sh	a1, -20(s0)
8020248c: 7d 36        	addiw	a2, a2, -1
8020248e: f1 8d        	and	a1, a1, a2
80202490: c1 81        	srli	a1, a1, 16
80202492: 23 07 b4 fe  	sb	a1, -18(s0)
;     if (value < 0x800) return error.Utf8OverlongEncoding;
80202496: 2d 81        	srli	a0, a0, 11
80202498: 81 45        	mv	a1, zero
8020249a: e3 0e b5 d8  	beq	a0, a1, 0x80202236 <std.unicode.utf8Decode3+0xaa>
8020249e: 5d bb        	j	0x80202254 <std.unicode.utf8Decode3+0xc8>

00000000802024a0 <std.unicode.utf8Decode4>:
; pub fn utf8Decode4(bytes: []const u8) Utf8Decode4Error!u21 {
802024a0: 1d 71        	addi	sp, sp, -96
802024a2: 86 ec        	sd	ra, 88(sp)
802024a4: a2 e8        	sd	s0, 80(sp)
802024a6: 80 10        	addi	s0, sp, 96
802024a8: 23 30 c4 fe  	sd	a2, -32(s0)
802024ac: 23 38 b4 fc  	sd	a1, -48(s0)
;     assert(bytes.len == 4);
802024b0: 23 3c a4 fc  	sd	a0, -40(s0)
802024b4: 08 66        	ld	a0, 8(a2)
802024b6: 71 15        	addi	a0, a0, -4
802024b8: 13 35 15 00  	seqz	a0, a0
802024bc: 97 e0 ff ff  	auipc	ra, 1048574
802024c0: e7 80 e0 c9  	jalr	-866(ra)
802024c4: 03 36 04 fe  	ld	a2, -32(s0)
;     assert(bytes[0] & 0b11111000 == 0b11110000);
802024c8: 08 66        	ld	a0, 8(a2)
802024ca: 81 45        	mv	a1, zero
802024cc: 63 10 b5 14  	bne	a0, a1, 0x8020260c <.LBB49_38+0x12>
802024d0: 2d a2        	j	0x802025fa <.LBB49_38>
802024d2: 03 35 04 fd  	ld	a0, -48(s0)
802024d6: 03 36 84 fd  	ld	a2, -40(s0)
802024da: 91 45        	addi	a1, zero, 4
;     if (bytes[1] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;
802024dc: 23 12 b6 00  	sh	a1, 4(a2)
802024e0: 97 e0 ff ff  	auipc	ra, 1048574
802024e4: e7 80 20 3c  	jalr	962(ra)
802024e8: 46 64        	ld	s0, 80(sp)
802024ea: e6 60        	ld	ra, 88(sp)
802024ec: 25 61        	addi	sp, sp, 96
802024ee: 82 80        	ret
802024f0: 09 a0        	j	0x802024f2 <std.unicode.utf8Decode4+0x52>
;     value <<= 6;
802024f2: 03 05 e4 fe  	lb	a0, -18(s0)
802024f6: 93 15 05 01  	slli	a1, a0, 16
802024fa: 03 55 c4 fe  	lhu	a0, -20(s0)
802024fe: 4d 8d        	or	a0, a0, a1
80202500: 23 34 a4 fc  	sd	a0, -56(s0)
80202504: 81 45        	mv	a1, zero
80202506: 05 45        	addi	a0, zero, 1
80202508: 63 1f b5 18  	bne	a0, a1, 0x802026a6 <.LBB49_41+0x12>
8020250c: 61 a2        	j	0x80202694 <.LBB49_41>
8020250e: 03 35 04 fd  	ld	a0, -48(s0)
80202512: 03 36 84 fd  	ld	a2, -40(s0)
80202516: 91 45        	addi	a1, zero, 4
;     if (bytes[2] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;
80202518: 23 12 b6 00  	sh	a1, 4(a2)
8020251c: 97 e0 ff ff  	auipc	ra, 1048574
80202520: e7 80 60 38  	jalr	902(ra)
80202524: 46 64        	ld	s0, 80(sp)
80202526: e6 60        	ld	ra, 88(sp)
80202528: 25 61        	addi	sp, sp, 96
8020252a: 82 80        	ret
8020252c: 09 a0        	j	0x8020252e <std.unicode.utf8Decode4+0x8e>
;     value <<= 6;
8020252e: 03 05 e4 fe  	lb	a0, -18(s0)
80202532: 93 15 05 01  	slli	a1, a0, 16
80202536: 03 55 c4 fe  	lhu	a0, -20(s0)
8020253a: 4d 8d        	or	a0, a0, a1
8020253c: 23 30 a4 fc  	sd	a0, -64(s0)
80202540: 81 45        	mv	a1, zero
80202542: 05 45        	addi	a0, zero, 1
80202544: 63 13 b5 20  	bne	a0, a1, 0x8020274a <.LBB49_44+0x12>
80202548: c5 aa        	j	0x80202738 <.LBB49_44>
8020254a: 03 35 04 fd  	ld	a0, -48(s0)
8020254e: 03 36 84 fd  	ld	a2, -40(s0)
80202552: 91 45        	addi	a1, zero, 4
;     if (bytes[3] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;
80202554: 23 12 b6 00  	sh	a1, 4(a2)
80202558: 97 e0 ff ff  	auipc	ra, 1048574
8020255c: e7 80 a0 34  	jalr	842(ra)
80202560: 46 64        	ld	s0, 80(sp)
80202562: e6 60        	ld	ra, 88(sp)
80202564: 25 61        	addi	sp, sp, 96
80202566: 82 80        	ret
80202568: 09 a0        	j	0x8020256a <std.unicode.utf8Decode4+0xca>
;     value <<= 6;
8020256a: 03 05 e4 fe  	lb	a0, -18(s0)
8020256e: 93 15 05 01  	slli	a1, a0, 16
80202572: 03 55 c4 fe  	lhu	a0, -20(s0)
80202576: 4d 8d        	or	a0, a0, a1
80202578: 23 3c a4 fa  	sd	a0, -72(s0)
8020257c: 81 45        	mv	a1, zero
8020257e: 05 45        	addi	a0, zero, 1
80202580: 63 17 b5 26  	bne	a0, a1, 0x802027ee <.LBB49_47+0x12>
80202584: a1 ac        	j	0x802027dc <.LBB49_47>
80202586: 03 35 04 fd  	ld	a0, -48(s0)
8020258a: 03 36 84 fd  	ld	a2, -40(s0)
8020258e: 95 45        	addi	a1, zero, 5
;     if (value < 0x10000) return error.Utf8OverlongEncoding;
80202590: 23 12 b6 00  	sh	a1, 4(a2)
80202594: 97 e0 ff ff  	auipc	ra, 1048574
80202598: e7 80 e0 30  	jalr	782(ra)
8020259c: 46 64        	ld	s0, 80(sp)
8020259e: e6 60        	ld	ra, 88(sp)
802025a0: 25 61        	addi	sp, sp, 96
802025a2: 82 80        	ret
802025a4: 09 a0        	j	0x802025a6 <std.unicode.utf8Decode4+0x106>
;     if (value > 0x10FFFF) return error.Utf8CodepointTooLarge;
802025a6: 03 45 e4 fe  	lbu	a0, -18(s0)
802025aa: 42 05        	slli	a0, a0, 16
802025ac: 41 81        	srli	a0, a0, 16
802025ae: c5 45        	addi	a1, zero, 17
802025b0: 63 62 b5 02  	bltu	a0, a1, 0x802025d4 <std.unicode.utf8Decode4+0x134>
802025b4: 09 a0        	j	0x802025b6 <std.unicode.utf8Decode4+0x116>
802025b6: 03 35 04 fd  	ld	a0, -48(s0)
802025ba: 03 36 84 fd  	ld	a2, -40(s0)
802025be: 9d 45        	addi	a1, zero, 7
;     if (value > 0x10FFFF) return error.Utf8CodepointTooLarge;
802025c0: 23 12 b6 00  	sh	a1, 4(a2)
802025c4: 97 e0 ff ff  	auipc	ra, 1048574
802025c8: e7 80 e0 2d  	jalr	734(ra)
802025cc: 46 64        	ld	s0, 80(sp)
802025ce: e6 60        	ld	ra, 88(sp)
802025d0: 25 61        	addi	sp, sp, 96
802025d2: 82 80        	ret
802025d4: 09 a0        	j	0x802025d6 <std.unicode.utf8Decode4+0x136>
;     return value;
802025d6: 83 35 84 fd  	ld	a1, -40(s0)
802025da: 03 45 e4 fe  	lbu	a0, -18(s0)
802025de: 03 56 c4 fe  	lhu	a2, -20(s0)
802025e2: 81 46        	mv	a3, zero
802025e4: 23 92 d5 00  	sh	a3, 4(a1)
802025e8: 23 90 c5 00  	sh	a2, 0(a1)
802025ec: 7d 89        	andi	a0, a0, 31
802025ee: 23 81 a5 00  	sb	a0, 2(a1)
802025f2: 46 64        	ld	s0, 80(sp)
802025f4: e6 60        	ld	ra, 88(sp)
802025f6: 25 61        	addi	sp, sp, 96
802025f8: 82 80        	ret

00000000802025fa <.LBB49_38>:
;     assert(bytes[0] & 0b11111000 == 0b11110000);
802025fa: 17 b5 01 00  	auipc	a0, 27
802025fe: 13 05 65 d0  	addi	a0, a0, -762
80202602: 81 45        	mv	a1, zero
80202604: 97 e0 ff ff  	auipc	ra, 1048574
80202608: e7 80 c0 a9  	jalr	-1380(ra)
8020260c: 03 35 04 fe  	ld	a0, -32(s0)
80202610: 08 61        	ld	a0, 0(a0)
80202612: 03 45 05 00  	lbu	a0, 0(a0)
80202616: 13 75 85 0f  	andi	a0, a0, 248
8020261a: 13 05 05 f1  	addi	a0, a0, -240
8020261e: 13 35 15 00  	seqz	a0, a0
80202622: 97 e0 ff ff  	auipc	ra, 1048574
80202626: e7 80 80 b3  	jalr	-1224(ra)
8020262a: 03 35 04 fe  	ld	a0, -32(s0)
;     var value: u21 = bytes[0] & 0b00000111;
8020262e: 08 65        	ld	a0, 8(a0)
80202630: 81 45        	mv	a1, zero
80202632: 63 1c b5 00  	bne	a0, a1, 0x8020264a <.LBB49_39+0x12>
80202636: 09 a0        	j	0x80202638 <.LBB49_39>

0000000080202638 <.LBB49_39>:
80202638: 17 b5 01 00  	auipc	a0, 27
8020263c: 13 05 85 cc  	addi	a0, a0, -824
80202640: 81 45        	mv	a1, zero
80202642: 97 e0 ff ff  	auipc	ra, 1048574
80202646: e7 80 e0 a5  	jalr	-1442(ra)
8020264a: 03 35 04 fe  	ld	a0, -32(s0)
8020264e: 0c 61        	ld	a1, 0(a0)
80202650: 83 c5 05 00  	lbu	a1, 0(a1)
80202654: 9d 89        	andi	a1, a1, 7
80202656: 01 46        	mv	a2, zero
80202658: 23 07 c4 fe  	sb	a2, -18(s0)
8020265c: 23 16 b4 fe  	sh	a1, -20(s0)
;     if (bytes[1] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;
80202660: 0c 65        	ld	a1, 8(a0)
80202662: 05 45        	addi	a0, zero, 1
80202664: 63 6c b5 00  	bltu	a0, a1, 0x8020267c <.LBB49_40+0x12>
80202668: 09 a0        	j	0x8020266a <.LBB49_40>

000000008020266a <.LBB49_40>:
8020266a: 17 b5 01 00  	auipc	a0, 27
8020266e: 13 05 65 c9  	addi	a0, a0, -874
80202672: 81 45        	mv	a1, zero
80202674: 97 e0 ff ff  	auipc	ra, 1048574
80202678: e7 80 c0 a2  	jalr	-1492(ra)
8020267c: 03 35 04 fe  	ld	a0, -32(s0)
80202680: 08 61        	ld	a0, 0(a0)
80202682: 03 45 15 00  	lbu	a0, 1(a0)
80202686: 13 75 05 0c  	andi	a0, a0, 192
8020268a: 93 05 00 08  	addi	a1, zero, 128
8020268e: e3 12 b5 e4  	bne	a0, a1, 0x802024d2 <std.unicode.utf8Decode4+0x32>
80202692: b9 bd        	j	0x802024f0 <std.unicode.utf8Decode4+0x50>

0000000080202694 <.LBB49_41>:
;     value <<= 6;
80202694: 17 b5 01 00  	auipc	a0, 27
80202698: 13 05 45 e8  	addi	a0, a0, -380
8020269c: 81 45        	mv	a1, zero
8020269e: 97 e0 ff ff  	auipc	ra, 1048574
802026a2: e7 80 20 a0  	jalr	-1534(ra)
802026a6: 03 35 04 fe  	ld	a0, -32(s0)
802026aa: 83 35 84 fc  	ld	a1, -56(s0)
802026ae: 13 96 65 00  	slli	a2, a1, 6
802026b2: 23 38 c4 fa  	sd	a2, -80(s0)
802026b6: 23 16 c4 fe  	sh	a2, -20(s0)
802026ba: a9 81        	srli	a1, a1, 10
802026bc: fd 89        	andi	a1, a1, 31
802026be: 23 07 b4 fe  	sb	a1, -18(s0)
;     value |= bytes[1] & 0b00111111;
802026c2: 0c 65        	ld	a1, 8(a0)
802026c4: 05 45        	addi	a0, zero, 1
802026c6: 63 6c b5 00  	bltu	a0, a1, 0x802026de <.LBB49_42+0x12>
802026ca: 09 a0        	j	0x802026cc <.LBB49_42>

00000000802026cc <.LBB49_42>:
802026cc: 17 b5 01 00  	auipc	a0, 27
802026d0: 13 05 45 c3  	addi	a0, a0, -972
802026d4: 81 45        	mv	a1, zero
802026d6: 97 e0 ff ff  	auipc	ra, 1048574
802026da: e7 80 a0 9c  	jalr	-1590(ra)
802026de: 03 35 04 fe  	ld	a0, -32(s0)
802026e2: 83 35 04 fb  	ld	a1, -80(s0)
802026e6: 10 61        	ld	a2, 0(a0)
802026e8: 03 46 16 00  	lbu	a2, 1(a2)
802026ec: 13 76 f6 03  	andi	a2, a2, 63
802026f0: d1 8d        	or	a1, a1, a2
802026f2: 23 16 b4 fe  	sh	a1, -20(s0)
802026f6: 37 06 20 00  	lui	a2, 512
802026fa: 7d 36        	addiw	a2, a2, -1
802026fc: f1 8d        	and	a1, a1, a2
802026fe: c1 81        	srli	a1, a1, 16
80202700: 23 07 b4 fe  	sb	a1, -18(s0)
;     if (bytes[2] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;
80202704: 0c 65        	ld	a1, 8(a0)
80202706: 09 45        	addi	a0, zero, 2
80202708: 63 6c b5 00  	bltu	a0, a1, 0x80202720 <.LBB49_43+0x12>
8020270c: 09 a0        	j	0x8020270e <.LBB49_43>

000000008020270e <.LBB49_43>:
8020270e: 17 b5 01 00  	auipc	a0, 27
80202712: 13 05 25 bf  	addi	a0, a0, -1038
80202716: 81 45        	mv	a1, zero
80202718: 97 e0 ff ff  	auipc	ra, 1048574
8020271c: e7 80 80 98  	jalr	-1656(ra)
80202720: 03 35 04 fe  	ld	a0, -32(s0)
80202724: 08 61        	ld	a0, 0(a0)
80202726: 03 45 25 00  	lbu	a0, 2(a0)
8020272a: 13 75 05 0c  	andi	a0, a0, 192
8020272e: 93 05 00 08  	addi	a1, zero, 128
80202732: e3 1e b5 dc  	bne	a0, a1, 0x8020250e <std.unicode.utf8Decode4+0x6e>
80202736: dd bb        	j	0x8020252c <std.unicode.utf8Decode4+0x8c>

0000000080202738 <.LBB49_44>:
;     value <<= 6;
80202738: 17 b5 01 00  	auipc	a0, 27
8020273c: 13 05 05 de  	addi	a0, a0, -544
80202740: 81 45        	mv	a1, zero
80202742: 97 e0 ff ff  	auipc	ra, 1048574
80202746: e7 80 e0 95  	jalr	-1698(ra)
8020274a: 03 35 04 fe  	ld	a0, -32(s0)
8020274e: 83 35 04 fc  	ld	a1, -64(s0)
80202752: 13 96 65 00  	slli	a2, a1, 6
80202756: 23 34 c4 fa  	sd	a2, -88(s0)
8020275a: 23 16 c4 fe  	sh	a2, -20(s0)
8020275e: a9 81        	srli	a1, a1, 10
80202760: fd 89        	andi	a1, a1, 31
80202762: 23 07 b4 fe  	sb	a1, -18(s0)
;     value |= bytes[2] & 0b00111111;
80202766: 0c 65        	ld	a1, 8(a0)
80202768: 09 45        	addi	a0, zero, 2
8020276a: 63 6c b5 00  	bltu	a0, a1, 0x80202782 <.LBB49_45+0x12>
8020276e: 09 a0        	j	0x80202770 <.LBB49_45>

0000000080202770 <.LBB49_45>:
80202770: 17 b5 01 00  	auipc	a0, 27
80202774: 13 05 05 b9  	addi	a0, a0, -1136
80202778: 81 45        	mv	a1, zero
8020277a: 97 e0 ff ff  	auipc	ra, 1048574
8020277e: e7 80 60 92  	jalr	-1754(ra)
80202782: 03 35 04 fe  	ld	a0, -32(s0)
80202786: 83 35 84 fa  	ld	a1, -88(s0)
8020278a: 10 61        	ld	a2, 0(a0)
8020278c: 03 46 26 00  	lbu	a2, 2(a2)
80202790: 13 76 f6 03  	andi	a2, a2, 63
80202794: d1 8d        	or	a1, a1, a2
80202796: 23 16 b4 fe  	sh	a1, -20(s0)
8020279a: 37 06 20 00  	lui	a2, 512
8020279e: 7d 36        	addiw	a2, a2, -1
802027a0: f1 8d        	and	a1, a1, a2
802027a2: c1 81        	srli	a1, a1, 16
802027a4: 23 07 b4 fe  	sb	a1, -18(s0)
;     if (bytes[3] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;
802027a8: 0c 65        	ld	a1, 8(a0)
802027aa: 0d 45        	addi	a0, zero, 3
802027ac: 63 6c b5 00  	bltu	a0, a1, 0x802027c4 <.LBB49_46+0x12>
802027b0: 09 a0        	j	0x802027b2 <.LBB49_46>

00000000802027b2 <.LBB49_46>:
802027b2: 17 b5 01 00  	auipc	a0, 27
802027b6: 13 05 e5 b4  	addi	a0, a0, -1202
802027ba: 81 45        	mv	a1, zero
802027bc: 97 e0 ff ff  	auipc	ra, 1048574
802027c0: e7 80 40 8e  	jalr	-1820(ra)
802027c4: 03 35 04 fe  	ld	a0, -32(s0)
802027c8: 08 61        	ld	a0, 0(a0)
802027ca: 03 45 35 00  	lbu	a0, 3(a0)
802027ce: 13 75 05 0c  	andi	a0, a0, 192
802027d2: 93 05 00 08  	addi	a1, zero, 128
802027d6: e3 1a b5 d6  	bne	a0, a1, 0x8020254a <std.unicode.utf8Decode4+0xaa>
802027da: 79 b3        	j	0x80202568 <std.unicode.utf8Decode4+0xc8>

00000000802027dc <.LBB49_47>:
;     value <<= 6;
802027dc: 17 b5 01 00  	auipc	a0, 27
802027e0: 13 05 c5 d3  	addi	a0, a0, -708
802027e4: 81 45        	mv	a1, zero
802027e6: 97 e0 ff ff  	auipc	ra, 1048574
802027ea: e7 80 a0 8b  	jalr	-1862(ra)
802027ee: 03 35 04 fe  	ld	a0, -32(s0)
802027f2: 83 35 84 fb  	ld	a1, -72(s0)
802027f6: 13 96 65 00  	slli	a2, a1, 6
802027fa: 23 30 c4 fa  	sd	a2, -96(s0)
802027fe: 23 16 c4 fe  	sh	a2, -20(s0)
80202802: a9 81        	srli	a1, a1, 10
80202804: fd 89        	andi	a1, a1, 31
80202806: 23 07 b4 fe  	sb	a1, -18(s0)
;     value |= bytes[3] & 0b00111111;
8020280a: 0c 65        	ld	a1, 8(a0)
8020280c: 0d 45        	addi	a0, zero, 3
8020280e: 63 6c b5 00  	bltu	a0, a1, 0x80202826 <.LBB49_48+0x12>
80202812: 09 a0        	j	0x80202814 <.LBB49_48>

0000000080202814 <.LBB49_48>:
80202814: 17 b5 01 00  	auipc	a0, 27
80202818: 13 05 c5 ae  	addi	a0, a0, -1300
8020281c: 81 45        	mv	a1, zero
8020281e: 97 e0 ff ff  	auipc	ra, 1048574
80202822: e7 80 20 88  	jalr	-1918(ra)
80202826: 83 35 04 fa  	ld	a1, -96(s0)
8020282a: 03 35 04 fe  	ld	a0, -32(s0)
8020282e: 08 61        	ld	a0, 0(a0)
80202830: 03 45 35 00  	lbu	a0, 3(a0)
80202834: 13 76 f5 03  	andi	a2, a0, 63
80202838: 37 05 1f 00  	lui	a0, 496
8020283c: 6d 8d        	and	a0, a0, a1
8020283e: d1 8d        	or	a1, a1, a2
80202840: 23 16 b4 fe  	sh	a1, -20(s0)
80202844: 37 06 20 00  	lui	a2, 512
80202848: 7d 36        	addiw	a2, a2, -1
8020284a: f1 8d        	and	a1, a1, a2
8020284c: c1 81        	srli	a1, a1, 16
8020284e: 23 07 b4 fe  	sb	a1, -18(s0)
;     if (value < 0x10000) return error.Utf8OverlongEncoding;
80202852: 41 81        	srli	a0, a0, 16
80202854: 81 45        	mv	a1, zero
80202856: e3 08 b5 d2  	beq	a0, a1, 0x80202586 <std.unicode.utf8Decode4+0xe6>
8020285a: a9 b3        	j	0x802025a4 <std.unicode.utf8Decode4+0x104>

000000008020285c <std.mem.set>:
; pub fn set(comptime T: type, dest: []T, value: T) void {
8020285c: 39 71        	addi	sp, sp, -64
8020285e: 06 fc        	sd	ra, 56(sp)
80202860: 22 f8        	sd	s0, 48(sp)
80202862: 80 00        	addi	s0, sp, 64
80202864: 23 34 a4 fc  	sd	a0, -56(s0)
80202868: a3 0f b4 fc  	sb	a1, -33(s0)
8020286c: 81 45        	mv	a1, zero
;     for (dest) |*d|
8020286e: 23 34 b4 fe  	sd	a1, -24(s0)
80202872: 08 65        	ld	a0, 8(a0)
80202874: 23 38 a4 fc  	sd	a0, -48(s0)
80202878: 09 a0        	j	0x8020287a <std.mem.set+0x1e>
8020287a: 83 35 04 fd  	ld	a1, -48(s0)
8020287e: 03 35 84 fe  	ld	a0, -24(s0)
80202882: 23 30 a4 fc  	sd	a0, -64(s0)
80202886: 63 74 b5 02  	bgeu	a0, a1, 0x802028ae <std.mem.set+0x52>
8020288a: 09 a0        	j	0x8020288c <std.mem.set+0x30>
8020288c: 03 35 04 fc  	ld	a0, -64(s0)
80202890: 83 35 84 fc  	ld	a1, -56(s0)
80202894: 8c 61        	ld	a1, 0(a1)
80202896: 33 86 a5 00  	add	a2, a1, a0
8020289a: 23 30 c4 fe  	sd	a2, -32(s0)
;         d.* = value;
8020289e: 83 05 f4 fd  	lb	a1, -33(s0)
802028a2: 23 00 b6 00  	sb	a1, 0(a2)
;     for (dest) |*d|
802028a6: 05 05        	addi	a0, a0, 1
802028a8: 23 34 a4 fe  	sd	a0, -24(s0)
802028ac: f9 b7        	j	0x8020287a <std.mem.set+0x1e>
; pub fn set(comptime T: type, dest: []T, value: T) void {
802028ae: 42 74        	ld	s0, 48(sp)
802028b0: e2 70        	ld	ra, 56(sp)
802028b2: 21 61        	addi	sp, sp, 64
802028b4: 82 80        	ret

00000000802028b6 <std.math.min>:
; pub fn min(x: anytype, y: anytype) Min(@TypeOf(x), @TypeOf(y)) {
802028b6: 79 71        	addi	sp, sp, -48
802028b8: 06 f4        	sd	ra, 40(sp)
802028ba: 22 f0        	sd	s0, 32(sp)
802028bc: 00 18        	addi	s0, sp, 48
802028be: 23 30 a4 fe  	sd	a0, -32(s0)
802028c2: 23 3c b4 fc  	sd	a1, -40(s0)
;     if (x < y) {
802028c6: 63 7b b5 00  	bgeu	a0, a1, 0x802028dc <std.math.min+0x26>
802028ca: 09 a0        	j	0x802028cc <std.math.min+0x16>
;             .Int => return @intCast(Result, x),
802028cc: 03 35 04 fe  	ld	a0, -32(s0)
802028d0: 23 34 a4 fe  	sd	a0, -24(s0)
802028d4: 02 74        	ld	s0, 32(sp)
802028d6: a2 70        	ld	ra, 40(sp)
802028d8: 45 61        	addi	sp, sp, 48
802028da: 82 80        	ret
;             .Int => return @intCast(Result, y),
802028dc: 03 35 84 fd  	ld	a0, -40(s0)
802028e0: 23 34 a4 fe  	sd	a0, -24(s0)
802028e4: 02 74        	ld	s0, 32(sp)
802028e6: a2 70        	ld	ra, 40(sp)
802028e8: 45 61        	addi	sp, sp, 48
802028ea: 82 80        	ret

00000000802028ec <init>:
; export fn init(boot_hart_id: u64, fdt_address: u64) callconv(.C) noreturn {
802028ec: 71 71        	addi	sp, sp, -176
802028ee: 06 f5        	sd	ra, 168(sp)
802028f0: 22 f1        	sd	s0, 160(sp)
802028f2: 00 19        	addi	s0, sp, 176
802028f4: 23 30 a4 f8  	sd	a0, -128(s0)
802028f8: 23 3c b4 f6  	sd	a1, -136(s0)

00000000802028fc <.LBB52_7>:
;     current_cpu = boot_hart_id;
802028fc: 97 15 67 00  	auipc	a1, 1649
80202900: 93 85 c5 70  	addi	a1, a1, 1804
80202904: 88 e1        	sd	a0, 0(a1)
;     init_logger();
80202906: 97 00 00 00  	auipc	ra, 0
8020290a: e7 80 20 1d  	jalr	466(ra)
;     log.debug("Hello RNU. Arch: {s}. Build mode: {s}. Boot HART id: {}. Device tree address: 0x{x}", .{ @tagName(kernel.current_arch), @tagName(kernel.build_mode), boot_hart_id, fdt_address });
8020290e: 03 35 04 f8  	ld	a0, -128(s0)
80202912: 23 34 a4 fc  	sd	a0, -56(s0)
80202916: 03 35 84 f7  	ld	a0, -136(s0)
8020291a: 23 38 a4 fc  	sd	a0, -48(s0)
8020291e: 13 05 84 fc  	addi	a0, s0, -56
80202922: 97 00 00 00  	auipc	ra, 0
80202926: e7 80 60 1d  	jalr	470(ra)
;     device_tree.base_address = fdt_address;
8020292a: 83 35 84 f7  	ld	a1, -136(s0)

000000008020292e <.LBB52_8>:
8020292e: 17 25 02 00  	auipc	a0, 34
80202932: 13 05 25 71  	addi	a0, a0, 1810
;     device_tree.base_address = fdt_address;
80202936: 0c f5        	sd	a1, 40(a0)
;     device_tree.parse();
80202938: 97 00 00 00  	auipc	ra, 0
8020293c: e7 80 40 1e  	jalr	484(ra)
;     init_cpu_count();
80202940: 97 00 00 00  	auipc	ra, 0
80202944: e7 80 80 44  	jalr	1096(ra)
;     Timer.init();
80202948: 97 00 00 00  	auipc	ra, 0
8020294c: e7 80 40 46  	jalr	1124(ra)
;     const start = Timer.get_timestamp();
80202950: 97 00 00 00  	auipc	ra, 0
80202954: e7 80 a0 52  	jalr	1322(ra)
80202958: 23 30 a4 fc  	sd	a0, -64(s0)
;     Paging.init();
8020295c: 97 00 00 00  	auipc	ra, 0
80202960: e7 80 00 54  	jalr	1344(ra)
;     Interrupts.init(boot_hart_id);
80202964: 03 35 04 f8  	ld	a0, -128(s0)
80202968: 97 00 00 00  	auipc	ra, 0
8020296c: e7 80 20 56  	jalr	1378(ra)
;     local_storage[boot_hart_id].init(boot_hart_id, true);
80202970: 03 35 04 f8  	ld	a0, -128(s0)
80202974: 23 38 a4 f6  	sd	a0, -144(s0)
80202978: 93 05 00 04  	addi	a1, zero, 64
8020297c: 63 6c b5 00  	bltu	a0, a1, 0x80202994 <.LBB52_9+0x12>
80202980: 09 a0        	j	0x80202982 <.LBB52_9>

0000000080202982 <.LBB52_9>:
80202982: 17 b5 01 00  	auipc	a0, 27
80202986: 13 05 e5 97  	addi	a0, a0, -1666
8020298a: 81 45        	mv	a1, zero
8020298c: 97 d0 ff ff  	auipc	ra, 1048573
80202990: e7 80 40 71  	jalr	1812(ra)
80202994: 03 35 04 f7  	ld	a0, -144(s0)
80202998: 32 05        	slli	a0, a0, 12

000000008020299a <.LBB52_10>:
8020299a: 97 25 02 00  	auipc	a1, 34
8020299e: 93 85 e5 6d  	addi	a1, a1, 1758
802029a2: 2e 95        	add	a0, a0, a1
802029a4: 83 35 04 f8  	ld	a1, -128(s0)
802029a8: 05 46        	addi	a2, zero, 1
802029aa: 97 10 00 00  	auipc	ra, 1
802029ae: e7 80 e0 97  	jalr	-1666(ra)
;     const time = Timer.get_time_from_timestamp(Timer.get_timestamp() - start);
802029b2: 97 00 00 00  	auipc	ra, 0
802029b6: e7 80 80 4c  	jalr	1224(ra)
802029ba: 83 35 04 fc  	ld	a1, -64(s0)
802029be: b3 05 b5 40  	sub	a1, a0, a1
802029c2: 23 34 b4 f6  	sd	a1, -152(s0)
802029c6: 63 7c b5 00  	bgeu	a0, a1, 0x802029de <.LBB52_11+0x12>
802029ca: 09 a0        	j	0x802029cc <.LBB52_11>

00000000802029cc <.LBB52_11>:
802029cc: 17 b5 01 00  	auipc	a0, 27
802029d0: 13 05 45 ab  	addi	a0, a0, -1356
802029d4: 81 45        	mv	a1, zero
802029d6: 97 d0 ff ff  	auipc	ra, 1048573
802029da: e7 80 a0 6c  	jalr	1738(ra)
802029de: 83 35 84 f6  	ld	a1, -152(s0)
802029e2: 13 05 04 fb  	addi	a0, s0, -80
802029e6: 97 10 00 00  	auipc	ra, 1
802029ea: e7 80 40 a6  	jalr	-1436(ra)
802029ee: 37 85 00 10  	lui	a0, 65544
;     virtio.block.init(0x10008000);
802029f2: 97 10 00 00  	auipc	ra, 1
802029f6: e7 80 a0 b8  	jalr	-1142(ra)
802029fa: 37 75 00 10  	lui	a0, 65543
;     virtio.gpu.init(0x10007000);
802029fe: 97 10 00 00  	auipc	ra, 1
80202a02: e7 80 e0 c7  	jalr	-898(ra)
80202a06: 05 65        	lui	a0, 1
80202a08: 1b 05 05 4c  	addiw	a0, a0, 1216
80202a0c: 23 3c a4 fc  	sd	a0, -40(s0)
80202a10: 2d 45        	addi	a0, zero, 11
80202a12: 23 30 a4 f6  	sd	a0, -160(s0)
80202a16: 81 45        	mv	a1, zero
80202a18: 05 45        	addi	a0, zero, 1
;     const pages = (bytes / sector_size) + @boolToInt(bytes % sector_size != 0);
80202a1a: 63 1c b5 00  	bne	a0, a1, 0x80202a32 <.LBB52_12+0x12>
80202a1e: 09 a0        	j	0x80202a20 <.LBB52_12>

0000000080202a20 <.LBB52_12>:
80202a20: 17 b5 01 00  	auipc	a0, 27
80202a24: 13 05 05 a6  	addi	a0, a0, -1440
80202a28: 81 45        	mv	a1, zero
80202a2a: 97 d0 ff ff  	auipc	ra, 1048573
80202a2e: e7 80 60 67  	jalr	1654(ra)
80202a32: 83 36 04 f6  	ld	a3, -160(s0)
80202a36: 23 30 d4 fe  	sd	a3, -32(s0)
;     return pages;
80202a3a: 23 34 d4 fe  	sd	a3, -24(s0)

0000000080202a3e <.LBB52_13>:
;     const file = read_disk_raw(&file_buffer, 0, kernel.bytes_to_sector(file_size));
80202a3e: 97 b5 01 00  	auipc	a1, 27
80202a42: 93 85 a5 ae  	addi	a1, a1, -1302
80202a46: 13 05 04 fa  	addi	a0, s0, -96
80202a4a: 23 3c a4 f4  	sd	a0, -168(s0)
80202a4e: 01 46        	mv	a2, zero
80202a50: 97 10 00 00  	auipc	ra, 1
80202a54: e7 80 c0 52  	jalr	1324(ra)
80202a58: 83 35 84 f5  	ld	a1, -168(s0)

0000000080202a5c <.LBB52_14>:
;     kernel.font = kernel.PSF1.Font.parse(file);
80202a5c: 17 55 06 00  	auipc	a0, 101
80202a60: 13 05 45 ba  	addi	a0, a0, -1116
80202a64: 97 10 00 00  	auipc	ra, 1
80202a68: e7 80 60 75  	jalr	1878(ra)

0000000080202a6c <.LBB52_15>:
;     kernel.graphics.draw_horizontal_line(kernel.graphics.Line{ .start = kernel.graphics.Point{ .x = 10, .y = 10 }, .end = kernel.graphics.Point{ .x = 100, .y = 10 } }, kernel.graphics.Color{ .red = 0, .green = 0, .blue = 0, .alpha = 0 });
80202a6c: 17 25 02 00  	auipc	a0, 34
80202a70: 13 05 45 30  	addi	a0, a0, 772

0000000080202a74 <.LBB52_16>:
80202a74: 97 25 02 00  	auipc	a1, 34
80202a78: 93 85 05 39  	addi	a1, a1, 912
80202a7c: 97 20 00 00  	auipc	ra, 2
80202a80: e7 80 80 8f  	jalr	-1800(ra)

0000000080202a84 <.LBB52_17>:
80202a84: 17 55 06 00  	auipc	a0, 101
80202a88: 13 05 45 b9  	addi	a0, a0, -1132
;     log.debug("F W: {}. F H: {}", .{ kernel.framebuffer.width, kernel.framebuffer.height });
80202a8c: 08 65        	ld	a0, 8(a0)
80202a8e: 23 3c a4 f8  	sd	a0, -104(s0)
80202a92: 13 05 84 f9  	addi	a0, s0, -104
80202a96: 97 20 00 00  	auipc	ra, 2
80202a9a: e7 80 e0 aa  	jalr	-1362(ra)
;     virtio.gpu.send_and_flush_framebuffer();
80202a9e: 97 20 00 00  	auipc	ra, 2
80202aa2: e7 80 e0 ac  	jalr	-1330(ra)

0000000080202aa6 <.LBB52_18>:
;     kernel.framebuffer_initialized = true;
80202aa6: 97 15 67 00  	auipc	a1, 1649
80202aaa: 93 85 a5 56  	addi	a1, a1, 1386
80202aae: 05 45        	addi	a0, zero, 1
80202ab0: 23 80 a5 00  	sb	a0, 0(a1)
;     log.debug("Initialized in {} s {} us", .{ time.s, time.us });
80202ab4: 03 35 04 fb  	ld	a0, -80(s0)
80202ab8: 23 34 a4 f8  	sd	a0, -120(s0)
80202abc: 03 35 84 fb  	ld	a0, -72(s0)
80202ac0: 23 38 a4 f8  	sd	a0, -112(s0)
80202ac4: 13 05 84 f8  	addi	a0, s0, -120
80202ac8: 97 20 00 00  	auipc	ra, 2
80202acc: e7 80 40 d4  	jalr	-700(ra)
;     spinloop();
80202ad0: 97 20 00 00  	auipc	ra, 2
80202ad4: e7 80 00 d6  	jalr	-672(ra)

0000000080202ad8 <arch.riscv.init_logger>:
; pub fn init_logger() void {
80202ad8: 41 11        	addi	sp, sp, -16
;     uart.init(false);
80202ada: 06 e4        	sd	ra, 8(sp)
80202adc: 22 e0        	sd	s0, 0(sp)
80202ade: 00 08        	addi	s0, sp, 16

0000000080202ae0 <.LBB53_1>:
80202ae0: 17 25 02 00  	auipc	a0, 34
80202ae4: 13 05 05 52  	addi	a0, a0, 1312
80202ae8: 97 20 00 00  	auipc	ra, 2
80202aec: e7 80 20 01  	jalr	18(ra)
; pub fn init_logger() void {
80202af0: 02 64        	ld	s0, 0(sp)
80202af2: a2 60        	ld	ra, 8(sp)
80202af4: 41 01        	addi	sp, sp, 16
80202af6: 82 80        	ret

0000000080202af8 <std.log.scoped(RISCV64).debug>:
;         pub fn debug(
80202af8: 01 11        	addi	sp, sp, -32
;             log(.debug, scope, format, args);
80202afa: 06 ec        	sd	ra, 24(sp)
80202afc: 22 e8        	sd	s0, 16(sp)
80202afe: 00 10        	addi	s0, sp, 32
80202b00: 0c 65        	ld	a1, 8(a0)
80202b02: 23 34 b4 fe  	sd	a1, -24(s0)
80202b06: 0c 61        	ld	a1, 0(a0)
80202b08: 23 30 b4 fe  	sd	a1, -32(s0)
80202b0c: 97 20 00 00  	auipc	ra, 2
80202b10: e7 80 40 03  	jalr	52(ra)
;         ) void {
80202b14: 42 64        	ld	s0, 16(sp)
80202b16: e2 60        	ld	ra, 24(sp)
80202b18: 05 61        	addi	sp, sp, 32
80202b1a: 82 80        	ret

0000000080202b1c <arch.riscv64.device_tree.parse>:
; pub fn parse(self: *@This()) void {
80202b1c: 13 01 01 97  	addi	sp, sp, -1680
80202b20: 23 34 11 68  	sd	ra, 1672(sp)
80202b24: 23 30 81 68  	sd	s0, 1664(sp)
80202b28: 13 04 01 69  	addi	s0, sp, 1680
80202b2c: 2a 86        	mv	a2, a0
80202b2e: 81 45        	mv	a1, zero
80202b30: 23 30 b4 9c  	sd	a1, -1600(s0)
80202b34: 23 30 b4 a4  	sd	a1, -1472(s0)
80202b38: 13 05 84 a5  	addi	a0, s0, -1448
80202b3c: 23 34 a4 a4  	sd	a0, -1464(s0)
80202b40: 13 05 00 02  	addi	a0, zero, 32
80202b44: 23 38 a4 a4  	sd	a0, -1456(s0)
80202b48: 23 38 c4 9c  	sd	a2, -1584(s0)
80202b4c: 23 38 b4 c8  	sd	a1, -880(s0)
80202b50: 93 05 84 ca  	addi	a1, s0, -856
80202b54: 23 3c b4 c8  	sd	a1, -872(s0)
80202b58: 23 30 a4 ca  	sd	a0, -864(s0)

0000000080202b5c <.LBB55_15>:
;     _ = writer.write(bytes) catch unreachable;
80202b5c: 17 b6 01 00  	auipc	a2, 27
80202b60: 13 06 c6 9d  	addi	a2, a2, -1572
80202b64: 13 05 04 c8  	addi	a0, s0, -896
80202b68: 93 05 04 c9  	addi	a1, s0, -880
80202b6c: 97 e0 ff ff  	auipc	ra, 1048574
80202b70: e7 80 00 0d  	jalr	208(ra)
80202b74: 83 35 04 9c  	ld	a1, -1600(s0)
80202b78: 03 55 84 c8  	lhu	a0, -888(s0)
80202b7c: 23 34 a4 9c  	sd	a0, -1592(s0)
80202b80: 63 0b b5 00  	beq	a0, a1, 0x80202b96 <.LBB55_15+0x3a>
80202b84: 09 a0        	j	0x80202b86 <.LBB55_15+0x2a>
80202b86: 83 35 84 9c  	ld	a1, -1592(s0)
80202b8a: 13 05 04 c9  	addi	a0, s0, -880
80202b8e: 97 e0 ff ff  	auipc	ra, 1048574
80202b92: e7 80 00 a6  	jalr	-1440(ra)
80202b96: 01 45        	mv	a0, zero
80202b98: 23 38 a4 9a  	sd	a0, -1616(s0)
80202b9c: 23 38 a4 da  	sd	a0, -592(s0)
80202ba0: 13 05 84 dc  	addi	a0, s0, -568
80202ba4: 23 3c a4 da  	sd	a0, -584(s0)
80202ba8: 13 05 00 02  	addi	a0, zero, 32
80202bac: 23 30 a4 dc  	sd	a0, -576(s0)
80202bb0: 13 05 04 db  	addi	a0, s0, -592
;     writer.print(format, args) catch unreachable;
80202bb4: 97 50 00 00  	auipc	ra, 5
80202bb8: e7 80 40 f7  	jalr	-140(ra)
80202bbc: 83 35 04 9b  	ld	a1, -1616(s0)
80202bc0: 23 17 a4 da  	sh	a0, -594(s0)
80202bc4: 41 66        	lui	a2, 16
80202bc6: 7d 36        	addiw	a2, a2, -1
80202bc8: 71 8d        	and	a0, a0, a2
80202bca: 23 3c a4 9a  	sd	a0, -1608(s0)
80202bce: 63 0b b5 00  	beq	a0, a1, 0x80202be4 <.LBB55_15+0x88>
80202bd2: 09 a0        	j	0x80202bd4 <.LBB55_15+0x78>
80202bd4: 83 35 84 9b  	ld	a1, -1608(s0)
80202bd8: 13 05 04 db  	addi	a0, s0, -592
80202bdc: 97 e0 ff ff  	auipc	ra, 1048574
80202be0: e7 80 20 a1  	jalr	-1518(ra)
;     self.header = DeviceTree.Header.read(@intToPtr([*]const u8, self.base_address)[0..@sizeOf(DeviceTree.Header)]) catch unreachable;
80202be4: 03 35 04 9d  	ld	a0, -1584(s0)
80202be8: 23 30 a4 9a  	sd	a0, -1632(s0)
80202bec: 08 75        	ld	a0, 40(a0)
80202bee: 23 34 a4 9a  	sd	a0, -1624(s0)
80202bf2: 81 45        	mv	a1, zero
80202bf4: 63 1c b5 00  	bne	a0, a1, 0x80202c0c <.LBB55_16+0x12>
80202bf8: 09 a0        	j	0x80202bfa <.LBB55_16>

0000000080202bfa <.LBB55_16>:
80202bfa: 17 b5 01 00  	auipc	a0, 27
80202bfe: 13 05 e5 8f  	addi	a0, a0, -1794
80202c02: 81 45        	mv	a1, zero
80202c04: 97 d0 ff ff  	auipc	ra, 1048573
80202c08: e7 80 c0 49  	jalr	1180(ra)
80202c0c: 03 35 84 9a  	ld	a0, -1624(s0)
80202c10: 23 3c a4 a2  	sd	a0, -1480(s0)
80202c14: 23 3c a4 98  	sd	a0, -1640(s0)
80202c18: 81 45        	mv	a1, zero
80202c1a: 05 45        	addi	a0, zero, 1
80202c1c: 63 1c b5 00  	bne	a0, a1, 0x80202c34 <.LBB55_17+0x12>
80202c20: 09 a0        	j	0x80202c22 <.LBB55_17>

0000000080202c22 <.LBB55_17>:
80202c22: 17 a5 01 00  	auipc	a0, 26
80202c26: 13 05 e5 6d  	addi	a0, a0, 1758
80202c2a: 81 45        	mv	a1, zero
80202c2c: 97 d0 ff ff  	auipc	ra, 1048573
80202c30: e7 80 40 47  	jalr	1140(ra)
80202c34: 03 35 84 99  	ld	a0, -1640(s0)
80202c38: 23 34 a4 a2  	sd	a0, -1496(s0)
80202c3c: 13 05 80 02  	addi	a0, zero, 40
80202c40: 23 38 a4 a2  	sd	a0, -1488(s0)
80202c44: 13 05 84 9f  	addi	a0, s0, -1544
80202c48: 93 05 04 a4  	addi	a1, s0, -1472
80202c4c: 13 06 84 a2  	addi	a2, s0, -1496
80202c50: 97 20 00 00  	auipc	ra, 2
80202c54: e7 80 40 f3  	jalr	-204(ra)
80202c58: 03 55 04 a2  	lhu	a0, -1504(s0)
80202c5c: 23 38 a4 98  	sd	a0, -1648(s0)
80202c60: 81 45        	mv	a1, zero
80202c62: 63 0b b5 00  	beq	a0, a1, 0x80202c78 <.LBB55_17+0x56>
80202c66: 09 a0        	j	0x80202c68 <.LBB55_17+0x46>
80202c68: 83 35 04 99  	ld	a1, -1648(s0)
80202c6c: 13 05 04 a4  	addi	a0, s0, -1472
80202c70: 97 e0 ff ff  	auipc	ra, 1048574
80202c74: e7 80 e0 97  	jalr	-1666(ra)
80202c78: 03 35 04 9a  	ld	a0, -1632(s0)
80202c7c: 93 05 84 9f  	addi	a1, s0, -1544
80202c80: 13 06 80 02  	addi	a2, zero, 40
80202c84: 97 a0 01 00  	auipc	ra, 26
80202c88: e7 80 a0 0a  	jalr	170(ra)
;     DeviceTree.MemoryReservationBlock.parse(self.header, self.base_address);
80202c8c: 03 35 04 9d  	ld	a0, -1584(s0)
80202c90: 0c 75        	ld	a1, 40(a0)
80202c92: 97 20 00 00  	auipc	ra, 2
80202c96: e7 80 80 06  	jalr	104(ra)
;     var dt_structure_block_parser = DeviceTree.StructureBlock.Parser{ .slice = undefined, .i = 0, .device_tree = self };
80202c9a: 03 35 04 9d  	ld	a0, -1584(s0)
80202c9e: 23 38 a4 9e  	sd	a0, -1552(s0)
80202ca2: 37 b5 aa fa  	lui	a0, 1026731
80202ca6: 1b 05 b5 aa  	addiw	a0, a0, -1365
80202caa: 32 05        	slli	a0, a0, 12
80202cac: 13 05 b5 aa  	addi	a0, a0, -1365
80202cb0: 32 05        	slli	a0, a0, 12
80202cb2: 13 05 b5 aa  	addi	a0, a0, -1365
80202cb6: 32 05        	slli	a0, a0, 12
80202cb8: 13 05 a5 aa  	addi	a0, a0, -1366
80202cbc: 23 3c a4 9c  	sd	a0, -1576(s0)
80202cc0: 23 30 a4 9e  	sd	a0, -1568(s0)
80202cc4: 01 45        	mv	a0, zero
80202cc6: 23 30 a4 98  	sd	a0, -1664(s0)
80202cca: 23 34 a4 9e  	sd	a0, -1560(s0)
80202cce: 13 05 84 9d  	addi	a0, s0, -1576
;     dt_structure_block_parser.parse();
80202cd2: 97 20 00 00  	auipc	ra, 2
80202cd6: e7 80 a0 23  	jalr	570(ra)
80202cda: 03 35 04 98  	ld	a0, -1664(s0)
80202cde: 23 38 a4 ec  	sd	a0, -304(s0)
80202ce2: 13 05 84 ee  	addi	a0, s0, -280
80202ce6: 23 3c a4 ec  	sd	a0, -296(s0)
80202cea: 13 05 00 02  	addi	a0, zero, 32
80202cee: 23 30 a4 ee  	sd	a0, -288(s0)
80202cf2: 13 05 04 ed  	addi	a0, s0, -304
;     writer.print(format, args) catch unreachable;
80202cf6: 97 90 00 00  	auipc	ra, 9
80202cfa: e7 80 80 6b  	jalr	1720(ra)
80202cfe: 83 35 04 98  	ld	a1, -1664(s0)
80202d02: 23 17 a4 ec  	sh	a0, -306(s0)
80202d06: 41 66        	lui	a2, 16
80202d08: 7d 36        	addiw	a2, a2, -1
80202d0a: 71 8d        	and	a0, a0, a2
80202d0c: 23 34 a4 98  	sd	a0, -1656(s0)
80202d10: 63 0b b5 00  	beq	a0, a1, 0x80202d26 <.LBB55_17+0x104>
80202d14: 09 a0        	j	0x80202d16 <.LBB55_17+0xf4>
80202d16: 83 35 84 98  	ld	a1, -1656(s0)
80202d1a: 13 05 04 ed  	addi	a0, s0, -304
80202d1e: 97 e0 ff ff  	auipc	ra, 1048574
80202d22: e7 80 00 8d  	jalr	-1840(ra)
80202d26: 01 45        	mv	a0, zero
80202d28: 23 38 a4 96  	sd	a0, -1680(s0)
80202d2c: 23 34 a4 b6  	sd	a0, -1176(s0)
80202d30: 13 05 04 b8  	addi	a0, s0, -1152
80202d34: 23 38 a4 b6  	sd	a0, -1168(s0)
80202d38: 13 05 00 02  	addi	a0, zero, 32
80202d3c: 23 3c a4 b6  	sd	a0, -1160(s0)

0000000080202d40 <.LBB55_18>:
;     _ = writer.write(bytes) catch unreachable;
80202d40: 17 b6 01 00  	auipc	a2, 27
80202d44: 13 06 86 80  	addi	a2, a2, -2040
80202d48: 13 05 84 b5  	addi	a0, s0, -1192
80202d4c: 93 05 84 b6  	addi	a1, s0, -1176
80202d50: 97 e0 ff ff  	auipc	ra, 1048574
80202d54: e7 80 c0 ee  	jalr	-276(ra)
80202d58: 83 35 04 97  	ld	a1, -1680(s0)
80202d5c: 03 55 04 b6  	lhu	a0, -1184(s0)
80202d60: 23 3c a4 96  	sd	a0, -1672(s0)
80202d64: 63 0b b5 00  	beq	a0, a1, 0x80202d7a <.LBB55_18+0x3a>
80202d68: 09 a0        	j	0x80202d6a <.LBB55_18+0x2a>
80202d6a: 83 35 84 97  	ld	a1, -1672(s0)
80202d6e: 13 05 84 b6  	addi	a0, s0, -1176
80202d72: 97 e0 ff ff  	auipc	ra, 1048574
80202d76: e7 80 c0 87  	jalr	-1924(ra)
; pub fn parse(self: *@This()) void {
80202d7a: 03 34 01 68  	ld	s0, 1664(sp)
80202d7e: 83 30 81 68  	ld	ra, 1672(sp)
80202d82: 13 01 01 69  	addi	sp, sp, 1680
80202d86: 82 80        	ret

0000000080202d88 <arch.riscv.init_cpu_count>:
; fn init_cpu_count() void {
80202d88: 41 11        	addi	sp, sp, -16
;     log.debug("CPU count initialized with 1. Is it correct?", .{});
80202d8a: 06 e4        	sd	ra, 8(sp)
80202d8c: 22 e0        	sd	s0, 0(sp)
80202d8e: 00 08        	addi	s0, sp, 16
80202d90: 97 20 00 00  	auipc	ra, 2
80202d94: e7 80 e0 79  	jalr	1950(ra)

0000000080202d98 <.LBB56_1>:
;     cpu_count = 1;
80202d98: 97 15 67 00  	auipc	a1, 1649
80202d9c: 93 85 05 28  	addi	a1, a1, 640
80202da0: 05 45        	addi	a0, zero, 1
80202da2: 88 e1        	sd	a0, 0(a1)
; fn init_cpu_count() void {
80202da4: 02 64        	ld	s0, 0(sp)
80202da6: a2 60        	ld	ra, 8(sp)
80202da8: 41 01        	addi	sp, sp, 16
80202daa: 82 80        	ret

0000000080202dac <arch.riscv64.timer.init>:
; pub fn init() void {
80202dac: 19 71        	addi	sp, sp, -128
;     const property = kernel.arch.device_tree.find_property("cpus", "timebase-frequency", .exact, null, null) orelse @panic("Couldn't find property timebase-frequency");
80202dae: 86 fc        	sd	ra, 120(sp)
80202db0: a2 f8        	sd	s0, 112(sp)
80202db2: 00 01        	addi	s0, sp, 128

0000000080202db4 <.LBB57_6>:
80202db4: 97 25 02 00  	auipc	a1, 34
80202db8: 93 85 c5 28  	addi	a1, a1, 652

0000000080202dbc <.LBB57_7>:
80202dbc: 17 a6 01 00  	auipc	a2, 26
80202dc0: 13 06 c6 79  	addi	a2, a2, 1948

0000000080202dc4 <.LBB57_8>:
80202dc4: 97 a6 01 00  	auipc	a3, 26
80202dc8: 93 86 46 7a  	addi	a3, a3, 1956

0000000080202dcc <.LBB57_9>:
80202dcc: 17 a7 01 00  	auipc	a4, 26
80202dd0: 13 07 c7 7a  	addi	a4, a4, 1964
80202dd4: 13 05 84 fb  	addi	a0, s0, -72
80202dd8: 97 20 00 00  	auipc	ra, 2
80202ddc: e7 80 e0 76  	jalr	1902(ra)
80202de0: 03 45 84 fd  	lbu	a0, -40(s0)
80202de4: 81 45        	mv	a1, zero
80202de6: 63 1c b5 00  	bne	a0, a1, 0x80202dfe <.LBB57_10+0x12>
80202dea: 09 a0        	j	0x80202dec <.LBB57_10>

0000000080202dec <.LBB57_10>:
80202dec: 17 a5 01 00  	auipc	a0, 26
80202df0: 13 05 45 7a  	addi	a0, a0, 1956
80202df4: 81 45        	mv	a1, zero
80202df6: 97 d0 ff ff  	auipc	ra, 1048573
80202dfa: e7 80 a0 2a  	jalr	682(ra)
80202dfe: 03 35 04 fd  	ld	a0, -48(s0)
80202e02: 23 38 a4 fa  	sd	a0, -80(s0)
80202e06: 03 35 84 fc  	ld	a0, -56(s0)
80202e0a: 23 34 a4 fa  	sd	a0, -88(s0)
80202e0e: 03 35 04 fc  	ld	a0, -64(s0)
80202e12: 23 30 a4 fa  	sd	a0, -96(s0)
80202e16: 03 35 84 fb  	ld	a0, -72(s0)
80202e1a: 23 3c a4 f8  	sd	a0, -104(s0)
80202e1e: 09 a0        	j	0x80202e20 <.LBB57_10+0x34>
;     frequency = kernel.arch.dt_read_int(u32, property.value);
80202e20: 13 05 84 fa  	addi	a0, s0, -88
80202e24: 23 30 a4 f8  	sd	a0, -128(s0)
80202e28: 83 35 04 fb  	ld	a1, -80(s0)
80202e2c: 23 38 b4 f8  	sd	a1, -112(s0)
80202e30: 03 35 84 fa  	ld	a0, -88(s0)
80202e34: 23 34 a4 f8  	sd	a0, -120(s0)
80202e38: 0d 45        	addi	a0, zero, 3
;     return std.mem.readIntBig(T, slice[0..@sizeOf(T)]);
80202e3a: 63 6c b5 00  	bltu	a0, a1, 0x80202e52 <.LBB57_11+0x12>
80202e3e: 09 a0        	j	0x80202e40 <.LBB57_11>

0000000080202e40 <.LBB57_11>:
80202e40: 17 a5 01 00  	auipc	a0, 26
80202e44: 13 05 05 4c  	addi	a0, a0, 1216
80202e48: 81 45        	mv	a1, zero
80202e4a: 97 d0 ff ff  	auipc	ra, 1048573
80202e4e: e7 80 60 25  	jalr	598(ra)
80202e52: 03 35 04 f8  	ld	a0, -128(s0)
80202e56: 08 61        	ld	a0, 0(a0)
80202e58: 23 30 a4 fe  	sd	a0, -32(s0)
80202e5c: 97 a0 00 00  	auipc	ra, 10
80202e60: e7 80 40 aa  	jalr	-1372(ra)
80202e64: 23 26 a4 fe  	sw	a0, -20(s0)

0000000080202e68 <.LBB57_12>:
;     frequency = kernel.arch.dt_read_int(u32, property.value);
80202e68: 97 15 67 00  	auipc	a1, 1649
80202e6c: 93 85 85 1b  	addi	a1, a1, 440
80202e70: 88 c1        	sw	a0, 0(a1)
; pub fn init() void {
80202e72: 46 74        	ld	s0, 112(sp)
80202e74: e6 70        	ld	ra, 120(sp)
80202e76: 09 61        	addi	sp, sp, 128
80202e78: 82 80        	ret

0000000080202e7a <arch.riscv64.timer.get_timestamp>:
; pub fn get_timestamp() u64 {
80202e7a: 01 11        	addi	sp, sp, -32
80202e7c: 06 ec        	sd	ra, 24(sp)
80202e7e: 22 e8        	sd	s0, 16(sp)
80202e80: 00 10        	addi	s0, sp, 32
80202e82: 01 45        	mv	a0, zero
;     var time: u64 = 0;
80202e84: 23 30 a4 fe  	sd	a0, -32(s0)
;     asm volatile ("csrr %[time], time"
80202e88: 73 25 10 c0  	rdtime	a0
80202e8c: 23 30 a4 fe  	sd	a0, -32(s0)
;     return time;
80202e90: 23 34 a4 fe  	sd	a0, -24(s0)
80202e94: 42 64        	ld	s0, 16(sp)
80202e96: e2 60        	ld	ra, 24(sp)
80202e98: 05 61        	addi	sp, sp, 32
80202e9a: 82 80        	ret

0000000080202e9c <arch.riscv64.paging.init>:
; pub fn init() void {
80202e9c: 41 11        	addi	sp, sp, -16
;     Physical.init();
80202e9e: 06 e4        	sd	ra, 8(sp)
80202ea0: 22 e0        	sd	s0, 0(sp)
80202ea2: 00 08        	addi	s0, sp, 16
80202ea4: 97 20 00 00  	auipc	ra, 2
80202ea8: e7 80 00 77  	jalr	1904(ra)
;     Virtual.init();
80202eac: 97 30 00 00  	auipc	ra, 3
80202eb0: e7 80 c0 45  	jalr	1116(ra)

0000000080202eb4 <.LBB59_1>:
;     enabled = true;
80202eb4: 97 15 67 00  	auipc	a1, 1649
80202eb8: 93 85 05 17  	addi	a1, a1, 368
80202ebc: 05 45        	addi	a0, zero, 1
80202ebe: 23 80 a5 00  	sb	a0, 0(a1)
; pub fn init() void {
80202ec2: 02 64        	ld	s0, 0(sp)
80202ec4: a2 60        	ld	ra, 8(sp)
80202ec6: 41 01        	addi	sp, sp, 16
80202ec8: 82 80        	ret

0000000080202eca <arch.riscv64.interrupts.init>:
; pub fn init(hart_id: u64) void {
80202eca: 0d 71        	addi	sp, sp, -352
80202ecc: 86 ee        	sd	ra, 344(sp)
80202ece: a2 ea        	sd	s0, 336(sp)
80202ed0: 80 12        	addi	s0, sp, 352
80202ed2: 23 3c a4 f0  	sd	a0, -232(s0)
;     log.debug("About to initialized interrupts", .{});
80202ed6: 97 30 00 00  	auipc	ra, 3
80202eda: e7 80 80 7d  	jalr	2008(ra)

0000000080202ede <.LBB60_45>:
;     const plic_dt = kernel.arch.device_tree.find_property("soc", "reg", .exact, &[_][]const u8{"plic"}, &[_]kernel.arch.DeviceTree.SearchType{.start}) orelse @panic("unable to find PLIC in the device tree");
80202ede: 97 25 02 00  	auipc	a1, 34
80202ee2: 93 85 25 16  	addi	a1, a1, 354

0000000080202ee6 <.LBB60_46>:
80202ee6: 17 a6 01 00  	auipc	a2, 26
80202eea: 13 06 a6 6b  	addi	a2, a2, 1722

0000000080202eee <.LBB60_47>:
80202eee: 97 a6 01 00  	auipc	a3, 26
80202ef2: 93 86 26 6c  	addi	a3, a3, 1730

0000000080202ef6 <.LBB60_48>:
80202ef6: 17 a7 01 00  	auipc	a4, 26
80202efa: 13 07 a7 6d  	addi	a4, a4, 1754
80202efe: 13 05 04 f8  	addi	a0, s0, -128
80202f02: 97 30 00 00  	auipc	ra, 3
80202f06: e7 80 40 7c  	jalr	1988(ra)
80202f0a: 03 45 04 fa  	lbu	a0, -96(s0)
80202f0e: 81 45        	mv	a1, zero
80202f10: 63 1c b5 00  	bne	a0, a1, 0x80202f28 <.LBB60_49+0x12>
80202f14: 09 a0        	j	0x80202f16 <.LBB60_49>

0000000080202f16 <.LBB60_49>:
80202f16: 17 a5 01 00  	auipc	a0, 26
80202f1a: 13 05 25 6d  	addi	a0, a0, 1746
80202f1e: 81 45        	mv	a1, zero
80202f20: 97 d0 ff ff  	auipc	ra, 1048573
80202f24: e7 80 00 18  	jalr	384(ra)
80202f28: 03 35 84 f9  	ld	a0, -104(s0)
80202f2c: 23 3c a4 f6  	sd	a0, -136(s0)
80202f30: 03 35 04 f9  	ld	a0, -112(s0)
80202f34: 23 38 a4 f6  	sd	a0, -144(s0)
80202f38: 03 35 84 f8  	ld	a0, -120(s0)
80202f3c: 23 34 a4 f6  	sd	a0, -152(s0)
80202f40: 03 35 04 f8  	ld	a0, -128(s0)
80202f44: 23 30 a4 f6  	sd	a0, -160(s0)
80202f48: 09 a0        	j	0x80202f4a <.LBB60_49+0x34>
;     plic_base = kernel.arch.dt_read_int(u64, plic_dt.value);
80202f4a: 13 05 04 f7  	addi	a0, s0, -144
80202f4e: 23 38 a4 f0  	sd	a0, -240(s0)
80202f52: 83 35 84 f7  	ld	a1, -136(s0)
80202f56: 23 3c b4 f4  	sd	a1, -168(s0)
80202f5a: 03 35 04 f7  	ld	a0, -144(s0)
80202f5e: 23 38 a4 f4  	sd	a0, -176(s0)
80202f62: 1d 45        	addi	a0, zero, 7
;     return std.mem.readIntBig(T, slice[0..@sizeOf(T)]);
80202f64: 63 6c b5 00  	bltu	a0, a1, 0x80202f7c <.LBB60_50+0x12>
80202f68: 09 a0        	j	0x80202f6a <.LBB60_50>

0000000080202f6a <.LBB60_50>:
80202f6a: 17 a5 01 00  	auipc	a0, 26
80202f6e: 13 05 65 39  	addi	a0, a0, 918
80202f72: 81 45        	mv	a1, zero
80202f74: 97 d0 ff ff  	auipc	ra, 1048573
80202f78: e7 80 c0 12  	jalr	300(ra)
80202f7c: 03 35 04 f1  	ld	a0, -240(s0)
80202f80: 08 61        	ld	a0, 0(a0)
80202f82: 23 3c a4 fa  	sd	a0, -72(s0)
80202f86: 97 00 01 00  	auipc	ra, 16
80202f8a: e7 80 a0 1b  	jalr	442(ra)
80202f8e: 23 30 a4 fc  	sd	a0, -64(s0)

0000000080202f92 <.LBB60_51>:
;     plic_base = kernel.arch.dt_read_int(u64, plic_dt.value);
80202f92: 97 15 67 00  	auipc	a1, 1649
80202f96: 93 85 65 09  	addi	a1, a1, 150
80202f9a: 88 e1        	sd	a0, 0(a1)
;     plic_size = kernel.arch.dt_read_int(u64, plic_dt.value[@sizeOf(u64)..]);
80202f9c: 13 05 04 f7  	addi	a0, s0, -144
80202fa0: 23 30 a4 f0  	sd	a0, -256(s0)
80202fa4: 83 35 84 f7  	ld	a1, -136(s0)
80202fa8: 23 34 b4 f0  	sd	a1, -248(s0)
80202fac: 1d 45        	addi	a0, zero, 7
80202fae: 63 69 b5 26  	bltu	a0, a1, 0x80203220 <.LBB60_68+0x12>
80202fb2: b1 ac        	j	0x8020320e <.LBB60_68>
;     while (interrupt_i <= max_interrupt) : (interrupt_i += 1) {
80202fb4: 83 35 84 f3  	ld	a1, -200(s0)
80202fb8: 13 05 00 02  	addi	a0, zero, 32
80202fbc: 63 6d b5 08  	bltu	a0, a1, 0x80203056 <.LBB60_55+0x3e>
80202fc0: 09 a0        	j	0x80202fc2 <.LBB60_52>

0000000080202fc2 <.LBB60_52>:
;     return @intToPtr([*]volatile u32, plic_base + 0);
80202fc2: 17 15 67 00  	auipc	a0, 1649
80202fc6: 13 05 65 06  	addi	a0, a0, 102
80202fca: 08 61        	ld	a0, 0(a0)
80202fcc: 23 3c a4 ee  	sd	a0, -264(s0)
80202fd0: 81 45        	mv	a1, zero
80202fd2: 05 45        	addi	a0, zero, 1
80202fd4: 63 1c b5 00  	bne	a0, a1, 0x80202fec <.LBB60_53+0x12>
80202fd8: 09 a0        	j	0x80202fda <.LBB60_53>

0000000080202fda <.LBB60_53>:
80202fda: 17 a5 01 00  	auipc	a0, 26
80202fde: 13 05 65 4a  	addi	a0, a0, 1190
80202fe2: 81 45        	mv	a1, zero
80202fe4: 97 d0 ff ff  	auipc	ra, 1048573
80202fe8: e7 80 c0 0b  	jalr	188(ra)
80202fec: 03 35 84 ef  	ld	a0, -264(s0)
80202ff0: 81 45        	mv	a1, zero
;     return @intToPtr([*]volatile u32, plic_base + 0);
80202ff2: 63 1c b5 00  	bne	a0, a1, 0x8020300a <.LBB60_54+0x12>
80202ff6: 09 a0        	j	0x80202ff8 <.LBB60_54>

0000000080202ff8 <.LBB60_54>:
80202ff8: 17 a5 01 00  	auipc	a0, 26
80202ffc: 13 05 05 50  	addi	a0, a0, 1280
80203000: 81 45        	mv	a1, zero
80203002: 97 d0 ff ff  	auipc	ra, 1048573
80203006: e7 80 e0 09  	jalr	158(ra)
8020300a: 03 35 84 ef  	ld	a0, -264(s0)
8020300e: 0d 89        	andi	a0, a0, 3
80203010: 81 45        	mv	a1, zero
80203012: 63 0c b5 00  	beq	a0, a1, 0x8020302a <.LBB60_55+0x12>
80203016: 09 a0        	j	0x80203018 <.LBB60_55>

0000000080203018 <.LBB60_55>:
80203018: 17 a5 01 00  	auipc	a0, 26
8020301c: 13 05 05 63  	addi	a0, a0, 1584
80203020: 81 45        	mv	a1, zero
80203022: 97 d0 ff ff  	auipc	ra, 1048573
80203026: e7 80 e0 07  	jalr	126(ra)
8020302a: 03 35 84 ef  	ld	a0, -264(s0)
8020302e: 23 34 a4 fc  	sd	a0, -56(s0)
;         get_priority()[interrupt_i] = 0xffff_ffff;
80203032: 23 38 a4 f2  	sd	a0, -208(s0)
80203036: 83 35 84 f3  	ld	a1, -200(s0)
8020303a: 8a 05        	slli	a1, a1, 2
8020303c: aa 95        	add	a1, a1, a0
8020303e: 7d 55        	addi	a0, zero, -1
80203040: 01 91        	srli	a0, a0, 32
80203042: 88 c1        	sw	a0, 0(a1)
;     while (interrupt_i <= max_interrupt) : (interrupt_i += 1) {
80203044: 83 35 84 f3  	ld	a1, -200(s0)
80203048: 13 85 15 00  	addi	a0, a1, 1
8020304c: 23 38 a4 ee  	sd	a0, -272(s0)
80203050: 63 6e b5 2a  	bltu	a0, a1, 0x8020330c <.LBB60_76>
80203054: e9 a4        	j	0x8020331e <.LBB60_76+0x12>
;     get_senable(hart_id)[0] = 0b11111111111;
80203056: 03 35 84 f1  	ld	a0, -232(s0)
8020305a: 23 38 a4 fc  	sd	a0, -48(s0)

000000008020305e <.LBB60_56>:
;     return @intToPtr([*]volatile u32, plic_base + 0x2080 + hart_id * 0x1000);
8020305e: 17 15 67 00  	auipc	a0, 1649
80203062: 13 05 a5 fc  	addi	a0, a0, -54
80203066: 0c 61        	ld	a1, 0(a0)
80203068: 09 65        	lui	a0, 2
8020306a: 1b 05 05 08  	addiw	a0, a0, 128
8020306e: 2e 95        	add	a0, a0, a1
80203070: 23 34 a4 ee  	sd	a0, -280(s0)
80203074: 63 7c b5 00  	bgeu	a0, a1, 0x8020308c <.LBB60_57+0x12>
80203078: 09 a0        	j	0x8020307a <.LBB60_57>

000000008020307a <.LBB60_57>:
8020307a: 17 a5 01 00  	auipc	a0, 26
8020307e: 13 05 65 40  	addi	a0, a0, 1030
80203082: 81 45        	mv	a1, zero
80203084: 97 d0 ff ff  	auipc	ra, 1048573
80203088: e7 80 c0 01  	jalr	28(ra)
8020308c: 83 35 04 fd  	ld	a1, -48(s0)
80203090: 7d 55        	addi	a0, zero, -1
80203092: 31 81        	srli	a0, a0, 12
80203094: 6d 8d        	and	a0, a0, a1
80203096: 13 96 c5 00  	slli	a2, a1, 12
8020309a: 23 30 c4 ee  	sd	a2, -288(s0)
8020309e: 63 0c b5 00  	beq	a0, a1, 0x802030b6 <.LBB60_58+0x12>
802030a2: 09 a0        	j	0x802030a4 <.LBB60_58>

00000000802030a4 <.LBB60_58>:
802030a4: 17 a5 01 00  	auipc	a0, 26
802030a8: 13 05 c5 3d  	addi	a0, a0, 988
802030ac: 81 45        	mv	a1, zero
802030ae: 97 d0 ff ff  	auipc	ra, 1048573
802030b2: e7 80 20 ff  	jalr	-14(ra)
802030b6: 83 35 84 ee  	ld	a1, -280(s0)
802030ba: 03 35 04 ee  	ld	a0, -288(s0)
802030be: 2e 95        	add	a0, a0, a1
802030c0: 23 3c a4 ec  	sd	a0, -296(s0)
802030c4: 63 7c b5 00  	bgeu	a0, a1, 0x802030dc <.LBB60_59+0x12>
802030c8: 09 a0        	j	0x802030ca <.LBB60_59>

00000000802030ca <.LBB60_59>:
802030ca: 17 a5 01 00  	auipc	a0, 26
802030ce: 13 05 65 3b  	addi	a0, a0, 950
802030d2: 81 45        	mv	a1, zero
802030d4: 97 d0 ff ff  	auipc	ra, 1048573
802030d8: e7 80 c0 fc  	jalr	-52(ra)
802030dc: 03 35 84 ed  	ld	a0, -296(s0)
802030e0: 81 45        	mv	a1, zero
;     return @intToPtr([*]volatile u32, plic_base + 0x2080 + hart_id * 0x1000);
802030e2: 63 1c b5 00  	bne	a0, a1, 0x802030fa <.LBB60_60+0x12>
802030e6: 09 a0        	j	0x802030e8 <.LBB60_60>

00000000802030e8 <.LBB60_60>:
802030e8: 17 a5 01 00  	auipc	a0, 26
802030ec: 13 05 05 41  	addi	a0, a0, 1040
802030f0: 81 45        	mv	a1, zero
802030f2: 97 d0 ff ff  	auipc	ra, 1048573
802030f6: e7 80 e0 fa  	jalr	-82(ra)
802030fa: 03 35 84 ed  	ld	a0, -296(s0)
802030fe: 0d 89        	andi	a0, a0, 3
80203100: 81 45        	mv	a1, zero
80203102: 63 0c b5 00  	beq	a0, a1, 0x8020311a <.LBB60_61+0x12>
80203106: 09 a0        	j	0x80203108 <.LBB60_61>

0000000080203108 <.LBB60_61>:
80203108: 17 a5 01 00  	auipc	a0, 26
8020310c: 13 05 05 54  	addi	a0, a0, 1344
80203110: 81 45        	mv	a1, zero
80203112: 97 d0 ff ff  	auipc	ra, 1048573
80203116: e7 80 e0 f8  	jalr	-114(ra)
8020311a: 83 35 84 ed  	ld	a1, -296(s0)
8020311e: 23 3c b4 fc  	sd	a1, -40(s0)
;     get_senable(hart_id)[0] = 0b11111111111;
80203122: 23 34 b4 f2  	sd	a1, -216(s0)
80203126: 13 05 f0 7f  	addi	a0, zero, 2047
8020312a: 88 c1        	sw	a0, 0(a1)
;     get_spriority(hart_id)[0] = 0;
8020312c: 03 35 84 f1  	ld	a0, -232(s0)
80203130: 23 30 a4 fe  	sd	a0, -32(s0)

0000000080203134 <.LBB60_62>:
;     return @intToPtr([*]volatile u32, plic_base + 0x201000 + hart_id * 0x1000);
80203134: 17 15 67 00  	auipc	a0, 1649
80203138: 13 05 45 ef  	addi	a0, a0, -268
8020313c: 0c 61        	ld	a1, 0(a0)
8020313e: 37 15 20 00  	lui	a0, 513
80203142: 2e 95        	add	a0, a0, a1
80203144: 23 38 a4 ec  	sd	a0, -304(s0)
80203148: 63 7c b5 00  	bgeu	a0, a1, 0x80203160 <.LBB60_63+0x12>
8020314c: 09 a0        	j	0x8020314e <.LBB60_63>

000000008020314e <.LBB60_63>:
8020314e: 17 a5 01 00  	auipc	a0, 26
80203152: 13 05 25 33  	addi	a0, a0, 818
80203156: 81 45        	mv	a1, zero
80203158: 97 d0 ff ff  	auipc	ra, 1048573
8020315c: e7 80 80 f4  	jalr	-184(ra)
80203160: 83 35 04 fe  	ld	a1, -32(s0)
80203164: 7d 55        	addi	a0, zero, -1
80203166: 31 81        	srli	a0, a0, 12
80203168: 6d 8d        	and	a0, a0, a1
8020316a: 13 96 c5 00  	slli	a2, a1, 12
8020316e: 23 34 c4 ec  	sd	a2, -312(s0)
80203172: 63 0c b5 00  	beq	a0, a1, 0x8020318a <.LBB60_64+0x12>
80203176: 09 a0        	j	0x80203178 <.LBB60_64>

0000000080203178 <.LBB60_64>:
80203178: 17 a5 01 00  	auipc	a0, 26
8020317c: 13 05 85 30  	addi	a0, a0, 776
80203180: 81 45        	mv	a1, zero
80203182: 97 d0 ff ff  	auipc	ra, 1048573
80203186: e7 80 e0 f1  	jalr	-226(ra)
8020318a: 83 35 04 ed  	ld	a1, -304(s0)
8020318e: 03 35 84 ec  	ld	a0, -312(s0)
80203192: 2e 95        	add	a0, a0, a1
80203194: 23 30 a4 ec  	sd	a0, -320(s0)
80203198: 63 7c b5 00  	bgeu	a0, a1, 0x802031b0 <.LBB60_65+0x12>
8020319c: 09 a0        	j	0x8020319e <.LBB60_65>

000000008020319e <.LBB60_65>:
8020319e: 17 a5 01 00  	auipc	a0, 26
802031a2: 13 05 25 2e  	addi	a0, a0, 738
802031a6: 81 45        	mv	a1, zero
802031a8: 97 d0 ff ff  	auipc	ra, 1048573
802031ac: e7 80 80 ef  	jalr	-264(ra)
802031b0: 03 35 04 ec  	ld	a0, -320(s0)
802031b4: 81 45        	mv	a1, zero
;     return @intToPtr([*]volatile u32, plic_base + 0x201000 + hart_id * 0x1000);
802031b6: 63 1c b5 00  	bne	a0, a1, 0x802031ce <.LBB60_66+0x12>
802031ba: 09 a0        	j	0x802031bc <.LBB60_66>

00000000802031bc <.LBB60_66>:
802031bc: 17 a5 01 00  	auipc	a0, 26
802031c0: 13 05 c5 33  	addi	a0, a0, 828
802031c4: 81 45        	mv	a1, zero
802031c6: 97 d0 ff ff  	auipc	ra, 1048573
802031ca: e7 80 a0 ed  	jalr	-294(ra)
802031ce: 03 35 04 ec  	ld	a0, -320(s0)
802031d2: 0d 89        	andi	a0, a0, 3
802031d4: 81 45        	mv	a1, zero
802031d6: 63 0c b5 00  	beq	a0, a1, 0x802031ee <.LBB60_67+0x12>
802031da: 09 a0        	j	0x802031dc <.LBB60_67>

00000000802031dc <.LBB60_67>:
802031dc: 17 a5 01 00  	auipc	a0, 26
802031e0: 13 05 c5 46  	addi	a0, a0, 1132
802031e4: 81 45        	mv	a1, zero
802031e6: 97 d0 ff ff  	auipc	ra, 1048573
802031ea: e7 80 a0 eb  	jalr	-326(ra)
802031ee: 83 35 04 ec  	ld	a1, -320(s0)
802031f2: 23 34 b4 fe  	sd	a1, -24(s0)
;     get_spriority(hart_id)[0] = 0;
802031f6: 23 30 b4 f2  	sd	a1, -224(s0)
802031fa: 01 45        	mv	a0, zero
802031fc: 88 c1        	sw	a0, 0(a1)
;     log.debug("PLIC initialized", .{});
802031fe: 97 30 00 00  	auipc	ra, 3
80203202: e7 80 60 6a  	jalr	1702(ra)
; pub fn init(hart_id: u64) void {
80203206: 56 64        	ld	s0, 336(sp)
80203208: f6 60        	ld	ra, 344(sp)
8020320a: 35 61        	addi	sp, sp, 352
8020320c: 82 80        	ret

000000008020320e <.LBB60_68>:
;     plic_size = kernel.arch.dt_read_int(u64, plic_dt.value[@sizeOf(u64)..]);
8020320e: 17 a5 01 00  	auipc	a0, 26
80203212: 13 05 25 0f  	addi	a0, a0, 242
80203216: 81 45        	mv	a1, zero
80203218: 97 d0 ff ff  	auipc	ra, 1048573
8020321c: e7 80 80 e8  	jalr	-376(ra)
80203220: 81 45        	mv	a1, zero
80203222: 05 45        	addi	a0, zero, 1
;     plic_size = kernel.arch.dt_read_int(u64, plic_dt.value[@sizeOf(u64)..]);
80203224: 63 1c b5 00  	bne	a0, a1, 0x8020323c <.LBB60_69+0x12>
80203228: 09 a0        	j	0x8020322a <.LBB60_69>

000000008020322a <.LBB60_69>:
8020322a: 17 a5 01 00  	auipc	a0, 26
8020322e: 13 05 65 0d  	addi	a0, a0, 214
80203232: 81 45        	mv	a1, zero
80203234: 97 d0 ff ff  	auipc	ra, 1048573
80203238: e7 80 c0 e6  	jalr	-404(ra)
8020323c: 83 35 84 f0  	ld	a1, -248(s0)
80203240: 03 35 04 f0  	ld	a0, -256(s0)
80203244: 08 61        	ld	a0, 0(a0)
80203246: 21 05        	addi	a0, a0, 8
80203248: e1 15        	addi	a1, a1, -8
8020324a: 23 30 a4 f4  	sd	a0, -192(s0)
8020324e: 23 34 b4 f4  	sd	a1, -184(s0)
80203252: 1d 45        	addi	a0, zero, 7
;     return std.mem.readIntBig(T, slice[0..@sizeOf(T)]);
80203254: 63 6c b5 00  	bltu	a0, a1, 0x8020326c <.LBB60_70+0x12>
80203258: 09 a0        	j	0x8020325a <.LBB60_70>

000000008020325a <.LBB60_70>:
8020325a: 17 a5 01 00  	auipc	a0, 26
8020325e: 13 05 65 0a  	addi	a0, a0, 166
80203262: 81 45        	mv	a1, zero
80203264: 97 d0 ff ff  	auipc	ra, 1048573
80203268: e7 80 c0 e3  	jalr	-452(ra)
8020326c: 03 35 04 f4  	ld	a0, -192(s0)
80203270: 23 34 a4 fa  	sd	a0, -88(s0)
80203274: 97 00 01 00  	auipc	ra, 16
80203278: e7 80 c0 ec  	jalr	-308(ra)
8020327c: 23 38 a4 fa  	sd	a0, -80(s0)

0000000080203280 <.LBB60_71>:
;     plic_size = kernel.arch.dt_read_int(u64, plic_dt.value[@sizeOf(u64)..]);
80203280: 97 15 67 00  	auipc	a1, 1649
80203284: 93 85 05 db  	addi	a1, a1, -592
80203288: 23 30 b4 ea  	sd	a1, -352(s0)
8020328c: 88 e1        	sd	a0, 0(a1)
8020328e: 85 65        	lui	a1, 1
80203290: fd 35        	addiw	a1, a1, -1
;     kernel.assert(@src(), plic_size & (kernel.arch.page_size - 1) == 0);
80203292: 6d 8d        	and	a0, a0, a1
80203294: 93 35 15 00  	seqz	a1, a0

0000000080203298 <.LBB60_72>:
80203298: 17 a5 01 00  	auipc	a0, 26
8020329c: 13 05 05 36  	addi	a0, a0, 864
802032a0: 97 d0 ff ff  	auipc	ra, 1048573
802032a4: e7 80 c0 f6  	jalr	-148(ra)
802032a8: 03 35 04 ea  	ld	a0, -352(s0)

00000000802032ac <.LBB60_73>:
;         kernel.arch.Virtual.kernel_init_pagetable,
802032ac: 97 15 67 00  	auipc	a1, 1649
802032b0: 93 85 c5 d8  	addi	a1, a1, -628
802032b4: 8c 61        	ld	a1, 0(a1)
;         plic_base,
802032b6: 23 34 b4 ea  	sd	a1, -344(s0)

00000000802032ba <.LBB60_74>:
802032ba: 97 15 67 00  	auipc	a1, 1649
802032be: 93 85 e5 d6  	addi	a1, a1, -658
802032c2: 8c 61        	ld	a1, 0(a1)
;         plic_size / kernel.arch.page_size,
802032c4: 23 38 b4 ea  	sd	a1, -336(s0)
802032c8: 08 61        	ld	a0, 0(a0)
802032ca: 23 3c a4 ea  	sd	a0, -328(s0)
802032ce: 81 45        	mv	a1, zero
802032d0: 05 45        	addi	a0, zero, 1
802032d2: 63 1c b5 00  	bne	a0, a1, 0x802032ea <.LBB60_75+0x12>
802032d6: 09 a0        	j	0x802032d8 <.LBB60_75>

00000000802032d8 <.LBB60_75>:
802032d8: 17 a5 01 00  	auipc	a0, 26
802032dc: 13 05 85 ff  	addi	a0, a0, -8
802032e0: 81 45        	mv	a1, zero
802032e2: 97 d0 ff ff  	auipc	ra, 1048573
802032e6: e7 80 e0 db  	jalr	-578(ra)
802032ea: 83 35 04 eb  	ld	a1, -336(s0)
802032ee: 03 35 84 ea  	ld	a0, -344(s0)
802032f2: 03 36 84 eb  	ld	a2, -328(s0)
802032f6: 31 82        	srli	a2, a2, 12
802032f8: 99 46        	addi	a3, zero, 6
802032fa: 01 47        	mv	a4, zero
;     kernel.arch.Virtual.directMap(
802032fc: 97 30 00 00  	auipc	ra, 3
80203300: e7 80 e0 56  	jalr	1390(ra)
80203304: 05 45        	addi	a0, zero, 1
;     var interrupt_i: u64 = 1;
80203306: 23 3c a4 f2  	sd	a0, -200(s0)
;     while (interrupt_i <= max_interrupt) : (interrupt_i += 1) {
8020330a: 6d b1        	j	0x80202fb4 <.LBB60_51+0x22>

000000008020330c <.LBB60_76>:
8020330c: 17 a5 01 00  	auipc	a0, 26
80203310: 13 05 45 17  	addi	a0, a0, 372
80203314: 81 45        	mv	a1, zero
80203316: 97 d0 ff ff  	auipc	ra, 1048573
8020331a: e7 80 a0 d8  	jalr	-630(ra)
8020331e: 03 35 04 ef  	ld	a0, -272(s0)
80203322: 23 3c a4 f2  	sd	a0, -200(s0)
80203326: 79 b1        	j	0x80202fb4 <.LBB60_51+0x22>

0000000080203328 <arch.riscv.LocalStorage.init>:
;     fn init(self: *@This(), hart_id: u64, boot_hart: bool) void {
80203328: 59 71        	addi	sp, sp, -112
8020332a: 86 f4        	sd	ra, 104(sp)
8020332c: a2 f0        	sd	s0, 96(sp)
8020332e: 80 18        	addi	s0, sp, 112
80203330: 23 3c a4 fa  	sd	a0, -72(s0)
80203334: 23 38 b4 fa  	sd	a1, -80(s0)
80203338: 05 8a        	andi	a2, a2, 1
8020333a: a3 07 c4 fa  	sb	a2, -81(s0)
;         self.context.hart_id = hart_id;
8020333e: 23 38 b5 20  	sd	a1, 528(a0)
;         self.context.interrupt_stack = @ptrToInt(&stack_top) - hart_stack_size * hart_id;
80203342: 03 35 84 fb  	ld	a0, -72(s0)
80203346: 13 05 85 10  	addi	a0, a0, 264
8020334a: 23 3c a4 f8  	sd	a0, -104(s0)
8020334e: 83 35 04 fb  	ld	a1, -80(s0)
80203352: 7d 55        	addi	a0, zero, -1
80203354: 3d 81        	srli	a0, a0, 15
80203356: 6d 8d        	and	a0, a0, a1
80203358: 13 96 f5 00  	slli	a2, a1, 15
8020335c: 23 30 c4 fa  	sd	a2, -96(s0)
80203360: 63 1a b5 04  	bne	a0, a1, 0x802033b4 <.LBB61_12>
80203364: 8d a0        	j	0x802033c6 <.LBB61_12+0x12>
;         if (!boot_hart) sstatus_value |= 1 << 8 | 1 << 5;
80203366: 03 35 04 fc  	ld	a0, -64(s0)
8020336a: 13 65 05 12  	ori	a0, a0, 288
8020336e: 23 30 a4 fc  	sd	a0, -64(s0)
80203372: 11 a0        	j	0x80203376 <arch.riscv.LocalStorage.init+0x4e>
80203374: 09 a0        	j	0x80203376 <arch.riscv.LocalStorage.init+0x4e>
;         sstatus.write(sstatus_value);
80203376: 03 35 04 fc  	ld	a0, -64(s0)
8020337a: 23 30 a4 fe  	sd	a0, -32(s0)
;             asm volatile ("csrw " ++ reg_name ++ ", %[arg1]"
8020337e: 73 10 05 10  	csrw	sstatus, a0
80203382: 13 05 00 22  	addi	a0, zero, 544
80203386: 23 34 a4 fe  	sd	a0, -24(s0)
8020338a: 73 10 45 10  	csrw	sie, a0
;         if (!boot_hart) {
8020338e: 03 45 f4 fa  	lbu	a0, -81(s0)
80203392: 81 45        	mv	a1, zero
80203394: 63 1b b5 00  	bne	a0, a1, 0x802033aa <.LBB61_11+0x10>
80203398: 09 a0        	j	0x8020339a <.LBB61_11>

000000008020339a <.LBB61_11>:
;             TODO(@src());
8020339a: 17 a5 01 00  	auipc	a0, 26
8020339e: 13 05 65 28  	addi	a0, a0, 646
802033a2: 97 d0 ff ff  	auipc	ra, 1048573
802033a6: e7 80 00 e3  	jalr	-464(ra)
;         if (!boot_hart) {
802033aa: 09 a0        	j	0x802033ac <.LBB61_11+0x12>
;     fn init(self: *@This(), hart_id: u64, boot_hart: bool) void {
802033ac: 06 74        	ld	s0, 96(sp)
802033ae: a6 70        	ld	ra, 104(sp)
802033b0: 65 61        	addi	sp, sp, 112
802033b2: 82 80        	ret

00000000802033b4 <.LBB61_12>:
;         self.context.interrupt_stack = @ptrToInt(&stack_top) - hart_stack_size * hart_id;
802033b4: 17 a5 01 00  	auipc	a0, 26
802033b8: 13 05 c5 0c  	addi	a0, a0, 204
802033bc: 81 45        	mv	a1, zero
802033be: 97 d0 ff ff  	auipc	ra, 1048573
802033c2: e7 80 20 ce  	jalr	-798(ra)
802033c6: 83 35 04 fa  	ld	a1, -96(s0)

00000000802033ca <.LBB61_13>:
802033ca: 17 15 67 00  	auipc	a0, 1649
802033ce: 13 05 65 c3  	addi	a0, a0, -970
802033d2: b3 05 b5 40  	sub	a1, a0, a1
802033d6: 23 38 b4 f8  	sd	a1, -112(s0)
802033da: 63 7c b5 00  	bgeu	a0, a1, 0x802033f2 <.LBB61_14+0x12>
802033de: 09 a0        	j	0x802033e0 <.LBB61_14>

00000000802033e0 <.LBB61_14>:
802033e0: 17 a5 01 00  	auipc	a0, 26
802033e4: 13 05 05 0a  	addi	a0, a0, 160
802033e8: 81 45        	mv	a1, zero
802033ea: 97 d0 ff ff  	auipc	ra, 1048573
802033ee: e7 80 60 cb  	jalr	-842(ra)
802033f2: 03 35 04 f9  	ld	a0, -112(s0)
802033f6: 83 35 84 f9  	ld	a1, -104(s0)
802033fa: 88 e1        	sd	a0, 0(a1)
;         log.debug("Interrupt stack: 0x{x}", .{self.context.interrupt_stack});
802033fc: 03 35 84 fb  	ld	a0, -72(s0)
80203400: 03 35 85 10  	ld	a0, 264(a0)
80203404: 23 34 a4 fc  	sd	a0, -56(s0)
80203408: 13 05 84 fc  	addi	a0, s0, -56
8020340c: 97 30 00 00  	auipc	ra, 3
80203410: e7 80 00 4b  	jalr	1200(ra)
;         self.context.pid = 0xffff_ffff_ffff_ffff;
80203414: 83 35 84 fb  	ld	a1, -72(s0)
80203418: 7d 55        	addi	a0, zero, -1
8020341a: 23 bc a5 20  	sd	a0, 536(a1)
;         sscratch.write(@ptrToInt(&self.context));
8020341e: 03 35 84 fb  	ld	a0, -72(s0)
80203422: 23 38 a4 fc  	sd	a0, -48(s0)
;             asm volatile ("csrw " ++ reg_name ++ ", %[arg1]"
80203426: 73 10 05 14  	csrw	sscratch, a0
;             return asm volatile ("csrr %[ret], " ++ reg_name
8020342a: 73 25 00 10  	csrr	a0, sstatus
8020342e: 23 3c a4 fc  	sd	a0, -40(s0)
80203432: b7 05 04 00  	lui	a1, 64
80203436: 89 25        	addiw	a1, a1, 2
;         sstatus_value |= 1 << 18 | 1 << 1;
80203438: 4d 8d        	or	a0, a0, a1
8020343a: 23 30 a4 fc  	sd	a0, -64(s0)
;         if (!boot_hart) sstatus_value |= 1 << 8 | 1 << 5;
8020343e: 03 45 f4 fa  	lbu	a0, -81(s0)
80203442: 81 45        	mv	a1, zero
80203444: e3 01 b5 f2  	beq	a0, a1, 0x80203366 <arch.riscv.LocalStorage.init+0x3e>
80203448: 35 b7        	j	0x80203374 <arch.riscv.LocalStorage.init+0x4c>

000000008020344a <arch.riscv64.timer.get_time_from_timestamp>:
; pub fn get_time_from_timestamp(timestamp: u64) Time {
8020344a: 59 71        	addi	sp, sp, -112
8020344c: 86 f4        	sd	ra, 104(sp)
8020344e: a2 f0        	sd	s0, 96(sp)
80203450: 80 18        	addi	s0, sp, 112
80203452: 23 34 a4 fc  	sd	a0, -56(s0)
80203456: 23 34 b4 fe  	sd	a1, -24(s0)
;         .s = timestamp / frequency,
8020345a: 23 38 a4 fc  	sd	a0, -48(s0)
8020345e: 23 3c b4 fc  	sd	a1, -40(s0)

0000000080203462 <.LBB62_11>:
80203462: 17 15 67 00  	auipc	a0, 1649
80203466: 13 05 e5 bb  	addi	a0, a0, -1090
8020346a: 03 65 05 00  	lwu	a0, 0(a0)
8020346e: 23 30 a4 fe  	sd	a0, -32(s0)
80203472: 81 45        	mv	a1, zero
80203474: 63 1c b5 00  	bne	a0, a1, 0x8020348c <.LBB62_12+0x12>
80203478: 09 a0        	j	0x8020347a <.LBB62_12>

000000008020347a <.LBB62_12>:
8020347a: 17 a5 01 00  	auipc	a0, 26
8020347e: 13 05 65 e5  	addi	a0, a0, -426
80203482: 81 45        	mv	a1, zero
80203484: 97 d0 ff ff  	auipc	ra, 1048573
80203488: e7 80 c0 c1  	jalr	-996(ra)
8020348c: 03 35 84 fc  	ld	a0, -56(s0)
80203490: 03 36 04 fd  	ld	a2, -48(s0)
80203494: 83 35 84 fd  	ld	a1, -40(s0)
80203498: 83 36 04 fe  	ld	a3, -32(s0)
8020349c: b3 d5 d5 02  	divu	a1, a1, a3
802034a0: 0c e2        	sd	a1, 0(a2)
;         .us = (timestamp % frequency) * 1000 * 1000 / frequency,
802034a2: 21 05        	addi	a0, a0, 8
802034a4: 23 38 a4 fa  	sd	a0, -80(s0)
802034a8: 03 35 84 fe  	ld	a0, -24(s0)
802034ac: 23 3c a4 fa  	sd	a0, -72(s0)

00000000802034b0 <.LBB62_13>:
802034b0: 17 15 67 00  	auipc	a0, 1649
802034b4: 13 05 05 b7  	addi	a0, a0, -1168
802034b8: 03 65 05 00  	lwu	a0, 0(a0)
802034bc: 23 30 a4 fc  	sd	a0, -64(s0)
802034c0: 81 45        	mv	a1, zero
802034c2: 63 03 b5 02  	beq	a0, a1, 0x802034e8 <.LBB62_14>
802034c6: 09 a0        	j	0x802034c8 <.LBB62_13+0x18>
802034c8: 03 35 84 fb  	ld	a0, -72(s0)
802034cc: 83 35 04 fc  	ld	a1, -64(s0)
802034d0: 33 75 b5 02  	remu	a0, a0, a1
802034d4: 93 05 80 3e  	addi	a1, zero, 1000
802034d8: 33 05 b5 02  	mul	a0, a0, a1
802034dc: 23 34 a4 fa  	sd	a0, -88(s0)
802034e0: 01 45        	mv	a0, zero
802034e2: 63 1c a5 00  	bne	a0, a0, 0x802034fa <.LBB62_15>
802034e6: 1d a0        	j	0x8020350c <.LBB62_15+0x12>

00000000802034e8 <.LBB62_14>:
802034e8: 17 a5 01 00  	auipc	a0, 26
802034ec: 13 05 85 df  	addi	a0, a0, -520
802034f0: 81 45        	mv	a1, zero
802034f2: 97 d0 ff ff  	auipc	ra, 1048573
802034f6: e7 80 e0 ba  	jalr	-1106(ra)

00000000802034fa <.LBB62_15>:
802034fa: 17 a5 01 00  	auipc	a0, 26
802034fe: 13 05 65 f8  	addi	a0, a0, -122
80203502: 81 45        	mv	a1, zero
80203504: 97 d0 ff ff  	auipc	ra, 1048573
80203508: e7 80 c0 b9  	jalr	-1124(ra)
8020350c: 03 35 84 fa  	ld	a0, -88(s0)
80203510: 93 05 80 3e  	addi	a1, zero, 1000
;         .us = (timestamp % frequency) * 1000 * 1000 / frequency,
80203514: 33 05 b5 02  	mul	a0, a0, a1
80203518: 23 30 a4 fa  	sd	a0, -96(s0)
8020351c: 81 45        	mv	a1, zero
8020351e: 05 45        	addi	a0, zero, 1
80203520: 63 1c b5 00  	bne	a0, a1, 0x80203538 <.LBB62_17>
80203524: 09 a0        	j	0x80203526 <.LBB62_16>

0000000080203526 <.LBB62_16>:
80203526: 17 a5 01 00  	auipc	a0, 26
8020352a: 13 05 a5 f5  	addi	a0, a0, -166
8020352e: 81 45        	mv	a1, zero
80203530: 97 d0 ff ff  	auipc	ra, 1048573
80203534: e7 80 00 b7  	jalr	-1168(ra)

0000000080203538 <.LBB62_17>:
80203538: 17 15 67 00  	auipc	a0, 1649
8020353c: 13 05 85 ae  	addi	a0, a0, -1304
80203540: 03 65 05 00  	lwu	a0, 0(a0)
80203544: 23 3c a4 f8  	sd	a0, -104(s0)
80203548: 81 45        	mv	a1, zero
8020354a: 63 1c b5 00  	bne	a0, a1, 0x80203562 <.LBB62_18+0x12>
8020354e: 09 a0        	j	0x80203550 <.LBB62_18>

0000000080203550 <.LBB62_18>:
80203550: 17 a5 01 00  	auipc	a0, 26
80203554: 13 05 05 d8  	addi	a0, a0, -640
80203558: 81 45        	mv	a1, zero
8020355a: 97 d0 ff ff  	auipc	ra, 1048573
8020355e: e7 80 60 b4  	jalr	-1210(ra)
80203562: 83 35 04 fb  	ld	a1, -80(s0)
80203566: 03 35 04 fa  	ld	a0, -96(s0)
8020356a: 03 36 84 f9  	ld	a2, -104(s0)
8020356e: 33 55 c5 02  	divu	a0, a0, a2
80203572: 88 e1        	sd	a0, 0(a1)
;     return Time{
80203574: 06 74        	ld	s0, 96(sp)
80203576: a6 70        	ld	ra, 104(sp)
80203578: 65 61        	addi	sp, sp, 112
8020357a: 82 80        	ret

000000008020357c <arch.riscv64.virtio_common.block.init>:
;     pub fn init(mmio_address: u64) void {
8020357c: 5d 71        	addi	sp, sp, -80
8020357e: 86 e4        	sd	ra, 72(sp)
80203580: a2 e0        	sd	s0, 64(sp)
80203582: 80 08        	addi	s0, sp, 80
80203584: 23 38 a4 fc  	sd	a0, -48(s0)
80203588: 85 45        	addi	a1, zero, 1
;         kernel.arch.Virtual.map(mmio_address, 1);
8020358a: 97 30 00 00  	auipc	ra, 3
8020358e: e7 80 00 35  	jalr	848(ra)
;         mmio = @intToPtr(*volatile MMIO, mmio_address);
80203592: 03 35 04 fd  	ld	a0, -48(s0)
80203596: 23 34 a4 fc  	sd	a0, -56(s0)
8020359a: 81 45        	mv	a1, zero
8020359c: 63 1c b5 00  	bne	a0, a1, 0x802035b4 <.LBB63_7+0x12>
802035a0: 09 a0        	j	0x802035a2 <.LBB63_7>

00000000802035a2 <.LBB63_7>:
802035a2: 17 a5 01 00  	auipc	a0, 26
802035a6: 13 05 65 f5  	addi	a0, a0, -170
802035aa: 81 45        	mv	a1, zero
802035ac: 97 d0 ff ff  	auipc	ra, 1048573
802035b0: e7 80 40 af  	jalr	-1292(ra)
802035b4: 03 35 84 fc  	ld	a0, -56(s0)
802035b8: 0d 89        	andi	a0, a0, 3
802035ba: 81 45        	mv	a1, zero
802035bc: 63 0c b5 00  	beq	a0, a1, 0x802035d4 <.LBB63_8+0x12>
802035c0: 09 a0        	j	0x802035c2 <.LBB63_8>

00000000802035c2 <.LBB63_8>:
802035c2: 17 a5 01 00  	auipc	a0, 26
802035c6: 13 05 65 08  	addi	a0, a0, 134
802035ca: 81 45        	mv	a1, zero
802035cc: 97 d0 ff ff  	auipc	ra, 1048573
802035d0: e7 80 40 ad  	jalr	-1324(ra)
802035d4: 03 35 84 fc  	ld	a0, -56(s0)

00000000802035d8 <.LBB63_9>:
802035d8: 97 15 67 00  	auipc	a1, 1649
802035dc: 93 85 85 a6  	addi	a1, a1, -1432
802035e0: 23 38 b4 fa  	sd	a1, -80(s0)
802035e4: 88 e1        	sd	a0, 0(a1)
;         mmio.init();
802035e6: 97 30 00 00  	auipc	ra, 3
802035ea: e7 80 60 32  	jalr	806(ra)
802035ee: 03 35 04 fb  	ld	a0, -80(s0)
;         queue = mmio.add_queue_to_device(0);
802035f2: 08 61        	ld	a0, 0(a0)
802035f4: 81 45        	mv	a1, zero
802035f6: 23 3c b4 fa  	sd	a1, -72(s0)
802035fa: 97 30 00 00  	auipc	ra, 3
802035fe: e7 80 80 3f  	jalr	1016(ra)
80203602: 83 35 84 fb  	ld	a1, -72(s0)

0000000080203606 <.LBB63_10>:
80203606: 17 16 67 00  	auipc	a2, 1649
8020360a: 13 06 26 a4  	addi	a2, a2, -1470
8020360e: 08 e2        	sd	a0, 0(a2)
80203610: 21 45        	addi	a0, zero, 8
80203612: 23 30 a4 fc  	sd	a0, -64(s0)
80203616: 23 30 a4 fe  	sd	a0, -32(s0)
8020361a: 17 45 00 00  	auipc	a0, 4
8020361e: 13 05 45 83  	addi	a0, a0, -1996
80203622: 23 3c a4 fc  	sd	a0, -40(s0)
80203626: 05 45        	addi	a0, zero, 1
;     interrupt_handlers[interrupt_number] = handler;
80203628: 63 1c b5 00  	bne	a0, a1, 0x80203640 <.LBB63_12+0x12>
8020362c: 09 a0        	j	0x8020362e <.LBB63_12>

000000008020362e <.LBB63_12>:
8020362e: 17 a5 01 00  	auipc	a0, 26
80203632: 13 05 25 cd  	addi	a0, a0, -814
80203636: 81 45        	mv	a1, zero
80203638: 97 d0 ff ff  	auipc	ra, 1048573
8020363c: e7 80 80 a6  	jalr	-1432(ra)
80203640: 03 35 04 fc  	ld	a0, -64(s0)
80203644: 0e 05        	slli	a0, a0, 3

0000000080203646 <.LBB63_13>:
80203646: 97 45 06 00  	auipc	a1, 100
8020364a: 93 85 a5 27  	addi	a1, a1, 634
8020364e: aa 95        	add	a1, a1, a0
80203650: 03 35 84 fd  	ld	a0, -40(s0)
80203654: 88 e1        	sd	a0, 0(a1)

0000000080203656 <.LBB63_14>:
;         mmio.set_driver_initialized();
80203656: 17 15 67 00  	auipc	a0, 1649
8020365a: 13 05 a5 9e  	addi	a0, a0, -1558
8020365e: 0c 61        	ld	a1, 0(a0)
80203660: 23 34 b4 fe  	sd	a1, -24(s0)
;         self.status |= @enumToInt(MMIO.Status.driver);
80203664: a8 59        	lw	a0, 112(a1)
80203666: 13 65 25 00  	ori	a0, a0, 2
8020366a: a8 d9        	sw	a0, 112(a1)
;         log.debug("Block driver initialized", .{});
8020366c: 97 40 00 00  	auipc	ra, 4
80203670: e7 80 80 9d  	jalr	-1576(ra)
;     pub fn init(mmio_address: u64) void {
80203674: 06 64        	ld	s0, 64(sp)
80203676: a6 60        	ld	ra, 72(sp)
80203678: 61 61        	addi	sp, sp, 80
8020367a: 82 80        	ret

000000008020367c <arch.riscv64.virtio_common.gpu.init>:
;     pub fn init(mmio_address: u64) void {
8020367c: 13 01 01 bf  	addi	sp, sp, -1040
80203680: 23 34 11 40  	sd	ra, 1032(sp)
80203684: 23 30 81 40  	sd	s0, 1024(sp)
80203688: 13 04 01 41  	addi	s0, sp, 1040
8020368c: 23 38 a4 cc  	sd	a0, -816(s0)
80203690: 85 45        	addi	a1, zero, 1
;         kernel.arch.Virtual.map(mmio_address, 1);
80203692: 97 30 00 00  	auipc	ra, 3
80203696: e7 80 80 24  	jalr	584(ra)
;         mmio = @intToPtr(*volatile MMIO, mmio_address);
8020369a: 03 35 04 cd  	ld	a0, -816(s0)
8020369e: 23 34 a4 cc  	sd	a0, -824(s0)
802036a2: 81 45        	mv	a1, zero
802036a4: 63 0e b5 2e  	beq	a0, a1, 0x802039a0 <.LBB64_78>
802036a8: 29 a6        	j	0x802039b2 <.LBB64_78+0x12>

00000000802036aa <.LBB64_69>:
;         while (!received_display_info) {
802036aa: 17 15 67 00  	auipc	a0, 1649
802036ae: 13 05 e5 9b  	addi	a0, a0, -1602
802036b2: 03 45 05 00  	lbu	a0, 0(a0)
802036b6: 81 45        	mv	a1, zero
802036b8: 63 14 b5 00  	bne	a0, a1, 0x802036c0 <.LBB64_70>
802036bc: 09 a0        	j	0x802036be <.LBB64_69+0x14>
802036be: f5 b7        	j	0x802036aa <.LBB64_69>

00000000802036c0 <.LBB64_70>:
;         if (display_info.header.type != ControlType.resp_ok_display_info) {
802036c0: 17 45 06 00  	auipc	a0, 100
802036c4: 13 05 05 f7  	addi	a0, a0, -144
802036c8: 08 41        	lw	a0, 0(a0)
802036ca: 85 65        	lui	a1, 1
802036cc: 9b 85 15 10  	addiw	a1, a1, 257
802036d0: 63 0c b5 00  	beq	a0, a1, 0x802036e8 <.LBB64_71+0x12>
802036d4: 09 a0        	j	0x802036d6 <.LBB64_71>

00000000802036d6 <.LBB64_71>:
;             @panic("display info corrupted");
802036d6: 17 a5 01 00  	auipc	a0, 26
802036da: 13 05 25 f8  	addi	a0, a0, -126
802036de: 81 45        	mv	a1, zero
802036e0: 97 d0 ff ff  	auipc	ra, 1048573
802036e4: e7 80 00 9c  	jalr	-1600(ra)
;         if (display_info.header.type != ControlType.resp_ok_display_info) {
802036e8: 09 a0        	j	0x802036ea <.LBB64_71+0x14>
;         log.debug("Display info", .{});
802036ea: 97 40 00 00  	auipc	ra, 4
802036ee: e7 80 c0 cf  	jalr	-772(ra)
802036f2: 01 45        	mv	a0, zero
;         for (display_info.pmodes) |pmode_it, i| {
802036f4: 23 34 a4 e8  	sd	a0, -376(s0)
802036f8: 09 a0        	j	0x802036fa <.LBB64_71+0x24>
802036fa: 83 35 84 e8  	ld	a1, -376(s0)
802036fe: 23 30 b4 cc  	sd	a1, -832(s0)
80203702: 3d 45        	addi	a0, zero, 15
80203704: 63 68 b5 08  	bltu	a0, a1, 0x80203794 <.LBB64_73>
80203708: 09 a0        	j	0x8020370a <.LBB64_71+0x34>
8020370a: 03 35 04 cc  	ld	a0, -832(s0)
8020370e: e1 45        	addi	a1, zero, 24
;         for (display_info.pmodes) |pmode_it, i| {
80203710: b3 05 b5 02  	mul	a1, a0, a1

0000000080203714 <.LBB64_72>:
80203714: 17 45 06 00  	auipc	a0, 100
80203718: 13 05 c5 f1  	addi	a0, a0, -228
8020371c: aa 95        	add	a1, a1, a0
;         for (display_info.pmodes) |pmode_it, i| {
8020371e: 03 e6 85 02  	lwu	a2, 40(a1)
80203722: 03 e5 c5 02  	lwu	a0, 44(a1)
80203726: 02 15        	slli	a0, a0, 32
80203728: 51 8d        	or	a0, a0, a2
8020372a: 23 30 a4 e8  	sd	a0, -384(s0)
8020372e: 83 e6 05 02  	lwu	a3, 32(a1)
80203732: 03 e6 45 02  	lwu	a2, 36(a1)
80203736: 02 16        	slli	a2, a2, 32
80203738: 55 8e        	or	a2, a2, a3
8020373a: 23 3c c4 e6  	sd	a2, -392(s0)
8020373e: 03 e6 85 01  	lwu	a2, 24(a1)
80203742: 83 e5 c5 01  	lwu	a1, 28(a1)
80203746: 82 15        	slli	a1, a1, 32
80203748: d1 8d        	or	a1, a1, a2
8020374a: 23 38 b4 e6  	sd	a1, -400(s0)
;             if (pmode_it.enabled != 0) log.debug("[{}] pmode: {}", .{ i, pmode_it });
8020374e: 01 25        	sext.w	a0, a0
80203750: 81 45        	mv	a1, zero
80203752: 63 0a b5 02  	beq	a0, a1, 0x80203786 <.LBB64_72+0x72>
80203756: 09 a0        	j	0x80203758 <.LBB64_72+0x44>
80203758: 03 35 84 e8  	ld	a0, -376(s0)
8020375c: 23 38 a4 e4  	sd	a0, -432(s0)
80203760: 03 35 04 e7  	ld	a0, -400(s0)
80203764: 23 3c a4 e4  	sd	a0, -424(s0)
80203768: 03 35 84 e7  	ld	a0, -392(s0)
8020376c: 23 30 a4 e6  	sd	a0, -416(s0)
80203770: 03 35 04 e8  	ld	a0, -384(s0)
80203774: 23 34 a4 e6  	sd	a0, -408(s0)
80203778: 13 05 04 e5  	addi	a0, s0, -432
8020377c: 97 40 00 00  	auipc	ra, 4
80203780: e7 80 20 c8  	jalr	-894(ra)
80203784: 11 a0        	j	0x80203788 <.LBB64_72+0x74>
80203786: 09 a0        	j	0x80203788 <.LBB64_72+0x74>
;         for (display_info.pmodes) |pmode_it, i| {
80203788: 03 35 04 cc  	ld	a0, -832(s0)
8020378c: 05 05        	addi	a0, a0, 1
8020378e: 23 34 a4 e8  	sd	a0, -376(s0)
80203792: a5 b7        	j	0x802036fa <.LBB64_71+0x24>

0000000080203794 <.LBB64_73>:
80203794: 17 45 06 00  	auipc	a0, 100
80203798: 13 05 c5 e9  	addi	a0, a0, -356
;         pmode = display_info.pmodes[0];
8020379c: 50 55        	lw	a2, 44(a0)

000000008020379e <.LBB64_74>:
8020379e: 97 45 06 00  	auipc	a1, 100
802037a2: 93 85 a5 02  	addi	a1, a1, 42
;         pmode = display_info.pmodes[0];
802037a6: d0 c9        	sw	a2, 20(a1)
802037a8: 10 55        	lw	a2, 40(a0)
802037aa: 90 c9        	sw	a2, 16(a1)
802037ac: 50 51        	lw	a2, 36(a0)
802037ae: d0 c5        	sw	a2, 12(a1)
802037b0: 10 51        	lw	a2, 32(a0)
802037b2: 90 c5        	sw	a2, 8(a1)
802037b4: 50 4d        	lw	a2, 28(a0)
802037b6: d0 c1        	sw	a2, 4(a1)
802037b8: 08 4d        	lw	a0, 24(a0)
802037ba: 88 c1        	sw	a0, 0(a1)
802037bc: 37 b5 aa fa  	lui	a0, 1026731
802037c0: 1b 05 b5 aa  	addiw	a0, a0, -1365
802037c4: 32 05        	slli	a0, a0, 12
802037c6: 13 05 b5 aa  	addi	a0, a0, -1365
802037ca: 32 05        	slli	a0, a0, 12
802037cc: 13 05 b5 aa  	addi	a0, a0, -1365
802037d0: 32 05        	slli	a0, a0, 12
802037d2: 13 05 a5 aa  	addi	a0, a0, -1366
;     var result: T = undefined;
802037d6: 23 38 a4 f2  	sd	a0, -208(s0)
802037da: 23 3c a4 f2  	sd	a0, -200(s0)
802037de: 23 30 a4 f4  	sd	a0, -192(s0)
802037e2: 23 34 a4 f4  	sd	a0, -184(s0)
802037e6: 23 38 a4 f4  	sd	a0, -176(s0)
802037ea: 13 05 04 f3  	addi	a0, s0, -208
;     zero(@ptrCast([*]u8, &result)[0..@sizeOf(T)]);
802037ee: 23 34 a4 f2  	sd	a0, -216(s0)
802037f2: 23 3c a4 f0  	sd	a0, -232(s0)
802037f6: 13 05 80 02  	addi	a0, zero, 40
802037fa: 23 3c a4 ca  	sd	a0, -840(s0)
802037fe: 23 30 a4 f2  	sd	a0, -224(s0)
80203802: 01 45        	mv	a0, zero
;     for (bytes) |*byte| byte.* = 0;
80203804: 23 38 a4 fc  	sd	a0, -48(s0)
80203808: 09 a0        	j	0x8020380a <.LBB64_74+0x6c>
8020380a: 83 35 84 cb  	ld	a1, -840(s0)
8020380e: 03 35 04 fd  	ld	a0, -48(s0)
80203812: 23 38 a4 ca  	sd	a0, -848(s0)
80203816: 63 72 b5 02  	bgeu	a0, a1, 0x8020383a <.LBB64_74+0x9c>
8020381a: 09 a0        	j	0x8020381c <.LBB64_74+0x7e>
8020381c: 03 35 04 cb  	ld	a0, -848(s0)
80203820: 83 35 84 f1  	ld	a1, -232(s0)
80203824: 33 86 a5 00  	add	a2, a1, a0
80203828: 23 34 c4 fc  	sd	a2, -56(s0)
8020382c: 81 45        	mv	a1, zero
8020382e: 23 00 b6 00  	sb	a1, 0(a2)
80203832: 05 05        	addi	a0, a0, 1
80203834: 23 38 a4 fc  	sd	a0, -48(s0)
80203838: c9 bf        	j	0x8020380a <.LBB64_74+0x6c>
;     return result;
8020383a: 03 35 04 f3  	ld	a0, -208(s0)
8020383e: 23 34 a4 e2  	sd	a0, -472(s0)
80203842: 03 35 04 f5  	ld	a0, -176(s0)
80203846: 23 34 a4 e4  	sd	a0, -440(s0)
8020384a: 03 35 04 f4  	ld	a0, -192(s0)
8020384e: 23 3c a4 e2  	sd	a0, -456(s0)
80203852: 03 35 84 f3  	ld	a0, -200(s0)
80203856: 23 38 a4 e2  	sd	a0, -464(s0)
8020385a: 13 05 10 10  	addi	a0, zero, 257
;         create.header.type = ControlType.cmd_resource_create_2d;
8020385e: 23 24 a4 e2  	sw	a0, -472(s0)
80203862: 13 05 30 04  	addi	a0, zero, 67
80203866: 02 15        	slli	a0, a0, 32
80203868: 05 05        	addi	a0, a0, 1
;         create.resource_id = 1;
8020386a: 23 30 a4 e4  	sd	a0, -448(s0)

000000008020386e <.LBB64_75>:
8020386e: 17 45 06 00  	auipc	a0, 100
80203872: 13 05 a5 f5  	addi	a0, a0, -166
;         create.width = pmode.rect.width;
80203876: 23 30 a4 ca  	sd	a0, -864(s0)
8020387a: 0c 45        	lw	a1, 8(a0)
8020387c: 23 24 b4 e4  	sw	a1, -440(s0)
;         create.height = pmode.rect.height;
80203880: 48 45        	lw	a0, 12(a0)
80203882: 23 26 a4 e4  	sw	a0, -436(s0)
80203886: 13 05 84 e2  	addi	a0, s0, -472
;         operate(kernel.as_bytes(&create), @sizeOf(ControlHeader));
8020388a: 23 30 a4 e2  	sd	a0, -480(s0)
8020388e: 97 40 00 00  	auipc	ra, 4
80203892: e7 80 00 ba  	jalr	-1120(ra)
80203896: aa 85        	mv	a1, a0
80203898: 23 38 b4 e0  	sd	a1, -496(s0)
8020389c: 13 05 80 02  	addi	a0, zero, 40
802038a0: 23 3c a4 e0  	sd	a0, -488(s0)
802038a4: 23 30 b4 e0  	sd	a1, -512(s0)
802038a8: 23 34 a4 e0  	sd	a0, -504(s0)
802038ac: 13 05 04 e0  	addi	a0, s0, -512
802038b0: e1 45        	addi	a1, zero, 24
802038b2: 97 40 00 00  	auipc	ra, 4
802038b6: e7 80 e0 8f  	jalr	-1794(ra)
802038ba: 83 35 04 ca  	ld	a1, -864(s0)
;         const framebuffer_pixel_count = pmode.rect.width * pmode.rect.height;
802038be: 03 e5 85 00  	lwu	a0, 8(a1)
802038c2: 83 e5 c5 00  	lwu	a1, 12(a1)
802038c6: 33 05 b5 02  	mul	a0, a0, a1
802038ca: 23 34 a4 ca  	sd	a0, -856(s0)
802038ce: 01 91        	srli	a0, a0, 32
802038d0: 81 45        	mv	a1, zero
802038d2: 63 13 b5 28  	bne	a0, a1, 0x80203b58 <.LBB64_87>
802038d6: 51 ac        	j	0x80203b6a <.LBB64_87+0x12>

00000000802038d8 <.LBB64_76>:
;         const framebuffer_allocation = kernel.heap.allocate(framebuffer_size, true, true) orelse @panic("unable to allocate framebuffer");
802038d8: 17 a5 01 00  	auipc	a0, 26
802038dc: 13 05 05 d9  	addi	a0, a0, -624
802038e0: 81 45        	mv	a1, zero
802038e2: 97 c0 ff ff  	auipc	ra, 1048572
802038e6: e7 80 e0 7b  	jalr	1982(ra)
802038ea: 03 35 84 de  	ld	a0, -536(s0)
802038ee: 23 38 a4 dc  	sd	a0, -560(s0)
802038f2: 03 35 04 de  	ld	a0, -544(s0)
802038f6: 23 34 a4 dc  	sd	a0, -568(s0)
802038fa: 03 35 84 dd  	ld	a0, -552(s0)
802038fe: 23 30 a4 dc  	sd	a0, -576(s0)
80203902: 09 a0        	j	0x80203904 <.LBB64_76+0x2c>
;         kernel.framebuffer.buffer = @intToPtr([*]u32, framebuffer_allocation.virtual);
80203904: 03 35 84 dc  	ld	a0, -568(s0)
80203908: 23 3c a4 c8  	sd	a0, -872(s0)
8020390c: 81 45        	mv	a1, zero
8020390e: 63 0d b5 2a  	beq	a0, a1, 0x80203bc8 <.LBB64_90>
80203912: e1 a4        	j	0x80203bda <.LBB64_90+0x12>

0000000080203914 <.LBB64_77>:
;         const backing_allocation = kernel.heap.allocate(backing_size, true, true) orelse @panic("unable to allocate backing");
80203914: 17 a5 01 00  	auipc	a0, 26
80203918: 13 05 45 d6  	addi	a0, a0, -668
8020391c: 81 45        	mv	a1, zero
8020391e: 97 c0 ff ff  	auipc	ra, 1048572
80203922: e7 80 20 78  	jalr	1922(ra)
80203926: 03 35 04 db  	ld	a0, -592(s0)
8020392a: 23 3c a4 d8  	sd	a0, -616(s0)
8020392e: 03 35 84 da  	ld	a0, -600(s0)
80203932: 23 38 a4 d8  	sd	a0, -624(s0)
80203936: 03 35 04 da  	ld	a0, -608(s0)
8020393a: 23 34 a4 d8  	sd	a0, -632(s0)
8020393e: 09 a0        	j	0x80203940 <.LBB64_77+0x2c>
;         const backing = @intToPtr(*volatile ResourceAttachBacking, backing_allocation.virtual);
80203940: 03 35 04 d9  	ld	a0, -624(s0)
80203944: 23 38 a4 c8  	sd	a0, -880(s0)
80203948: 81 45        	mv	a1, zero
8020394a: 63 0b b5 2e  	beq	a0, a1, 0x80203c40 <.LBB64_95>
8020394e: 11 a6        	j	0x80203c52 <.LBB64_95+0x12>
;         for (framebuffer) |*pixel| {
80203950: 83 35 04 c8  	ld	a1, -896(s0)
80203954: 03 35 04 ce  	ld	a0, -800(s0)
80203958: 23 34 a4 c8  	sd	a0, -888(s0)
8020395c: 63 73 b5 02  	bgeu	a0, a1, 0x80203982 <.LBB64_77+0x6e>
80203960: 09 a0        	j	0x80203962 <.LBB64_77+0x4e>
80203962: 03 35 84 c8  	ld	a0, -888(s0)
80203966: 83 35 84 ce  	ld	a1, -792(s0)
8020396a: 13 16 25 00  	slli	a2, a0, 2
8020396e: 2e 96        	add	a2, a2, a1
80203970: 23 3c c4 cc  	sd	a2, -808(s0)
80203974: fd 55        	addi	a1, zero, -1
80203976: 81 91        	srli	a1, a1, 32
;             pixel.* = 0xffffffff;
80203978: 0c c2        	sw	a1, 0(a2)
;         for (framebuffer) |*pixel| {
8020397a: 05 05        	addi	a0, a0, 1
8020397c: 23 30 a4 ce  	sd	a0, -800(s0)
80203980: c1 bf        	j	0x80203950 <.LBB64_77+0x3c>
;         send_and_flush_framebuffer();
80203982: 97 10 00 00  	auipc	ra, 1
80203986: e7 80 a0 be  	jalr	-1046(ra)
;         log.debug("GPU driver initialized", .{});
8020398a: 97 40 00 00  	auipc	ra, 4
8020398e: e7 80 e0 d8  	jalr	-626(ra)
;     pub fn init(mmio_address: u64) void {
80203992: 03 34 01 40  	ld	s0, 1024(sp)
80203996: 83 30 81 40  	ld	ra, 1032(sp)
8020399a: 13 01 01 41  	addi	sp, sp, 1040
8020399e: 82 80        	ret

00000000802039a0 <.LBB64_78>:
;         mmio = @intToPtr(*volatile MMIO, mmio_address);
802039a0: 17 a5 01 00  	auipc	a0, 26
802039a4: 13 05 85 b5  	addi	a0, a0, -1192
802039a8: 81 45        	mv	a1, zero
802039aa: 97 c0 ff ff  	auipc	ra, 1048572
802039ae: e7 80 60 6f  	jalr	1782(ra)
802039b2: 03 35 84 cc  	ld	a0, -824(s0)
802039b6: 0d 89        	andi	a0, a0, 3
802039b8: 81 45        	mv	a1, zero
802039ba: 63 0c b5 00  	beq	a0, a1, 0x802039d2 <.LBB64_79+0x12>
802039be: 09 a0        	j	0x802039c0 <.LBB64_79>

00000000802039c0 <.LBB64_79>:
802039c0: 17 a5 01 00  	auipc	a0, 26
802039c4: 13 05 85 c8  	addi	a0, a0, -888
802039c8: 81 45        	mv	a1, zero
802039ca: 97 c0 ff ff  	auipc	ra, 1048572
802039ce: e7 80 60 6d  	jalr	1750(ra)
802039d2: 03 35 84 cc  	ld	a0, -824(s0)

00000000802039d6 <.LBB64_80>:
802039d6: 97 05 67 00  	auipc	a1, 1648
802039da: 93 85 a5 67  	addi	a1, a1, 1658
802039de: 23 30 b4 c6  	sd	a1, -928(s0)
802039e2: 88 e1        	sd	a0, 0(a1)
;         mmio.init();
802039e4: 97 30 00 00  	auipc	ra, 3
802039e8: e7 80 80 f2  	jalr	-216(ra)
802039ec: 03 35 04 c6  	ld	a0, -928(s0)
;         control_queue = mmio.add_queue_to_device(0);
802039f0: 08 61        	ld	a0, 0(a0)
802039f2: 81 45        	mv	a1, zero
802039f4: 23 34 b4 c6  	sd	a1, -920(s0)
802039f8: 97 30 00 00  	auipc	ra, 3
802039fc: e7 80 a0 ff  	jalr	-6(ra)
80203a00: aa 85        	mv	a1, a0
80203a02: 03 35 04 c6  	ld	a0, -928(s0)

0000000080203a06 <.LBB64_81>:
80203a06: 17 06 67 00  	auipc	a2, 1648
80203a0a: 13 06 26 65  	addi	a2, a2, 1618
80203a0e: 0c e2        	sd	a1, 0(a2)
;         cursor_queue = mmio.add_queue_to_device(1);
80203a10: 08 61        	ld	a0, 0(a0)
80203a12: 85 45        	addi	a1, zero, 1
80203a14: 23 38 b4 c6  	sd	a1, -912(s0)
80203a18: 97 30 00 00  	auipc	ra, 3
80203a1c: e7 80 a0 fd  	jalr	-38(ra)
80203a20: 83 35 84 c6  	ld	a1, -920(s0)
80203a24: 2a 86        	mv	a2, a0
80203a26: 03 35 04 c7  	ld	a0, -912(s0)

0000000080203a2a <.LBB64_82>:
80203a2a: 97 06 67 00  	auipc	a3, 1648
80203a2e: 93 86 66 63  	addi	a3, a3, 1590
80203a32: 90 e2        	sd	a2, 0(a3)
80203a34: 1d 46        	addi	a2, zero, 7
80203a36: 23 3c c4 c6  	sd	a2, -904(s0)
80203a3a: 23 3c c4 ec  	sd	a2, -296(s0)
80203a3e: 17 36 00 00  	auipc	a2, 3
80203a42: 13 06 e6 61  	addi	a2, a2, 1566
80203a46: 23 38 c4 ec  	sd	a2, -304(s0)
;     interrupt_handlers[interrupt_number] = handler;
80203a4a: 63 1c b5 00  	bne	a0, a1, 0x80203a62 <.LBB64_84+0x12>
80203a4e: 09 a0        	j	0x80203a50 <.LBB64_84>

0000000080203a50 <.LBB64_84>:
80203a50: 17 a5 01 00  	auipc	a0, 26
80203a54: 13 05 05 8b  	addi	a0, a0, -1872
80203a58: 81 45        	mv	a1, zero
80203a5a: 97 c0 ff ff  	auipc	ra, 1048572
80203a5e: e7 80 60 64  	jalr	1606(ra)
80203a62: 03 35 84 c7  	ld	a0, -904(s0)
80203a66: 0e 05        	slli	a0, a0, 3

0000000080203a68 <.LBB64_85>:
80203a68: 97 45 06 00  	auipc	a1, 100
80203a6c: 93 85 85 e5  	addi	a1, a1, -424
80203a70: aa 95        	add	a1, a1, a0
80203a72: 03 35 04 ed  	ld	a0, -304(s0)
80203a76: 88 e1        	sd	a0, 0(a1)

0000000080203a78 <.LBB64_86>:
;         mmio.set_driver_initialized();
80203a78: 17 05 67 00  	auipc	a0, 1648
80203a7c: 13 05 85 5d  	addi	a0, a0, 1496
80203a80: 0c 61        	ld	a1, 0(a0)
80203a82: 23 30 b4 ee  	sd	a1, -288(s0)
;         self.status |= @enumToInt(MMIO.Status.driver);
80203a86: a8 59        	lw	a0, 112(a1)
80203a88: 13 65 25 00  	ori	a0, a0, 2
80203a8c: a8 d9        	sw	a0, 112(a1)
80203a8e: 37 b5 aa fa  	lui	a0, 1026731
80203a92: 1b 05 b5 aa  	addiw	a0, a0, -1365
80203a96: 32 05        	slli	a0, a0, 12
80203a98: 13 05 b5 aa  	addi	a0, a0, -1365
80203a9c: 32 05        	slli	a0, a0, 12
80203a9e: 13 05 b5 aa  	addi	a0, a0, -1365
80203aa2: 32 05        	slli	a0, a0, 12
80203aa4: 13 05 a5 aa  	addi	a0, a0, -1366
;     var result: T = undefined;
80203aa8: 23 38 a4 f0  	sd	a0, -240(s0)
80203aac: 23 34 a4 f0  	sd	a0, -248(s0)
80203ab0: 23 30 a4 f0  	sd	a0, -256(s0)
80203ab4: 13 05 04 f0  	addi	a0, s0, -256
;     zero(@ptrCast([*]u8, &result)[0..@sizeOf(T)]);
80203ab8: 23 3c a4 ee  	sd	a0, -264(s0)
80203abc: 23 34 a4 ee  	sd	a0, -280(s0)
80203ac0: 61 45        	addi	a0, zero, 24
80203ac2: 23 3c a4 c4  	sd	a0, -936(s0)
80203ac6: 23 38 a4 ee  	sd	a0, -272(s0)
80203aca: 01 45        	mv	a0, zero
;     for (bytes) |*byte| byte.* = 0;
80203acc: 23 30 a4 fe  	sd	a0, -32(s0)
80203ad0: 09 a0        	j	0x80203ad2 <.LBB64_86+0x5a>
80203ad2: 83 35 84 c5  	ld	a1, -936(s0)
80203ad6: 03 35 04 fe  	ld	a0, -32(s0)
80203ada: 23 38 a4 c4  	sd	a0, -944(s0)
80203ade: 63 72 b5 02  	bgeu	a0, a1, 0x80203b02 <.LBB64_86+0x8a>
80203ae2: 09 a0        	j	0x80203ae4 <.LBB64_86+0x6c>
80203ae4: 03 35 04 c5  	ld	a0, -944(s0)
80203ae8: 83 35 84 ee  	ld	a1, -280(s0)
80203aec: 33 86 a5 00  	add	a2, a1, a0
80203af0: 23 3c c4 fc  	sd	a2, -40(s0)
80203af4: 81 45        	mv	a1, zero
80203af6: 23 00 b6 00  	sb	a1, 0(a2)
80203afa: 05 05        	addi	a0, a0, 1
80203afc: 23 30 a4 fe  	sd	a0, -32(s0)
80203b00: c9 bf        	j	0x80203ad2 <.LBB64_86+0x5a>
;     return result;
80203b02: 03 35 04 f0  	ld	a0, -256(s0)
80203b06: 23 3c a4 ea  	sd	a0, -328(s0)
80203b0a: 03 35 04 f1  	ld	a0, -240(s0)
80203b0e: 23 34 a4 ec  	sd	a0, -312(s0)
80203b12: 03 35 84 f0  	ld	a0, -248(s0)
80203b16: 23 30 a4 ec  	sd	a0, -320(s0)
80203b1a: 13 05 00 10  	addi	a0, zero, 256
;         header.type = ControlType.cmd_get_display_info;
80203b1e: 23 2c a4 ea  	sw	a0, -328(s0)
80203b22: 13 05 84 eb  	addi	a0, s0, -328
;         operate(kernel.as_bytes(&header), @sizeOf(ResponseDisplayInfo));
80203b26: 23 38 a4 ea  	sd	a0, -336(s0)
80203b2a: 97 30 00 00  	auipc	ra, 3
80203b2e: e7 80 a0 64  	jalr	1610(ra)
80203b32: aa 85        	mv	a1, a0
80203b34: 23 30 b4 ea  	sd	a1, -352(s0)
80203b38: 61 45        	addi	a0, zero, 24
80203b3a: 23 34 a4 ea  	sd	a0, -344(s0)
80203b3e: 23 38 b4 e8  	sd	a1, -368(s0)
80203b42: 23 3c a4 e8  	sd	a0, -360(s0)
80203b46: 13 05 04 e9  	addi	a0, s0, -368
80203b4a: 93 05 80 19  	addi	a1, zero, 408
80203b4e: 97 30 00 00  	auipc	ra, 3
80203b52: e7 80 20 66  	jalr	1634(ra)
;         while (!received_display_info) {
80203b56: 91 be        	j	0x802036aa <.LBB64_69>

0000000080203b58 <.LBB64_87>:
;         const framebuffer_pixel_count = pmode.rect.width * pmode.rect.height;
80203b58: 17 a5 01 00  	auipc	a0, 26
80203b5c: 13 05 85 92  	addi	a0, a0, -1752
80203b60: 81 45        	mv	a1, zero
80203b62: 97 c0 ff ff  	auipc	ra, 1048572
80203b66: e7 80 e0 53  	jalr	1342(ra)
80203b6a: 03 35 84 ca  	ld	a0, -856(s0)
80203b6e: 23 2e a4 de  	sw	a0, -516(s0)
;         const framebuffer_size = @sizeOf(u32) * framebuffer_pixel_count;
80203b72: 02 15        	slli	a0, a0, 32
80203b74: 79 81        	srli	a0, a0, 30
80203b76: 23 34 a4 c4  	sd	a0, -952(s0)
80203b7a: 01 91        	srli	a0, a0, 32
80203b7c: 81 45        	mv	a1, zero
80203b7e: 63 0c b5 00  	beq	a0, a1, 0x80203b96 <.LBB64_88+0x12>
80203b82: 09 a0        	j	0x80203b84 <.LBB64_88>

0000000080203b84 <.LBB64_88>:
80203b84: 17 a5 01 00  	auipc	a0, 26
80203b88: 13 05 c5 8f  	addi	a0, a0, -1796
80203b8c: 81 45        	mv	a1, zero
80203b8e: 97 c0 ff ff  	auipc	ra, 1048572
80203b92: e7 80 20 51  	jalr	1298(ra)
80203b96: 03 35 84 c4  	ld	a0, -952(s0)
80203b9a: 23 2c a4 de  	sw	a0, -520(s0)
;         const framebuffer_allocation = kernel.heap.allocate(framebuffer_size, true, true) orelse @panic("unable to allocate framebuffer");
80203b9e: 02 15        	slli	a0, a0, 32
80203ba0: 13 56 05 02  	srli	a2, a0, 32

0000000080203ba4 <.LBB64_89>:
80203ba4: 97 45 06 00  	auipc	a1, 100
80203ba8: 93 85 c5 c5  	addi	a1, a1, -932
80203bac: 13 05 84 dd  	addi	a0, s0, -552
80203bb0: 05 47        	addi	a4, zero, 1
80203bb2: ba 86        	mv	a3, a4
80203bb4: 97 40 00 00  	auipc	ra, 4
80203bb8: e7 80 60 8b  	jalr	-1866(ra)
80203bbc: 03 45 04 df  	lbu	a0, -528(s0)
80203bc0: 81 45        	mv	a1, zero
80203bc2: e3 14 b5 d2  	bne	a0, a1, 0x802038ea <.LBB64_76+0x12>
80203bc6: 09 bb        	j	0x802038d8 <.LBB64_76>

0000000080203bc8 <.LBB64_90>:
;         kernel.framebuffer.buffer = @intToPtr([*]u32, framebuffer_allocation.virtual);
80203bc8: 17 a5 01 00  	auipc	a0, 26
80203bcc: 13 05 05 93  	addi	a0, a0, -1744
80203bd0: 81 45        	mv	a1, zero
80203bd2: 97 c0 ff ff  	auipc	ra, 1048572
80203bd6: e7 80 e0 4c  	jalr	1230(ra)
80203bda: 03 35 84 c9  	ld	a0, -872(s0)
80203bde: 0d 89        	andi	a0, a0, 3
80203be0: 81 45        	mv	a1, zero
80203be2: 63 0c b5 00  	beq	a0, a1, 0x80203bfa <.LBB64_91+0x12>
80203be6: 09 a0        	j	0x80203be8 <.LBB64_91>

0000000080203be8 <.LBB64_91>:
80203be8: 17 a5 01 00  	auipc	a0, 26
80203bec: 13 05 05 a6  	addi	a0, a0, -1440
80203bf0: 81 45        	mv	a1, zero
80203bf2: 97 c0 ff ff  	auipc	ra, 1048572
80203bf6: e7 80 e0 4a  	jalr	1198(ra)
80203bfa: 03 35 84 c9  	ld	a0, -872(s0)

0000000080203bfe <.LBB64_92>:
80203bfe: 97 45 06 00  	auipc	a1, 100
80203c02: 93 85 a5 a1  	addi	a1, a1, -1510
;         kernel.framebuffer.buffer = @intToPtr([*]u32, framebuffer_allocation.virtual);
80203c06: 88 e1        	sd	a0, 0(a1)

0000000080203c08 <.LBB64_93>:
80203c08: 17 45 06 00  	auipc	a0, 100
80203c0c: 13 05 05 bc  	addi	a0, a0, -1088
;         kernel.framebuffer.width = pmode.rect.width;
80203c10: 10 45        	lw	a2, 8(a0)
80203c12: 90 c5        	sw	a2, 8(a1)
;         kernel.framebuffer.height = pmode.rect.height;
80203c14: 48 45        	lw	a0, 12(a0)
80203c16: c8 c5        	sw	a0, 12(a1)

0000000080203c18 <.LBB64_94>:
;         const backing_allocation = kernel.heap.allocate(backing_size, true, true) orelse @panic("unable to allocate backing");
80203c18: 97 45 06 00  	auipc	a1, 100
80203c1c: 93 85 85 be  	addi	a1, a1, -1048
80203c20: 13 05 04 da  	addi	a0, s0, -608
80203c24: 13 06 00 03  	addi	a2, zero, 48
80203c28: 05 47        	addi	a4, zero, 1
80203c2a: ba 86        	mv	a3, a4
80203c2c: 97 40 00 00  	auipc	ra, 4
80203c30: e7 80 e0 83  	jalr	-1986(ra)
80203c34: 03 45 84 db  	lbu	a0, -584(s0)
80203c38: 81 45        	mv	a1, zero
80203c3a: e3 16 b5 ce  	bne	a0, a1, 0x80203926 <.LBB64_77+0x12>
80203c3e: d9 b9        	j	0x80203914 <.LBB64_77>

0000000080203c40 <.LBB64_95>:
;         const backing = @intToPtr(*volatile ResourceAttachBacking, backing_allocation.virtual);
80203c40: 17 a5 01 00  	auipc	a0, 26
80203c44: 13 05 85 8b  	addi	a0, a0, -1864
80203c48: 81 45        	mv	a1, zero
80203c4a: 97 c0 ff ff  	auipc	ra, 1048572
80203c4e: e7 80 60 45  	jalr	1110(ra)
80203c52: 03 35 04 c9  	ld	a0, -880(s0)
80203c56: 1d 89        	andi	a0, a0, 7
80203c58: 81 45        	mv	a1, zero
80203c5a: 63 0c b5 00  	beq	a0, a1, 0x80203c72 <.LBB64_96+0x12>
80203c5e: 09 a0        	j	0x80203c60 <.LBB64_96>

0000000080203c60 <.LBB64_96>:
80203c60: 17 a5 01 00  	auipc	a0, 26
80203c64: 13 05 85 9e  	addi	a0, a0, -1560
80203c68: 81 45        	mv	a1, zero
80203c6a: 97 c0 ff ff  	auipc	ra, 1048572
80203c6e: e7 80 60 43  	jalr	1078(ra)
80203c72: 03 36 04 c9  	ld	a2, -880(s0)
80203c76: 23 30 c4 d8  	sd	a2, -640(s0)
80203c7a: 13 05 60 10  	addi	a0, zero, 262
;                 .type = ControlType.cmd_resource_attach_backing,
80203c7e: 08 c2        	sw	a0, 0(a2)
80203c80: 01 45        	mv	a0, zero
;                 .flags = 0,
80203c82: 48 c2        	sw	a0, 4(a2)
;                 .fence_id = 0,
80203c84: 08 e6        	sd	a0, 8(a2)
;                 .context_id = 0,
80203c86: 08 ca        	sw	a0, 16(a2)
;                 .padding = 0,
80203c88: 48 ca        	sw	a0, 20(a2)
80203c8a: 85 45        	addi	a1, zero, 1
;             .resource_id = 1,
80203c8c: 0c ce        	sw	a1, 24(a2)
;             .entry_count = 1,
80203c8e: 4c ce        	sw	a1, 28(a2)
;         backing.set_entry(0, MemoryEntry{
80203c90: 83 35 04 d8  	ld	a1, -640(s0)
;             .address = framebuffer_allocation.physical,
80203c94: 03 36 04 dc  	ld	a2, -576(s0)
80203c98: 23 38 c4 d6  	sd	a2, -656(s0)
;             .length = framebuffer_size,
80203c9c: 03 26 84 df  	lw	a2, -520(s0)
80203ca0: 23 2c c4 d6  	sw	a2, -648(s0)
;             .padding = 0,
80203ca4: 23 2e a4 d6  	sw	a0, -644(s0)
80203ca8: 23 30 b4 f6  	sd	a1, -160(s0)
80203cac: 23 3c a4 f4  	sd	a0, -168(s0)
;             const entry_ptr = @intToPtr(*MemoryEntry, @ptrToInt(self) + @sizeOf(@This()) + (@sizeOf(MemoryEntry) * index));
80203cb0: 13 85 05 02  	addi	a0, a1, 32
80203cb4: 23 30 a4 c4  	sd	a0, -960(s0)
80203cb8: 63 7c b5 00  	bgeu	a0, a1, 0x80203cd0 <.LBB64_97+0x12>
80203cbc: 09 a0        	j	0x80203cbe <.LBB64_97>

0000000080203cbe <.LBB64_97>:
80203cbe: 17 95 01 00  	auipc	a0, 25
80203cc2: 13 05 25 7c  	addi	a0, a0, 1986
80203cc6: 81 45        	mv	a1, zero
80203cc8: 97 c0 ff ff  	auipc	ra, 1048572
80203ccc: e7 80 80 3d  	jalr	984(ra)
80203cd0: 83 35 84 f5  	ld	a1, -168(s0)
80203cd4: 7d 55        	addi	a0, zero, -1
80203cd6: 11 81        	srli	a0, a0, 4
80203cd8: 6d 8d        	and	a0, a0, a1
80203cda: 13 96 45 00  	slli	a2, a1, 4
80203cde: 23 3c c4 c2  	sd	a2, -968(s0)
80203ce2: 63 0c b5 00  	beq	a0, a1, 0x80203cfa <.LBB64_98+0x12>
80203ce6: 09 a0        	j	0x80203ce8 <.LBB64_98>

0000000080203ce8 <.LBB64_98>:
80203ce8: 17 95 01 00  	auipc	a0, 25
80203cec: 13 05 85 79  	addi	a0, a0, 1944
80203cf0: 81 45        	mv	a1, zero
80203cf2: 97 c0 ff ff  	auipc	ra, 1048572
80203cf6: e7 80 e0 3a  	jalr	942(ra)
80203cfa: 83 35 04 c4  	ld	a1, -960(s0)
80203cfe: 03 35 84 c3  	ld	a0, -968(s0)
80203d02: 2e 95        	add	a0, a0, a1
80203d04: 23 38 a4 c2  	sd	a0, -976(s0)
80203d08: 63 7c b5 00  	bgeu	a0, a1, 0x80203d20 <.LBB64_99+0x12>
80203d0c: 09 a0        	j	0x80203d0e <.LBB64_99>

0000000080203d0e <.LBB64_99>:
80203d0e: 17 95 01 00  	auipc	a0, 25
80203d12: 13 05 25 77  	addi	a0, a0, 1906
80203d16: 81 45        	mv	a1, zero
80203d18: 97 c0 ff ff  	auipc	ra, 1048572
80203d1c: e7 80 80 38  	jalr	904(ra)
80203d20: 03 35 04 c3  	ld	a0, -976(s0)
80203d24: 81 45        	mv	a1, zero
;             const entry_ptr = @intToPtr(*MemoryEntry, @ptrToInt(self) + @sizeOf(@This()) + (@sizeOf(MemoryEntry) * index));
80203d26: 63 1c b5 00  	bne	a0, a1, 0x80203d3e <.LBB64_100+0x12>
80203d2a: 09 a0        	j	0x80203d2c <.LBB64_100>

0000000080203d2c <.LBB64_100>:
80203d2c: 17 95 01 00  	auipc	a0, 25
80203d30: 13 05 c5 7c  	addi	a0, a0, 1996
80203d34: 81 45        	mv	a1, zero
80203d36: 97 c0 ff ff  	auipc	ra, 1048572
80203d3a: e7 80 a0 36  	jalr	874(ra)
80203d3e: 03 35 04 c3  	ld	a0, -976(s0)
80203d42: 1d 89        	andi	a0, a0, 7
80203d44: 81 45        	mv	a1, zero
80203d46: 63 0c b5 00  	beq	a0, a1, 0x80203d5e <.LBB64_101+0x12>
80203d4a: 09 a0        	j	0x80203d4c <.LBB64_101>

0000000080203d4c <.LBB64_101>:
80203d4c: 17 a5 01 00  	auipc	a0, 26
80203d50: 13 05 c5 8f  	addi	a0, a0, -1796
80203d54: 81 45        	mv	a1, zero
80203d56: 97 c0 ff ff  	auipc	ra, 1048572
80203d5a: e7 80 a0 34  	jalr	842(ra)
80203d5e: 83 35 04 c3  	ld	a1, -976(s0)
80203d62: 23 34 b4 f6  	sd	a1, -152(s0)
;             entry_ptr.* = entry;
80203d66: 03 35 84 d7  	ld	a0, -648(s0)
80203d6a: 88 e5        	sd	a0, 8(a1)
80203d6c: 03 35 04 d7  	ld	a0, -656(s0)
80203d70: 88 e1        	sd	a0, 0(a1)
;         operate(@intToPtr([*]u8, backing_allocation.virtual)[0..backing_size], @sizeOf(ControlHeader));
80203d72: 03 35 04 d9  	ld	a0, -624(s0)
80203d76: 23 34 a4 c2  	sd	a0, -984(s0)
80203d7a: 81 45        	mv	a1, zero
80203d7c: 63 1c b5 00  	bne	a0, a1, 0x80203d94 <.LBB64_102+0x12>
80203d80: 09 a0        	j	0x80203d82 <.LBB64_102>

0000000080203d82 <.LBB64_102>:
80203d82: 17 95 01 00  	auipc	a0, 25
80203d86: 13 05 65 77  	addi	a0, a0, 1910
80203d8a: 81 45        	mv	a1, zero
80203d8c: 97 c0 ff ff  	auipc	ra, 1048572
80203d90: e7 80 40 31  	jalr	788(ra)
80203d94: 03 35 84 c2  	ld	a0, -984(s0)
80203d98: 23 34 a4 d6  	sd	a0, -664(s0)
80203d9c: 23 30 a4 c2  	sd	a0, -992(s0)
80203da0: 81 45        	mv	a1, zero
80203da2: 05 45        	addi	a0, zero, 1
80203da4: 63 1c b5 00  	bne	a0, a1, 0x80203dbc <.LBB64_103+0x12>
80203da8: 09 a0        	j	0x80203daa <.LBB64_103>

0000000080203daa <.LBB64_103>:
80203daa: 17 95 01 00  	auipc	a0, 25
80203dae: 13 05 65 55  	addi	a0, a0, 1366
80203db2: 81 45        	mv	a1, zero
80203db4: 97 c0 ff ff  	auipc	ra, 1048572
80203db8: e7 80 c0 2e  	jalr	748(ra)
80203dbc: 03 35 04 c2  	ld	a0, -992(s0)
80203dc0: 23 3c a4 d4  	sd	a0, -680(s0)
80203dc4: 13 05 00 03  	addi	a0, zero, 48
80203dc8: 23 3c a4 c0  	sd	a0, -1000(s0)
80203dcc: 23 30 a4 d6  	sd	a0, -672(s0)
80203dd0: 13 05 84 d5  	addi	a0, s0, -680
80203dd4: e1 45        	addi	a1, zero, 24
80203dd6: 97 30 00 00  	auipc	ra, 3
80203dda: e7 80 a0 3d  	jalr	986(ra)
80203dde: 03 35 84 c1  	ld	a0, -1000(s0)
80203de2: b7 b5 aa fa  	lui	a1, 1026731
80203de6: 9b 85 b5 aa  	addiw	a1, a1, -1365
80203dea: b2 05        	slli	a1, a1, 12
80203dec: 93 85 b5 aa  	addi	a1, a1, -1365
80203df0: b2 05        	slli	a1, a1, 12
80203df2: 93 85 b5 aa  	addi	a1, a1, -1365
80203df6: b2 05        	slli	a1, a1, 12
80203df8: 93 85 a5 aa  	addi	a1, a1, -1366
;     var result: T = undefined;
80203dfc: 23 38 b4 fa  	sd	a1, -80(s0)
80203e00: 23 34 b4 fa  	sd	a1, -88(s0)
80203e04: 23 30 b4 fa  	sd	a1, -96(s0)
80203e08: 23 3c b4 f8  	sd	a1, -104(s0)
80203e0c: 23 38 b4 f8  	sd	a1, -112(s0)
80203e10: 23 34 b4 f8  	sd	a1, -120(s0)
80203e14: 93 05 84 f8  	addi	a1, s0, -120
;     zero(@ptrCast([*]u8, &result)[0..@sizeOf(T)]);
80203e18: 23 30 b4 f8  	sd	a1, -128(s0)
80203e1c: 23 38 b4 f6  	sd	a1, -144(s0)
80203e20: 23 3c a4 f6  	sd	a0, -136(s0)
80203e24: 01 45        	mv	a0, zero
;     for (bytes) |*byte| byte.* = 0;
80203e26: 23 30 a4 fc  	sd	a0, -64(s0)
80203e2a: 09 a0        	j	0x80203e2c <.LBB64_103+0x82>
80203e2c: 83 35 84 c1  	ld	a1, -1000(s0)
80203e30: 03 35 04 fc  	ld	a0, -64(s0)
80203e34: 23 38 a4 c0  	sd	a0, -1008(s0)
80203e38: 63 72 b5 02  	bgeu	a0, a1, 0x80203e5c <.LBB64_103+0xb2>
80203e3c: 09 a0        	j	0x80203e3e <.LBB64_103+0x94>
80203e3e: 03 35 04 c1  	ld	a0, -1008(s0)
80203e42: 83 35 04 f7  	ld	a1, -144(s0)
80203e46: 33 86 a5 00  	add	a2, a1, a0
80203e4a: 23 3c c4 fa  	sd	a2, -72(s0)
80203e4e: 81 45        	mv	a1, zero
80203e50: 23 00 b6 00  	sb	a1, 0(a2)
80203e54: 05 05        	addi	a0, a0, 1
80203e56: 23 30 a4 fc  	sd	a0, -64(s0)
80203e5a: c9 bf        	j	0x80203e2c <.LBB64_103+0x82>
;     return result;
80203e5c: 03 35 84 f8  	ld	a0, -120(s0)
80203e60: 23 34 a4 d2  	sd	a0, -728(s0)
80203e64: 03 35 04 fa  	ld	a0, -96(s0)
80203e68: 23 30 a4 d4  	sd	a0, -704(s0)
80203e6c: 03 35 84 fa  	ld	a0, -88(s0)
80203e70: 23 34 a4 d4  	sd	a0, -696(s0)
80203e74: 03 35 04 fb  	ld	a0, -80(s0)
80203e78: 23 38 a4 d4  	sd	a0, -688(s0)
80203e7c: 03 35 84 f9  	ld	a0, -104(s0)
80203e80: 23 3c a4 d2  	sd	a0, -712(s0)
80203e84: 03 35 04 f9  	ld	a0, -112(s0)
80203e88: 23 38 a4 d2  	sd	a0, -720(s0)
80203e8c: 13 05 30 10  	addi	a0, zero, 259
;         set_scanout.header.type = ControlType.cmd_set_scanout;
80203e90: 23 24 a4 d2  	sw	a0, -728(s0)

0000000080203e94 <.LBB64_104>:
80203e94: 17 45 06 00  	auipc	a0, 100
80203e98: 13 05 45 93  	addi	a0, a0, -1740
;         set_scanout.rect = pmode.rect;
80203e9c: 0c 41        	lw	a1, 0(a0)
80203e9e: 23 20 b4 d4  	sw	a1, -704(s0)
80203ea2: 4c 41        	lw	a1, 4(a0)
80203ea4: 23 22 b4 d4  	sw	a1, -700(s0)
80203ea8: 0c 45        	lw	a1, 8(a0)
80203eaa: 23 24 b4 d4  	sw	a1, -696(s0)
80203eae: 48 45        	lw	a0, 12(a0)
80203eb0: 23 26 a4 d4  	sw	a0, -692(s0)
80203eb4: 05 45        	addi	a0, zero, 1
;         set_scanout.resource_id = 1;
80203eb6: 23 2a a4 d4  	sw	a0, -684(s0)
80203eba: 13 05 84 d2  	addi	a0, s0, -728
;         operate(kernel.as_bytes(&set_scanout), @sizeOf(ControlHeader));
80203ebe: 23 30 a4 d2  	sd	a0, -736(s0)
80203ec2: 97 40 00 00  	auipc	ra, 4
80203ec6: e7 80 a0 81  	jalr	-2022(ra)
80203eca: aa 85        	mv	a1, a0
80203ecc: 23 38 b4 d0  	sd	a1, -752(s0)
80203ed0: 13 05 00 03  	addi	a0, zero, 48
80203ed4: 23 3c a4 d0  	sd	a0, -744(s0)
80203ed8: 23 30 b4 d0  	sd	a1, -768(s0)
80203edc: 23 34 a4 d0  	sd	a0, -760(s0)
80203ee0: 13 05 04 d0  	addi	a0, s0, -768
80203ee4: e1 45        	addi	a1, zero, 24
80203ee6: 97 30 00 00  	auipc	ra, 3
80203eea: e7 80 a0 2c  	jalr	714(ra)
;         const framebuffer = @intToPtr([*]u32, framebuffer_allocation.virtual)[0..framebuffer_pixel_count];
80203eee: 03 35 84 dc  	ld	a0, -568(s0)
80203ef2: 23 34 a4 c0  	sd	a0, -1016(s0)
80203ef6: 81 45        	mv	a1, zero
80203ef8: 63 1c b5 00  	bne	a0, a1, 0x80203f10 <.LBB64_105+0x12>
80203efc: 09 a0        	j	0x80203efe <.LBB64_105>

0000000080203efe <.LBB64_105>:
80203efe: 17 95 01 00  	auipc	a0, 25
80203f02: 13 05 a5 5f  	addi	a0, a0, 1530
80203f06: 81 45        	mv	a1, zero
80203f08: 97 c0 ff ff  	auipc	ra, 1048572
80203f0c: e7 80 80 19  	jalr	408(ra)
80203f10: 03 35 84 c0  	ld	a0, -1016(s0)
80203f14: 0d 89        	andi	a0, a0, 3
80203f16: 81 45        	mv	a1, zero
80203f18: 63 0c b5 00  	beq	a0, a1, 0x80203f30 <.LBB64_106+0x12>
80203f1c: 09 a0        	j	0x80203f1e <.LBB64_106>

0000000080203f1e <.LBB64_106>:
80203f1e: 17 95 01 00  	auipc	a0, 25
80203f22: 13 05 a5 72  	addi	a0, a0, 1834
80203f26: 81 45        	mv	a1, zero
80203f28: 97 c0 ff ff  	auipc	ra, 1048572
80203f2c: e7 80 80 17  	jalr	376(ra)
80203f30: 03 35 84 c0  	ld	a0, -1016(s0)
80203f34: 23 3c a4 ce  	sd	a0, -776(s0)
80203f38: 83 65 c4 df  	lwu	a1, -516(s0)
80203f3c: 23 3c b4 be  	sd	a1, -1032(s0)
80203f40: 23 30 a4 c0  	sd	a0, -1024(s0)
80203f44: 81 45        	mv	a1, zero
80203f46: 05 45        	addi	a0, zero, 1
80203f48: 63 1c b5 00  	bne	a0, a1, 0x80203f60 <.LBB64_107+0x12>
80203f4c: 09 a0        	j	0x80203f4e <.LBB64_107>

0000000080203f4e <.LBB64_107>:
80203f4e: 17 95 01 00  	auipc	a0, 25
80203f52: 13 05 25 3b  	addi	a0, a0, 946
80203f56: 81 45        	mv	a1, zero
80203f58: 97 c0 ff ff  	auipc	ra, 1048572
80203f5c: e7 80 80 14  	jalr	328(ra)
80203f60: 03 35 84 bf  	ld	a0, -1032(s0)
80203f64: 83 35 04 c0  	ld	a1, -1024(s0)
80203f68: 23 34 b4 ce  	sd	a1, -792(s0)
80203f6c: 23 38 a4 ce  	sd	a0, -784(s0)
80203f70: 81 45        	mv	a1, zero
;         for (framebuffer) |*pixel| {
80203f72: 23 30 b4 ce  	sd	a1, -800(s0)
80203f76: 23 30 a4 c8  	sd	a0, -896(s0)
80203f7a: d9 ba        	j	0x80203950 <.LBB64_77+0x3c>

0000000080203f7c <arch.riscv.read_disk_raw>:
; fn read_disk_raw(buffer: []u8, start_sector: u64, sector_count: u64) []u8 {
80203f7c: 71 71        	addi	sp, sp, -176
80203f7e: 06 f5        	sd	ra, 168(sp)
80203f80: 22 f1        	sd	s0, 160(sp)
80203f82: 00 19        	addi	s0, sp, 176
80203f84: 23 34 b4 f8  	sd	a1, -120(s0)
80203f88: 23 38 a4 f8  	sd	a0, -112(s0)
80203f8c: 23 34 c4 fa  	sd	a2, -88(s0)
80203f90: 23 30 d4 fa  	sd	a3, -96(s0)
80203f94: 7d 55        	addi	a0, zero, -1
80203f96: 25 81        	srli	a0, a0, 9
;     const total_size = sector_count * sector_size;
80203f98: 75 8d        	and	a0, a0, a3
80203f9a: 93 95 96 00  	slli	a1, a3, 9
80203f9e: 23 3c b4 f8  	sd	a1, -104(s0)
80203fa2: 63 17 d5 0a  	bne	a0, a3, 0x80204050 <.LBB65_24>
80203fa6: 75 a8        	j	0x80204062 <.LBB65_24+0x12>
;     while (sector_i < sector_count) : ({
80203fa8: 03 35 84 fd  	ld	a0, -40(s0)
80203fac: 83 35 04 fa  	ld	a1, -96(s0)
80203fb0: 63 71 b5 04  	bgeu	a0, a1, 0x80203ff2 <.LBB65_21+0x28>
80203fb4: 09 a0        	j	0x80203fb6 <arch.riscv.read_disk_raw+0x3a>
;         const sector_physical = kernel.arch.Virtual.AddressSpace.virtual_to_physical(@ptrToInt(&buffer[bytes_asked]));
80203fb6: 83 35 84 f8  	ld	a1, -120(s0)
80203fba: 03 35 04 fe  	ld	a0, -32(s0)
80203fbe: 23 30 a4 f8  	sd	a0, -128(s0)
80203fc2: 8c 65        	ld	a1, 8(a1)
80203fc4: 63 63 b5 0e  	bltu	a0, a1, 0x802040aa <.LBB65_26+0x12>
80203fc8: c1 a8        	j	0x80204098 <.LBB65_26>

0000000080203fca <.LBB65_21>:
;         while (virtio.block.read != bytes_asked) {
80203fca: 17 05 67 00  	auipc	a0, 1648
80203fce: 13 05 65 0a  	addi	a0, a0, 166
80203fd2: 08 61        	ld	a0, 0(a0)
80203fd4: 83 35 04 fe  	ld	a1, -32(s0)
80203fd8: 63 04 b5 00  	beq	a0, a1, 0x80203fe0 <.LBB65_21+0x16>
80203fdc: 09 a0        	j	0x80203fde <.LBB65_21+0x14>
80203fde: f5 b7        	j	0x80203fca <.LBB65_21>
;         sector_i += 1;
80203fe0: 83 35 84 fd  	ld	a1, -40(s0)
80203fe4: 13 85 15 00  	addi	a0, a1, 1
80203fe8: 23 3c a4 f6  	sd	a0, -136(s0)
80203fec: 63 6d b5 10  	bltu	a0, a1, 0x80204106 <.LBB65_28>
80203ff0: 25 a2        	j	0x80204118 <.LBB65_28+0x12>
;     kernel.assert(@src(), bytes_asked == virtio.block.read);
80203ff2: 03 35 04 fe  	ld	a0, -32(s0)

0000000080203ff6 <.LBB65_22>:
80203ff6: 97 05 67 00  	auipc	a1, 1648
80203ffa: 93 85 a5 07  	addi	a1, a1, 122
80203ffe: 23 34 b4 f6  	sd	a1, -152(s0)
80204002: 8c 61        	ld	a1, 0(a1)
80204004: 2d 8d        	xor	a0, a0, a1
80204006: 93 35 15 00  	seqz	a1, a0

000000008020400a <.LBB65_23>:
8020400a: 17 95 01 00  	auipc	a0, 25
8020400e: 13 05 65 6a  	addi	a0, a0, 1702
80204012: 97 c0 ff ff  	auipc	ra, 1048572
80204016: e7 80 a0 1f  	jalr	506(ra)
8020401a: 03 36 84 f6  	ld	a2, -152(s0)
;     const read_bytes = virtio.block.read;
8020401e: 08 62        	ld	a0, 0(a2)
80204020: 23 3c a4 fa  	sd	a0, -72(s0)
80204024: 81 45        	mv	a1, zero
;     virtio.block.read = 0;
80204026: 0c e2        	sd	a1, 0(a2)
;     log.debug("Block device read {} bytes", .{read_bytes});
80204028: 23 38 a4 fa  	sd	a0, -80(s0)
8020402c: 13 05 04 fb  	addi	a0, s0, -80
80204030: 97 40 00 00  	auipc	ra, 4
80204034: e7 80 20 90  	jalr	-1790(ra)
;     kernel.assert(@src(), sector_count * sector_size == read_bytes);
80204038: 83 35 04 fa  	ld	a1, -96(s0)
8020403c: 7d 55        	addi	a0, zero, -1
8020403e: 25 81        	srli	a0, a0, 9
80204040: 6d 8d        	and	a0, a0, a1
80204042: 13 96 95 00  	slli	a2, a1, 9
80204046: 23 38 c4 f6  	sd	a2, -144(s0)
8020404a: 63 1c b5 0c  	bne	a0, a1, 0x80204122 <.LBB65_29>
8020404e: dd a0        	j	0x80204134 <.LBB65_29+0x12>

0000000080204050 <.LBB65_24>:
;     const total_size = sector_count * sector_size;
80204050: 17 95 01 00  	auipc	a0, 25
80204054: 13 05 05 43  	addi	a0, a0, 1072
80204058: 81 45        	mv	a1, zero
8020405a: 97 c0 ff ff  	auipc	ra, 1048572
8020405e: e7 80 60 04  	jalr	70(ra)
80204062: 83 35 84 f9  	ld	a1, -104(s0)
80204066: 03 35 84 f8  	ld	a0, -120(s0)
8020406a: 23 34 b4 fe  	sd	a1, -24(s0)
;     kernel.assert(@src(), buffer.len >= total_size);
8020406e: 08 65        	ld	a0, 8(a0)
80204070: 33 35 b5 00  	sltu	a0, a0, a1
80204074: 93 45 15 00  	xori	a1, a0, 1

0000000080204078 <.LBB65_25>:
80204078: 17 95 01 00  	auipc	a0, 25
8020407c: 13 05 05 61  	addi	a0, a0, 1552
80204080: 97 c0 ff ff  	auipc	ra, 1048572
80204084: e7 80 c0 18  	jalr	396(ra)
80204088: 01 45        	mv	a0, zero
;     var bytes_asked: u64 = 0;
8020408a: 23 30 a4 fe  	sd	a0, -32(s0)
;     var sector_i: u64 = start_sector;
8020408e: 03 35 84 fa  	ld	a0, -88(s0)
80204092: 23 3c a4 fc  	sd	a0, -40(s0)
;     while (sector_i < sector_count) : ({
80204096: 09 bf        	j	0x80203fa8 <arch.riscv.read_disk_raw+0x2c>

0000000080204098 <.LBB65_26>:
;         const sector_physical = kernel.arch.Virtual.AddressSpace.virtual_to_physical(@ptrToInt(&buffer[bytes_asked]));
80204098: 17 95 01 00  	auipc	a0, 25
8020409c: 13 05 85 26  	addi	a0, a0, 616
802040a0: 81 45        	mv	a1, zero
802040a2: 97 c0 ff ff  	auipc	ra, 1048572
802040a6: e7 80 e0 ff  	jalr	-2(ra)
802040aa: 83 35 04 f8  	ld	a1, -128(s0)
802040ae: 03 35 84 f8  	ld	a0, -120(s0)
802040b2: 08 61        	ld	a0, 0(a0)
802040b4: 2e 95        	add	a0, a0, a1
802040b6: 97 30 00 00  	auipc	ra, 3
802040ba: e7 80 a0 67  	jalr	1658(ra)
802040be: aa 85        	mv	a1, a0
802040c0: 23 38 b4 fc  	sd	a1, -48(s0)
;         virtio.block.operate(.read, sector_i, sector_physical);
802040c4: 03 35 84 fd  	ld	a0, -40(s0)
802040c8: 23 34 a4 fc  	sd	a0, -56(s0)
802040cc: 23 30 b4 fc  	sd	a1, -64(s0)
802040d0: 97 30 00 00  	auipc	ra, 3
802040d4: e7 80 80 67  	jalr	1656(ra)
;         bytes_asked += sector_size;
802040d8: 83 35 04 fe  	ld	a1, -32(s0)
802040dc: 13 85 05 20  	addi	a0, a1, 512
802040e0: 23 30 a4 f6  	sd	a0, -160(s0)
802040e4: 63 7c b5 00  	bgeu	a0, a1, 0x802040fc <.LBB65_27+0x12>
802040e8: 09 a0        	j	0x802040ea <.LBB65_27>

00000000802040ea <.LBB65_27>:
802040ea: 17 95 01 00  	auipc	a0, 25
802040ee: 13 05 65 39  	addi	a0, a0, 918
802040f2: 81 45        	mv	a1, zero
802040f4: 97 c0 ff ff  	auipc	ra, 1048572
802040f8: e7 80 c0 fa  	jalr	-84(ra)
802040fc: 03 35 04 f6  	ld	a0, -160(s0)
80204100: 23 30 a4 fe  	sd	a0, -32(s0)
;         while (virtio.block.read != bytes_asked) {
80204104: d9 b5        	j	0x80203fca <.LBB65_21>

0000000080204106 <.LBB65_28>:
;         sector_i += 1;
80204106: 17 95 01 00  	auipc	a0, 25
8020410a: 13 05 a5 37  	addi	a0, a0, 890
8020410e: 81 45        	mv	a1, zero
80204110: 97 c0 ff ff  	auipc	ra, 1048572
80204114: e7 80 00 f9  	jalr	-112(ra)
80204118: 03 35 84 f7  	ld	a0, -136(s0)
8020411c: 23 3c a4 fc  	sd	a0, -40(s0)
;     while (sector_i < sector_count) : ({
80204120: 61 b5        	j	0x80203fa8 <arch.riscv.read_disk_raw+0x2c>

0000000080204122 <.LBB65_29>:
;     kernel.assert(@src(), sector_count * sector_size == read_bytes);
80204122: 17 95 01 00  	auipc	a0, 25
80204126: 13 05 e5 35  	addi	a0, a0, 862
8020412a: 81 45        	mv	a1, zero
8020412c: 97 c0 ff ff  	auipc	ra, 1048572
80204130: e7 80 40 f7  	jalr	-140(ra)
80204134: 03 35 04 f7  	ld	a0, -144(s0)
80204138: 83 35 84 fb  	ld	a1, -72(s0)
8020413c: 2d 8d        	xor	a0, a0, a1
8020413e: 93 35 15 00  	seqz	a1, a0

0000000080204142 <.LBB65_30>:
80204142: 17 95 01 00  	auipc	a0, 25
80204146: 13 05 65 59  	addi	a0, a0, 1430
8020414a: 97 c0 ff ff  	auipc	ra, 1048572
8020414e: e7 80 20 0c  	jalr	194(ra)
80204152: 03 35 84 f8  	ld	a0, -120(s0)
;     return buffer[0..read_bytes];
80204156: 83 35 84 fb  	ld	a1, -72(s0)
8020415a: 23 38 b4 f4  	sd	a1, -176(s0)
8020415e: 08 65        	ld	a0, 8(a0)
80204160: 23 3c a4 f4  	sd	a0, -168(s0)
80204164: 81 45        	mv	a1, zero
80204166: 05 45        	addi	a0, zero, 1
80204168: 63 1c b5 00  	bne	a0, a1, 0x80204180 <.LBB65_31+0x12>
8020416c: 09 a0        	j	0x8020416e <.LBB65_31>

000000008020416e <.LBB65_31>:
8020416e: 17 95 01 00  	auipc	a0, 25
80204172: 13 05 25 19  	addi	a0, a0, 402
80204176: 81 45        	mv	a1, zero
80204178: 97 c0 ff ff  	auipc	ra, 1048572
8020417c: e7 80 80 f2  	jalr	-216(ra)
80204180: 03 35 84 f5  	ld	a0, -168(s0)
80204184: 83 35 04 f5  	ld	a1, -176(s0)
80204188: 63 7c b5 00  	bgeu	a0, a1, 0x802041a0 <.LBB65_32+0x12>
8020418c: 09 a0        	j	0x8020418e <.LBB65_32>

000000008020418e <.LBB65_32>:
8020418e: 17 95 01 00  	auipc	a0, 25
80204192: 13 05 25 17  	addi	a0, a0, 370
80204196: 81 45        	mv	a1, zero
80204198: 97 c0 ff ff  	auipc	ra, 1048572
8020419c: e7 80 80 f0  	jalr	-248(ra)
802041a0: 03 35 04 f5  	ld	a0, -176(s0)
802041a4: 83 35 04 f9  	ld	a1, -112(s0)
802041a8: 03 36 84 f8  	ld	a2, -120(s0)
802041ac: 10 62        	ld	a2, 0(a2)
802041ae: 90 e1        	sd	a2, 0(a1)
802041b0: 88 e5        	sd	a0, 8(a1)
802041b2: 0a 74        	ld	s0, 160(sp)
802041b4: aa 70        	ld	ra, 168(sp)
802041b6: 4d 61        	addi	sp, sp, 176
802041b8: 82 80        	ret

00000000802041ba <psf1.Font.parse>:
;     pub fn parse(file: []const u8) Font {
802041ba: 19 71        	addi	sp, sp, -128
802041bc: 86 fc        	sd	ra, 120(sp)
802041be: a2 f8        	sd	s0, 112(sp)
802041c0: 00 01        	addi	s0, sp, 128
802041c2: 23 34 b4 fa  	sd	a1, -88(s0)
;         const header = @ptrCast(*align(1) const Header, file.ptr).*;
802041c6: 23 38 a4 fa  	sd	a0, -80(s0)
802041ca: 88 61        	ld	a0, 0(a1)
802041cc: 23 3c a4 fa  	sd	a0, -72(s0)
802041d0: 81 45        	mv	a1, zero
802041d2: 63 12 b5 08  	bne	a0, a1, 0x80204256 <.LBB66_20+0x12>
802041d6: bd a0        	j	0x80204244 <.LBB66_20>
;         if (header.magic[0] != Header.magic[0] or header.magic[1] != Header.magic[1]) @panic("magic PSF1 font corrupted");
802041d8: 03 45 94 fe  	lbu	a0, -23(s0)
802041dc: 71 15        	addi	a0, a0, -4
802041de: 33 35 a0 00  	snez	a0, a0
802041e2: 23 30 a4 fa  	sd	a0, -96(s0)
802041e6: 09 a0        	j	0x802041e8 <psf1.Font.parse+0x2e>
802041e8: 03 35 04 fa  	ld	a0, -96(s0)
802041ec: 81 45        	mv	a1, zero
802041ee: 63 0c b5 00  	beq	a0, a1, 0x80204206 <.LBB66_19+0x12>
802041f2: 09 a0        	j	0x802041f4 <.LBB66_19>

00000000802041f4 <.LBB66_19>:
802041f4: 17 95 01 00  	auipc	a0, 25
802041f8: 13 05 c5 50  	addi	a0, a0, 1292
802041fc: 81 45        	mv	a1, zero
802041fe: 97 c0 ff ff  	auipc	ra, 1048572
80204202: e7 80 20 ea  	jalr	-350(ra)
80204206: 09 a0        	j	0x80204208 <.LBB66_19+0x14>
;         const glyph_count: u64 = if (header.mode == 1) 512 else 256;
80204208: 03 45 a4 fe  	lbu	a0, -22(s0)
8020420c: 85 45        	addi	a1, zero, 1
8020420e: 63 18 b5 00  	bne	a0, a1, 0x8020421e <.LBB66_19+0x2a>
80204212: 09 a0        	j	0x80204214 <.LBB66_19+0x20>
80204214: 13 05 00 20  	addi	a0, zero, 512
;         const glyph_count: u64 = if (header.mode == 1) 512 else 256;
80204218: 23 3c a4 fc  	sd	a0, -40(s0)
8020421c: 31 a0        	j	0x80204228 <.LBB66_19+0x34>
8020421e: 13 05 00 10  	addi	a0, zero, 256
;         const glyph_count: u64 = if (header.mode == 1) 512 else 256;
80204222: 23 3c a4 fc  	sd	a0, -40(s0)
80204226: 09 a0        	j	0x80204228 <.LBB66_19+0x34>
;         const glyph_buffer_size = header.char_size * glyph_count;
80204228: 03 45 b4 fe  	lbu	a0, -21(s0)
8020422c: 83 35 84 fd  	ld	a1, -40(s0)
80204230: 33 06 b5 02  	mul	a2, a0, a1
80204234: 23 3c c4 f8  	sd	a2, -104(s0)
80204238: 33 35 b5 02  	mulhu	a0, a0, a1
8020423c: 81 45        	mv	a1, zero
8020423e: 63 13 b5 06  	bne	a0, a1, 0x802042a4 <.LBB66_21>
80204242: 95 a8        	j	0x802042b6 <.LBB66_21+0x12>

0000000080204244 <.LBB66_20>:
;         const header = @ptrCast(*align(1) const Header, file.ptr).*;
80204244: 17 95 01 00  	auipc	a0, 25
80204248: 13 05 45 2b  	addi	a0, a0, 692
8020424c: 81 45        	mv	a1, zero
8020424e: 97 c0 ff ff  	auipc	ra, 1048572
80204252: e7 80 20 e5  	jalr	-430(ra)
80204256: 03 35 84 fb  	ld	a0, -72(s0)
8020425a: 03 46 05 00  	lbu	a2, 0(a0)
8020425e: 83 45 15 00  	lbu	a1, 1(a0)
80204262: a2 05        	slli	a1, a1, 8
80204264: d1 8d        	or	a1, a1, a2
80204266: 03 46 25 00  	lbu	a2, 2(a0)
8020426a: 03 05 35 00  	lb	a0, 3(a0)
8020426e: 22 05        	slli	a0, a0, 8
80204270: 51 8d        	or	a0, a0, a2
80204272: 42 05        	slli	a0, a0, 16
80204274: 4d 8d        	or	a0, a0, a1
80204276: 23 24 a4 fe  	sw	a0, -24(s0)
;         log.debug("Header: {}", .{header});
8020427a: 23 20 a4 fe  	sw	a0, -32(s0)
8020427e: 13 05 04 fe  	addi	a0, s0, -32
80204282: 97 30 00 00  	auipc	ra, 3
80204286: e7 80 e0 6c  	jalr	1742(ra)
;         if (header.magic[0] != Header.magic[0] or header.magic[1] != Header.magic[1]) @panic("magic PSF1 font corrupted");
8020428a: 03 45 84 fe  	lbu	a0, -24(s0)
8020428e: 93 05 a5 fc  	addi	a1, a0, -54
80204292: 33 36 b0 00  	snez	a2, a1
80204296: 93 05 60 03  	addi	a1, zero, 54
8020429a: 23 30 c4 fa  	sd	a2, -96(s0)
8020429e: e3 15 b5 f4  	bne	a0, a1, 0x802041e8 <psf1.Font.parse+0x2e>
802042a2: 1d bf        	j	0x802041d8 <psf1.Font.parse+0x1e>

00000000802042a4 <.LBB66_21>:
;         const glyph_buffer_size = header.char_size * glyph_count;
802042a4: 17 95 01 00  	auipc	a0, 25
802042a8: 13 05 c5 1d  	addi	a0, a0, 476
802042ac: 81 45        	mv	a1, zero
802042ae: 97 c0 ff ff  	auipc	ra, 1048572
802042b2: e7 80 20 df  	jalr	-526(ra)
802042b6: 83 35 84 f9  	ld	a1, -104(s0)
802042ba: 23 38 b4 fc  	sd	a1, -48(s0)
;         const glyph_buffer = file[@sizeOf(Header) .. @sizeOf(Header) + glyph_buffer_size];
802042be: 13 85 45 00  	addi	a0, a1, 4
802042c2: 23 38 a4 f8  	sd	a0, -112(s0)
802042c6: 63 7c b5 00  	bgeu	a0, a1, 0x802042de <.LBB66_22+0x12>
802042ca: 09 a0        	j	0x802042cc <.LBB66_22>

00000000802042cc <.LBB66_22>:
802042cc: 17 95 01 00  	auipc	a0, 25
802042d0: 13 05 45 1b  	addi	a0, a0, 436
802042d4: 81 45        	mv	a1, zero
802042d6: 97 c0 ff ff  	auipc	ra, 1048572
802042da: e7 80 a0 dc  	jalr	-566(ra)
802042de: 83 35 04 f9  	ld	a1, -112(s0)
802042e2: 03 35 84 fa  	ld	a0, -88(s0)
802042e6: 08 65        	ld	a0, 8(a0)
802042e8: 23 34 a4 f8  	sd	a0, -120(s0)
802042ec: 0d 45        	addi	a0, zero, 3
802042ee: 63 6c b5 00  	bltu	a0, a1, 0x80204306 <.LBB66_23+0x12>
802042f2: 09 a0        	j	0x802042f4 <.LBB66_23>

00000000802042f4 <.LBB66_23>:
802042f4: 17 95 01 00  	auipc	a0, 25
802042f8: 13 05 c5 00  	addi	a0, a0, 12
802042fc: 81 45        	mv	a1, zero
802042fe: 97 c0 ff ff  	auipc	ra, 1048572
80204302: e7 80 20 da  	jalr	-606(ra)
80204306: 03 35 84 f8  	ld	a0, -120(s0)
8020430a: 83 35 04 f9  	ld	a1, -112(s0)
8020430e: 63 7c b5 00  	bgeu	a0, a1, 0x80204326 <.LBB66_24+0x12>
80204312: 09 a0        	j	0x80204314 <.LBB66_24>

0000000080204314 <.LBB66_24>:
80204314: 17 95 01 00  	auipc	a0, 25
80204318: 13 05 c5 fe  	addi	a0, a0, -20
8020431c: 81 45        	mv	a1, zero
8020431e: 97 c0 ff ff  	auipc	ra, 1048572
80204322: e7 80 20 d8  	jalr	-638(ra)
80204326: 83 35 04 fb  	ld	a1, -80(s0)
8020432a: 03 35 04 f9  	ld	a0, -112(s0)
8020432e: 03 36 84 fa  	ld	a2, -88(s0)
80204332: 10 62        	ld	a2, 0(a2)
80204334: 11 06        	addi	a2, a2, 4
80204336: 71 15        	addi	a0, a0, -4
80204338: 23 30 c4 fc  	sd	a2, -64(s0)
8020433c: 23 34 a4 fc  	sd	a0, -56(s0)
;             .header = header,
80204340: 03 05 b4 fe  	lb	a0, -21(s0)
80204344: a3 81 a5 00  	sb	a0, 3(a1)
80204348: 03 05 a4 fe  	lb	a0, -22(s0)
8020434c: 23 81 a5 00  	sb	a0, 2(a1)
80204350: 03 05 94 fe  	lb	a0, -23(s0)
80204354: a3 80 a5 00  	sb	a0, 1(a1)
80204358: 03 05 84 fe  	lb	a0, -24(s0)
8020435c: 23 80 a5 00  	sb	a0, 0(a1)
;             .glyph_buffer = glyph_buffer,
80204360: 03 35 04 fc  	ld	a0, -64(s0)
80204364: 88 e5        	sd	a0, 8(a1)
80204366: 03 35 84 fc  	ld	a0, -56(s0)
8020436a: 88 e9        	sd	a0, 16(a1)
;         return Font{
8020436c: 46 74        	ld	s0, 112(sp)
8020436e: e6 70        	ld	ra, 120(sp)
80204370: 09 61        	addi	sp, sp, 128
80204372: 82 80        	ret

0000000080204374 <graphics.draw_horizontal_line>:
; pub fn draw_horizontal_line(line: Line, color: Color) void {
80204374: 35 71        	addi	sp, sp, -160
80204376: 06 ed        	sd	ra, 152(sp)
80204378: 22 e9        	sd	s0, 144(sp)
8020437a: 00 11        	addi	s0, sp, 160
8020437c: 23 38 b4 fa  	sd	a1, -80(s0)
80204380: aa 85        	mv	a1, a0
; pub fn draw_horizontal_line(line: Line, color: Color) void {
80204382: 23 3c b4 fa  	sd	a1, -72(s0)
;     kernel.assert(@src(), line.start.y == line.end.y);
80204386: c8 41        	lw	a0, 4(a1)
80204388: cc 45        	lw	a1, 12(a1)
8020438a: 2d 8d        	xor	a0, a0, a1
8020438c: 93 35 15 00  	seqz	a1, a0

0000000080204390 <.LBB67_14>:
80204390: 17 95 01 00  	auipc	a0, 25
80204394: 13 05 05 38  	addi	a0, a0, 896
80204398: 97 c0 ff ff  	auipc	ra, 1048572
8020439c: e7 80 40 e7  	jalr	-396(ra)
802043a0: 83 35 84 fb  	ld	a1, -72(s0)
;     kernel.assert(@src(), line.start.x < line.end.x);
802043a4: 88 41        	lw	a0, 0(a1)
802043a6: 8c 45        	lw	a1, 8(a1)
802043a8: b3 35 b5 00  	sltu	a1, a0, a1

00000000802043ac <.LBB67_15>:
802043ac: 17 95 01 00  	auipc	a0, 25
802043b0: 13 05 c5 38  	addi	a0, a0, 908
802043b4: 97 c0 ff ff  	auipc	ra, 1048572
802043b8: e7 80 80 e5  	jalr	-424(ra)
802043bc: 03 35 84 fb  	ld	a0, -72(s0)
;     const length = line.end.x - line.start.x;
802043c0: 0c 41        	lw	a1, 0(a0)
802043c2: 08 45        	lw	a0, 8(a0)
802043c4: bb 05 b5 40  	subw	a1, a0, a1
802043c8: 23 30 b4 fc  	sd	a1, -64(s0)
802043cc: 63 6f b5 04  	bltu	a0, a1, 0x8020442a <.LBB67_16>
802043d0: b5 a0        	j	0x8020443c <.LBB67_16+0x12>
;     for (kernel.framebuffer.buffer[start_i .. start_i + length]) |*pixel| {
802043d2: 83 35 04 fa  	ld	a1, -96(s0)
802043d6: 03 35 04 fd  	ld	a0, -48(s0)
802043da: 23 34 a4 fa  	sd	a0, -88(s0)
802043de: 63 72 b5 04  	bgeu	a0, a1, 0x80204422 <.LBB67_15+0x76>
802043e2: 09 a0        	j	0x802043e4 <.LBB67_15+0x38>
802043e4: 03 35 84 fa  	ld	a0, -88(s0)
802043e8: 83 35 04 fb  	ld	a1, -80(s0)
802043ec: 03 36 84 fd  	ld	a2, -40(s0)
802043f0: 93 16 25 00  	slli	a3, a0, 2
802043f4: 36 96        	add	a2, a2, a3
802043f6: 23 34 c4 fc  	sd	a2, -56(s0)
;         pixel.* = @bitCast(u32, color);
802043fa: 83 86 35 00  	lb	a3, 3(a1)
802043fe: a3 01 d6 00  	sb	a3, 3(a2)
80204402: 83 86 25 00  	lb	a3, 2(a1)
80204406: 23 01 d6 00  	sb	a3, 2(a2)
8020440a: 83 86 15 00  	lb	a3, 1(a1)
8020440e: a3 00 d6 00  	sb	a3, 1(a2)
80204412: 83 85 05 00  	lb	a1, 0(a1)
80204416: 23 00 b6 00  	sb	a1, 0(a2)
;     for (kernel.framebuffer.buffer[start_i .. start_i + length]) |*pixel| {
8020441a: 05 05        	addi	a0, a0, 1
8020441c: 23 38 a4 fc  	sd	a0, -48(s0)
80204420: 4d bf        	j	0x802043d2 <.LBB67_15+0x26>
; pub fn draw_horizontal_line(line: Line, color: Color) void {
80204422: 4a 64        	ld	s0, 144(sp)
80204424: ea 60        	ld	ra, 152(sp)
80204426: 0d 61        	addi	sp, sp, 160
80204428: 82 80        	ret

000000008020442a <.LBB67_16>:
;     const length = line.end.x - line.start.x;
8020442a: 17 95 01 00  	auipc	a0, 25
8020442e: 13 05 65 05  	addi	a0, a0, 86
80204432: 81 45        	mv	a1, zero
80204434: 97 c0 ff ff  	auipc	ra, 1048572
80204438: e7 80 c0 c6  	jalr	-916(ra)
8020443c: 03 35 84 fb  	ld	a0, -72(s0)
80204440: 83 35 04 fc  	ld	a1, -64(s0)
80204444: 23 26 b4 fe  	sw	a1, -20(s0)
;     const start_i = line.start.x + (line.start.y * kernel.framebuffer.width);
80204448: 83 65 05 00  	lwu	a1, 0(a0)
8020444c: 23 38 b4 f8  	sd	a1, -112(s0)
80204450: 03 65 45 00  	lwu	a0, 4(a0)

0000000080204454 <.LBB67_17>:
80204454: 97 35 06 00  	auipc	a1, 99
80204458: 93 85 45 1c  	addi	a1, a1, 452
;     const start_i = line.start.x + (line.start.y * kernel.framebuffer.width);
8020445c: 83 e5 85 00  	lwu	a1, 8(a1)
80204460: 33 05 b5 02  	mul	a0, a0, a1
80204464: 23 3c a4 f8  	sd	a0, -104(s0)
80204468: 01 91        	srli	a0, a0, 32
8020446a: 81 45        	mv	a1, zero
8020446c: 63 0c b5 00  	beq	a0, a1, 0x80204484 <.LBB67_18+0x12>
80204470: 09 a0        	j	0x80204472 <.LBB67_18>

0000000080204472 <.LBB67_18>:
80204472: 17 95 01 00  	auipc	a0, 25
80204476: 13 05 e5 00  	addi	a0, a0, 14
8020447a: 81 45        	mv	a1, zero
8020447c: 97 c0 ff ff  	auipc	ra, 1048572
80204480: e7 80 40 c2  	jalr	-988(ra)
80204484: 83 35 04 f9  	ld	a1, -112(s0)
80204488: 03 35 84 f9  	ld	a0, -104(s0)
8020448c: 2d 9d        	addw	a0, a0, a1
8020448e: 23 34 a4 f8  	sd	a0, -120(s0)
80204492: 81 25        	sext.w	a1, a1
80204494: 63 7c b5 00  	bgeu	a0, a1, 0x802044ac <.LBB67_19+0x12>
80204498: 09 a0        	j	0x8020449a <.LBB67_19>

000000008020449a <.LBB67_19>:
8020449a: 17 95 01 00  	auipc	a0, 25
8020449e: 13 05 65 fe  	addi	a0, a0, -26
802044a2: 81 45        	mv	a1, zero
802044a4: 97 c0 ff ff  	auipc	ra, 1048572
802044a8: e7 80 c0 bf  	jalr	-1028(ra)
802044ac: 83 35 84 f8  	ld	a1, -120(s0)
802044b0: 23 24 b4 fe  	sw	a1, -24(s0)
;     for (kernel.framebuffer.buffer[start_i .. start_i + length]) |*pixel| {
802044b4: 13 95 05 02  	slli	a0, a1, 32
802044b8: 01 91        	srli	a0, a0, 32
802044ba: 23 3c a4 f6  	sd	a0, -136(s0)
802044be: 03 25 c4 fe  	lw	a0, -20(s0)
802044c2: 2d 9d        	addw	a0, a0, a1
802044c4: 23 30 a4 f8  	sd	a0, -128(s0)
802044c8: 63 7c b5 00  	bgeu	a0, a1, 0x802044e0 <.LBB67_20+0x12>
802044cc: 09 a0        	j	0x802044ce <.LBB67_20>

00000000802044ce <.LBB67_20>:
802044ce: 17 95 01 00  	auipc	a0, 25
802044d2: 13 05 25 fb  	addi	a0, a0, -78
802044d6: 81 45        	mv	a1, zero
802044d8: 97 c0 ff ff  	auipc	ra, 1048572
802044dc: e7 80 80 bc  	jalr	-1080(ra)
802044e0: 83 35 84 f7  	ld	a1, -136(s0)
802044e4: 03 35 04 f8  	ld	a0, -128(s0)
802044e8: 2e 86        	mv	a2, a1
802044ea: 23 30 c4 f6  	sd	a2, -160(s0)
802044ee: 02 15        	slli	a0, a0, 32
802044f0: 01 91        	srli	a0, a0, 32
802044f2: 23 34 a4 f6  	sd	a0, -152(s0)

00000000802044f6 <.LBB67_21>:
802044f6: 17 36 06 00  	auipc	a2, 99
802044fa: 13 06 26 12  	addi	a2, a2, 290
802044fe: 10 62        	ld	a2, 0(a2)
80204500: 23 38 c4 f6  	sd	a2, -144(s0)
80204504: 63 7c b5 00  	bgeu	a0, a1, 0x8020451c <.LBB67_22+0x12>
80204508: 09 a0        	j	0x8020450a <.LBB67_22>

000000008020450a <.LBB67_22>:
8020450a: 17 95 01 00  	auipc	a0, 25
8020450e: 13 05 65 df  	addi	a0, a0, -522
80204512: 81 45        	mv	a1, zero
80204514: 97 c0 ff ff  	auipc	ra, 1048572
80204518: e7 80 c0 b8  	jalr	-1140(ra)
8020451c: 03 35 84 f6  	ld	a0, -152(s0)
80204520: 03 36 04 f6  	ld	a2, -160(s0)
80204524: 83 35 04 f7  	ld	a1, -144(s0)
80204528: 93 16 26 00  	slli	a3, a2, 2
8020452c: b6 95        	add	a1, a1, a3
8020452e: 11 8d        	sub	a0, a0, a2
80204530: 23 30 a4 fa  	sd	a0, -96(s0)
80204534: 23 3c b4 fc  	sd	a1, -40(s0)
80204538: 23 30 a4 fe  	sd	a0, -32(s0)
8020453c: 01 45        	mv	a0, zero
8020453e: 23 38 a4 fc  	sd	a0, -48(s0)
80204542: 41 bd        	j	0x802043d2 <.LBB67_15+0x26>

0000000080204544 <std.log.scoped(RISCV64).debug.13>:
;         pub fn debug(
80204544: 01 11        	addi	sp, sp, -32
;             log(.debug, scope, format, args);
80204546: 06 ec        	sd	ra, 24(sp)
80204548: 22 e8        	sd	s0, 16(sp)
8020454a: 00 10        	addi	s0, sp, 32
8020454c: 03 66 05 00  	lwu	a2, 0(a0)
80204550: 83 65 45 00  	lwu	a1, 4(a0)
80204554: 82 15        	slli	a1, a1, 32
80204556: d1 8d        	or	a1, a1, a2
80204558: 23 34 b4 fe  	sd	a1, -24(s0)
8020455c: 97 30 00 00  	auipc	ra, 3
80204560: e7 80 c0 42  	jalr	1068(ra)
;         ) void {
80204564: 42 64        	ld	s0, 16(sp)
80204566: e2 60        	ld	ra, 24(sp)
80204568: 05 61        	addi	sp, sp, 32
8020456a: 82 80        	ret

000000008020456c <arch.riscv64.virtio_common.gpu.send_and_flush_framebuffer>:
;     pub fn send_and_flush_framebuffer() void {
8020456c: 25 71        	addi	sp, sp, -416
8020456e: 06 ef        	sd	ra, 408(sp)
80204570: 22 eb        	sd	s0, 400(sp)
80204572: 00 13        	addi	s0, sp, 416
80204574: 37 b5 aa fa  	lui	a0, 1026731
80204578: 1b 05 b5 aa  	addiw	a0, a0, -1365
8020457c: 32 05        	slli	a0, a0, 12
8020457e: 13 05 b5 aa  	addi	a0, a0, -1365
80204582: 32 05        	slli	a0, a0, 12
80204584: 13 05 b5 aa  	addi	a0, a0, -1365
80204588: 32 05        	slli	a0, a0, 12
8020458a: 13 05 a5 aa  	addi	a0, a0, -1366
;     var result: T = undefined;
8020458e: 23 30 a4 f8  	sd	a0, -128(s0)
80204592: 23 3c a4 f6  	sd	a0, -136(s0)
80204596: 23 38 a4 f6  	sd	a0, -144(s0)
8020459a: 23 34 a4 f6  	sd	a0, -152(s0)
8020459e: 23 30 a4 f6  	sd	a0, -160(s0)
802045a2: 23 3c a4 f4  	sd	a0, -168(s0)
802045a6: 23 38 a4 f4  	sd	a0, -176(s0)
802045aa: 13 05 04 f5  	addi	a0, s0, -176
;     zero(@ptrCast([*]u8, &result)[0..@sizeOf(T)]);
802045ae: 23 34 a4 f4  	sd	a0, -184(s0)
802045b2: 23 3c a4 f2  	sd	a0, -200(s0)
802045b6: 13 05 80 03  	addi	a0, zero, 56
802045ba: 23 3c a4 e6  	sd	a0, -392(s0)
802045be: 23 30 a4 f4  	sd	a0, -192(s0)
802045c2: 01 45        	mv	a0, zero
;     for (bytes) |*byte| byte.* = 0;
802045c4: 23 34 a4 fe  	sd	a0, -24(s0)
802045c8: 09 a0        	j	0x802045ca <arch.riscv64.virtio_common.gpu.send_and_flush_framebuffer+0x5e>
802045ca: 83 35 84 e7  	ld	a1, -392(s0)
802045ce: 03 35 84 fe  	ld	a0, -24(s0)
802045d2: 23 38 a4 e6  	sd	a0, -400(s0)
802045d6: 63 72 b5 02  	bgeu	a0, a1, 0x802045fa <arch.riscv64.virtio_common.gpu.send_and_flush_framebuffer+0x8e>
802045da: 09 a0        	j	0x802045dc <arch.riscv64.virtio_common.gpu.send_and_flush_framebuffer+0x70>
802045dc: 03 35 04 e7  	ld	a0, -400(s0)
802045e0: 83 35 84 f3  	ld	a1, -200(s0)
802045e4: 33 86 a5 00  	add	a2, a1, a0
802045e8: 23 30 c4 fe  	sd	a2, -32(s0)
802045ec: 81 45        	mv	a1, zero
802045ee: 23 00 b6 00  	sb	a1, 0(a2)
802045f2: 05 05        	addi	a0, a0, 1
802045f4: 23 34 a4 fe  	sd	a0, -24(s0)
802045f8: c9 bf        	j	0x802045ca <arch.riscv64.virtio_common.gpu.send_and_flush_framebuffer+0x5e>
;     return result;
802045fa: 03 35 04 f5  	ld	a0, -176(s0)
802045fe: 23 30 a4 f0  	sd	a0, -256(s0)
80204602: 03 35 84 f6  	ld	a0, -152(s0)
80204606: 23 3c a4 f0  	sd	a0, -232(s0)
8020460a: 03 35 04 f7  	ld	a0, -144(s0)
8020460e: 23 30 a4 f2  	sd	a0, -224(s0)
80204612: 03 35 04 f8  	ld	a0, -128(s0)
80204616: 23 38 a4 f2  	sd	a0, -208(s0)
8020461a: 03 35 84 f7  	ld	a0, -136(s0)
8020461e: 23 34 a4 f2  	sd	a0, -216(s0)
80204622: 03 35 04 f6  	ld	a0, -160(s0)
80204626: 23 38 a4 f0  	sd	a0, -240(s0)
8020462a: 03 35 84 f5  	ld	a0, -168(s0)
8020462e: 23 34 a4 f0  	sd	a0, -248(s0)
80204632: 13 05 50 10  	addi	a0, zero, 261
;         transfer_to_host.header.type = ControlType.cmd_transfer_to_host_2d;
80204636: 23 20 a4 f0  	sw	a0, -256(s0)

000000008020463a <.LBB69_13>:
8020463a: 17 35 06 00  	auipc	a0, 99
8020463e: 13 05 e5 18  	addi	a0, a0, 398
;         transfer_to_host.rect = pmode.rect;
80204642: 0c 41        	lw	a1, 0(a0)
80204644: 23 2c b4 f0  	sw	a1, -232(s0)
80204648: 4c 41        	lw	a1, 4(a0)
8020464a: 23 2e b4 f0  	sw	a1, -228(s0)
8020464e: 0c 45        	lw	a1, 8(a0)
80204650: 23 20 b4 f2  	sw	a1, -224(s0)
80204654: 48 45        	lw	a0, 12(a0)
80204656: 23 22 a4 f2  	sw	a0, -220(s0)
8020465a: 05 45        	addi	a0, zero, 1
;         transfer_to_host.resource_id = 1;
8020465c: 23 28 a4 f2  	sw	a0, -208(s0)
;         log.debug("Sending transfer", .{});
80204660: 97 30 00 00  	auipc	ra, 3
80204664: e7 80 00 37  	jalr	880(ra)

0000000080204668 <.LBB69_14>:
;         transfered = false;
80204668: 97 05 67 00  	auipc	a1, 1648
8020466c: 93 85 05 a1  	addi	a1, a1, -1520
80204670: 01 45        	mv	a0, zero
80204672: 23 80 a5 00  	sb	a0, 0(a1)
80204676: 13 05 04 f0  	addi	a0, s0, -256
;         operate(kernel.as_bytes(&transfer_to_host), @sizeOf(ControlHeader));
8020467a: 23 3c a4 ee  	sd	a0, -264(s0)
8020467e: 97 30 00 00  	auipc	ra, 3
80204682: e7 80 a0 36  	jalr	874(ra)
80204686: aa 85        	mv	a1, a0
80204688: 23 34 b4 ee  	sd	a1, -280(s0)
8020468c: 13 05 80 03  	addi	a0, zero, 56
80204690: 23 38 a4 ee  	sd	a0, -272(s0)
80204694: 23 3c b4 ec  	sd	a1, -296(s0)
80204698: 23 30 a4 ee  	sd	a0, -288(s0)
8020469c: 13 05 84 ed  	addi	a0, s0, -296
802046a0: e1 45        	addi	a1, zero, 24
802046a2: 97 30 00 00  	auipc	ra, 3
802046a6: e7 80 e0 b0  	jalr	-1266(ra)
;         while (!transfered) {
802046aa: 09 a0        	j	0x802046ac <.LBB69_15>

00000000802046ac <.LBB69_15>:
802046ac: 17 05 67 00  	auipc	a0, 1648
802046b0: 13 05 c5 9c  	addi	a0, a0, -1588
802046b4: 03 45 05 00  	lbu	a0, 0(a0)
802046b8: 81 45        	mv	a1, zero
802046ba: 63 14 b5 00  	bne	a0, a1, 0x802046c2 <.LBB69_15+0x16>
802046be: 09 a0        	j	0x802046c0 <.LBB69_15+0x14>
802046c0: f5 b7        	j	0x802046ac <.LBB69_15>
802046c2: 37 b5 aa fa  	lui	a0, 1026731
802046c6: 1b 05 b5 aa  	addiw	a0, a0, -1365
802046ca: 32 05        	slli	a0, a0, 12
802046cc: 13 05 b5 aa  	addi	a0, a0, -1365
802046d0: 32 05        	slli	a0, a0, 12
802046d2: 13 05 b5 aa  	addi	a0, a0, -1365
802046d6: 32 05        	slli	a0, a0, 12
802046d8: 13 05 a5 aa  	addi	a0, a0, -1366
;     var result: T = undefined;
802046dc: 23 34 a4 fc  	sd	a0, -56(s0)
802046e0: 23 30 a4 fc  	sd	a0, -64(s0)
802046e4: 23 3c a4 fa  	sd	a0, -72(s0)
802046e8: 23 38 a4 fa  	sd	a0, -80(s0)
802046ec: 23 34 a4 fa  	sd	a0, -88(s0)
802046f0: 23 30 a4 fa  	sd	a0, -96(s0)
802046f4: 13 05 04 fa  	addi	a0, s0, -96
;     zero(@ptrCast([*]u8, &result)[0..@sizeOf(T)]);
802046f8: 23 3c a4 f8  	sd	a0, -104(s0)
802046fc: 23 34 a4 f8  	sd	a0, -120(s0)
80204700: 13 05 00 03  	addi	a0, zero, 48
80204704: 23 34 a4 e6  	sd	a0, -408(s0)
80204708: 23 38 a4 f8  	sd	a0, -112(s0)
8020470c: 01 45        	mv	a0, zero
;     for (bytes) |*byte| byte.* = 0;
8020470e: 23 3c a4 fc  	sd	a0, -40(s0)
80204712: 09 a0        	j	0x80204714 <.LBB69_15+0x68>
80204714: 83 35 84 e6  	ld	a1, -408(s0)
80204718: 03 35 84 fd  	ld	a0, -40(s0)
8020471c: 23 30 a4 e6  	sd	a0, -416(s0)
80204720: 63 72 b5 02  	bgeu	a0, a1, 0x80204744 <.LBB69_15+0x98>
80204724: 09 a0        	j	0x80204726 <.LBB69_15+0x7a>
80204726: 03 35 04 e6  	ld	a0, -416(s0)
8020472a: 83 35 84 f8  	ld	a1, -120(s0)
8020472e: 33 86 a5 00  	add	a2, a1, a0
80204732: 23 38 c4 fc  	sd	a2, -48(s0)
80204736: 81 45        	mv	a1, zero
80204738: 23 00 b6 00  	sb	a1, 0(a2)
8020473c: 05 05        	addi	a0, a0, 1
8020473e: 23 3c a4 fc  	sd	a0, -40(s0)
80204742: c9 bf        	j	0x80204714 <.LBB69_15+0x68>
;     return result;
80204744: 03 35 04 fa  	ld	a0, -96(s0)
80204748: 23 34 a4 ea  	sd	a0, -344(s0)
8020474c: 03 35 84 fb  	ld	a0, -72(s0)
80204750: 23 30 a4 ec  	sd	a0, -320(s0)
80204754: 03 35 04 fc  	ld	a0, -64(s0)
80204758: 23 34 a4 ec  	sd	a0, -312(s0)
8020475c: 03 35 84 fc  	ld	a0, -56(s0)
80204760: 23 38 a4 ec  	sd	a0, -304(s0)
80204764: 03 35 04 fb  	ld	a0, -80(s0)
80204768: 23 3c a4 ea  	sd	a0, -328(s0)
8020476c: 03 35 84 fa  	ld	a0, -88(s0)
80204770: 23 38 a4 ea  	sd	a0, -336(s0)
80204774: 13 05 40 10  	addi	a0, zero, 260
;         flush.header.type = ControlType.cmd_resource_flush;
80204778: 23 24 a4 ea  	sw	a0, -344(s0)

000000008020477c <.LBB69_16>:
8020477c: 17 35 06 00  	auipc	a0, 99
80204780: 13 05 c5 04  	addi	a0, a0, 76
;         flush.rect = pmode.rect;
80204784: 0c 41        	lw	a1, 0(a0)
80204786: 23 20 b4 ec  	sw	a1, -320(s0)
8020478a: 4c 41        	lw	a1, 4(a0)
8020478c: 23 22 b4 ec  	sw	a1, -316(s0)
80204790: 0c 45        	lw	a1, 8(a0)
80204792: 23 24 b4 ec  	sw	a1, -312(s0)
80204796: 48 45        	lw	a0, 12(a0)
80204798: 23 26 a4 ec  	sw	a0, -308(s0)
8020479c: 05 45        	addi	a0, zero, 1
;         flush.resource_id = 1;
8020479e: 23 28 a4 ec  	sw	a0, -304(s0)
;         log.debug("Sending flush", .{});
802047a2: 97 30 00 00  	auipc	ra, 3
802047a6: e7 80 20 28  	jalr	642(ra)

00000000802047aa <.LBB69_17>:
;         flushed = false;
802047aa: 97 05 67 00  	auipc	a1, 1648
802047ae: 93 85 f5 8c  	addi	a1, a1, -1841
802047b2: 01 45        	mv	a0, zero
802047b4: 23 80 a5 00  	sb	a0, 0(a1)
802047b8: 13 05 84 ea  	addi	a0, s0, -344
;         operate(kernel.as_bytes(&flush), @sizeOf(ControlHeader));
802047bc: 23 30 a4 ea  	sd	a0, -352(s0)
802047c0: 97 30 00 00  	auipc	ra, 3
802047c4: e7 80 c0 27  	jalr	636(ra)
802047c8: aa 85        	mv	a1, a0
802047ca: 23 38 b4 e8  	sd	a1, -368(s0)
802047ce: 13 05 00 03  	addi	a0, zero, 48
802047d2: 23 3c a4 e8  	sd	a0, -360(s0)
802047d6: 23 30 b4 e8  	sd	a1, -384(s0)
802047da: 23 34 a4 e8  	sd	a0, -376(s0)
802047de: 13 05 04 e8  	addi	a0, s0, -384
802047e2: e1 45        	addi	a1, zero, 24
802047e4: 97 30 00 00  	auipc	ra, 3
802047e8: e7 80 c0 9c  	jalr	-1588(ra)
;         while (!flushed) {
802047ec: 09 a0        	j	0x802047ee <.LBB69_18>

00000000802047ee <.LBB69_18>:
802047ee: 17 05 67 00  	auipc	a0, 1648
802047f2: 13 05 b5 88  	addi	a0, a0, -1909
802047f6: 03 45 05 00  	lbu	a0, 0(a0)
802047fa: 81 45        	mv	a1, zero
802047fc: 63 14 b5 00  	bne	a0, a1, 0x80204804 <.LBB69_18+0x16>
80204800: 09 a0        	j	0x80204802 <.LBB69_18+0x14>
80204802: f5 b7        	j	0x802047ee <.LBB69_18>
;     pub fn send_and_flush_framebuffer() void {
80204804: 5a 64        	ld	s0, 400(sp)
80204806: fa 60        	ld	ra, 408(sp)
80204808: 1d 61        	addi	sp, sp, 416
8020480a: 82 80        	ret

000000008020480c <std.log.scoped(RISCV64).debug.14>:
;         pub fn debug(
8020480c: 01 11        	addi	sp, sp, -32
;             log(.debug, scope, format, args);
8020480e: 06 ec        	sd	ra, 24(sp)
80204810: 22 e8        	sd	s0, 16(sp)
80204812: 00 10        	addi	s0, sp, 32
80204814: 0c 65        	ld	a1, 8(a0)
80204816: 23 34 b4 fe  	sd	a1, -24(s0)
8020481a: 0c 61        	ld	a1, 0(a0)
8020481c: 23 30 b4 fe  	sd	a1, -32(s0)
80204820: 97 30 00 00  	auipc	ra, 3
80204824: e7 80 80 25  	jalr	600(ra)
;         ) void {
80204828: 42 64        	ld	s0, 16(sp)
8020482a: e2 60        	ld	ra, 24(sp)
8020482c: 05 61        	addi	sp, sp, 32
8020482e: 82 80        	ret

0000000080204830 <arch.riscv.spinloop>:
; pub fn spinloop() noreturn {
80204830: 41 11        	addi	sp, sp, -16
;     while (true) {}
80204832: 06 e4        	sd	ra, 8(sp)
80204834: 22 e0        	sd	s0, 0(sp)
80204836: 00 08        	addi	s0, sp, 16
80204838: 09 a0        	j	0x8020483a <arch.riscv.spinloop+0xa>
8020483a: 01 a0        	j	0x8020483a <arch.riscv.spinloop+0xa>

000000008020483c <kernel_interrupt_handler>:
; export fn kernel_interrupt_handler(context: *OldContext, scause: Scause, stval: usize) void {
8020483c: 39 71        	addi	sp, sp, -64
8020483e: 06 fc        	sd	ra, 56(sp)
80204840: 22 f8        	sd	s0, 48(sp)
80204842: 80 00        	addi	s0, sp, 64
80204844: 23 30 a4 fe  	sd	a0, -32(s0)
80204848: 23 3c b4 fc  	sd	a1, -40(s0)
8020484c: 23 38 c4 fc  	sd	a2, -48(s0)
;     disable_interrupts();
80204850: 97 c0 ff ff  	auipc	ra, 1048572
80204854: e7 80 40 c7  	jalr	-908(ra)

0000000080204858 <.LBB72_6>:
;     Writer.should_lock = false;
80204858: 97 f5 66 00  	auipc	a1, 1647
8020485c: 93 85 85 7a  	addi	a1, a1, 1960
80204860: 01 45        	mv	a0, zero
80204862: 23 80 a5 00  	sb	a0, 0(a1)

0000000080204866 <.LBB72_7>:
;     const hart_id = local_storage[current_cpu].context.hart_id;
80204866: 17 f5 66 00  	auipc	a0, 1647
8020486a: 13 05 25 7a  	addi	a0, a0, 1954
8020486e: 08 61        	ld	a0, 0(a0)
80204870: 23 34 a4 fc  	sd	a0, -56(s0)
80204874: 93 05 00 04  	addi	a1, zero, 64
80204878: 63 66 b5 04  	bltu	a0, a1, 0x802048c4 <.LBB72_9+0x12>
8020487c: 1d a8        	j	0x802048b2 <.LBB72_9>
;         else => spinloop(),
8020487e: 97 00 00 00  	auipc	ra, 0
80204882: e7 80 20 fb  	jalr	-78(ra)
;         .supervisor_external_interrupt => Interrupts.handle_external_interrupt(hart_id),
80204886: 03 35 84 fe  	ld	a0, -24(s0)
8020488a: 97 00 00 00  	auipc	ra, 0
8020488e: e7 80 40 06  	jalr	100(ra)
;     switch (scause) {
80204892: 09 a0        	j	0x80204894 <.LBB72_7+0x2e>
;     enable_interrupts();
80204894: 97 d0 ff ff  	auipc	ra, 1048573
80204898: e7 80 e0 f0  	jalr	-242(ra)

000000008020489c <.LBB72_8>:
;     defer Writer.should_lock = true;
8020489c: 97 f5 66 00  	auipc	a1, 1647
802048a0: 93 85 45 76  	addi	a1, a1, 1892
802048a4: 05 45        	addi	a0, zero, 1
802048a6: 23 80 a5 00  	sb	a0, 0(a1)
; export fn kernel_interrupt_handler(context: *OldContext, scause: Scause, stval: usize) void {
802048aa: 42 74        	ld	s0, 48(sp)
802048ac: e2 70        	ld	ra, 56(sp)
802048ae: 21 61        	addi	sp, sp, 64
802048b0: 82 80        	ret

00000000802048b2 <.LBB72_9>:
;     const hart_id = local_storage[current_cpu].context.hart_id;
802048b2: 17 95 01 00  	auipc	a0, 25
802048b6: 13 05 e5 a4  	addi	a0, a0, -1458
802048ba: 81 45        	mv	a1, zero
802048bc: 97 b0 ff ff  	auipc	ra, 1048571
802048c0: e7 80 40 7e  	jalr	2020(ra)
802048c4: 03 35 84 fc  	ld	a0, -56(s0)
802048c8: 93 15 c5 00  	slli	a1, a0, 12

00000000802048cc <.LBB72_10>:
802048cc: 17 05 02 00  	auipc	a0, 32
802048d0: 13 05 c5 7a  	addi	a0, a0, 1964
802048d4: 2e 95        	add	a0, a0, a1
;     const hart_id = local_storage[current_cpu].context.hart_id;
802048d6: 03 35 05 21  	ld	a0, 528(a0)
802048da: 23 34 a4 fe  	sd	a0, -24(s0)
;     switch (scause) {
802048de: 03 35 84 fd  	ld	a0, -40(s0)
802048e2: fd 55        	addi	a1, zero, -1
802048e4: fe 15        	slli	a1, a1, 63
802048e6: a5 05        	addi	a1, a1, 9
802048e8: e3 0f b5 f8  	beq	a0, a1, 0x80204886 <.LBB72_7+0x20>
802048ec: 49 bf        	j	0x8020487e <.LBB72_7+0x18>

00000000802048ee <arch.riscv64.interrupts.handle_external_interrupt>:
; pub fn handle_external_interrupt(hart_id: u64) void {
802048ee: 19 71        	addi	sp, sp, -128
802048f0: 86 fc        	sd	ra, 120(sp)
802048f2: a2 f8        	sd	s0, 112(sp)
802048f4: 00 01        	addi	s0, sp, 128
802048f6: 23 3c a4 fa  	sd	a0, -72(s0)
802048fa: 23 30 a4 fe  	sd	a0, -32(s0)

00000000802048fe <.LBB73_26>:
;     return @intToPtr(*volatile u32, plic_base + 0x201004 + hart_id * 0x1000);
802048fe: 17 f5 66 00  	auipc	a0, 1647
80204902: 13 05 a5 72  	addi	a0, a0, 1834
80204906: 0c 61        	ld	a1, 0(a0)
80204908: 37 15 20 00  	lui	a0, 513
8020490c: 11 25        	addiw	a0, a0, 4
8020490e: 2e 95        	add	a0, a0, a1
80204910: 23 38 a4 fa  	sd	a0, -80(s0)
80204914: 63 7c b5 00  	bgeu	a0, a1, 0x8020492c <.LBB73_27+0x12>
80204918: 09 a0        	j	0x8020491a <.LBB73_27>

000000008020491a <.LBB73_27>:
8020491a: 17 95 01 00  	auipc	a0, 25
8020491e: 13 05 65 b6  	addi	a0, a0, -1178
80204922: 81 45        	mv	a1, zero
80204924: 97 b0 ff ff  	auipc	ra, 1048571
80204928: e7 80 c0 77  	jalr	1916(ra)
8020492c: 83 35 04 fe  	ld	a1, -32(s0)
80204930: 7d 55        	addi	a0, zero, -1
80204932: 31 81        	srli	a0, a0, 12
80204934: 6d 8d        	and	a0, a0, a1
80204936: 13 96 c5 00  	slli	a2, a1, 12
8020493a: 23 34 c4 fa  	sd	a2, -88(s0)
8020493e: 63 0c b5 00  	beq	a0, a1, 0x80204956 <.LBB73_28+0x12>
80204942: 09 a0        	j	0x80204944 <.LBB73_28>

0000000080204944 <.LBB73_28>:
80204944: 17 95 01 00  	auipc	a0, 25
80204948: 13 05 c5 b3  	addi	a0, a0, -1220
8020494c: 81 45        	mv	a1, zero
8020494e: 97 b0 ff ff  	auipc	ra, 1048571
80204952: e7 80 20 75  	jalr	1874(ra)
80204956: 83 35 04 fb  	ld	a1, -80(s0)
8020495a: 03 35 84 fa  	ld	a0, -88(s0)
8020495e: 2e 95        	add	a0, a0, a1
80204960: 23 30 a4 fa  	sd	a0, -96(s0)
80204964: 63 7c b5 00  	bgeu	a0, a1, 0x8020497c <.LBB73_29+0x12>
80204968: 09 a0        	j	0x8020496a <.LBB73_29>

000000008020496a <.LBB73_29>:
8020496a: 17 95 01 00  	auipc	a0, 25
8020496e: 13 05 65 b1  	addi	a0, a0, -1258
80204972: 81 45        	mv	a1, zero
80204974: 97 b0 ff ff  	auipc	ra, 1048571
80204978: e7 80 c0 72  	jalr	1836(ra)
8020497c: 03 35 04 fa  	ld	a0, -96(s0)
80204980: 81 45        	mv	a1, zero
;     return @intToPtr(*volatile u32, plic_base + 0x201004 + hart_id * 0x1000);
80204982: 63 1c b5 00  	bne	a0, a1, 0x8020499a <.LBB73_30+0x12>
80204986: 09 a0        	j	0x80204988 <.LBB73_30>

0000000080204988 <.LBB73_30>:
80204988: 17 95 01 00  	auipc	a0, 25
8020498c: 13 05 05 b7  	addi	a0, a0, -1168
80204990: 81 45        	mv	a1, zero
80204992: 97 b0 ff ff  	auipc	ra, 1048571
80204996: e7 80 e0 70  	jalr	1806(ra)
8020499a: 03 35 04 fa  	ld	a0, -96(s0)
8020499e: 0d 89        	andi	a0, a0, 3
802049a0: 81 45        	mv	a1, zero
802049a2: 63 0c b5 00  	beq	a0, a1, 0x802049ba <.LBB73_31+0x12>
802049a6: 09 a0        	j	0x802049a8 <.LBB73_31>

00000000802049a8 <.LBB73_31>:
802049a8: 17 95 01 00  	auipc	a0, 25
802049ac: 13 05 05 ca  	addi	a0, a0, -864
802049b0: 81 45        	mv	a1, zero
802049b2: 97 b0 ff ff  	auipc	ra, 1048571
802049b6: e7 80 e0 6e  	jalr	1774(ra)
802049ba: 03 35 04 fa  	ld	a0, -96(s0)
802049be: 23 34 a4 fe  	sd	a0, -24(s0)
;     const claimed_interrupt_number = get_sclaim(hart_id).*;
802049c2: 08 41        	lw	a0, 0(a0)
802049c4: 23 26 a4 fc  	sw	a0, -52(s0)
802049c8: 81 45        	mv	a1, zero
;     if (claimed_interrupt_number == 0) @panic("PLIC handler is told an external interrupt has been received, but claim indicates otherwise");
802049ca: 63 1c b5 00  	bne	a0, a1, 0x802049e2 <.LBB73_32+0x12>
802049ce: 09 a0        	j	0x802049d0 <.LBB73_32>

00000000802049d0 <.LBB73_32>:
802049d0: 17 95 01 00  	auipc	a0, 25
802049d4: 13 05 05 d9  	addi	a0, a0, -624
802049d8: 81 45        	mv	a1, zero
802049da: 97 b0 ff ff  	auipc	ra, 1048571
802049de: e7 80 60 6c  	jalr	1734(ra)
802049e2: 09 a0        	j	0x802049e4 <.LBB73_32+0x14>
;     interrupt_handlers[claimed_interrupt_number]();
802049e4: 03 65 c4 fc  	lwu	a0, -52(s0)
802049e8: 23 3c a4 f8  	sd	a0, -104(s0)
802049ec: 93 05 00 02  	addi	a1, zero, 32
802049f0: 63 6c b5 00  	bltu	a0, a1, 0x80204a08 <.LBB73_33+0x12>
802049f4: 09 a0        	j	0x802049f6 <.LBB73_33>

00000000802049f6 <.LBB73_33>:
802049f6: 17 95 01 00  	auipc	a0, 25
802049fa: 13 05 a5 90  	addi	a0, a0, -1782
802049fe: 81 45        	mv	a1, zero
80204a00: 97 b0 ff ff  	auipc	ra, 1048571
80204a04: e7 80 00 6a  	jalr	1696(ra)
80204a08: 03 35 84 f9  	ld	a0, -104(s0)
80204a0c: 0e 05        	slli	a0, a0, 3

0000000080204a0e <.LBB73_34>:
80204a0e: 97 35 06 00  	auipc	a1, 99
80204a12: 93 85 25 eb  	addi	a1, a1, -334
80204a16: 2e 95        	add	a0, a0, a1
80204a18: 08 61        	ld	a0, 0(a0)
80204a1a: 02 95        	jalr	a0
;     get_sclaim(hart_id).* = claimed_interrupt_number;
80204a1c: 03 35 84 fb  	ld	a0, -72(s0)
80204a20: 23 38 a4 fc  	sd	a0, -48(s0)

0000000080204a24 <.LBB73_35>:
;     return @intToPtr(*volatile u32, plic_base + 0x201004 + hart_id * 0x1000);
80204a24: 17 f5 66 00  	auipc	a0, 1647
80204a28: 13 05 45 60  	addi	a0, a0, 1540
80204a2c: 0c 61        	ld	a1, 0(a0)
80204a2e: 37 15 20 00  	lui	a0, 513
80204a32: 11 25        	addiw	a0, a0, 4
80204a34: 2e 95        	add	a0, a0, a1
80204a36: 23 38 a4 f8  	sd	a0, -112(s0)
80204a3a: 63 7c b5 00  	bgeu	a0, a1, 0x80204a52 <.LBB73_36+0x12>
80204a3e: 09 a0        	j	0x80204a40 <.LBB73_36>

0000000080204a40 <.LBB73_36>:
80204a40: 17 95 01 00  	auipc	a0, 25
80204a44: 13 05 05 a4  	addi	a0, a0, -1472
80204a48: 81 45        	mv	a1, zero
80204a4a: 97 b0 ff ff  	auipc	ra, 1048571
80204a4e: e7 80 60 65  	jalr	1622(ra)
80204a52: 83 35 04 fd  	ld	a1, -48(s0)
80204a56: 7d 55        	addi	a0, zero, -1
80204a58: 31 81        	srli	a0, a0, 12
80204a5a: 6d 8d        	and	a0, a0, a1
80204a5c: 13 96 c5 00  	slli	a2, a1, 12
80204a60: 23 34 c4 f8  	sd	a2, -120(s0)
80204a64: 63 0c b5 00  	beq	a0, a1, 0x80204a7c <.LBB73_37+0x12>
80204a68: 09 a0        	j	0x80204a6a <.LBB73_37>

0000000080204a6a <.LBB73_37>:
80204a6a: 17 95 01 00  	auipc	a0, 25
80204a6e: 13 05 65 a1  	addi	a0, a0, -1514
80204a72: 81 45        	mv	a1, zero
80204a74: 97 b0 ff ff  	auipc	ra, 1048571
80204a78: e7 80 c0 62  	jalr	1580(ra)
80204a7c: 83 35 04 f9  	ld	a1, -112(s0)
80204a80: 03 35 84 f8  	ld	a0, -120(s0)
80204a84: 2e 95        	add	a0, a0, a1
80204a86: 23 30 a4 f8  	sd	a0, -128(s0)
80204a8a: 63 7c b5 00  	bgeu	a0, a1, 0x80204aa2 <.LBB73_38+0x12>
80204a8e: 09 a0        	j	0x80204a90 <.LBB73_38>

0000000080204a90 <.LBB73_38>:
80204a90: 17 95 01 00  	auipc	a0, 25
80204a94: 13 05 05 9f  	addi	a0, a0, -1552
80204a98: 81 45        	mv	a1, zero
80204a9a: 97 b0 ff ff  	auipc	ra, 1048571
80204a9e: e7 80 60 60  	jalr	1542(ra)
80204aa2: 03 35 04 f8  	ld	a0, -128(s0)
80204aa6: 81 45        	mv	a1, zero
;     return @intToPtr(*volatile u32, plic_base + 0x201004 + hart_id * 0x1000);
80204aa8: 63 1c b5 00  	bne	a0, a1, 0x80204ac0 <.LBB73_39+0x12>
80204aac: 09 a0        	j	0x80204aae <.LBB73_39>

0000000080204aae <.LBB73_39>:
80204aae: 17 95 01 00  	auipc	a0, 25
80204ab2: 13 05 a5 a4  	addi	a0, a0, -1462
80204ab6: 81 45        	mv	a1, zero
80204ab8: 97 b0 ff ff  	auipc	ra, 1048571
80204abc: e7 80 80 5e  	jalr	1512(ra)
80204ac0: 03 35 04 f8  	ld	a0, -128(s0)
80204ac4: 0d 89        	andi	a0, a0, 3
80204ac6: 81 45        	mv	a1, zero
80204ac8: 63 0c b5 00  	beq	a0, a1, 0x80204ae0 <.LBB73_40+0x12>
80204acc: 09 a0        	j	0x80204ace <.LBB73_40>

0000000080204ace <.LBB73_40>:
80204ace: 17 95 01 00  	auipc	a0, 25
80204ad2: 13 05 a5 b7  	addi	a0, a0, -1158
80204ad6: 81 45        	mv	a1, zero
80204ad8: 97 b0 ff ff  	auipc	ra, 1048571
80204adc: e7 80 80 5c  	jalr	1480(ra)
80204ae0: 83 35 04 f8  	ld	a1, -128(s0)
80204ae4: 23 3c b4 fc  	sd	a1, -40(s0)
;     get_sclaim(hart_id).* = claimed_interrupt_number;
80204ae8: 23 30 b4 fc  	sd	a1, -64(s0)
80204aec: 03 25 c4 fc  	lw	a0, -52(s0)
80204af0: 88 c1        	sw	a0, 0(a1)
; pub fn handle_external_interrupt(hart_id: u64) void {
80204af2: 46 74        	ld	s0, 112(sp)
80204af4: e6 70        	ld	ra, 120(sp)
80204af6: 09 61        	addi	sp, sp, 128
80204af8: 82 80        	ret

0000000080204afa <arch.riscv64.uart.UART(268435456).init>:
;         pub fn init(self: *@This(), comptime lock: bool) void {
80204afa: 01 11        	addi	sp, sp, -32
80204afc: 06 ec        	sd	ra, 24(sp)
80204afe: 22 e8        	sd	s0, 16(sp)
80204b00: 00 10        	addi	s0, sp, 32
80204b02: 23 34 a4 fe  	sd	a0, -24(s0)

0000000080204b06 <.LBB74_1>:
;             ptr[IER] = 0x00;
80204b06: 17 05 02 00  	auipc	a0, 32
80204b0a: 13 05 25 e9  	addi	a0, a0, -366
80204b0e: 0c 61        	ld	a1, 0(a0)
80204b10: 01 46        	mv	a2, zero
80204b12: a3 80 c5 00  	sb	a2, 1(a1)
80204b16: 13 05 00 08  	addi	a0, zero, 128
;             ptr[LCR] = 0x80;
80204b1a: a3 81 a5 00  	sb	a0, 3(a1)
80204b1e: 0d 45        	addi	a0, zero, 3
;             ptr[0] = 0x03;
80204b20: 23 80 a5 00  	sb	a0, 0(a1)
;             ptr[1] = 0x00;
80204b24: a3 80 c5 00  	sb	a2, 1(a1)
;             ptr[LCR] = 0x03;
80204b28: a3 81 a5 00  	sb	a0, 3(a1)
80204b2c: 1d 45        	addi	a0, zero, 7
;             ptr[FCR] = 0x07;
80204b2e: 23 81 a5 00  	sb	a0, 2(a1)
80204b32: 05 45        	addi	a0, zero, 1
;             ptr[IER] = 0x01;
80204b34: a3 80 a5 00  	sb	a0, 1(a1)
;         pub fn init(self: *@This(), comptime lock: bool) void {
80204b38: 42 64        	ld	s0, 16(sp)
80204b3a: e2 60        	ld	ra, 24(sp)
80204b3c: 05 61        	addi	sp, sp, 32
80204b3e: 82 80        	ret

0000000080204b40 <std.log.log.15>:
; fn log(
80204b40: 79 71        	addi	sp, sp, -48
;     args: anytype,
80204b42: 06 f4        	sd	ra, 40(sp)
80204b44: 22 f0        	sd	s0, 32(sp)
80204b46: 00 18        	addi	s0, sp, 48
80204b48: 23 38 a4 fc  	sd	a0, -48(s0)
80204b4c: 0d 45        	addi	a0, zero, 3
;         break :blk level;
80204b4e: a3 07 a4 fe  	sb	a0, -17(s0)
80204b52: 09 a0        	j	0x80204b54 <std.log.log.15+0x14>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80204b54: 03 45 f4 fe  	lbu	a0, -17(s0)
80204b58: 8d 45        	addi	a1, zero, 3
80204b5a: 63 10 b5 02  	bne	a0, a1, 0x80204b7a <std.log.log.15+0x3a>
80204b5e: 09 a0        	j	0x80204b60 <std.log.log.15+0x20>
;             root.log(message_level, scope, format, args);
80204b60: 03 35 04 fd  	ld	a0, -48(s0)
80204b64: 0c 65        	ld	a1, 8(a0)
80204b66: 23 30 b4 fe  	sd	a1, -32(s0)
80204b6a: 0c 61        	ld	a1, 0(a0)
80204b6c: 23 3c b4 fc  	sd	a1, -40(s0)
80204b70: 97 30 00 00  	auipc	ra, 3
80204b74: e7 80 c0 f4  	jalr	-180(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80204b78: 11 a0        	j	0x80204b7c <std.log.log.15+0x3c>
80204b7a: 09 a0        	j	0x80204b7c <std.log.log.15+0x3c>
; ) void {
80204b7c: 02 74        	ld	s0, 32(sp)
80204b7e: a2 70        	ld	ra, 40(sp)
80204b80: 45 61        	addi	sp, sp, 48
80204b82: 82 80        	ret

0000000080204b84 <arch.riscv64.device_tree.Header.read>:
;     fn read(bytes: []const u8) ReadError!DeviceTree.Header {
80204b84: 71 71        	addi	sp, sp, -176
;         var bytes_it = bytes;
80204b86: 06 f5        	sd	ra, 168(sp)
80204b88: 22 f1        	sd	s0, 160(sp)
80204b8a: 00 19        	addi	s0, sp, 176
80204b8c: 23 3c a4 f6  	sd	a0, -136(s0)
80204b90: 08 66        	ld	a0, 8(a2)
80204b92: 23 34 a4 fe  	sd	a0, -24(s0)
80204b96: 08 62        	ld	a0, 0(a2)
80204b98: 23 30 a4 fe  	sd	a0, -32(s0)
80204b9c: 37 b5 aa fa  	lui	a0, 1026731
80204ba0: 1b 05 b5 aa  	addiw	a0, a0, -1365
80204ba4: 32 05        	slli	a0, a0, 12
80204ba6: 13 05 b5 aa  	addi	a0, a0, -1365
80204baa: 32 05        	slli	a0, a0, 12
80204bac: 13 05 b5 aa  	addi	a0, a0, -1365
80204bb0: 32 05        	slli	a0, a0, 12
80204bb2: 13 05 a5 aa  	addi	a0, a0, -1366
;         var device_tree_header: DeviceTree.Header = undefined;
80204bb6: 23 3c a4 fa  	sd	a0, -72(s0)
80204bba: 23 30 a4 fc  	sd	a0, -64(s0)
80204bbe: 23 34 a4 fc  	sd	a0, -56(s0)
80204bc2: 23 38 a4 fc  	sd	a0, -48(s0)
80204bc6: 23 3c a4 fc  	sd	a0, -40(s0)
80204bca: 13 05 84 fb  	addi	a0, s0, -72
80204bce: 23 30 a4 f8  	sd	a0, -128(s0)
80204bd2: 81 45        	mv	a1, zero
;         var device_tree_it_bytes = @ptrCast([*]u32, &device_tree_header);
80204bd4: 63 13 b5 0c  	bne	a0, a1, 0x80204c9a <.LBB76_11+0x12>
80204bd8: 45 a8        	j	0x80204c88 <.LBB76_11>
;         for (device_tree_it_bytes[0 .. @sizeOf(DeviceTree.Header) / @sizeOf(u32)]) |*device_tree_n| {
80204bda: 83 35 04 fa  	ld	a1, -96(s0)
80204bde: 23 38 b4 f6  	sd	a1, -144(s0)
80204be2: 25 45        	addi	a0, zero, 9
80204be4: 63 60 b5 06  	bltu	a0, a1, 0x80204c44 <arch.riscv64.device_tree.Header.read+0xc0>
80204be8: 09 a0        	j	0x80204bea <arch.riscv64.device_tree.Header.read+0x66>
80204bea: 83 35 04 f7  	ld	a1, -144(s0)
80204bee: 03 35 84 fa  	ld	a0, -88(s0)
80204bf2: 8a 05        	slli	a1, a1, 2
80204bf4: 2e 95        	add	a0, a0, a1
80204bf6: 23 30 a4 f6  	sd	a0, -160(s0)
80204bfa: 23 3c a4 f8  	sd	a0, -104(s0)
;             device_tree_n.* = read_big_endian(u32, bytes_it);
80204bfe: 03 35 04 fe  	ld	a0, -32(s0)
80204c02: 23 34 a4 f8  	sd	a0, -120(s0)
80204c06: 03 35 84 fe  	ld	a0, -24(s0)
80204c0a: 23 38 a4 f8  	sd	a0, -112(s0)
80204c0e: 13 05 84 fe  	addi	a0, s0, -24
80204c12: 23 3c a4 f4  	sd	a0, -168(s0)
80204c16: 13 05 04 fe  	addi	a0, s0, -32
80204c1a: 97 30 00 00  	auipc	ra, 3
80204c1e: e7 80 20 f5  	jalr	-174(ra)
80204c22: 83 35 04 f6  	ld	a1, -160(s0)
80204c26: 88 c1        	sw	a0, 0(a1)
;             bytes_it.ptr += @sizeOf(u32);
80204c28: 03 35 04 fe  	ld	a0, -32(s0)
80204c2c: 11 05        	addi	a0, a0, 4
80204c2e: 23 30 a4 fe  	sd	a0, -32(s0)
;             bytes_it.len -= @sizeOf(u32);
80204c32: 03 35 84 fe  	ld	a0, -24(s0)
80204c36: 93 05 c5 ff  	addi	a1, a0, -4
80204c3a: 23 34 b4 f6  	sd	a1, -152(s0)
80204c3e: 63 6a b5 08  	bltu	a0, a1, 0x80204cd2 <.LBB76_13>
80204c42: 4d a0        	j	0x80204ce4 <.LBB76_13+0x12>
;         assert(@src(), device_tree_header.magic == expected_magic);
80204c44: 03 25 84 fb  	lw	a0, -72(s0)
80204c48: b7 05 0e d0  	lui	a1, 852192
80204c4c: 9b 85 d5 ee  	addiw	a1, a1, -275
80204c50: 2d 8d        	xor	a0, a0, a1
80204c52: 93 35 15 00  	seqz	a1, a0

0000000080204c56 <.LBB76_10>:
80204c56: 17 95 01 00  	auipc	a0, 25
80204c5a: 13 05 a5 b1  	addi	a0, a0, -1254
80204c5e: 97 b0 ff ff  	auipc	ra, 1048571
80204c62: e7 80 e0 5a  	jalr	1454(ra)
80204c66: 03 35 84 f7  	ld	a0, -136(s0)
80204c6a: 81 45        	mv	a1, zero
;         return device_tree_header;
80204c6c: 23 14 b5 02  	sh	a1, 40(a0)
80204c70: 93 05 84 fb  	addi	a1, s0, -72
80204c74: 13 06 80 02  	addi	a2, zero, 40
80204c78: 97 80 01 00  	auipc	ra, 24
80204c7c: e7 80 60 0b  	jalr	182(ra)
80204c80: 0a 74        	ld	s0, 160(sp)
80204c82: aa 70        	ld	ra, 168(sp)
80204c84: 4d 61        	addi	sp, sp, 176
80204c86: 82 80        	ret

0000000080204c88 <.LBB76_11>:
;         var device_tree_it_bytes = @ptrCast([*]u32, &device_tree_header);
80204c88: 17 95 01 00  	auipc	a0, 25
80204c8c: 13 05 05 87  	addi	a0, a0, -1936
80204c90: 81 45        	mv	a1, zero
80204c92: 97 b0 ff ff  	auipc	ra, 1048571
80204c96: e7 80 e0 40  	jalr	1038(ra)
80204c9a: 03 35 04 f8  	ld	a0, -128(s0)
80204c9e: 23 38 a4 fa  	sd	a0, -80(s0)
80204ca2: 23 38 a4 f4  	sd	a0, -176(s0)
80204ca6: 81 45        	mv	a1, zero
80204ca8: 05 45        	addi	a0, zero, 1
;         for (device_tree_it_bytes[0 .. @sizeOf(DeviceTree.Header) / @sizeOf(u32)]) |*device_tree_n| {
80204caa: 63 1c b5 00  	bne	a0, a1, 0x80204cc2 <.LBB76_12+0x12>
80204cae: 09 a0        	j	0x80204cb0 <.LBB76_12>

0000000080204cb0 <.LBB76_12>:
80204cb0: 17 85 01 00  	auipc	a0, 24
80204cb4: 13 05 05 65  	addi	a0, a0, 1616
80204cb8: 81 45        	mv	a1, zero
80204cba: 97 b0 ff ff  	auipc	ra, 1048571
80204cbe: e7 80 60 3e  	jalr	998(ra)
80204cc2: 03 35 04 f5  	ld	a0, -176(s0)
80204cc6: 23 34 a4 fa  	sd	a0, -88(s0)
80204cca: 01 45        	mv	a0, zero
80204ccc: 23 30 a4 fa  	sd	a0, -96(s0)
80204cd0: 29 b7        	j	0x80204bda <arch.riscv64.device_tree.Header.read+0x56>

0000000080204cd2 <.LBB76_13>:
;             bytes_it.len -= @sizeOf(u32);
80204cd2: 17 85 01 00  	auipc	a0, 24
80204cd6: 13 05 e5 7a  	addi	a0, a0, 1966
80204cda: 81 45        	mv	a1, zero
80204cdc: 97 b0 ff ff  	auipc	ra, 1048571
80204ce0: e7 80 40 3c  	jalr	964(ra)
80204ce4: 03 35 04 f7  	ld	a0, -144(s0)
80204ce8: 83 35 84 f6  	ld	a1, -152(s0)
80204cec: 03 36 84 f5  	ld	a2, -168(s0)
80204cf0: 0c e2        	sd	a1, 0(a2)
;         for (device_tree_it_bytes[0 .. @sizeOf(DeviceTree.Header) / @sizeOf(u32)]) |*device_tree_n| {
80204cf2: 05 05        	addi	a0, a0, 1
80204cf4: 23 30 a4 fa  	sd	a0, -96(s0)
80204cf8: cd b5        	j	0x80204bda <arch.riscv64.device_tree.Header.read+0x56>

0000000080204cfa <arch.riscv64.device_tree.MemoryReservationBlock.parse>:
;     fn parse(header: Header, header_offset: u64) void {
80204cfa: 01 71        	addi	sp, sp, -512
80204cfc: 86 ff        	sd	ra, 504(sp)
80204cfe: a2 fb        	sd	s0, 496(sp)
80204d00: 00 04        	addi	s0, sp, 512
80204d02: 23 38 b4 e4  	sd	a1, -432(s0)
;         const memory_reservation_block_offset = header.rsvmap_memory_offset;
80204d06: 03 65 05 01  	lwu	a0, 16(a0)
80204d0a: 23 20 a4 ec  	sw	a0, -320(s0)
;         const block_address = header_offset + memory_reservation_block_offset;
80204d0e: 2e 95        	add	a0, a0, a1
80204d10: 23 34 a4 e4  	sd	a0, -440(s0)
80204d14: 63 64 b5 0e  	bltu	a0, a1, 0x80204dfc <.LBB77_21>
80204d18: dd a8        	j	0x80204e0e <.LBB77_21+0x12>
;         while (true) {
80204d1a: 09 a0        	j	0x80204d1c <arch.riscv64.device_tree.MemoryReservationBlock.parse+0x22>
80204d1c: 37 b5 aa fa  	lui	a0, 1026731
80204d20: 1b 05 b5 aa  	addiw	a0, a0, -1365
80204d24: 32 05        	slli	a0, a0, 12
80204d26: 13 05 b5 aa  	addi	a0, a0, -1365
80204d2a: 32 05        	slli	a0, a0, 12
80204d2c: 13 05 b5 aa  	addi	a0, a0, -1365
80204d30: 32 05        	slli	a0, a0, 12
80204d32: 13 05 a5 aa  	addi	a0, a0, -1366
;             var entry: Entry = undefined;
80204d36: 23 30 a4 ea  	sd	a0, -352(s0)
80204d3a: 23 3c a4 e8  	sd	a0, -360(s0)
80204d3e: 13 05 84 e9  	addi	a0, s0, -360
;             entry.address = read_big_endian(u64, block_it[0..@sizeOf(u64)]);
80204d42: 23 3c a4 e2  	sd	a0, -456(s0)
80204d46: 03 35 04 eb  	ld	a0, -336(s0)
80204d4a: 23 30 a4 e4  	sd	a0, -448(s0)
80204d4e: 81 45        	mv	a1, zero
80204d50: 05 45        	addi	a0, zero, 1
80204d52: 63 13 b5 10  	bne	a0, a1, 0x80204e58 <.LBB77_23+0x12>
80204d56: c5 a8        	j	0x80204e46 <.LBB77_23>
;             if (entry.address == 0 and entry.size == 0) break;
80204d58: 03 35 04 ea  	ld	a0, -352(s0)
80204d5c: 13 35 15 00  	seqz	a0, a0
80204d60: 23 38 a4 e2  	sd	a0, -464(s0)
80204d64: 09 a0        	j	0x80204d66 <arch.riscv64.device_tree.MemoryReservationBlock.parse+0x6c>
80204d66: 03 35 04 e3  	ld	a0, -464(s0)
80204d6a: 81 45        	mv	a1, zero
80204d6c: 63 04 b5 00  	beq	a0, a1, 0x80204d74 <arch.riscv64.device_tree.MemoryReservationBlock.parse+0x7a>
80204d70: 09 a0        	j	0x80204d72 <arch.riscv64.device_tree.MemoryReservationBlock.parse+0x78>
80204d72: 41 a0        	j	0x80204df2 <arch.riscv64.device_tree.MemoryReservationBlock.parse+0xf8>
80204d74: 09 a0        	j	0x80204d76 <arch.riscv64.device_tree.MemoryReservationBlock.parse+0x7c>
;             print("Entry (0x{x}, 0x{x})\n", .{ entry.address, entry.size });
80204d76: 83 35 84 e9  	ld	a1, -360(s0)
80204d7a: 23 3c b4 e4  	sd	a1, -424(s0)
80204d7e: 03 35 04 ea  	ld	a0, -352(s0)
80204d82: 23 30 a4 e6  	sd	a0, -416(s0)
80204d86: 01 46        	mv	a2, zero
80204d88: 23 30 c4 e2  	sd	a2, -480(s0)
80204d8c: 23 3c c4 ec  	sd	a2, -296(s0)
80204d90: 13 06 04 ef  	addi	a2, s0, -272
80204d94: 23 30 c4 ee  	sd	a2, -288(s0)
80204d98: 13 06 00 02  	addi	a2, zero, 32
80204d9c: 23 34 c4 ee  	sd	a2, -280(s0)
;     writer.print(format, args) catch unreachable;
80204da0: 23 34 b4 ec  	sd	a1, -312(s0)
80204da4: 23 38 a4 ec  	sd	a0, -304(s0)
80204da8: 13 05 84 ed  	addi	a0, s0, -296
80204dac: 93 05 84 e5  	addi	a1, s0, -424
80204db0: 97 f0 00 00  	auipc	ra, 15
80204db4: e7 80 a0 36  	jalr	874(ra)
80204db8: 83 35 04 e2  	ld	a1, -480(s0)
80204dbc: 23 13 a4 ec  	sh	a0, -314(s0)
80204dc0: 41 66        	lui	a2, 16
80204dc2: 7d 36        	addiw	a2, a2, -1
80204dc4: 71 8d        	and	a0, a0, a2
80204dc6: 23 34 a4 e2  	sd	a0, -472(s0)
80204dca: 63 0b b5 00  	beq	a0, a1, 0x80204de0 <arch.riscv64.device_tree.MemoryReservationBlock.parse+0xe6>
80204dce: 09 a0        	j	0x80204dd0 <arch.riscv64.device_tree.MemoryReservationBlock.parse+0xd6>
80204dd0: 83 35 84 e2  	ld	a1, -472(s0)
80204dd4: 13 05 84 ed  	addi	a0, s0, -296
80204dd8: 97 c0 ff ff  	auipc	ra, 1048572
80204ddc: e7 80 60 81  	jalr	-2026(ra)
;             entry_count += 1;
80204de0: 83 35 84 ea  	ld	a1, -344(s0)
80204de4: 13 85 15 00  	addi	a0, a1, 1
80204de8: 23 3c a4 e0  	sd	a0, -488(s0)
80204dec: 63 62 b5 10  	bltu	a0, a1, 0x80204ef0 <.LBB77_25>
80204df0: 09 aa        	j	0x80204f02 <.LBB77_25+0x12>
;     fn parse(header: Header, header_offset: u64) void {
80204df2: 5e 74        	ld	s0, 496(sp)
80204df4: fe 70        	ld	ra, 504(sp)
80204df6: 13 01 01 20  	addi	sp, sp, 512
80204dfa: 82 80        	ret

0000000080204dfc <.LBB77_21>:
;         const block_address = header_offset + memory_reservation_block_offset;
80204dfc: 17 85 01 00  	auipc	a0, 24
80204e00: 13 05 45 68  	addi	a0, a0, 1668
80204e04: 81 45        	mv	a1, zero
80204e06: 97 b0 ff ff  	auipc	ra, 1048571
80204e0a: e7 80 a0 29  	jalr	666(ra)
80204e0e: 03 35 84 e4  	ld	a0, -440(s0)
80204e12: 23 3c a4 ea  	sd	a0, -328(s0)
;         var block_it = @intToPtr([*]u8, block_address);
80204e16: aa 85        	mv	a1, a0
80204e18: 23 38 b4 e0  	sd	a1, -496(s0)
80204e1c: 81 45        	mv	a1, zero
80204e1e: 63 1c b5 00  	bne	a0, a1, 0x80204e36 <.LBB77_22+0x12>
80204e22: 09 a0        	j	0x80204e24 <.LBB77_22>

0000000080204e24 <.LBB77_22>:
80204e24: 17 85 01 00  	auipc	a0, 24
80204e28: 13 05 45 6d  	addi	a0, a0, 1748
80204e2c: 81 45        	mv	a1, zero
80204e2e: 97 b0 ff ff  	auipc	ra, 1048571
80204e32: e7 80 20 27  	jalr	626(ra)
80204e36: 03 35 04 e1  	ld	a0, -496(s0)
80204e3a: 23 38 a4 ea  	sd	a0, -336(s0)
80204e3e: 01 45        	mv	a0, zero
;         var entry_count: u64 = 0;
80204e40: 23 34 a4 ea  	sd	a0, -344(s0)
;         while (true) {
80204e44: d9 bd        	j	0x80204d1a <arch.riscv64.device_tree.MemoryReservationBlock.parse+0x20>

0000000080204e46 <.LBB77_23>:
;             entry.address = read_big_endian(u64, block_it[0..@sizeOf(u64)]);
80204e46: 17 85 01 00  	auipc	a0, 24
80204e4a: 13 05 a5 4b  	addi	a0, a0, 1210
80204e4e: 81 45        	mv	a1, zero
80204e50: 97 b0 ff ff  	auipc	ra, 1048571
80204e54: e7 80 00 25  	jalr	592(ra)
80204e58: 03 35 04 e4  	ld	a0, -448(s0)
80204e5c: 23 38 a4 e8  	sd	a0, -368(s0)
80204e60: 23 30 a4 e8  	sd	a0, -384(s0)
80204e64: 21 45        	addi	a0, zero, 8
80204e66: 23 34 a4 e8  	sd	a0, -376(s0)
80204e6a: 13 05 04 e8  	addi	a0, s0, -384
80204e6e: 97 30 00 00  	auipc	ra, 3
80204e72: e7 80 80 d4  	jalr	-696(ra)
80204e76: 83 35 84 e3  	ld	a1, -456(s0)
80204e7a: 88 e1        	sd	a0, 0(a1)
;             block_it += @sizeOf(u64);
80204e7c: 03 35 04 eb  	ld	a0, -336(s0)
80204e80: 21 05        	addi	a0, a0, 8
80204e82: 23 30 a4 e0  	sd	a0, -512(s0)
80204e86: 23 38 a4 ea  	sd	a0, -336(s0)
;             entry.size = read_big_endian(u64, block_it[0..@sizeOf(u64)]);
80204e8a: 13 05 04 ea  	addi	a0, s0, -352
80204e8e: 23 34 a4 e0  	sd	a0, -504(s0)
80204e92: 81 45        	mv	a1, zero
80204e94: 05 45        	addi	a0, zero, 1
80204e96: 63 1c b5 00  	bne	a0, a1, 0x80204eae <.LBB77_24+0x12>
80204e9a: 09 a0        	j	0x80204e9c <.LBB77_24>

0000000080204e9c <.LBB77_24>:
80204e9c: 17 85 01 00  	auipc	a0, 24
80204ea0: 13 05 45 46  	addi	a0, a0, 1124
80204ea4: 81 45        	mv	a1, zero
80204ea6: 97 b0 ff ff  	auipc	ra, 1048571
80204eaa: e7 80 a0 1f  	jalr	506(ra)
80204eae: 03 35 04 e0  	ld	a0, -512(s0)
80204eb2: 23 3c a4 e6  	sd	a0, -392(s0)
80204eb6: 23 34 a4 e6  	sd	a0, -408(s0)
80204eba: 21 45        	addi	a0, zero, 8
80204ebc: 23 38 a4 e6  	sd	a0, -400(s0)
80204ec0: 13 05 84 e6  	addi	a0, s0, -408
80204ec4: 97 30 00 00  	auipc	ra, 3
80204ec8: e7 80 20 cf  	jalr	-782(ra)
80204ecc: 83 35 84 e0  	ld	a1, -504(s0)
80204ed0: 88 e1        	sd	a0, 0(a1)
;             block_it += @sizeOf(u64);
80204ed2: 03 35 04 eb  	ld	a0, -336(s0)
80204ed6: 21 05        	addi	a0, a0, 8
80204ed8: 23 38 a4 ea  	sd	a0, -336(s0)
;             if (entry.address == 0 and entry.size == 0) break;
80204edc: 03 35 84 e9  	ld	a0, -360(s0)
80204ee0: 13 36 15 00  	seqz	a2, a0
80204ee4: 81 45        	mv	a1, zero
80204ee6: 23 38 c4 e2  	sd	a2, -464(s0)
80204eea: e3 07 b5 e6  	beq	a0, a1, 0x80204d58 <arch.riscv64.device_tree.MemoryReservationBlock.parse+0x5e>
80204eee: a5 bd        	j	0x80204d66 <arch.riscv64.device_tree.MemoryReservationBlock.parse+0x6c>

0000000080204ef0 <.LBB77_25>:
;             entry_count += 1;
80204ef0: 17 85 01 00  	auipc	a0, 24
80204ef4: 13 05 05 59  	addi	a0, a0, 1424
80204ef8: 81 45        	mv	a1, zero
80204efa: 97 b0 ff ff  	auipc	ra, 1048571
80204efe: e7 80 60 1a  	jalr	422(ra)
80204f02: 03 35 84 e1  	ld	a0, -488(s0)
80204f06: 23 34 a4 ea  	sd	a0, -344(s0)
;         while (true) {
80204f0a: 01 bd        	j	0x80204d1a <arch.riscv64.device_tree.MemoryReservationBlock.parse+0x20>

0000000080204f0c <arch.riscv64.device_tree.Parser.parse>:
;         fn parse(self: *@This()) void {
80204f0c: 13 01 01 81  	addi	sp, sp, -2032
80204f10: 23 34 11 7e  	sd	ra, 2024(sp)
80204f14: 23 30 81 7e  	sd	s0, 2016(sp)
80204f18: 13 04 01 7f  	addi	s0, sp, 2032
80204f1c: 79 71        	addi	sp, sp, -48
80204f1e: aa 85        	mv	a1, a0
80204f20: 23 34 b4 88  	sd	a1, -1912(s0)
;             const offset = self.device_tree.header.device_tree_struct_offset;
80204f24: 88 6d        	ld	a0, 24(a1)
80204f26: 03 65 85 00  	lwu	a0, 8(a0)
80204f2a: 23 22 a4 94  	sw	a0, -1724(s0)
;             const size = self.device_tree.header.device_tree_struct_size;
80204f2e: 90 6d        	ld	a2, 24(a1)
80204f30: 50 52        	lw	a2, 36(a2)
80204f32: 23 20 c4 94  	sw	a2, -1728(s0)
;             const address = self.device_tree.base_address + offset;
80204f36: 8c 6d        	ld	a1, 24(a1)
80204f38: 8c 75        	ld	a1, 40(a1)
80204f3a: 2e 95        	add	a0, a0, a1
80204f3c: 23 30 a4 88  	sd	a0, -1920(s0)
80204f40: 63 6f b5 50  	bltu	a0, a1, 0x8020545e <.LBB78_61>
80204f44: 35 a3        	j	0x80205470 <.LBB78_61+0x12>
;             while (true) {
80204f46: 09 a0        	j	0x80204f48 <arch.riscv64.device_tree.Parser.parse+0x3c>
;                 const main_token: Token = self.parse_token();
80204f48: 03 35 84 88  	ld	a0, -1912(s0)
80204f4c: 97 30 00 00  	auipc	ra, 3
80204f50: e7 80 60 ce  	jalr	-794(ra)
80204f54: aa 85        	mv	a1, a0
80204f56: 1b 85 05 00  	sext.w	a0, a1
80204f5a: 23 22 b4 92  	sw	a1, -1756(s0)
80204f5e: a5 45        	addi	a1, zero, 9
;                 if (main_token == .end) break;
80204f60: 63 14 b5 00  	bne	a0, a1, 0x80204f68 <arch.riscv64.device_tree.Parser.parse+0x5c>
80204f64: 09 a0        	j	0x80204f66 <arch.riscv64.device_tree.Parser.parse+0x5a>
80204f66: e5 a1        	j	0x8020544e <.LBB78_60+0x1d2>
80204f68: 09 a0        	j	0x80204f6a <arch.riscv64.device_tree.Parser.parse+0x5e>
;                 assert(@src(), self.i < self.slice.len);
80204f6a: 83 35 84 88  	ld	a1, -1912(s0)
80204f6e: 88 69        	ld	a0, 16(a1)
80204f70: 8c 65        	ld	a1, 8(a1)
80204f72: b3 35 b5 00  	sltu	a1, a0, a1

0000000080204f76 <.LBB78_50>:
80204f76: 17 95 01 00  	auipc	a0, 25
80204f7a: 13 05 25 82  	addi	a0, a0, -2014
80204f7e: 97 b0 ff ff  	auipc	ra, 1048571
80204f82: e7 80 e0 28  	jalr	654(ra)
;                 assert(@src(), main_token == .begin_node);
80204f86: 03 25 44 92  	lw	a0, -1756(s0)
80204f8a: 7d 15        	addi	a0, a0, -1
80204f8c: 93 35 15 00  	seqz	a1, a0

0000000080204f90 <.LBB78_51>:
80204f90: 17 95 01 00  	auipc	a0, 25
80204f94: 13 05 05 83  	addi	a0, a0, -2000
80204f98: 97 b0 ff ff  	auipc	ra, 1048571
80204f9c: e7 80 40 27  	jalr	628(ra)
;                 const node_name = self.parse_begin_node();
80204fa0: 83 35 84 88  	ld	a1, -1912(s0)
80204fa4: 13 05 04 91  	addi	a0, s0, -1776
80204fa8: 23 3c a4 86  	sd	a0, -1928(s0)
80204fac: 97 30 00 00  	auipc	ra, 3
80204fb0: e7 80 20 d0  	jalr	-766(ra)
80204fb4: 03 35 84 87  	ld	a0, -1928(s0)
;     return std.mem.eql(u8, a, b);
80204fb8: 83 35 84 91  	ld	a1, -1768(s0)
80204fbc: 23 30 b4 a0  	sd	a1, -1536(s0)
80204fc0: 83 35 04 91  	ld	a1, -1776(s0)
80204fc4: 23 3c b4 9e  	sd	a1, -1544(s0)

0000000080204fc8 <.LBB78_52>:
80204fc8: 97 95 01 00  	auipc	a1, 25
80204fcc: 93 85 05 82  	addi	a1, a1, -2016
;     return std.mem.eql(u8, a, b);
80204fd0: 90 61        	ld	a2, 0(a1)
80204fd2: 23 34 c4 9e  	sd	a2, -1560(s0)
80204fd6: 90 65        	ld	a2, 8(a1)
80204fd8: 23 38 c4 9e  	sd	a2, -1552(s0)
80204fdc: 97 f0 00 00  	auipc	ra, 15
80204fe0: e7 80 80 34  	jalr	840(ra)
80204fe4: aa 85        	mv	a1, a0
80204fe6: 13 f5 15 00  	andi	a0, a1, 1
80204fea: a3 06 a4 a0  	sb	a0, -1523(s0)

0000000080204fee <.LBB78_53>:
;                 assert(@src(), string_eq(node_name, ""));
80204fee: 17 95 01 00  	auipc	a0, 25
80204ff2: 13 05 a5 80  	addi	a0, a0, -2038
80204ff6: 97 b0 ff ff  	auipc	ra, 1048571
80204ffa: e7 80 60 21  	jalr	534(ra)
;                 while (true) {
80204ffe: 09 a0        	j	0x80205000 <.LBB78_53+0x12>
80205000: 09 a0        	j	0x80205002 <.LBB78_53+0x14>
;                     const token = self.parse_token();
80205002: 03 35 84 88  	ld	a0, -1912(s0)
80205006: 97 30 00 00  	auipc	ra, 3
8020500a: e7 80 c0 c2  	jalr	-980(ra)
8020500e: 23 26 a4 90  	sw	a0, -1780(s0)
;                     switch (token) {
80205012: 02 15        	slli	a0, a0, 32
80205014: 01 91        	srli	a0, a0, 32
80205016: 23 38 a4 86  	sd	a0, -1936(s0)
8020501a: 85 45        	addi	a1, zero, 1
8020501c: 63 01 b5 3e  	beq	a0, a1, 0x802053fe <.LBB78_60+0x182>
80205020: 09 a0        	j	0x80205022 <.LBB78_53+0x34>
80205022: 03 35 04 87  	ld	a0, -1936(s0)
80205026: 01 25        	sext.w	a0, a0
80205028: 89 45        	addi	a1, zero, 2
;                     switch (token) {
8020502a: 63 02 b5 40  	beq	a0, a1, 0x8020542e <.LBB78_60+0x1b2>
8020502e: 09 a0        	j	0x80205030 <.LBB78_53+0x42>
80205030: 03 35 04 87  	ld	a0, -1936(s0)
80205034: 01 25        	sext.w	a0, a0
80205036: 8d 45        	addi	a1, zero, 3
;                     switch (token) {
80205038: 63 0d b5 00  	beq	a0, a1, 0x80205052 <.LBB78_53+0x64>
8020503c: 09 a0        	j	0x8020503e <.LBB78_53+0x50>
;                         else => kernel.panic("Unexpected token: {}\n", .{token}),
8020503e: 03 25 c4 90  	lw	a0, -1780(s0)
80205042: 23 24 a4 90  	sw	a0, -1784(s0)
80205046: 13 05 84 90  	addi	a0, s0, -1784
8020504a: 97 30 00 00  	auipc	ra, 3
8020504e: e7 80 e0 d1  	jalr	-738(ra)
;                             const descriptor = self.parse_property_value_descriptor();
80205052: 83 35 84 88  	ld	a1, -1912(s0)
80205056: 13 05 04 90  	addi	a0, s0, -1792
8020505a: 23 3c a4 84  	sd	a0, -1960(s0)
8020505e: 97 30 00 00  	auipc	ra, 3
80205062: e7 80 20 d4  	jalr	-702(ra)
80205066: 03 36 84 85  	ld	a2, -1960(s0)
;                             const key = self.parse_string_in_string_table(descriptor);
8020506a: 83 35 84 88  	ld	a1, -1912(s0)
8020506e: 13 05 04 8f  	addi	a0, s0, -1808
80205072: 97 30 00 00  	auipc	ra, 3
80205076: e7 80 00 d7  	jalr	-656(ra)
;                             print("{s}: ", .{key});
8020507a: 83 35 04 8f  	ld	a1, -1808(s0)
8020507e: 23 30 b4 8e  	sd	a1, -1824(s0)
80205082: 03 35 84 8f  	ld	a0, -1800(s0)
80205086: 23 34 a4 8e  	sd	a0, -1816(s0)
8020508a: 01 46        	mv	a2, zero
8020508c: 23 30 c4 86  	sd	a2, -1952(s0)
80205090: 23 30 c4 a2  	sd	a2, -1504(s0)
80205094: 13 06 84 a3  	addi	a2, s0, -1480
80205098: 23 34 c4 a2  	sd	a2, -1496(s0)
8020509c: 13 06 00 02  	addi	a2, zero, 32
802050a0: 23 38 c4 a2  	sd	a2, -1488(s0)
;     writer.print(format, args) catch unreachable;
802050a4: 23 38 b4 a0  	sd	a1, -1520(s0)
802050a8: 23 3c a4 a0  	sd	a0, -1512(s0)
802050ac: 13 05 04 a2  	addi	a0, s0, -1504
802050b0: 93 05 04 8e  	addi	a1, s0, -1824
802050b4: 97 f0 00 00  	auipc	ra, 15
802050b8: e7 80 00 3a  	jalr	928(ra)
802050bc: 83 35 04 86  	ld	a1, -1952(s0)
802050c0: 23 17 a4 a0  	sh	a0, -1522(s0)
802050c4: 41 66        	lui	a2, 16
802050c6: 7d 36        	addiw	a2, a2, -1
802050c8: 71 8d        	and	a0, a0, a2
802050ca: 23 34 a4 86  	sd	a0, -1944(s0)
802050ce: 63 0b b5 00  	beq	a0, a1, 0x802050e4 <.LBB78_53+0xf6>
802050d2: 09 a0        	j	0x802050d4 <.LBB78_53+0xe6>
802050d4: 83 35 84 86  	ld	a1, -1944(s0)
802050d8: 13 05 04 a2  	addi	a0, s0, -1504
802050dc: 97 b0 ff ff  	auipc	ra, 1048571
802050e0: e7 80 20 51  	jalr	1298(ra)
;     return std.mem.eql(u8, a, b);
802050e4: 03 35 84 8f  	ld	a0, -1800(s0)
802050e8: 23 3c a4 9c  	sd	a0, -1576(s0)
802050ec: 03 35 04 8f  	ld	a0, -1808(s0)
802050f0: 23 38 a4 9c  	sd	a0, -1584(s0)

00000000802050f4 <.LBB78_54>:
802050f4: 97 85 01 00  	auipc	a1, 24
802050f8: 93 85 c5 72  	addi	a1, a1, 1836
;     return std.mem.eql(u8, a, b);
802050fc: 88 61        	ld	a0, 0(a1)
802050fe: 23 30 a4 9c  	sd	a0, -1600(s0)
80205102: 88 65        	ld	a0, 8(a1)
80205104: 23 34 a4 9c  	sd	a0, -1592(s0)
80205108: 13 05 04 8f  	addi	a0, s0, -1808
8020510c: 97 f0 00 00  	auipc	ra, 15
80205110: e7 80 80 21  	jalr	536(ra)
80205114: 05 89        	andi	a0, a0, 1
80205116: a3 03 a4 9e  	sb	a0, -1561(s0)
8020511a: 81 45        	mv	a1, zero
;                             if (string_eq(key, "#address-cells")) {
8020511c: 63 18 b5 0c  	bne	a0, a1, 0x802051ec <.LBB78_58+0x10>
80205120: 09 a0        	j	0x80205122 <.LBB78_54+0x2e>
;     return std.mem.eql(u8, a, b);
80205122: 03 35 84 8f  	ld	a0, -1800(s0)
80205126: 23 38 a4 9a  	sd	a0, -1616(s0)
8020512a: 03 35 04 8f  	ld	a0, -1808(s0)
8020512e: 23 34 a4 9a  	sd	a0, -1624(s0)

0000000080205132 <.LBB78_55>:
80205132: 97 85 01 00  	auipc	a1, 24
80205136: 93 85 e5 6f  	addi	a1, a1, 1790
;     return std.mem.eql(u8, a, b);
8020513a: 88 61        	ld	a0, 0(a1)
8020513c: 23 3c a4 98  	sd	a0, -1640(s0)
80205140: 88 65        	ld	a0, 8(a1)
80205142: 23 30 a4 9a  	sd	a0, -1632(s0)
80205146: 13 05 04 8f  	addi	a0, s0, -1808
8020514a: 97 f0 00 00  	auipc	ra, 15
8020514e: e7 80 a0 1d  	jalr	474(ra)
80205152: 05 89        	andi	a0, a0, 1
80205154: a3 0f a4 9a  	sb	a0, -1601(s0)
80205158: 81 45        	mv	a1, zero
;                             } else if (string_eq(key, "#size-cells")) {
8020515a: 63 1c b5 10  	bne	a0, a1, 0x80205272 <.LBB78_59+0x7c>
8020515e: 09 a0        	j	0x80205160 <.LBB78_55+0x2e>
;     return std.mem.eql(u8, a, b);
80205160: 03 35 84 8f  	ld	a0, -1800(s0)
80205164: 23 34 a4 98  	sd	a0, -1656(s0)
80205168: 03 35 04 8f  	ld	a0, -1808(s0)
8020516c: 23 30 a4 98  	sd	a0, -1664(s0)

0000000080205170 <.LBB78_56>:
80205170: 97 85 01 00  	auipc	a1, 24
80205174: 93 85 05 6d  	addi	a1, a1, 1744
;     return std.mem.eql(u8, a, b);
80205178: 88 61        	ld	a0, 0(a1)
8020517a: 23 38 a4 96  	sd	a0, -1680(s0)
8020517e: 88 65        	ld	a0, 8(a1)
80205180: 23 3c a4 96  	sd	a0, -1672(s0)
80205184: 13 05 04 8f  	addi	a0, s0, -1808
80205188: 97 f0 00 00  	auipc	ra, 15
8020518c: e7 80 c0 19  	jalr	412(ra)
80205190: 05 89        	andi	a0, a0, 1
80205192: a3 0b a4 98  	sb	a0, -1641(s0)
80205196: 81 45        	mv	a1, zero
;                             } else if (string_eq(key, "compatible")) {
80205198: 63 10 b5 16  	bne	a0, a1, 0x802052f8 <.LBB78_60+0x7c>
8020519c: 09 a0        	j	0x8020519e <.LBB78_56+0x2e>
;     return std.mem.eql(u8, a, b);
8020519e: 03 35 84 8f  	ld	a0, -1800(s0)
802051a2: 23 30 a4 96  	sd	a0, -1696(s0)
802051a6: 03 35 04 8f  	ld	a0, -1808(s0)
802051aa: 23 3c a4 94  	sd	a0, -1704(s0)

00000000802051ae <.LBB78_57>:
802051ae: 97 85 01 00  	auipc	a1, 24
802051b2: 93 85 25 6a  	addi	a1, a1, 1698
;     return std.mem.eql(u8, a, b);
802051b6: 88 61        	ld	a0, 0(a1)
802051b8: 23 34 a4 94  	sd	a0, -1720(s0)
802051bc: 88 65        	ld	a0, 8(a1)
802051be: 23 38 a4 94  	sd	a0, -1712(s0)
802051c2: 13 05 04 8f  	addi	a0, s0, -1808
802051c6: 97 f0 00 00  	auipc	ra, 15
802051ca: e7 80 e0 15  	jalr	350(ra)
802051ce: 05 89        	andi	a0, a0, 1
802051d0: a3 07 a4 96  	sb	a0, -1681(s0)
802051d4: 81 45        	mv	a1, zero
;                             } else if (string_eq(key, "model")) {
802051d6: 63 11 b5 1a  	bne	a0, a1, 0x80205378 <.LBB78_60+0xfc>
802051da: 09 a0        	j	0x802051dc <.LBB78_58>

00000000802051dc <.LBB78_58>:
;                                 TODO(@src());
802051dc: 17 85 01 00  	auipc	a0, 24
802051e0: 13 05 45 68  	addi	a0, a0, 1668
802051e4: 97 b0 ff ff  	auipc	ra, 1048571
802051e8: e7 80 e0 fe  	jalr	-18(ra)
;                                 assert(@src(), descriptor.len == @sizeOf(u32));
802051ec: 03 25 04 90  	lw	a0, -1792(s0)
802051f0: 71 15        	addi	a0, a0, -4
802051f2: 93 35 15 00  	seqz	a1, a0

00000000802051f6 <.LBB78_59>:
802051f6: 17 85 01 00  	auipc	a0, 24
802051fa: 13 05 25 69  	addi	a0, a0, 1682
802051fe: 97 b0 ff ff  	auipc	ra, 1048571
80205202: e7 80 e0 00  	jalr	14(ra)
;                                 address_cells = self.parse_int(u32);
80205206: 03 35 84 88  	ld	a0, -1912(s0)
8020520a: 97 30 00 00  	auipc	ra, 3
8020520e: e7 80 60 cc  	jalr	-826(ra)
80205212: 23 26 a4 92  	sw	a0, -1748(s0)
;                                 print("{}\n", .{address_cells});
80205216: 23 2c a4 8c  	sw	a0, -1832(s0)
8020521a: 81 45        	mv	a1, zero
8020521c: 23 34 b4 84  	sd	a1, -1976(s0)
80205220: 23 34 b4 b4  	sd	a1, -1208(s0)
80205224: 93 05 04 b6  	addi	a1, s0, -1184
80205228: 23 38 b4 b4  	sd	a1, -1200(s0)
8020522c: 93 05 00 02  	addi	a1, zero, 32
80205230: 23 3c b4 b4  	sd	a1, -1192(s0)
;     writer.print(format, args) catch unreachable;
80205234: 23 20 a4 b4  	sw	a0, -1216(s0)
80205238: 13 05 84 b4  	addi	a0, s0, -1208
8020523c: 93 05 84 8d  	addi	a1, s0, -1832
80205240: 97 f0 00 00  	auipc	ra, 15
80205244: e7 80 40 26  	jalr	612(ra)
80205248: 83 35 84 84  	ld	a1, -1976(s0)
8020524c: 23 1f a4 b2  	sh	a0, -1218(s0)
80205250: 41 66        	lui	a2, 16
80205252: 7d 36        	addiw	a2, a2, -1
80205254: 71 8d        	and	a0, a0, a2
80205256: 23 38 a4 84  	sd	a0, -1968(s0)
8020525a: 63 0b b5 00  	beq	a0, a1, 0x80205270 <.LBB78_59+0x7a>
8020525e: 09 a0        	j	0x80205260 <.LBB78_59+0x6a>
80205260: 83 35 04 85  	ld	a1, -1968(s0)
80205264: 13 05 84 b4  	addi	a0, s0, -1208
80205268: 97 b0 ff ff  	auipc	ra, 1048571
8020526c: e7 80 60 38  	jalr	902(ra)
;                             if (string_eq(key, "#address-cells")) {
80205270: c1 a2        	j	0x80205430 <.LBB78_60+0x1b4>
;                                 assert(@src(), descriptor.len == @sizeOf(u32));
80205272: 03 25 04 90  	lw	a0, -1792(s0)
80205276: 71 15        	addi	a0, a0, -4
80205278: 93 35 15 00  	seqz	a1, a0

000000008020527c <.LBB78_60>:
8020527c: 17 85 01 00  	auipc	a0, 24
80205280: 13 05 45 63  	addi	a0, a0, 1588
80205284: 97 b0 ff ff  	auipc	ra, 1048571
80205288: e7 80 80 f8  	jalr	-120(ra)
;                                 size_cells = self.parse_int(u32);
8020528c: 03 35 84 88  	ld	a0, -1912(s0)
80205290: 97 30 00 00  	auipc	ra, 3
80205294: e7 80 00 c4  	jalr	-960(ra)
80205298: 23 24 a4 92  	sw	a0, -1752(s0)
;                                 print("{}\n", .{size_cells});
8020529c: 23 28 a4 8c  	sw	a0, -1840(s0)
802052a0: 81 45        	mv	a1, zero
802052a2: 23 3c b4 82  	sd	a1, -1992(s0)
802052a6: 23 38 b4 c6  	sd	a1, -912(s0)
802052aa: 93 05 84 c8  	addi	a1, s0, -888
802052ae: 23 3c b4 c6  	sd	a1, -904(s0)
802052b2: 93 05 00 02  	addi	a1, zero, 32
802052b6: 23 30 b4 c8  	sd	a1, -896(s0)
;     writer.print(format, args) catch unreachable;
802052ba: 23 24 a4 c6  	sw	a0, -920(s0)
802052be: 13 05 04 c7  	addi	a0, s0, -912
802052c2: 93 05 04 8d  	addi	a1, s0, -1840
802052c6: 97 f0 00 00  	auipc	ra, 15
802052ca: e7 80 80 22  	jalr	552(ra)
802052ce: 83 35 84 83  	ld	a1, -1992(s0)
802052d2: 23 13 a4 c6  	sh	a0, -922(s0)
802052d6: 41 66        	lui	a2, 16
802052d8: 7d 36        	addiw	a2, a2, -1
802052da: 71 8d        	and	a0, a0, a2
802052dc: 23 30 a4 84  	sd	a0, -1984(s0)
802052e0: 63 0b b5 00  	beq	a0, a1, 0x802052f6 <.LBB78_60+0x7a>
802052e4: 09 a0        	j	0x802052e6 <.LBB78_60+0x6a>
802052e6: 83 35 04 84  	ld	a1, -1984(s0)
802052ea: 13 05 04 c7  	addi	a0, s0, -912
802052ee: 97 b0 ff ff  	auipc	ra, 1048571
802052f2: e7 80 00 30  	jalr	768(ra)
;                             } else if (string_eq(key, "#size-cells")) {
802052f6: 19 a2        	j	0x802053fc <.LBB78_60+0x180>
;                                 const value = self.parse_property_name(descriptor);
802052f8: 83 35 84 88  	ld	a1, -1912(s0)
802052fc: 13 05 04 8c  	addi	a0, s0, -1856
80205300: 13 06 04 90  	addi	a2, s0, -1792
80205304: 97 30 00 00  	auipc	ra, 3
80205308: e7 80 00 c9  	jalr	-880(ra)
;                                 print("{s}\n", .{value});
8020530c: 83 35 04 8c  	ld	a1, -1856(s0)
80205310: 23 38 b4 8a  	sd	a1, -1872(s0)
80205314: 03 35 84 8c  	ld	a0, -1848(s0)
80205318: 23 3c a4 8a  	sd	a0, -1864(s0)
8020531c: 01 46        	mv	a2, zero
8020531e: 23 34 c4 82  	sd	a2, -2008(s0)
80205322: 23 30 c4 da  	sd	a2, -608(s0)
80205326: 13 06 84 db  	addi	a2, s0, -584
8020532a: 23 34 c4 da  	sd	a2, -600(s0)
8020532e: 13 06 00 02  	addi	a2, zero, 32
80205332: 23 38 c4 da  	sd	a2, -592(s0)
;     writer.print(format, args) catch unreachable;
80205336: 23 38 b4 d8  	sd	a1, -624(s0)
8020533a: 23 3c a4 d8  	sd	a0, -616(s0)
8020533e: 13 05 04 da  	addi	a0, s0, -608
80205342: 93 05 04 8b  	addi	a1, s0, -1872
80205346: 97 f0 00 00  	auipc	ra, 15
8020534a: e7 80 20 1f  	jalr	498(ra)
8020534e: 83 35 84 82  	ld	a1, -2008(s0)
80205352: 23 17 a4 d8  	sh	a0, -626(s0)
80205356: 41 66        	lui	a2, 16
80205358: 7d 36        	addiw	a2, a2, -1
8020535a: 71 8d        	and	a0, a0, a2
8020535c: 23 38 a4 82  	sd	a0, -2000(s0)
80205360: 63 0b b5 00  	beq	a0, a1, 0x80205376 <.LBB78_60+0xfa>
80205364: 09 a0        	j	0x80205366 <.LBB78_60+0xea>
80205366: 83 35 04 83  	ld	a1, -2000(s0)
8020536a: 13 05 04 da  	addi	a0, s0, -608
8020536e: 97 b0 ff ff  	auipc	ra, 1048571
80205372: e7 80 00 28  	jalr	640(ra)
;                             } else if (string_eq(key, "compatible")) {
80205376: 51 a0        	j	0x802053fa <.LBB78_60+0x17e>
;                                 const value = self.parse_property_name(descriptor);
80205378: 83 35 84 88  	ld	a1, -1912(s0)
8020537c: 13 05 04 8a  	addi	a0, s0, -1888
80205380: 13 06 04 90  	addi	a2, s0, -1792
80205384: 97 30 00 00  	auipc	ra, 3
80205388: e7 80 00 c1  	jalr	-1008(ra)
;                                 print("{s}\n", .{value});
8020538c: 83 35 04 8a  	ld	a1, -1888(s0)
80205390: 23 38 b4 88  	sd	a1, -1904(s0)
80205394: 03 35 84 8a  	ld	a0, -1880(s0)
80205398: 23 3c a4 88  	sd	a0, -1896(s0)
8020539c: 01 46        	mv	a2, zero
8020539e: 23 3c c4 80  	sd	a2, -2024(s0)
802053a2: 23 38 c4 ec  	sd	a2, -304(s0)
802053a6: 13 06 84 ee  	addi	a2, s0, -280
802053aa: 23 3c c4 ec  	sd	a2, -296(s0)
802053ae: 13 06 00 02  	addi	a2, zero, 32
802053b2: 23 30 c4 ee  	sd	a2, -288(s0)
;     writer.print(format, args) catch unreachable;
802053b6: 23 30 b4 ec  	sd	a1, -320(s0)
802053ba: 23 34 a4 ec  	sd	a0, -312(s0)
802053be: 13 05 04 ed  	addi	a0, s0, -304
802053c2: 93 05 04 89  	addi	a1, s0, -1904
802053c6: 97 f0 00 00  	auipc	ra, 15
802053ca: e7 80 20 1c  	jalr	450(ra)
802053ce: 83 35 84 81  	ld	a1, -2024(s0)
802053d2: 23 1f a4 ea  	sh	a0, -322(s0)
802053d6: 41 66        	lui	a2, 16
802053d8: 7d 36        	addiw	a2, a2, -1
802053da: 71 8d        	and	a0, a0, a2
802053dc: 23 30 a4 82  	sd	a0, -2016(s0)
802053e0: 63 0b b5 00  	beq	a0, a1, 0x802053f6 <.LBB78_60+0x17a>
802053e4: 09 a0        	j	0x802053e6 <.LBB78_60+0x16a>
802053e6: 83 35 04 82  	ld	a1, -2016(s0)
802053ea: 13 05 04 ed  	addi	a0, s0, -304
802053ee: 97 b0 ff ff  	auipc	ra, 1048571
802053f2: e7 80 00 20  	jalr	512(ra)
;                             } else if (string_eq(key, "model")) {
802053f6: 09 a0        	j	0x802053f8 <.LBB78_60+0x17c>
;                             } else if (string_eq(key, "compatible")) {
802053f8: 09 a0        	j	0x802053fa <.LBB78_60+0x17e>
;                             } else if (string_eq(key, "#size-cells")) {
802053fa: 09 a0        	j	0x802053fc <.LBB78_60+0x180>
;                             if (string_eq(key, "#address-cells")) {
802053fc: 15 a8        	j	0x80205430 <.LBB78_60+0x1b4>
;                             if (self.device_tree.main_nodes_start == 0) {
802053fe: 03 35 84 88  	ld	a0, -1912(s0)
80205402: 08 6d        	ld	a0, 24(a0)
80205404: 08 79        	ld	a0, 48(a0)
80205406: 81 45        	mv	a1, zero
80205408: 63 12 b5 02  	bne	a0, a1, 0x8020542c <.LBB78_60+0x1b0>
8020540c: 09 a0        	j	0x8020540e <.LBB78_60+0x192>
;                                 self.device_tree.main_nodes_start = self.i - @sizeOf(Token);
8020540e: 03 35 84 88  	ld	a0, -1912(s0)
80205412: 0c 6d        	ld	a1, 24(a0)
80205414: 93 85 05 03  	addi	a1, a1, 48
80205418: 23 34 b4 80  	sd	a1, -2040(s0)
8020541c: 08 69        	ld	a0, 16(a0)
8020541e: 93 05 c5 ff  	addi	a1, a0, -4
80205422: 23 38 b4 80  	sd	a1, -2032(s0)
80205426: 63 65 b5 0e  	bltu	a0, a1, 0x80205510 <.LBB78_64>
8020542a: e5 a8        	j	0x80205522 <.LBB78_64+0x12>
;                             if (self.device_tree.main_nodes_start == 0) {
8020542c: 19 a0        	j	0x80205432 <.LBB78_60+0x1b6>
;                         .end_node => break,
8020542e: 39 a8        	j	0x8020544c <.LBB78_60+0x1d0>
;                     switch (token) {
80205430: 29 a8        	j	0x8020544a <.LBB78_60+0x1ce>
;                             self.parse_node(1, address_cells, size_cells);
80205432: 03 35 84 88  	ld	a0, -1912(s0)
80205436: 83 26 84 92  	lw	a3, -1752(s0)
8020543a: 03 26 c4 92  	lw	a2, -1748(s0)
8020543e: 85 45        	addi	a1, zero, 1
80205440: 97 30 00 00  	auipc	ra, 3
80205444: e7 80 20 cc  	jalr	-830(ra)
;                     switch (token) {
80205448: 09 a0        	j	0x8020544a <.LBB78_60+0x1ce>
;                 while (true) {
8020544a: 5d be        	j	0x80205000 <.LBB78_53+0x12>
;             while (true) {
8020544c: ed bc        	j	0x80204f46 <arch.riscv64.device_tree.Parser.parse+0x3a>
;         fn parse(self: *@This()) void {
8020544e: 45 61        	addi	sp, sp, 48
80205450: 03 34 01 7e  	ld	s0, 2016(sp)
80205454: 83 30 81 7e  	ld	ra, 2024(sp)
80205458: 13 01 01 7f  	addi	sp, sp, 2032
8020545c: 82 80        	ret

000000008020545e <.LBB78_61>:
;             const address = self.device_tree.base_address + offset;
8020545e: 17 85 01 00  	auipc	a0, 24
80205462: 13 05 25 02  	addi	a0, a0, 34
80205466: 81 45        	mv	a1, zero
80205468: 97 b0 ff ff  	auipc	ra, 1048571
8020546c: e7 80 80 c3  	jalr	-968(ra)
80205470: 03 35 04 88  	ld	a0, -1920(s0)
80205474: 23 3c a4 92  	sd	a0, -1736(s0)
;             self.slice = @intToPtr([*]u8, address)[0..size];
80205478: 83 35 84 88  	ld	a1, -1912(s0)
8020547c: 7d 76        	lui	a2, 1048575
8020547e: 1b 06 86 7f  	addiw	a2, a2, 2040
80205482: 22 96        	add	a2, a2, s0
80205484: 0c e2        	sd	a1, 0(a2)
80205486: aa 85        	mv	a1, a0
80205488: 23 30 b4 80  	sd	a1, -2048(s0)
8020548c: 81 45        	mv	a1, zero
8020548e: 63 1c b5 00  	bne	a0, a1, 0x802054a6 <.LBB78_62+0x12>
80205492: 09 a0        	j	0x80205494 <.LBB78_62>

0000000080205494 <.LBB78_62>:
80205494: 17 85 01 00  	auipc	a0, 24
80205498: 13 05 45 06  	addi	a0, a0, 100
8020549c: 81 45        	mv	a1, zero
8020549e: 97 b0 ff ff  	auipc	ra, 1048571
802054a2: e7 80 20 c0  	jalr	-1022(ra)
802054a6: 03 35 04 80  	ld	a0, -2048(s0)
802054aa: 23 38 a4 92  	sd	a0, -1744(s0)
802054ae: 83 65 04 94  	lwu	a1, -1728(s0)
802054b2: 7d 76        	lui	a2, 1048575
802054b4: 1b 06 86 7e  	addiw	a2, a2, 2024
802054b8: 22 96        	add	a2, a2, s0
802054ba: 0c e2        	sd	a1, 0(a2)
802054bc: fd 75        	lui	a1, 1048575
802054be: 9b 85 05 7f  	addiw	a1, a1, 2032
802054c2: a2 95        	add	a1, a1, s0
802054c4: 88 e1        	sd	a0, 0(a1)
802054c6: 81 45        	mv	a1, zero
802054c8: 05 45        	addi	a0, zero, 1
802054ca: 63 1c b5 00  	bne	a0, a1, 0x802054e2 <.LBB78_63+0x12>
802054ce: 09 a0        	j	0x802054d0 <.LBB78_63>

00000000802054d0 <.LBB78_63>:
802054d0: 17 85 01 00  	auipc	a0, 24
802054d4: 13 05 05 e3  	addi	a0, a0, -464
802054d8: 81 45        	mv	a1, zero
802054da: 97 b0 ff ff  	auipc	ra, 1048571
802054de: e7 80 60 bc  	jalr	-1082(ra)
802054e2: 7d 75        	lui	a0, 1048575
802054e4: 1b 05 85 7e  	addiw	a0, a0, 2024
802054e8: 22 95        	add	a0, a0, s0
802054ea: 08 61        	ld	a0, 0(a0)
802054ec: fd 75        	lui	a1, 1048575
802054ee: 9b 85 85 7f  	addiw	a1, a1, 2040
802054f2: a2 95        	add	a1, a1, s0
802054f4: 8c 61        	ld	a1, 0(a1)
802054f6: 7d 76        	lui	a2, 1048575
802054f8: 1b 06 06 7f  	addiw	a2, a2, 2032
802054fc: 22 96        	add	a2, a2, s0
802054fe: 10 62        	ld	a2, 0(a2)
80205500: 90 e1        	sd	a2, 0(a1)
80205502: 88 e5        	sd	a0, 8(a1)
80205504: 01 45        	mv	a0, zero
;             var address_cells: u32 = 0;
80205506: 23 26 a4 92  	sw	a0, -1748(s0)
;             var size_cells: u32 = 0;
8020550a: 23 24 a4 92  	sw	a0, -1752(s0)
;             while (true) {
8020550e: 25 bc        	j	0x80204f46 <arch.riscv64.device_tree.Parser.parse+0x3a>

0000000080205510 <.LBB78_64>:
;                                 self.device_tree.main_nodes_start = self.i - @sizeOf(Token);
80205510: 17 85 01 00  	auipc	a0, 24
80205514: 13 05 05 f7  	addi	a0, a0, -144
80205518: 81 45        	mv	a1, zero
8020551a: 97 b0 ff ff  	auipc	ra, 1048571
8020551e: e7 80 60 b8  	jalr	-1146(ra)
80205522: 03 35 04 81  	ld	a0, -2032(s0)
80205526: 83 35 84 80  	ld	a1, -2040(s0)
8020552a: 88 e1        	sd	a0, 0(a1)
;                             if (self.device_tree.main_nodes_start == 0) {
8020552c: 19 b7        	j	0x80205432 <.LBB78_60+0x1b6>

000000008020552e <std.log.scoped(RISCV64).debug.17>:
;         pub fn debug(
8020552e: 41 11        	addi	sp, sp, -16
;             log(.debug, scope, format, args);
80205530: 06 e4        	sd	ra, 8(sp)
80205532: 22 e0        	sd	s0, 0(sp)
80205534: 00 08        	addi	s0, sp, 16
80205536: 97 70 00 00  	auipc	ra, 7
8020553a: e7 80 c0 eb  	jalr	-324(ra)
;         ) void {
8020553e: 02 64        	ld	s0, 0(sp)
80205540: a2 60        	ld	ra, 8(sp)
80205542: 41 01        	addi	sp, sp, 16
80205544: 82 80        	ret

0000000080205546 <arch.riscv64.device_tree.find_property>:
; pub fn find_property(self: *@This(), main_node: []const u8, property_name: []const u8, comptime search_type: SearchType, maybe_intermediate_nodes: ?[]const []const u8, comptime maybe_intermediate_search_types: ?[]const SearchType) ?StructureBlock.Parser.Property {
80205546: 35 71        	addi	sp, sp, -160
80205548: 06 ed        	sd	ra, 152(sp)
8020554a: 22 e9        	sd	s0, 144(sp)
8020554c: 00 11        	addi	s0, sp, 160
8020554e: 23 30 e4 f6  	sd	a4, -160(s0)
80205552: 23 34 d4 f6  	sd	a3, -152(s0)
80205556: 23 30 c4 f8  	sd	a2, -128(s0)
8020555a: 23 38 a4 f6  	sd	a0, -144(s0)
8020555e: 23 38 b4 f8  	sd	a1, -112(s0)
80205562: 13 05 04 fd  	addi	a0, s0, -48
;     var parser = self.get_node_finding_parser();
80205566: 23 3c a4 f6  	sd	a0, -136(s0)
8020556a: 97 70 00 00  	auipc	ra, 7
8020556e: e7 80 80 eb  	jalr	-328(ra)
80205572: 83 35 84 f7  	ld	a1, -136(s0)
80205576: 03 36 04 f8  	ld	a2, -128(s0)
8020557a: 13 05 84 fb  	addi	a0, s0, -72
8020557e: 81 46        	mv	a3, zero
;     if (parser.find_node_from_current_offset(main_node, search_type)) |_| {
80205580: 23 34 d4 f8  	sd	a3, -120(s0)
80205584: 97 70 00 00  	auipc	ra, 7
80205588: e7 80 80 fa  	jalr	-88(ra)
8020558c: 83 35 84 f8  	ld	a1, -120(s0)
80205590: 03 45 84 fc  	lbu	a0, -56(s0)
80205594: 63 0b b5 04  	beq	a0, a1, 0x802055ea <arch.riscv64.device_tree.find_property+0xa4>
80205598: 09 a0        	j	0x8020559a <arch.riscv64.device_tree.find_property+0x54>
8020559a: 03 35 04 f6  	ld	a0, -160(s0)
8020559e: 83 35 04 fc  	ld	a1, -64(s0)
802055a2: 23 38 b4 fa  	sd	a1, -80(s0)
802055a6: 83 35 84 fb  	ld	a1, -72(s0)
802055aa: 23 34 b4 fa  	sd	a1, -88(s0)
;         if (maybe_intermediate_nodes) |intermediate_nodes| {
802055ae: 03 45 05 01  	lbu	a0, 16(a0)
802055b2: 81 45        	mv	a1, zero
802055b4: 63 11 b5 02  	bne	a0, a1, 0x802055d6 <arch.riscv64.device_tree.find_property+0x90>
802055b8: 09 a0        	j	0x802055ba <arch.riscv64.device_tree.find_property+0x74>
;             return parser.find_property_in_current_node(property_name);
802055ba: 03 36 84 f6  	ld	a2, -152(s0)
802055be: 03 35 04 f7  	ld	a0, -144(s0)
802055c2: 93 05 04 fd  	addi	a1, s0, -48
802055c6: 97 70 00 00  	auipc	ra, 7
802055ca: e7 80 40 13  	jalr	308(ra)
802055ce: 4a 64        	ld	s0, 144(sp)
802055d0: ea 60        	ld	ra, 152(sp)
802055d2: 0d 61        	addi	sp, sp, 160
802055d4: 82 80        	ret
;         if (maybe_intermediate_nodes) |intermediate_nodes| {
802055d6: 03 35 04 f6  	ld	a0, -160(s0)
802055da: 0c 65        	ld	a1, 8(a0)
802055dc: 23 30 b4 fa  	sd	a1, -96(s0)
802055e0: 08 61        	ld	a0, 0(a0)
802055e2: 23 3c a4 f8  	sd	a0, -104(s0)
802055e6: 09 a0        	j	0x802055e8 <arch.riscv64.device_tree.find_property+0xa2>
;     if (parser.find_node_from_current_offset(main_node, search_type)) |_| {
802055e8: 11 a0        	j	0x802055ec <arch.riscv64.device_tree.find_property+0xa6>
802055ea: 09 a0        	j	0x802055ec <arch.riscv64.device_tree.find_property+0xa6>
802055ec: 83 35 04 f7  	ld	a1, -144(s0)

00000000802055f0 <.LBB80_7>:
802055f0: 17 85 01 00  	auipc	a0, 24
802055f4: 13 05 85 2e  	addi	a0, a0, 744
;     return null;
802055f8: 10 71        	ld	a2, 32(a0)
802055fa: 90 f1        	sd	a2, 32(a1)
802055fc: 10 6d        	ld	a2, 24(a0)
802055fe: 90 ed        	sd	a2, 24(a1)
80205600: 10 69        	ld	a2, 16(a0)
80205602: 90 e9        	sd	a2, 16(a1)
80205604: 10 65        	ld	a2, 8(a0)
80205606: 90 e5        	sd	a2, 8(a1)
80205608: 08 61        	ld	a0, 0(a0)
8020560a: 88 e1        	sd	a0, 0(a1)
8020560c: 4a 64        	ld	s0, 144(sp)
8020560e: ea 60        	ld	ra, 152(sp)
80205610: 0d 61        	addi	sp, sp, 160
80205612: 82 80        	ret

0000000080205614 <arch.riscv64.physical.init>:
; pub fn init() void {
80205614: 13 01 01 bf  	addi	sp, sp, -1040
80205618: 23 34 11 40  	sd	ra, 1032(sp)
8020561c: 23 30 81 40  	sd	s0, 1024(sp)
80205620: 13 04 01 41  	addi	s0, sp, 1040
80205624: 13 05 84 f6  	addi	a0, s0, -152
;     const memory_map = MemoryMap.get();
80205628: 97 70 00 00  	auipc	ra, 7
8020562c: e7 80 e0 31  	jalr	798(ra)

0000000080205630 <.LBB81_125>:
;     reserved_regions.ptr = &_reserved;
80205630: 97 26 06 00  	auipc	a3, 98
80205634: 93 86 06 3a  	addi	a3, a3, 928

0000000080205638 <.LBB81_126>:
80205638: 17 25 06 00  	auipc	a0, 98
8020563c: 13 05 85 38  	addi	a0, a0, 904
;     reserved_regions.ptr = &_reserved;
80205640: 14 e1        	sd	a3, 0(a0)
;     reserved_regions.len = memory_map.reserved.len;
80205642: 93 05 84 f7  	addi	a1, s0, -136
80205646: 03 36 04 f8  	ld	a2, -128(s0)
8020564a: 10 e5        	sd	a2, 8(a0)
;     kernel.copy(Region.Descriptor, reserved_regions, memory_map.reserved);
8020564c: 23 3c d4 f4  	sd	a3, -168(s0)
80205650: 23 30 c4 f6  	sd	a2, -160(s0)
80205654: 83 36 84 f7  	ld	a3, -136(s0)
80205658: 23 34 d4 f4  	sd	a3, -184(s0)
8020565c: 23 38 c4 f4  	sd	a2, -176(s0)
80205660: 97 80 00 00  	auipc	ra, 8
80205664: e7 80 a0 ae  	jalr	-1302(ra)

0000000080205668 <.LBB81_127>:
;         return @ptrToInt(&kernel_start);
80205668: 97 b5 ff ff  	auipc	a1, 1048571
8020566c: 93 85 85 99  	addi	a1, a1, -1640
80205670: 23 3c b4 fc  	sd	a1, -40(s0)
;     const kernel_start = kernel.bounds.get_start();
80205674: 23 30 b4 f4  	sd	a1, -192(s0)

0000000080205678 <.LBB81_128>:
;         return @ptrToInt(&kernel_end);
80205678: 17 05 67 00  	auipc	a0, 1648
8020567c: 13 05 85 98  	addi	a0, a0, -1656
80205680: 23 30 a4 fe  	sd	a0, -32(s0)
;     const kernel_end = kernel.bounds.get_end();
80205684: 23 3c a4 f2  	sd	a0, -200(s0)
;     const kernel_size = kernel_end - kernel_start;
80205688: b3 05 b5 40  	sub	a1, a0, a1
8020568c: 23 38 b4 e0  	sd	a1, -496(s0)
80205690: 63 61 b5 3a  	bltu	a0, a1, 0x80205a32 <.LBB81_144>
80205694: 45 ae        	j	0x80205a44 <.LBB81_144+0x12>
;     for (reserved_regions) |reserved, i| {
80205696: 83 35 04 e0  	ld	a1, -512(s0)
8020569a: 03 35 84 f2  	ld	a0, -216(s0)
8020569e: 23 34 a4 e0  	sd	a0, -504(s0)
802056a2: 63 76 b5 04  	bgeu	a0, a1, 0x802056ee <.LBB81_130>
802056a6: 09 a0        	j	0x802056a8 <.LBB81_128+0x30>
802056a8: 83 35 84 e0  	ld	a1, -504(s0)

00000000802056ac <.LBB81_129>:
802056ac: 17 25 06 00  	auipc	a0, 98
802056b0: 13 05 45 31  	addi	a0, a0, 788
802056b4: 08 61        	ld	a0, 0(a0)
802056b6: 92 05        	slli	a1, a1, 4
802056b8: 2e 95        	add	a0, a0, a1
802056ba: 0c 61        	ld	a1, 0(a0)
802056bc: 23 3c b4 f0  	sd	a1, -232(s0)
802056c0: 08 65        	ld	a0, 8(a0)
802056c2: 23 30 a4 f2  	sd	a0, -224(s0)
;         log.debug("[{}] (0x{x}, {})", .{ i, reserved.address, reserved.page_count });
802056c6: 03 36 84 f2  	ld	a2, -216(s0)
802056ca: 23 30 c4 f0  	sd	a2, -256(s0)
802056ce: 23 34 b4 f0  	sd	a1, -248(s0)
802056d2: 23 38 a4 f0  	sd	a0, -240(s0)
802056d6: 13 05 04 f0  	addi	a0, s0, -256
802056da: 97 80 00 00  	auipc	ra, 8
802056de: e7 80 e0 b0  	jalr	-1266(ra)
802056e2: 03 35 84 e0  	ld	a0, -504(s0)
;     for (reserved_regions) |reserved, i| {
802056e6: 05 05        	addi	a0, a0, 1
802056e8: 23 34 a4 f2  	sd	a0, -216(s0)
802056ec: 6d b7        	j	0x80205696 <.LBB81_128+0x1e>

00000000802056ee <.LBB81_130>:
;     available_regions.ptr = &_available;
802056ee: 17 25 06 00  	auipc	a0, 98
802056f2: 13 05 25 6f  	addi	a0, a0, 1778

00000000802056f6 <.LBB81_131>:
802056f6: 97 25 06 00  	auipc	a1, 98
802056fa: 93 85 a5 6d  	addi	a1, a1, 1754
;     available_regions.ptr = &_available;
802056fe: 88 e1        	sd	a0, 0(a1)
;     available_regions.len = memory_map.available.len;
80205700: 03 35 04 f7  	ld	a0, -144(s0)
80205704: 23 38 a4 de  	sd	a0, -528(s0)
80205708: 88 e5        	sd	a0, 8(a1)
8020570a: 13 05 84 f6  	addi	a0, s0, -152
8020570e: 23 3c a4 de  	sd	a0, -520(s0)
80205712: 01 45        	mv	a0, zero
;     for (memory_map.available) |available, i| {
80205714: 23 3c a4 ee  	sd	a0, -264(s0)
80205718: 09 a0        	j	0x8020571a <.LBB81_131+0x24>
8020571a: 83 35 04 df  	ld	a1, -528(s0)
8020571e: 03 35 84 ef  	ld	a0, -264(s0)
80205722: 23 34 a4 de  	sd	a0, -536(s0)
80205726: 63 7c b5 02  	bgeu	a0, a1, 0x8020575e <.LBB81_132+0x10>
8020572a: 09 a0        	j	0x8020572c <.LBB81_131+0x36>
8020572c: 83 35 84 de  	ld	a1, -536(s0)
80205730: 03 35 84 df  	ld	a0, -520(s0)
80205734: 08 61        	ld	a0, 0(a0)
80205736: 92 05        	slli	a1, a1, 4
80205738: 2e 95        	add	a0, a0, a1
8020573a: 0c 65        	ld	a1, 8(a0)
8020573c: 23 38 b4 ee  	sd	a1, -272(s0)
80205740: 08 61        	ld	a0, 0(a0)
80205742: 23 34 a4 ee  	sd	a0, -280(s0)
;         available_regions[i].descriptor = available;
80205746: 03 35 84 ef  	ld	a0, -264(s0)
8020574a: 23 30 a4 de  	sd	a0, -544(s0)

000000008020574e <.LBB81_132>:
8020574e: 97 25 06 00  	auipc	a1, 98
80205752: 93 85 25 68  	addi	a1, a1, 1666
;         available_regions[i].descriptor = available;
80205756: 8c 65        	ld	a1, 8(a1)
80205758: 63 63 b5 56  	bltu	a0, a1, 0x80205cbe <.LBB81_168+0x12>
8020575c: 81 ab        	j	0x80205cac <.LBB81_168>
8020575e: 01 45        	mv	a0, zero
;     for (reserved_regions) |reserved| {
80205760: 23 30 a4 ee  	sd	a0, -288(s0)

0000000080205764 <.LBB81_133>:
80205764: 17 25 06 00  	auipc	a0, 98
80205768: 13 05 c5 25  	addi	a0, a0, 604
;     for (reserved_regions) |reserved| {
8020576c: 08 65        	ld	a0, 8(a0)
8020576e: 23 3c a4 dc  	sd	a0, -552(s0)
80205772: 09 a0        	j	0x80205774 <.LBB81_133+0x10>
80205774: 83 35 84 dd  	ld	a1, -552(s0)
80205778: 03 35 04 ee  	ld	a0, -288(s0)
8020577c: 23 38 a4 dc  	sd	a0, -560(s0)
80205780: 63 73 b5 1c  	bgeu	a0, a1, 0x80205946 <.LBB81_139+0x54>
80205784: 09 a0        	j	0x80205786 <.LBB81_133+0x22>
80205786: 83 35 04 dd  	ld	a1, -560(s0)

000000008020578a <.LBB81_134>:
8020578a: 17 25 06 00  	auipc	a0, 98
8020578e: 13 05 65 23  	addi	a0, a0, 566
80205792: 08 61        	ld	a0, 0(a0)
80205794: 92 05        	slli	a1, a1, 4
80205796: 2e 95        	add	a0, a0, a1
80205798: 0c 61        	ld	a1, 0(a0)
8020579a: 23 38 b4 ec  	sd	a1, -304(s0)
8020579e: 0c 65        	ld	a1, 8(a0)
802057a0: 23 3c b4 ec  	sd	a1, -296(s0)
802057a4: 7d 55        	addi	a0, zero, -1
802057a6: 31 81        	srli	a0, a0, 12
;         const reserved_size = reserved.page_count * kernel.arch.page_size;
802057a8: 6d 8d        	and	a0, a0, a1
802057aa: 13 96 c5 00  	slli	a2, a1, 12
802057ae: 23 34 c4 dc  	sd	a2, -568(s0)
802057b2: 63 1e b5 52  	bne	a0, a1, 0x80205cee <.LBB81_170>
802057b6: a9 a3        	j	0x80205d00 <.LBB81_170+0x12>
;         for (available_regions) |*available, available_i| {
802057b8: 83 35 84 db  	ld	a1, -584(s0)
802057bc: 03 35 04 ec  	ld	a0, -320(s0)
802057c0: 23 30 a4 dc  	sd	a0, -576(s0)
802057c4: 63 7b b5 16  	bgeu	a0, a1, 0x8020593a <.LBB81_139+0x48>
802057c8: 09 a0        	j	0x802057ca <.LBB81_134+0x40>
802057ca: 83 35 04 dc  	ld	a1, -576(s0)

00000000802057ce <.LBB81_135>:
802057ce: 17 25 06 00  	auipc	a0, 98
802057d2: 13 05 25 60  	addi	a0, a0, 1538
802057d6: 08 61        	ld	a0, 0(a0)
802057d8: 13 06 80 02  	addi	a2, zero, 40
802057dc: b3 85 c5 02  	mul	a1, a1, a2
802057e0: 2e 95        	add	a0, a0, a1
802057e2: 23 3c a4 ea  	sd	a0, -328(s0)
;             const available_size = available.descriptor.page_count * kernel.arch.page_size;
802057e6: 0c 65        	ld	a1, 8(a0)
802057e8: 7d 55        	addi	a0, zero, -1
802057ea: 31 81        	srli	a0, a0, 12
802057ec: 6d 8d        	and	a0, a0, a1
802057ee: 13 96 c5 00  	slli	a2, a1, 12
802057f2: 23 38 c4 da  	sd	a2, -592(s0)
802057f6: 63 14 b5 52  	bne	a0, a1, 0x80205d1e <.LBB81_172>
802057fa: 1d ab        	j	0x80205d30 <.LBB81_172+0x12>
;             if (reserved.address >= available.descriptor.address and reserved.address < available.descriptor.address + available_size) {
802057fc: 03 35 04 ed  	ld	a0, -304(s0)
80205800: 23 30 a4 da  	sd	a0, -608(s0)
80205804: 03 35 84 eb  	ld	a0, -328(s0)
80205808: 0c 61        	ld	a1, 0(a0)
8020580a: 03 35 04 eb  	ld	a0, -336(s0)
8020580e: 2e 95        	add	a0, a0, a1
80205810: 23 34 a4 da  	sd	a0, -600(s0)
80205814: 63 60 b5 54  	bltu	a0, a1, 0x80205d54 <.LBB81_173>
80205818: b9 a3        	j	0x80205d66 <.LBB81_173+0x12>
8020581a: 03 35 84 d9  	ld	a0, -616(s0)
8020581e: 81 45        	mv	a1, zero
80205820: 63 06 b5 10  	beq	a0, a1, 0x8020592c <.LBB81_139+0x3a>
80205824: 09 a0        	j	0x80205826 <.LBB81_135+0x58>
;                 const start_matches = reserved.address == available.descriptor.address;
80205826: 83 35 04 ed  	ld	a1, -304(s0)
8020582a: 03 35 84 eb  	ld	a0, -328(s0)
8020582e: 08 61        	ld	a0, 0(a0)
80205830: 2d 8d        	xor	a0, a0, a1
80205832: 13 35 15 00  	seqz	a0, a0
80205836: a3 07 a4 ea  	sb	a0, -337(s0)
;                 const end_matches = reserved.address + reserved_size == available.descriptor.address + available_size;
8020583a: 03 35 84 ec  	ld	a0, -312(s0)
8020583e: 2e 95        	add	a0, a0, a1
80205840: 23 38 a4 d8  	sd	a0, -624(s0)
80205844: 63 6a b5 52  	bltu	a0, a1, 0x80205d78 <.LBB81_174>
80205848: 89 a3        	j	0x80205d8a <.LBB81_174+0x12>
;                 if (!start_matches and !end_matches) {
8020584a: 03 05 e4 ea  	lb	a0, -338(s0)
8020584e: 13 45 15 00  	xori	a0, a0, 1
80205852: 23 34 a4 d8  	sd	a0, -632(s0)
80205856: 09 a0        	j	0x80205858 <.LBB81_135+0x8a>
80205858: 03 35 84 d8  	ld	a0, -632(s0)
8020585c: 05 89        	andi	a0, a0, 1
8020585e: 81 45        	mv	a1, zero
80205860: 63 15 b5 06  	bne	a0, a1, 0x802058ca <.LBB81_137+0x12>
80205864: 09 a0        	j	0x80205866 <.LBB81_135+0x98>
;                 } else if (start_matches and end_matches) {
80205866: 03 45 f4 ea  	lbu	a0, -337(s0)
8020586a: 81 45        	mv	a1, zero
8020586c: 2a 86        	mv	a2, a0
8020586e: 23 30 c4 d8  	sd	a2, -640(s0)
80205872: 63 08 b5 00  	beq	a0, a1, 0x80205882 <.LBB81_135+0xb4>
80205876: 09 a0        	j	0x80205878 <.LBB81_135+0xaa>
80205878: 03 05 e4 ea  	lb	a0, -338(s0)
8020587c: 23 30 a4 d8  	sd	a0, -640(s0)
80205880: 09 a0        	j	0x80205882 <.LBB81_135+0xb4>
80205882: 03 35 04 d8  	ld	a0, -640(s0)
80205886: 05 89        	andi	a0, a0, 1
80205888: 81 45        	mv	a1, zero
8020588a: 63 10 b5 06  	bne	a0, a1, 0x802058ea <.LBB81_138+0x18>
8020588e: 09 a0        	j	0x80205890 <.LBB81_135+0xc2>
;                 } else if (start_matches) {
80205890: 03 45 f4 ea  	lbu	a0, -337(s0)
80205894: 81 45        	mv	a1, zero
80205896: 63 1a b5 06  	bne	a0, a1, 0x8020590a <.LBB81_139+0x18>
8020589a: 09 a0        	j	0x8020589c <.LBB81_135+0xce>
;                 } else if (end_matches) {
8020589c: 03 45 e4 ea  	lbu	a0, -338(s0)
802058a0: 81 45        	mv	a1, zero
802058a2: 63 0b b5 00  	beq	a0, a1, 0x802058b8 <.LBB81_137>
802058a6: 09 a0        	j	0x802058a8 <.LBB81_136>

00000000802058a8 <.LBB81_136>:
;                     TODO(@src());
802058a8: 17 85 01 00  	auipc	a0, 24
802058ac: 13 05 05 08  	addi	a0, a0, 128
802058b0: 97 b0 ff ff  	auipc	ra, 1048571
802058b4: e7 80 20 92  	jalr	-1758(ra)

00000000802058b8 <.LBB81_137>:
;                     @panic("unreachableeEEEEE");
802058b8: 17 85 01 00  	auipc	a0, 24
802058bc: 13 05 85 09  	addi	a0, a0, 152
802058c0: 81 45        	mv	a1, zero
802058c2: 97 a0 ff ff  	auipc	ra, 1048570
802058c6: e7 80 e0 7d  	jalr	2014(ra)
;                     kernel.assert(@src(), available_i == available_regions.len - 1);
802058ca: 03 35 04 ec  	ld	a0, -320(s0)
802058ce: 23 38 a4 d6  	sd	a0, -656(s0)

00000000802058d2 <.LBB81_138>:
802058d2: 17 25 06 00  	auipc	a0, 98
802058d6: 13 05 e5 4f  	addi	a0, a0, 1278
;                     kernel.assert(@src(), available_i == available_regions.len - 1);
802058da: 08 65        	ld	a0, 8(a0)
802058dc: 93 05 f5 ff  	addi	a1, a0, -1
802058e0: 23 3c b4 d6  	sd	a1, -648(s0)
802058e4: 63 6c b5 4e  	bltu	a0, a1, 0x80205ddc <.LBB81_176>
802058e8: 19 a3        	j	0x80205dee <.LBB81_176+0x12>
;                     kernel.assert(@src(), available_i == available_regions.len - 1);
802058ea: 03 35 04 ec  	ld	a0, -320(s0)
802058ee: 23 30 a4 d6  	sd	a0, -672(s0)

00000000802058f2 <.LBB81_139>:
802058f2: 17 25 06 00  	auipc	a0, 98
802058f6: 13 05 e5 4d  	addi	a0, a0, 1246
;                     kernel.assert(@src(), available_i == available_regions.len - 1);
802058fa: 08 65        	ld	a0, 8(a0)
802058fc: 93 05 f5 ff  	addi	a1, a0, -1
80205900: 23 34 b4 d6  	sd	a1, -664(s0)
80205904: 63 6f b5 6c  	bltu	a0, a1, 0x80205fe2 <.LBB81_191>
80205908: f5 a5        	j	0x80205ff4 <.LBB81_191+0x12>
;                     available.descriptor.address = reserved.address + reserved_size;
8020590a: 03 35 84 eb  	ld	a0, -328(s0)
8020590e: 23 38 a4 d4  	sd	a0, -688(s0)
80205912: 83 35 04 ed  	ld	a1, -304(s0)
80205916: 03 35 84 ec  	ld	a0, -312(s0)
8020591a: 2e 95        	add	a0, a0, a1
8020591c: 23 3c a4 d4  	sd	a0, -680(s0)
80205920: 63 66 b5 72  	bltu	a0, a1, 0x8020604c <.LBB81_196>
80205924: 2d af        	j	0x8020605e <.LBB81_196+0x12>
;                 } else if (start_matches and end_matches) {
80205926: 09 a0        	j	0x80205928 <.LBB81_139+0x36>
;                 if (!start_matches and !end_matches) {
80205928: 09 a0        	j	0x8020592a <.LBB81_139+0x38>
;                 break;
8020592a: 01 a8        	j	0x8020593a <.LBB81_139+0x48>
;             if (reserved.address >= available.descriptor.address and reserved.address < available.descriptor.address + available_size) {
8020592c: 09 a0        	j	0x8020592e <.LBB81_139+0x3c>
;         for (available_regions) |*available, available_i| {
8020592e: 03 35 04 dc  	ld	a0, -576(s0)
80205932: 05 05        	addi	a0, a0, 1
80205934: 23 30 a4 ec  	sd	a0, -320(s0)
80205938: 41 b5        	j	0x802057b8 <.LBB81_134+0x2e>
;     for (reserved_regions) |reserved| {
8020593a: 03 35 04 dd  	ld	a0, -560(s0)
8020593e: 05 05        	addi	a0, a0, 1
80205940: 23 30 a4 ee  	sd	a0, -288(s0)
80205944: 05 bd        	j	0x80205774 <.LBB81_133+0x10>
;     log.debug("Available regions:", .{});
80205946: 97 80 00 00  	auipc	ra, 8
8020594a: e7 80 c0 8c  	jalr	-1844(ra)
8020594e: 01 45        	mv	a0, zero
;     for (available_regions) |region, i| {
80205950: 23 30 a4 e8  	sd	a0, -384(s0)

0000000080205954 <.LBB81_140>:
80205954: 17 25 06 00  	auipc	a0, 98
80205958: 13 05 c5 47  	addi	a0, a0, 1148
;     for (available_regions) |region, i| {
8020595c: 08 65        	ld	a0, 8(a0)
8020595e: 23 34 a4 d4  	sd	a0, -696(s0)
80205962: 09 a0        	j	0x80205964 <.LBB81_140+0x10>
80205964: 83 35 84 d4  	ld	a1, -696(s0)
80205968: 03 35 04 e8  	ld	a0, -384(s0)
8020596c: 23 30 a4 d4  	sd	a0, -704(s0)
80205970: 63 71 b5 06  	bgeu	a0, a1, 0x802059d2 <.LBB81_141+0x58>
80205974: 09 a0        	j	0x80205976 <.LBB81_140+0x22>
80205976: 83 35 04 d4  	ld	a1, -704(s0)

000000008020597a <.LBB81_141>:
8020597a: 17 25 06 00  	auipc	a0, 98
8020597e: 13 05 65 45  	addi	a0, a0, 1110
80205982: 08 61        	ld	a0, 0(a0)
80205984: 13 06 80 02  	addi	a2, zero, 40
80205988: b3 85 c5 02  	mul	a1, a1, a2
8020598c: 33 06 b5 00  	add	a2, a0, a1
80205990: 08 62        	ld	a0, 0(a2)
80205992: 23 3c a4 e4  	sd	a0, -424(s0)
80205996: 0c 66        	ld	a1, 8(a2)
80205998: 23 30 b4 e6  	sd	a1, -416(s0)
8020599c: 14 6a        	ld	a3, 16(a2)
8020599e: 23 34 d4 e6  	sd	a3, -408(s0)
802059a2: 14 6e        	ld	a3, 24(a2)
802059a4: 23 38 d4 e6  	sd	a3, -400(s0)
802059a8: 10 72        	ld	a2, 32(a2)
802059aa: 23 3c c4 e6  	sd	a2, -392(s0)
;         log.debug("[{}] (0x{x}, {} -- 0x{x})", .{ i, region.descriptor.address, region.descriptor.page_count, region.descriptor.page_count * kernel.arch.page_size });
802059ae: 03 36 04 e8  	ld	a2, -384(s0)
802059b2: 23 3c c4 e2  	sd	a2, -456(s0)
802059b6: 23 30 a4 e4  	sd	a0, -448(s0)
802059ba: 23 34 b4 e4  	sd	a1, -440(s0)
802059be: 7d 55        	addi	a0, zero, -1
802059c0: 31 81        	srli	a0, a0, 12
802059c2: 6d 8d        	and	a0, a0, a1
802059c4: 13 96 c5 00  	slli	a2, a1, 12
802059c8: 23 3c c4 d2  	sd	a2, -712(s0)
802059cc: 63 1d b5 6c  	bne	a0, a1, 0x802060a6 <.LBB81_198>
802059d0: e5 a5        	j	0x802060b8 <.LBB81_198+0x12>
802059d2: 01 45        	mv	a0, zero
;     for (available_regions) |*region| {
802059d4: 23 38 a4 e2  	sd	a0, -464(s0)

00000000802059d8 <.LBB81_142>:
802059d8: 17 25 06 00  	auipc	a0, 98
802059dc: 13 05 85 3f  	addi	a0, a0, 1016
;     for (available_regions) |*region| {
802059e0: 08 65        	ld	a0, 8(a0)
802059e2: 23 38 a4 d2  	sd	a0, -720(s0)
802059e6: 09 a0        	j	0x802059e8 <.LBB81_142+0x10>
802059e8: 83 35 04 d3  	ld	a1, -720(s0)
802059ec: 03 35 04 e3  	ld	a0, -464(s0)
802059f0: 23 34 a4 d2  	sd	a0, -728(s0)
802059f4: 63 78 b5 02  	bgeu	a0, a1, 0x80205a24 <.LBB81_143+0x26>
802059f8: 09 a0        	j	0x802059fa <.LBB81_142+0x22>
802059fa: 83 35 84 d2  	ld	a1, -728(s0)

00000000802059fe <.LBB81_143>:
802059fe: 17 25 06 00  	auipc	a0, 98
80205a02: 13 05 25 3d  	addi	a0, a0, 978
80205a06: 08 61        	ld	a0, 0(a0)
80205a08: 13 06 80 02  	addi	a2, zero, 40
80205a0c: b3 85 c5 02  	mul	a1, a1, a2
80205a10: 2e 95        	add	a0, a0, a1
80205a12: 23 34 a4 e2  	sd	a0, -472(s0)
;         const bitset_len = (region.descriptor.page_count / @bitSizeOf(u64)) + @boolToInt(region.descriptor.page_count % @bitSizeOf(u64) != 0);
80205a16: 08 65        	ld	a0, 8(a0)
80205a18: 23 30 a4 d2  	sd	a0, -736(s0)
80205a1c: 01 45        	mv	a0, zero
80205a1e: 63 1d a5 6a  	bne	a0, a0, 0x802060d8 <.LBB81_199>
80205a22: e1 a5        	j	0x802060ea <.LBB81_199+0x12>
; pub fn init() void {
80205a24: 03 34 01 40  	ld	s0, 1024(sp)
80205a28: 83 30 81 40  	ld	ra, 1032(sp)
80205a2c: 13 01 01 41  	addi	sp, sp, 1040
80205a30: 82 80        	ret

0000000080205a32 <.LBB81_144>:
;     const kernel_size = kernel_end - kernel_start;
80205a32: 17 85 01 00  	auipc	a0, 24
80205a36: 13 05 e5 a4  	addi	a0, a0, -1458
80205a3a: 81 45        	mv	a1, zero
80205a3c: 97 a0 ff ff  	auipc	ra, 1048570
80205a40: e7 80 40 66  	jalr	1636(ra)
80205a44: 03 35 04 e1  	ld	a0, -496(s0)
80205a48: 23 38 a4 f2  	sd	a0, -208(s0)

0000000080205a4c <.LBB81_145>:
80205a4c: 17 25 06 00  	auipc	a0, 98
80205a50: 13 05 45 f7  	addi	a0, a0, -140
;     reserved_regions.len += 1;
80205a54: 0c 65        	ld	a1, 8(a0)
80205a56: 13 85 15 00  	addi	a0, a1, 1
80205a5a: 23 3c a4 d0  	sd	a0, -744(s0)
80205a5e: 63 7c b5 00  	bgeu	a0, a1, 0x80205a76 <.LBB81_146+0x12>
80205a62: 09 a0        	j	0x80205a64 <.LBB81_146>

0000000080205a64 <.LBB81_146>:
80205a64: 17 85 01 00  	auipc	a0, 24
80205a68: 13 05 c5 a1  	addi	a0, a0, -1508
80205a6c: 81 45        	mv	a1, zero
80205a6e: 97 a0 ff ff  	auipc	ra, 1048570
80205a72: e7 80 20 63  	jalr	1586(ra)
80205a76: 03 35 84 d1  	ld	a0, -744(s0)

0000000080205a7a <.LBB81_147>:
80205a7a: 97 25 06 00  	auipc	a1, 98
80205a7e: 93 85 65 f4  	addi	a1, a1, -186
;     reserved_regions.len += 1;
80205a82: 88 e5        	sd	a0, 8(a1)
;     kernel_region = &reserved_regions[reserved_regions.len - 1];
80205a84: 93 05 f5 ff  	addi	a1, a0, -1
80205a88: 23 38 b4 d0  	sd	a1, -752(s0)
80205a8c: 63 7c b5 00  	bgeu	a0, a1, 0x80205aa4 <.LBB81_148+0x12>
80205a90: 09 a0        	j	0x80205a92 <.LBB81_148>

0000000080205a92 <.LBB81_148>:
80205a92: 17 85 01 00  	auipc	a0, 24
80205a96: 13 05 e5 9e  	addi	a0, a0, -1554
80205a9a: 81 45        	mv	a1, zero
80205a9c: 97 a0 ff ff  	auipc	ra, 1048570
80205aa0: e7 80 40 60  	jalr	1540(ra)
80205aa4: 03 35 04 d1  	ld	a0, -752(s0)

0000000080205aa8 <.LBB81_149>:
80205aa8: 97 25 06 00  	auipc	a1, 98
80205aac: 93 85 85 f1  	addi	a1, a1, -232
;     kernel_region = &reserved_regions[reserved_regions.len - 1];
80205ab0: 8c 65        	ld	a1, 8(a1)
80205ab2: 63 6c b5 00  	bltu	a0, a1, 0x80205aca <.LBB81_150+0x12>
80205ab6: 09 a0        	j	0x80205ab8 <.LBB81_150>

0000000080205ab8 <.LBB81_150>:
80205ab8: 17 85 01 00  	auipc	a0, 24
80205abc: 13 05 85 84  	addi	a0, a0, -1976
80205ac0: 81 45        	mv	a1, zero
80205ac2: 97 a0 ff ff  	auipc	ra, 1048570
80205ac6: e7 80 e0 5d  	jalr	1502(ra)
80205aca: 83 35 04 d1  	ld	a1, -752(s0)

0000000080205ace <.LBB81_151>:
80205ace: 17 25 06 00  	auipc	a0, 98
80205ad2: 13 05 25 ef  	addi	a0, a0, -270
80205ad6: 08 61        	ld	a0, 0(a0)
80205ad8: 92 05        	slli	a1, a1, 4
80205ada: 33 06 b5 00  	add	a2, a0, a1

0000000080205ade <.LBB81_152>:
80205ade: 17 e5 66 00  	auipc	a0, 1646
80205ae2: 13 05 25 5a  	addi	a0, a0, 1442
80205ae6: 10 e1        	sd	a2, 0(a0)
;     kernel_region.address = kernel_start;
80205ae8: 83 35 04 f4  	ld	a1, -192(s0)
80205aec: 0c e2        	sd	a1, 0(a2)
;     kernel_region.page_count = kernel_size / kernel.arch.page_size;
80205aee: 08 61        	ld	a0, 0(a0)
80205af0: 21 05        	addi	a0, a0, 8
80205af2: 23 30 a4 d0  	sd	a0, -768(s0)
80205af6: 03 35 04 f3  	ld	a0, -208(s0)
80205afa: 23 34 a4 d0  	sd	a0, -760(s0)
80205afe: 81 45        	mv	a1, zero
80205b00: 05 45        	addi	a0, zero, 1
80205b02: 63 1c b5 00  	bne	a0, a1, 0x80205b1a <.LBB81_153+0x12>
80205b06: 09 a0        	j	0x80205b08 <.LBB81_153>

0000000080205b08 <.LBB81_153>:
80205b08: 17 75 01 00  	auipc	a0, 23
80205b0c: 13 05 85 7c  	addi	a0, a0, 1992
80205b10: 81 45        	mv	a1, zero
80205b12: 97 a0 ff ff  	auipc	ra, 1048570
80205b16: e7 80 e0 58  	jalr	1422(ra)
80205b1a: 83 35 04 d0  	ld	a1, -768(s0)
80205b1e: 03 35 84 d0  	ld	a0, -760(s0)
80205b22: 31 81        	srli	a0, a0, 12
80205b24: 88 e1        	sd	a0, 0(a1)
;     kernel.assert(@src(), kernel_size & (kernel.arch.page_size - 1) == 0);
80205b26: 03 35 04 f3  	ld	a0, -208(s0)
80205b2a: 85 65        	lui	a1, 1
80205b2c: fd 35        	addiw	a1, a1, -1
80205b2e: 6d 8d        	and	a0, a0, a1
80205b30: 93 35 15 00  	seqz	a1, a0

0000000080205b34 <.LBB81_154>:
80205b34: 17 85 01 00  	auipc	a0, 24
80205b38: 13 05 c5 dc  	addi	a0, a0, -564
80205b3c: 97 a0 ff ff  	auipc	ra, 1048570
80205b40: e7 80 00 6d  	jalr	1744(ra)

0000000080205b44 <.LBB81_155>:
80205b44: 17 25 06 00  	auipc	a0, 98
80205b48: 13 05 c5 e7  	addi	a0, a0, -388
;     reserved_regions.len += 1;
80205b4c: 0c 65        	ld	a1, 8(a0)
80205b4e: 13 85 15 00  	addi	a0, a1, 1
80205b52: 23 3c a4 ce  	sd	a0, -776(s0)
80205b56: 63 7c b5 00  	bgeu	a0, a1, 0x80205b6e <.LBB81_156+0x12>
80205b5a: 09 a0        	j	0x80205b5c <.LBB81_156>

0000000080205b5c <.LBB81_156>:
80205b5c: 17 85 01 00  	auipc	a0, 24
80205b60: 13 05 45 92  	addi	a0, a0, -1756
80205b64: 81 45        	mv	a1, zero
80205b66: 97 a0 ff ff  	auipc	ra, 1048570
80205b6a: e7 80 a0 53  	jalr	1338(ra)
80205b6e: 03 35 84 cf  	ld	a0, -776(s0)

0000000080205b72 <.LBB81_157>:
80205b72: 97 25 06 00  	auipc	a1, 98
80205b76: 93 85 e5 e4  	addi	a1, a1, -434
;     reserved_regions.len += 1;
80205b7a: 88 e5        	sd	a0, 8(a1)
;     device_tree_region = &reserved_regions[reserved_regions.len - 1];
80205b7c: 93 05 f5 ff  	addi	a1, a0, -1
80205b80: 23 38 b4 ce  	sd	a1, -784(s0)
80205b84: 63 7c b5 00  	bgeu	a0, a1, 0x80205b9c <.LBB81_158+0x12>
80205b88: 09 a0        	j	0x80205b8a <.LBB81_158>

0000000080205b8a <.LBB81_158>:
80205b8a: 17 85 01 00  	auipc	a0, 24
80205b8e: 13 05 65 8f  	addi	a0, a0, -1802
80205b92: 81 45        	mv	a1, zero
80205b94: 97 a0 ff ff  	auipc	ra, 1048570
80205b98: e7 80 c0 50  	jalr	1292(ra)
80205b9c: 03 35 04 cf  	ld	a0, -784(s0)

0000000080205ba0 <.LBB81_159>:
80205ba0: 97 25 06 00  	auipc	a1, 98
80205ba4: 93 85 05 e2  	addi	a1, a1, -480
;     device_tree_region = &reserved_regions[reserved_regions.len - 1];
80205ba8: 8c 65        	ld	a1, 8(a1)
80205baa: 63 6c b5 00  	bltu	a0, a1, 0x80205bc2 <.LBB81_160+0x12>
80205bae: 09 a0        	j	0x80205bb0 <.LBB81_160>

0000000080205bb0 <.LBB81_160>:
80205bb0: 17 75 01 00  	auipc	a0, 23
80205bb4: 13 05 05 75  	addi	a0, a0, 1872
80205bb8: 81 45        	mv	a1, zero
80205bba: 97 a0 ff ff  	auipc	ra, 1048570
80205bbe: e7 80 60 4e  	jalr	1254(ra)
80205bc2: 83 35 04 cf  	ld	a1, -784(s0)

0000000080205bc6 <.LBB81_161>:
80205bc6: 17 25 06 00  	auipc	a0, 98
80205bca: 13 05 a5 df  	addi	a0, a0, -518
80205bce: 08 61        	ld	a0, 0(a0)
80205bd0: 92 05        	slli	a1, a1, 4
80205bd2: b3 06 b5 00  	add	a3, a0, a1

0000000080205bd6 <.LBB81_162>:
80205bd6: 97 e5 66 00  	auipc	a1, 1646
80205bda: 93 85 25 4b  	addi	a1, a1, 1202
80205bde: 94 e1        	sd	a3, 0(a1)

0000000080205be0 <.LBB81_163>:
80205be0: 17 f5 01 00  	auipc	a0, 31
80205be4: 13 05 05 46  	addi	a0, a0, 1120
;     device_tree_region.address = kernel.arch.device_tree.base_address;
80205be8: 10 75        	ld	a2, 40(a0)
80205bea: 90 e2        	sd	a2, 0(a3)
;     device_tree_region.page_count = kernel.align_forward(kernel.arch.device_tree.header.size, kernel.arch.page_size) / kernel.arch.page_size;
80205bec: 8c 61        	ld	a1, 0(a1)
80205bee: a1 05        	addi	a1, a1, 8
80205bf0: 23 30 b4 ce  	sd	a1, -800(s0)
80205bf4: 03 65 45 00  	lwu	a0, 4(a0)
80205bf8: 23 3c a4 fa  	sd	a0, -72(s0)
80205bfc: 05 65        	lui	a0, 1
80205bfe: 23 38 a4 fa  	sd	a0, -80(s0)
80205c02: 7d 35        	addiw	a0, a0, -1
80205c04: 23 34 a4 ce  	sd	a0, -792(s0)
80205c08: 01 45        	mv	a0, zero
;     const mask: u64 = alignment - 1;
80205c0a: 63 0c a5 00  	beq	a0, a0, 0x80205c22 <.LBB81_164+0x12>
80205c0e: 09 a0        	j	0x80205c10 <.LBB81_164>

0000000080205c10 <.LBB81_164>:
80205c10: 17 85 01 00  	auipc	a0, 24
80205c14: 13 05 05 87  	addi	a0, a0, -1936
80205c18: 81 45        	mv	a1, zero
80205c1a: 97 a0 ff ff  	auipc	ra, 1048570
80205c1e: e7 80 60 48  	jalr	1158(ra)
80205c22: 03 35 84 ce  	ld	a0, -792(s0)
80205c26: 23 34 a4 fc  	sd	a0, -56(s0)
;     const result = (n + mask) & ~mask;
80205c2a: 83 35 84 fb  	ld	a1, -72(s0)
80205c2e: 2e 95        	add	a0, a0, a1
80205c30: 23 3c a4 cc  	sd	a0, -808(s0)
80205c34: 63 7c b5 00  	bgeu	a0, a1, 0x80205c4c <.LBB81_165+0x12>
80205c38: 09 a0        	j	0x80205c3a <.LBB81_165>

0000000080205c3a <.LBB81_165>:
80205c3a: 17 85 01 00  	auipc	a0, 24
80205c3e: 13 05 65 84  	addi	a0, a0, -1978
80205c42: 81 45        	mv	a1, zero
80205c44: 97 a0 ff ff  	auipc	ra, 1048570
80205c48: e7 80 c0 45  	jalr	1116(ra)
80205c4c: 03 35 84 cd  	ld	a0, -808(s0)
80205c50: 83 35 84 fc  	ld	a1, -56(s0)
80205c54: 93 c5 f5 ff  	not	a1, a1
80205c58: 6d 8d        	and	a0, a0, a1
80205c5a: 23 38 a4 cc  	sd	a0, -816(s0)
80205c5e: 23 30 a4 fc  	sd	a0, -64(s0)
;     return result;
80205c62: 23 38 a4 fc  	sd	a0, -48(s0)
80205c66: 81 45        	mv	a1, zero
80205c68: 05 45        	addi	a0, zero, 1
;     device_tree_region.page_count = kernel.align_forward(kernel.arch.device_tree.header.size, kernel.arch.page_size) / kernel.arch.page_size;
80205c6a: 63 1c b5 00  	bne	a0, a1, 0x80205c82 <.LBB81_166+0x12>
80205c6e: 09 a0        	j	0x80205c70 <.LBB81_166>

0000000080205c70 <.LBB81_166>:
80205c70: 17 75 01 00  	auipc	a0, 23
80205c74: 13 05 05 66  	addi	a0, a0, 1632
80205c78: 81 45        	mv	a1, zero
80205c7a: 97 a0 ff ff  	auipc	ra, 1048570
80205c7e: e7 80 60 42  	jalr	1062(ra)
80205c82: 83 35 04 ce  	ld	a1, -800(s0)
80205c86: 03 35 04 cd  	ld	a0, -816(s0)
80205c8a: 31 81        	srli	a0, a0, 12
80205c8c: 88 e1        	sd	a0, 0(a1)
;     log.debug("Reserved regions", .{});
80205c8e: 97 70 00 00  	auipc	ra, 7
80205c92: e7 80 20 54  	jalr	1346(ra)
80205c96: 01 45        	mv	a0, zero
;     for (reserved_regions) |reserved, i| {
80205c98: 23 34 a4 f2  	sd	a0, -216(s0)

0000000080205c9c <.LBB81_167>:
80205c9c: 17 25 06 00  	auipc	a0, 98
80205ca0: 13 05 45 d2  	addi	a0, a0, -732
;     for (reserved_regions) |reserved, i| {
80205ca4: 08 65        	ld	a0, 8(a0)
80205ca6: 23 30 a4 e0  	sd	a0, -512(s0)
80205caa: f5 b2        	j	0x80205696 <.LBB81_128+0x1e>

0000000080205cac <.LBB81_168>:
;         available_regions[i].descriptor = available;
80205cac: 17 75 01 00  	auipc	a0, 23
80205cb0: 13 05 45 65  	addi	a0, a0, 1620
80205cb4: 81 45        	mv	a1, zero
80205cb6: 97 a0 ff ff  	auipc	ra, 1048570
80205cba: e7 80 a0 3e  	jalr	1002(ra)
80205cbe: 03 35 84 de  	ld	a0, -536(s0)
80205cc2: 03 36 04 de  	ld	a2, -544(s0)

0000000080205cc6 <.LBB81_169>:
80205cc6: 97 25 06 00  	auipc	a1, 98
80205cca: 93 85 a5 10  	addi	a1, a1, 266
80205cce: 8c 61        	ld	a1, 0(a1)
80205cd0: 93 06 80 02  	addi	a3, zero, 40
80205cd4: 33 06 d6 02  	mul	a2, a2, a3
80205cd8: 2e 96        	add	a2, a2, a1
80205cda: 83 35 04 ef  	ld	a1, -272(s0)
80205cde: 0c e6        	sd	a1, 8(a2)
80205ce0: 83 35 84 ee  	ld	a1, -280(s0)
80205ce4: 0c e2        	sd	a1, 0(a2)
;     for (memory_map.available) |available, i| {
80205ce6: 05 05        	addi	a0, a0, 1
80205ce8: 23 3c a4 ee  	sd	a0, -264(s0)
80205cec: 3d b4        	j	0x8020571a <.LBB81_131+0x24>

0000000080205cee <.LBB81_170>:
;         const reserved_size = reserved.page_count * kernel.arch.page_size;
80205cee: 17 75 01 00  	auipc	a0, 23
80205cf2: 13 05 25 79  	addi	a0, a0, 1938
80205cf6: 81 45        	mv	a1, zero
80205cf8: 97 a0 ff ff  	auipc	ra, 1048570
80205cfc: e7 80 80 3a  	jalr	936(ra)
80205d00: 03 35 84 dc  	ld	a0, -568(s0)
80205d04: 23 34 a4 ec  	sd	a0, -312(s0)
80205d08: 01 45        	mv	a0, zero
;         for (available_regions) |*available, available_i| {
80205d0a: 23 30 a4 ec  	sd	a0, -320(s0)

0000000080205d0e <.LBB81_171>:
80205d0e: 17 25 06 00  	auipc	a0, 98
80205d12: 13 05 25 0c  	addi	a0, a0, 194
;         for (available_regions) |*available, available_i| {
80205d16: 08 65        	ld	a0, 8(a0)
80205d18: 23 3c a4 da  	sd	a0, -584(s0)
80205d1c: 71 bc        	j	0x802057b8 <.LBB81_134+0x2e>

0000000080205d1e <.LBB81_172>:
;             const available_size = available.descriptor.page_count * kernel.arch.page_size;
80205d1e: 17 75 01 00  	auipc	a0, 23
80205d22: 13 05 25 76  	addi	a0, a0, 1890
80205d26: 81 45        	mv	a1, zero
80205d28: 97 a0 ff ff  	auipc	ra, 1048570
80205d2c: e7 80 80 37  	jalr	888(ra)
80205d30: 03 35 04 db  	ld	a0, -592(s0)
80205d34: 23 38 a4 ea  	sd	a0, -336(s0)
;             if (reserved.address >= available.descriptor.address and reserved.address < available.descriptor.address + available_size) {
80205d38: 03 35 04 ed  	ld	a0, -304(s0)
80205d3c: 83 35 84 eb  	ld	a1, -328(s0)
80205d40: 8c 61        	ld	a1, 0(a1)
80205d42: 33 36 b5 00  	sltu	a2, a0, a1
80205d46: 13 46 16 00  	xori	a2, a2, 1
80205d4a: 23 3c c4 d8  	sd	a2, -616(s0)
80205d4e: e3 77 b5 aa  	bgeu	a0, a1, 0x802057fc <.LBB81_135+0x2e>
80205d52: e1 b4        	j	0x8020581a <.LBB81_135+0x4c>

0000000080205d54 <.LBB81_173>:
80205d54: 17 75 01 00  	auipc	a0, 23
80205d58: 13 05 c5 72  	addi	a0, a0, 1836
80205d5c: 81 45        	mv	a1, zero
80205d5e: 97 a0 ff ff  	auipc	ra, 1048570
80205d62: e7 80 20 34  	jalr	834(ra)
80205d66: 03 35 04 da  	ld	a0, -608(s0)
80205d6a: 83 35 84 da  	ld	a1, -600(s0)
80205d6e: 33 35 b5 00  	sltu	a0, a0, a1
80205d72: 23 3c a4 d8  	sd	a0, -616(s0)
80205d76: 55 b4        	j	0x8020581a <.LBB81_135+0x4c>

0000000080205d78 <.LBB81_174>:
;                 const end_matches = reserved.address + reserved_size == available.descriptor.address + available_size;
80205d78: 17 75 01 00  	auipc	a0, 23
80205d7c: 13 05 85 70  	addi	a0, a0, 1800
80205d80: 81 45        	mv	a1, zero
80205d82: 97 a0 ff ff  	auipc	ra, 1048570
80205d86: e7 80 e0 31  	jalr	798(ra)
80205d8a: 03 35 84 eb  	ld	a0, -328(s0)
80205d8e: 0c 61        	ld	a1, 0(a0)
80205d90: 03 35 04 eb  	ld	a0, -336(s0)
80205d94: 2e 95        	add	a0, a0, a1
80205d96: 23 34 a4 cc  	sd	a0, -824(s0)
80205d9a: 63 7c b5 00  	bgeu	a0, a1, 0x80205db2 <.LBB81_175+0x12>
80205d9e: 09 a0        	j	0x80205da0 <.LBB81_175>

0000000080205da0 <.LBB81_175>:
80205da0: 17 75 01 00  	auipc	a0, 23
80205da4: 13 05 05 6e  	addi	a0, a0, 1760
80205da8: 81 45        	mv	a1, zero
80205daa: 97 a0 ff ff  	auipc	ra, 1048570
80205dae: e7 80 60 2f  	jalr	758(ra)
80205db2: 03 35 04 d9  	ld	a0, -624(s0)
80205db6: 83 35 84 cc  	ld	a1, -824(s0)
80205dba: 2d 8d        	xor	a0, a0, a1
80205dbc: 13 35 15 00  	seqz	a0, a0
80205dc0: 23 07 a4 ea  	sb	a0, -338(s0)
;                 if (!start_matches and !end_matches) {
80205dc4: 03 05 f4 ea  	lb	a0, -337(s0)
80205dc8: 13 46 15 00  	xori	a2, a0, 1
80205dcc: 13 75 16 00  	andi	a0, a2, 1
80205dd0: 81 45        	mv	a1, zero
80205dd2: 23 34 c4 d8  	sd	a2, -632(s0)
80205dd6: e3 1a b5 a6  	bne	a0, a1, 0x8020584a <.LBB81_135+0x7c>
80205dda: bd bc        	j	0x80205858 <.LBB81_135+0x8a>

0000000080205ddc <.LBB81_176>:
;                     kernel.assert(@src(), available_i == available_regions.len - 1);
80205ddc: 17 75 01 00  	auipc	a0, 23
80205de0: 13 05 45 6a  	addi	a0, a0, 1700
80205de4: 81 45        	mv	a1, zero
80205de6: 97 a0 ff ff  	auipc	ra, 1048570
80205dea: e7 80 a0 2b  	jalr	698(ra)
80205dee: 03 35 04 d7  	ld	a0, -656(s0)
80205df2: 83 35 84 d7  	ld	a1, -648(s0)
80205df6: 2d 8d        	xor	a0, a0, a1
80205df8: 93 35 15 00  	seqz	a1, a0

0000000080205dfc <.LBB81_177>:
80205dfc: 17 85 01 00  	auipc	a0, 24
80205e00: 13 05 45 b6  	addi	a0, a0, -1180
80205e04: 97 a0 ff ff  	auipc	ra, 1048570
80205e08: e7 80 80 40  	jalr	1032(ra)
;                     const first = available;
80205e0c: 03 35 84 eb  	ld	a0, -328(s0)
80205e10: 23 30 a4 ea  	sd	a0, -352(s0)

0000000080205e14 <.LBB81_178>:
80205e14: 17 25 06 00  	auipc	a0, 98
80205e18: 13 05 c5 fb  	addi	a0, a0, -68
;                     available_regions.len += 1;
80205e1c: 0c 65        	ld	a1, 8(a0)
80205e1e: 13 85 15 00  	addi	a0, a1, 1
80205e22: 23 30 a4 cc  	sd	a0, -832(s0)
80205e26: 63 7c b5 00  	bgeu	a0, a1, 0x80205e3e <.LBB81_179+0x12>
80205e2a: 09 a0        	j	0x80205e2c <.LBB81_179>

0000000080205e2c <.LBB81_179>:
80205e2c: 17 75 01 00  	auipc	a0, 23
80205e30: 13 05 45 65  	addi	a0, a0, 1620
80205e34: 81 45        	mv	a1, zero
80205e36: 97 a0 ff ff  	auipc	ra, 1048570
80205e3a: e7 80 a0 26  	jalr	618(ra)
80205e3e: 03 35 04 cc  	ld	a0, -832(s0)

0000000080205e42 <.LBB81_180>:
80205e42: 97 25 06 00  	auipc	a1, 98
80205e46: 93 85 e5 f8  	addi	a1, a1, -114
;                     available_regions.len += 1;
80205e4a: 88 e5        	sd	a0, 8(a1)
;                     const second = &available_regions[available_i + 1];
80205e4c: 83 35 04 ec  	ld	a1, -320(s0)
80205e50: 13 85 15 00  	addi	a0, a1, 1
80205e54: 23 3c a4 ca  	sd	a0, -840(s0)
80205e58: 63 7c b5 00  	bgeu	a0, a1, 0x80205e70 <.LBB81_181+0x12>
80205e5c: 09 a0        	j	0x80205e5e <.LBB81_181>

0000000080205e5e <.LBB81_181>:
80205e5e: 17 75 01 00  	auipc	a0, 23
80205e62: 13 05 25 62  	addi	a0, a0, 1570
80205e66: 81 45        	mv	a1, zero
80205e68: 97 a0 ff ff  	auipc	ra, 1048570
80205e6c: e7 80 80 23  	jalr	568(ra)
80205e70: 03 35 84 cb  	ld	a0, -840(s0)

0000000080205e74 <.LBB81_182>:
80205e74: 97 25 06 00  	auipc	a1, 98
80205e78: 93 85 c5 f5  	addi	a1, a1, -164
;                     const second = &available_regions[available_i + 1];
80205e7c: 8c 65        	ld	a1, 8(a1)
80205e7e: 63 6c b5 00  	bltu	a0, a1, 0x80205e96 <.LBB81_183+0x12>
80205e82: 09 a0        	j	0x80205e84 <.LBB81_183>

0000000080205e84 <.LBB81_183>:
80205e84: 17 75 01 00  	auipc	a0, 23
80205e88: 13 05 c5 47  	addi	a0, a0, 1148
80205e8c: 81 45        	mv	a1, zero
80205e8e: 97 a0 ff ff  	auipc	ra, 1048570
80205e92: e7 80 20 21  	jalr	530(ra)
80205e96: 83 35 84 cb  	ld	a1, -840(s0)

0000000080205e9a <.LBB81_184>:
80205e9a: 17 25 06 00  	auipc	a0, 98
80205e9e: 13 05 65 f3  	addi	a0, a0, -202
80205ea2: 08 61        	ld	a0, 0(a0)
80205ea4: 13 06 80 02  	addi	a2, zero, 40
80205ea8: b3 85 c5 02  	mul	a1, a1, a2
80205eac: 2e 95        	add	a0, a0, a1
80205eae: 23 34 a4 ca  	sd	a0, -856(s0)
80205eb2: 23 3c a4 e8  	sd	a0, -360(s0)
;                     const original_size = available_size;
80205eb6: 03 35 04 eb  	ld	a0, -336(s0)
80205eba: 23 38 a4 e8  	sd	a0, -368(s0)
;                     second.descriptor.address = reserved.address + reserved_size;
80205ebe: 83 35 04 ed  	ld	a1, -304(s0)
80205ec2: 03 35 84 ec  	ld	a0, -312(s0)
80205ec6: 2e 95        	add	a0, a0, a1
80205ec8: 23 38 a4 ca  	sd	a0, -848(s0)
80205ecc: 63 7c b5 00  	bgeu	a0, a1, 0x80205ee4 <.LBB81_185+0x12>
80205ed0: 09 a0        	j	0x80205ed2 <.LBB81_185>

0000000080205ed2 <.LBB81_185>:
80205ed2: 17 75 01 00  	auipc	a0, 23
80205ed6: 13 05 e5 5a  	addi	a0, a0, 1454
80205eda: 81 45        	mv	a1, zero
80205edc: 97 a0 ff ff  	auipc	ra, 1048570
80205ee0: e7 80 40 1c  	jalr	452(ra)
80205ee4: 03 35 04 cb  	ld	a0, -848(s0)
80205ee8: 83 35 84 ca  	ld	a1, -856(s0)
80205eec: 88 e1        	sd	a0, 0(a1)
;                     const original_end_address = first.descriptor.address + original_size;
80205eee: 03 35 04 ea  	ld	a0, -352(s0)
80205ef2: 0c 61        	ld	a1, 0(a0)
80205ef4: 03 35 04 e9  	ld	a0, -368(s0)
80205ef8: 2e 95        	add	a0, a0, a1
80205efa: 23 30 a4 ca  	sd	a0, -864(s0)
80205efe: 63 7c b5 00  	bgeu	a0, a1, 0x80205f16 <.LBB81_186+0x12>
80205f02: 09 a0        	j	0x80205f04 <.LBB81_186>

0000000080205f04 <.LBB81_186>:
80205f04: 17 75 01 00  	auipc	a0, 23
80205f08: 13 05 c5 57  	addi	a0, a0, 1404
80205f0c: 81 45        	mv	a1, zero
80205f0e: 97 a0 ff ff  	auipc	ra, 1048570
80205f12: e7 80 20 19  	jalr	402(ra)
80205f16: 03 35 04 ca  	ld	a0, -864(s0)
80205f1a: 23 34 a4 e8  	sd	a0, -376(s0)
;                     second.descriptor.page_count = (original_end_address - second.descriptor.address) / kernel.arch.page_size;
80205f1e: 83 35 84 e9  	ld	a1, -360(s0)
80205f22: 13 86 85 00  	addi	a2, a1, 8
80205f26: 23 38 c4 c8  	sd	a2, -880(s0)
80205f2a: 8c 61        	ld	a1, 0(a1)
80205f2c: b3 05 b5 40  	sub	a1, a0, a1
80205f30: 23 3c b4 c8  	sd	a1, -872(s0)
80205f34: 63 7c b5 00  	bgeu	a0, a1, 0x80205f4c <.LBB81_187+0x12>
80205f38: 09 a0        	j	0x80205f3a <.LBB81_187>

0000000080205f3a <.LBB81_187>:
80205f3a: 17 75 01 00  	auipc	a0, 23
80205f3e: 13 05 65 54  	addi	a0, a0, 1350
80205f42: 81 45        	mv	a1, zero
80205f44: 97 a0 ff ff  	auipc	ra, 1048570
80205f48: e7 80 c0 15  	jalr	348(ra)
80205f4c: 81 45        	mv	a1, zero
80205f4e: 05 45        	addi	a0, zero, 1
;                     second.descriptor.page_count = (original_end_address - second.descriptor.address) / kernel.arch.page_size;
80205f50: 63 1c b5 00  	bne	a0, a1, 0x80205f68 <.LBB81_188+0x12>
80205f54: 09 a0        	j	0x80205f56 <.LBB81_188>

0000000080205f56 <.LBB81_188>:
80205f56: 17 75 01 00  	auipc	a0, 23
80205f5a: 13 05 a5 37  	addi	a0, a0, 890
80205f5e: 81 45        	mv	a1, zero
80205f60: 97 a0 ff ff  	auipc	ra, 1048570
80205f64: e7 80 00 14  	jalr	320(ra)
80205f68: 83 35 04 c9  	ld	a1, -880(s0)
80205f6c: 03 35 84 c9  	ld	a0, -872(s0)
80205f70: 31 81        	srli	a0, a0, 12
80205f72: 88 e1        	sd	a0, 0(a1)
;                     first.descriptor.page_count -= second.descriptor.page_count + reserved.page_count;
80205f74: 03 35 04 ea  	ld	a0, -352(s0)
80205f78: 93 05 85 00  	addi	a1, a0, 8
80205f7c: 23 3c b4 c6  	sd	a1, -904(s0)
80205f80: 08 65        	ld	a0, 8(a0)
80205f82: 23 30 a4 c8  	sd	a0, -896(s0)
80205f86: 03 35 84 e9  	ld	a0, -360(s0)
80205f8a: 0c 65        	ld	a1, 8(a0)
80205f8c: 03 35 84 ed  	ld	a0, -296(s0)
80205f90: 2e 95        	add	a0, a0, a1
80205f92: 23 34 a4 c8  	sd	a0, -888(s0)
80205f96: 63 7c b5 00  	bgeu	a0, a1, 0x80205fae <.LBB81_189+0x12>
80205f9a: 09 a0        	j	0x80205f9c <.LBB81_189>

0000000080205f9c <.LBB81_189>:
80205f9c: 17 75 01 00  	auipc	a0, 23
80205fa0: 13 05 45 4e  	addi	a0, a0, 1252
80205fa4: 81 45        	mv	a1, zero
80205fa6: 97 a0 ff ff  	auipc	ra, 1048570
80205faa: e7 80 a0 0f  	jalr	250(ra)
80205fae: 03 35 04 c8  	ld	a0, -896(s0)
80205fb2: 83 35 84 c8  	ld	a1, -888(s0)
80205fb6: b3 05 b5 40  	sub	a1, a0, a1
80205fba: 23 38 b4 c6  	sd	a1, -912(s0)
80205fbe: 63 7c b5 00  	bgeu	a0, a1, 0x80205fd6 <.LBB81_190+0x12>
80205fc2: 09 a0        	j	0x80205fc4 <.LBB81_190>

0000000080205fc4 <.LBB81_190>:
80205fc4: 17 75 01 00  	auipc	a0, 23
80205fc8: 13 05 c5 4b  	addi	a0, a0, 1212
80205fcc: 81 45        	mv	a1, zero
80205fce: 97 a0 ff ff  	auipc	ra, 1048570
80205fd2: e7 80 20 0d  	jalr	210(ra)
80205fd6: 03 35 04 c7  	ld	a0, -912(s0)
80205fda: 83 35 84 c7  	ld	a1, -904(s0)
80205fde: 88 e1        	sd	a0, 0(a1)
;                 if (!start_matches and !end_matches) {
80205fe0: a9 b2        	j	0x8020592a <.LBB81_139+0x38>

0000000080205fe2 <.LBB81_191>:
;                     kernel.assert(@src(), available_i == available_regions.len - 1);
80205fe2: 17 75 01 00  	auipc	a0, 23
80205fe6: 13 05 e5 49  	addi	a0, a0, 1182
80205fea: 81 45        	mv	a1, zero
80205fec: 97 a0 ff ff  	auipc	ra, 1048570
80205ff0: e7 80 40 0b  	jalr	180(ra)
80205ff4: 03 35 04 d6  	ld	a0, -672(s0)
80205ff8: 83 35 84 d6  	ld	a1, -664(s0)
80205ffc: 2d 8d        	xor	a0, a0, a1
80205ffe: 93 35 15 00  	seqz	a1, a0

0000000080206002 <.LBB81_192>:
80206002: 17 85 01 00  	auipc	a0, 24
80206006: 13 05 65 98  	addi	a0, a0, -1658
8020600a: 97 a0 ff ff  	auipc	ra, 1048570
8020600e: e7 80 20 20  	jalr	514(ra)

0000000080206012 <.LBB81_193>:
80206012: 17 25 06 00  	auipc	a0, 98
80206016: 13 05 e5 db  	addi	a0, a0, -578
;                     available_regions.len -= 1;
8020601a: 08 65        	ld	a0, 8(a0)
8020601c: 93 05 f5 ff  	addi	a1, a0, -1
80206020: 23 34 b4 c6  	sd	a1, -920(s0)
80206024: 63 7c b5 00  	bgeu	a0, a1, 0x8020603c <.LBB81_194+0x12>
80206028: 09 a0        	j	0x8020602a <.LBB81_194>

000000008020602a <.LBB81_194>:
8020602a: 17 75 01 00  	auipc	a0, 23
8020602e: 13 05 65 45  	addi	a0, a0, 1110
80206032: 81 45        	mv	a1, zero
80206034: 97 a0 ff ff  	auipc	ra, 1048570
80206038: e7 80 c0 06  	jalr	108(ra)
8020603c: 03 35 84 c6  	ld	a0, -920(s0)

0000000080206040 <.LBB81_195>:
80206040: 97 25 06 00  	auipc	a1, 98
80206044: 93 85 05 d9  	addi	a1, a1, -624
;                     available_regions.len -= 1;
80206048: 88 e5        	sd	a0, 8(a1)
;                 } else if (start_matches and end_matches) {
8020604a: f9 b8        	j	0x80205928 <.LBB81_139+0x36>

000000008020604c <.LBB81_196>:
;                     available.descriptor.address = reserved.address + reserved_size;
8020604c: 17 75 01 00  	auipc	a0, 23
80206050: 13 05 45 43  	addi	a0, a0, 1076
80206054: 81 45        	mv	a1, zero
80206056: 97 a0 ff ff  	auipc	ra, 1048570
8020605a: e7 80 a0 04  	jalr	74(ra)
8020605e: 03 35 84 d5  	ld	a0, -680(s0)
80206062: 83 35 04 d5  	ld	a1, -688(s0)
80206066: 88 e1        	sd	a0, 0(a1)
;                     available.descriptor.page_count -= reserved.page_count;
80206068: 03 35 84 eb  	ld	a0, -328(s0)
8020606c: 93 05 85 00  	addi	a1, a0, 8
80206070: 23 3c b4 c4  	sd	a1, -936(s0)
80206074: 08 65        	ld	a0, 8(a0)
80206076: 83 35 84 ed  	ld	a1, -296(s0)
8020607a: b3 05 b5 40  	sub	a1, a0, a1
8020607e: 23 30 b4 c6  	sd	a1, -928(s0)
80206082: 63 7c b5 00  	bgeu	a0, a1, 0x8020609a <.LBB81_197+0x12>
80206086: 09 a0        	j	0x80206088 <.LBB81_197>

0000000080206088 <.LBB81_197>:
80206088: 17 75 01 00  	auipc	a0, 23
8020608c: 13 05 85 3f  	addi	a0, a0, 1016
80206090: 81 45        	mv	a1, zero
80206092: 97 a0 ff ff  	auipc	ra, 1048570
80206096: e7 80 e0 00  	jalr	14(ra)
8020609a: 03 35 04 c6  	ld	a0, -928(s0)
8020609e: 83 35 84 c5  	ld	a1, -936(s0)
802060a2: 88 e1        	sd	a0, 0(a1)
;                 } else if (start_matches) {
802060a4: 49 b0        	j	0x80205926 <.LBB81_139+0x34>

00000000802060a6 <.LBB81_198>:
;         log.debug("[{}] (0x{x}, {} -- 0x{x})", .{ i, region.descriptor.address, region.descriptor.page_count, region.descriptor.page_count * kernel.arch.page_size });
802060a6: 17 75 01 00  	auipc	a0, 23
802060aa: 13 05 a5 3d  	addi	a0, a0, 986
802060ae: 81 45        	mv	a1, zero
802060b0: 97 a0 ff ff  	auipc	ra, 1048570
802060b4: e7 80 00 ff  	jalr	-16(ra)
802060b8: 03 35 84 d3  	ld	a0, -712(s0)
802060bc: 23 38 a4 e4  	sd	a0, -432(s0)
802060c0: 13 05 84 e3  	addi	a0, s0, -456
802060c4: 97 70 00 00  	auipc	ra, 7
802060c8: e7 80 60 16  	jalr	358(ra)
802060cc: 03 35 04 d4  	ld	a0, -704(s0)
;     for (available_regions) |region, i| {
802060d0: 05 05        	addi	a0, a0, 1
802060d2: 23 30 a4 e8  	sd	a0, -384(s0)
802060d6: 79 b0        	j	0x80205964 <.LBB81_140+0x10>

00000000802060d8 <.LBB81_199>:
;         const bitset_len = (region.descriptor.page_count / @bitSizeOf(u64)) + @boolToInt(region.descriptor.page_count % @bitSizeOf(u64) != 0);
802060d8: 17 75 01 00  	auipc	a0, 23
802060dc: 13 05 85 1f  	addi	a0, a0, 504
802060e0: 81 45        	mv	a1, zero
802060e2: 97 a0 ff ff  	auipc	ra, 1048570
802060e6: e7 80 e0 fb  	jalr	-66(ra)
802060ea: 03 35 04 d2  	ld	a0, -736(s0)
802060ee: 19 81        	srli	a0, a0, 6
802060f0: 23 34 a4 c4  	sd	a0, -952(s0)
802060f4: 03 35 84 e2  	ld	a0, -472(s0)
802060f8: 08 65        	ld	a0, 8(a0)
802060fa: 23 38 a4 c4  	sd	a0, -944(s0)
802060fe: 01 45        	mv	a0, zero
80206100: 63 12 a5 02  	bne	a0, a0, 0x80206124 <.LBB81_200>
80206104: 09 a0        	j	0x80206106 <.LBB81_199+0x2e>
80206106: 03 35 84 c4  	ld	a0, -952(s0)
8020610a: 83 35 04 c5  	ld	a1, -944(s0)
8020610e: 93 f5 f5 03  	andi	a1, a1, 63
80206112: b3 35 b0 00  	snez	a1, a1
80206116: 2e 95        	add	a0, a0, a1
80206118: 23 30 a4 c4  	sd	a0, -960(s0)
8020611c: 01 45        	mv	a0, zero
8020611e: 63 1c a5 00  	bne	a0, a0, 0x80206136 <.LBB81_201>
80206122: 1d a0        	j	0x80206148 <.LBB81_201+0x12>

0000000080206124 <.LBB81_200>:
80206124: 17 75 01 00  	auipc	a0, 23
80206128: 13 05 c5 1b  	addi	a0, a0, 444
8020612c: 81 45        	mv	a1, zero
8020612e: 97 a0 ff ff  	auipc	ra, 1048570
80206132: e7 80 20 f7  	jalr	-142(ra)

0000000080206136 <.LBB81_201>:
80206136: 17 75 01 00  	auipc	a0, 23
8020613a: 13 05 a5 34  	addi	a0, a0, 842
8020613e: 81 45        	mv	a1, zero
80206140: 97 a0 ff ff  	auipc	ra, 1048570
80206144: e7 80 00 f6  	jalr	-160(ra)
80206148: 03 35 04 c4  	ld	a0, -960(s0)
8020614c: 23 30 a4 e2  	sd	a0, -480(s0)
;         const bytes_to_allocate = bitset_len * @sizeOf(u64);
80206150: 0e 05        	slli	a0, a0, 3
80206152: 23 3c a4 c2  	sd	a0, -968(s0)
80206156: 81 45        	mv	a1, zero
80206158: 05 45        	addi	a0, zero, 1
8020615a: 63 1c b5 00  	bne	a0, a1, 0x80206172 <.LBB81_202+0x12>
8020615e: 09 a0        	j	0x80206160 <.LBB81_202>

0000000080206160 <.LBB81_202>:
80206160: 17 75 01 00  	auipc	a0, 23
80206164: 13 05 05 32  	addi	a0, a0, 800
80206168: 81 45        	mv	a1, zero
8020616a: 97 a0 ff ff  	auipc	ra, 1048570
8020616e: e7 80 60 f3  	jalr	-202(ra)
80206172: 03 35 84 c3  	ld	a0, -968(s0)
80206176: 23 3c a4 e0  	sd	a0, -488(s0)

000000008020617a <.LBB81_203>:
;         bitset_byte_count = kernel.align_forward(bitset_byte_count, kernel.arch.page_size);
8020617a: 17 e5 66 00  	auipc	a0, 1646
8020617e: 13 05 65 f1  	addi	a0, a0, -234
80206182: 08 61        	ld	a0, 0(a0)
80206184: 23 38 a4 f8  	sd	a0, -112(s0)
80206188: 05 65        	lui	a0, 1
8020618a: 23 34 a4 f8  	sd	a0, -120(s0)
8020618e: 7d 35        	addiw	a0, a0, -1
80206190: 23 38 a4 c2  	sd	a0, -976(s0)
80206194: 01 45        	mv	a0, zero
;     const mask: u64 = alignment - 1;
80206196: 63 0c a5 00  	beq	a0, a0, 0x802061ae <.LBB81_204+0x12>
8020619a: 09 a0        	j	0x8020619c <.LBB81_204>

000000008020619c <.LBB81_204>:
8020619c: 17 75 01 00  	auipc	a0, 23
802061a0: 13 05 45 2e  	addi	a0, a0, 740
802061a4: 81 45        	mv	a1, zero
802061a6: 97 a0 ff ff  	auipc	ra, 1048570
802061aa: e7 80 a0 ef  	jalr	-262(ra)
802061ae: 03 35 04 c3  	ld	a0, -976(s0)
802061b2: 23 30 a4 fa  	sd	a0, -96(s0)
;     const result = (n + mask) & ~mask;
802061b6: 83 35 04 f9  	ld	a1, -112(s0)
802061ba: 2e 95        	add	a0, a0, a1
802061bc: 23 34 a4 c2  	sd	a0, -984(s0)
802061c0: 63 7c b5 00  	bgeu	a0, a1, 0x802061d8 <.LBB81_205+0x12>
802061c4: 09 a0        	j	0x802061c6 <.LBB81_205>

00000000802061c6 <.LBB81_205>:
802061c6: 17 75 01 00  	auipc	a0, 23
802061ca: 13 05 a5 2b  	addi	a0, a0, 698
802061ce: 81 45        	mv	a1, zero
802061d0: 97 a0 ff ff  	auipc	ra, 1048570
802061d4: e7 80 00 ed  	jalr	-304(ra)
802061d8: 03 35 84 c2  	ld	a0, -984(s0)
802061dc: 83 35 04 fa  	ld	a1, -96(s0)
802061e0: 93 c5 f5 ff  	not	a1, a1
802061e4: 6d 8d        	and	a0, a0, a1
802061e6: 23 3c a4 c0  	sd	a0, -1000(s0)
802061ea: 23 3c a4 f8  	sd	a0, -104(s0)
;     return result;
802061ee: 23 34 a4 fa  	sd	a0, -88(s0)

00000000802061f2 <.LBB81_206>:
;         bitset_byte_count = kernel.align_forward(bitset_byte_count, kernel.arch.page_size);
802061f2: 97 e5 66 00  	auipc	a1, 1646
802061f6: 93 85 e5 e9  	addi	a1, a1, -354
802061fa: 88 e1        	sd	a0, 0(a1)
;         region.bitset.ptr = @ptrCast([*]u64, @alignCast(kernel.arch.page_size, &bitset_memory[bitset_byte_count]));
802061fc: 83 35 84 e2  	ld	a1, -472(s0)
80206200: e1 05        	addi	a1, a1, 24
80206202: 23 30 b4 c2  	sd	a1, -992(s0)
80206206: 35 81        	srli	a0, a0, 13
80206208: 93 05 50 20  	addi	a1, zero, 517
8020620c: 63 6c b5 00  	bltu	a0, a1, 0x80206224 <.LBB81_207+0x12>
80206210: 09 a0        	j	0x80206212 <.LBB81_207>

0000000080206212 <.LBB81_207>:
80206212: 17 75 01 00  	auipc	a0, 23
80206216: 13 05 e5 0e  	addi	a0, a0, 238
8020621a: 81 45        	mv	a1, zero
8020621c: 97 a0 ff ff  	auipc	ra, 1048570
80206220: e7 80 40 e8  	jalr	-380(ra)
80206224: 03 35 84 c1  	ld	a0, -1000(s0)

0000000080206228 <.LBB81_208>:
80206228: 97 35 06 00  	auipc	a1, 99
8020622c: 93 85 85 dd  	addi	a1, a1, -552
80206230: 2e 95        	add	a0, a0, a1
80206232: 23 38 a4 c0  	sd	a0, -1008(s0)
80206236: 85 65        	lui	a1, 1
80206238: fd 35        	addiw	a1, a1, -1
8020623a: 6d 8d        	and	a0, a0, a1
8020623c: 81 45        	mv	a1, zero
8020623e: 63 1c b5 00  	bne	a0, a1, 0x80206256 <.LBB81_209>
80206242: 09 a0        	j	0x80206244 <.LBB81_208+0x1c>
80206244: 03 35 04 c1  	ld	a0, -1008(s0)
80206248: aa 85        	mv	a1, a0
8020624a: 23 34 b4 c0  	sd	a1, -1016(s0)
8020624e: 81 45        	mv	a1, zero
80206250: 63 15 b5 02  	bne	a0, a1, 0x8020627a <.LBB81_210+0x12>
80206254: 11 a8        	j	0x80206268 <.LBB81_210>

0000000080206256 <.LBB81_209>:
80206256: 17 75 01 00  	auipc	a0, 23
8020625a: 13 05 25 3f  	addi	a0, a0, 1010
8020625e: 81 45        	mv	a1, zero
80206260: 97 a0 ff ff  	auipc	ra, 1048570
80206264: e7 80 00 e4  	jalr	-448(ra)

0000000080206268 <.LBB81_210>:
80206268: 17 75 01 00  	auipc	a0, 23
8020626c: 13 05 05 29  	addi	a0, a0, 656
80206270: 81 45        	mv	a1, zero
80206272: 97 a0 ff ff  	auipc	ra, 1048570
80206276: e7 80 e0 e2  	jalr	-466(ra)
8020627a: 03 35 84 c0  	ld	a0, -1016(s0)
8020627e: 83 35 04 c2  	ld	a1, -992(s0)
80206282: 88 e1        	sd	a0, 0(a1)
;         region.bitset.len = bytes_to_allocate / @sizeOf(u64);
80206284: 03 35 84 e2  	ld	a0, -472(s0)
80206288: 13 05 05 02  	addi	a0, a0, 32
8020628c: 23 3c a4 be  	sd	a0, -1032(s0)
80206290: 03 35 84 e1  	ld	a0, -488(s0)
80206294: 23 30 a4 c0  	sd	a0, -1024(s0)
80206298: 81 45        	mv	a1, zero
8020629a: 05 45        	addi	a0, zero, 1
8020629c: 63 1c b5 00  	bne	a0, a1, 0x802062b4 <.LBB81_211+0x12>
802062a0: 09 a0        	j	0x802062a2 <.LBB81_211>

00000000802062a2 <.LBB81_211>:
802062a2: 17 75 01 00  	auipc	a0, 23
802062a6: 13 05 e5 02  	addi	a0, a0, 46
802062aa: 81 45        	mv	a1, zero
802062ac: 97 a0 ff ff  	auipc	ra, 1048570
802062b0: e7 80 40 df  	jalr	-524(ra)
802062b4: 83 35 84 bf  	ld	a1, -1032(s0)
802062b8: 03 35 04 c0  	ld	a0, -1024(s0)
802062bc: 0d 81        	srli	a0, a0, 3
802062be: 88 e1        	sd	a0, 0(a1)

00000000802062c0 <.LBB81_212>:
;         bitset_byte_count += bytes_to_allocate;
802062c0: 17 e5 66 00  	auipc	a0, 1646
802062c4: 13 05 05 dd  	addi	a0, a0, -560
802062c8: 0c 61        	ld	a1, 0(a0)
802062ca: 03 35 84 e1  	ld	a0, -488(s0)
802062ce: 2e 95        	add	a0, a0, a1
802062d0: 23 38 a4 be  	sd	a0, -1040(s0)
802062d4: 63 7c b5 00  	bgeu	a0, a1, 0x802062ec <.LBB81_213+0x12>
802062d8: 09 a0        	j	0x802062da <.LBB81_213>

00000000802062da <.LBB81_213>:
802062da: 17 75 01 00  	auipc	a0, 23
802062de: 13 05 65 1a  	addi	a0, a0, 422
802062e2: 81 45        	mv	a1, zero
802062e4: 97 a0 ff ff  	auipc	ra, 1048570
802062e8: e7 80 c0 db  	jalr	-580(ra)
802062ec: 03 35 84 d2  	ld	a0, -728(s0)
802062f0: 83 35 04 bf  	ld	a1, -1040(s0)

00000000802062f4 <.LBB81_214>:
802062f4: 17 e6 66 00  	auipc	a2, 1646
802062f8: 13 06 c6 d9  	addi	a2, a2, -612
802062fc: 0c e2        	sd	a1, 0(a2)
;     for (available_regions) |*region| {
802062fe: 05 05        	addi	a0, a0, 1
80206300: 23 38 a4 e2  	sd	a0, -464(s0)
80206304: 6f f0 4f ee  	j	0x802059e8 <.LBB81_142+0x10>

0000000080206308 <arch.riscv64.virtual.init>:
; pub fn init() void {
80206308: 09 71        	addi	sp, sp, -384
8020630a: 86 fe        	sd	ra, 376(sp)
8020630c: a2 fa        	sd	s0, 368(sp)
8020630e: 00 03        	addi	s0, sp, 384
80206310: 3d 45        	addi	a0, zero, 15
80206312: 72 05        	slli	a0, a0, 28

0000000080206314 <.LBB82_30>:
80206314: 97 d5 46 00  	auipc	a1, 1133
80206318: 93 85 c5 ce  	addi	a1, a1, -788
;     kernel.address_space.range.start = 0xf000_0000;
8020631c: 88 e1        	sd	a0, 0(a1)
8020631e: 37 05 00 10  	lui	a0, 65536
;     kernel.address_space.range.end = 0x1000_0000;
80206322: 88 e5        	sd	a0, 8(a1)
80206324: 13 05 84 f9  	addi	a0, s0, -104
80206328: 85 45        	addi	a1, zero, 1
;     const new_page = Physical.allocate1(1) orelse @panic("Failed to allocate kernel pagetable. Out of memory");
8020632a: 97 70 00 00  	auipc	ra, 7
8020632e: e7 80 00 f3  	jalr	-208(ra)
80206332: 03 45 04 fa  	lbu	a0, -96(s0)
80206336: 81 45        	mv	a1, zero
80206338: 63 1c b5 00  	bne	a0, a1, 0x80206350 <.LBB82_31+0x12>
8020633c: 09 a0        	j	0x8020633e <.LBB82_31>

000000008020633e <.LBB82_31>:
8020633e: 17 75 01 00  	auipc	a0, 23
80206342: 13 05 25 67  	addi	a0, a0, 1650
80206346: 81 45        	mv	a1, zero
80206348: 97 a0 ff ff  	auipc	ra, 1048570
8020634c: e7 80 80 d5  	jalr	-680(ra)
80206350: 03 35 84 f9  	ld	a0, -104(s0)
80206354: 23 38 a4 f8  	sd	a0, -112(s0)
80206358: 09 a0        	j	0x8020635a <.LBB82_31+0x1c>
;     kernel.zero_a_page(new_page);
8020635a: 03 35 04 f9  	ld	a0, -112(s0)
8020635e: 23 34 a4 ee  	sd	a0, -280(s0)
80206362: 23 34 a4 fa  	sd	a0, -88(s0)
80206366: 23 30 a4 fe  	sd	a0, -32(s0)
8020636a: 05 65        	lui	a0, 1
8020636c: 23 3c a4 fc  	sd	a0, -40(s0)
80206370: 7d 35        	addiw	a0, a0, -1
80206372: 23 38 a4 ee  	sd	a0, -272(s0)
80206376: 01 45        	mv	a0, zero
;     return n & (alignment - 1) == 0;
80206378: 63 0c a5 00  	beq	a0, a0, 0x80206390 <.LBB82_32+0x12>
8020637c: 09 a0        	j	0x8020637e <.LBB82_32>

000000008020637e <.LBB82_32>:
8020637e: 17 75 01 00  	auipc	a0, 23
80206382: 13 05 25 10  	addi	a0, a0, 258
80206386: 81 45        	mv	a1, zero
80206388: 97 a0 ff ff  	auipc	ra, 1048570
8020638c: e7 80 80 d1  	jalr	-744(ra)
80206390: 03 35 84 ee  	ld	a0, -280(s0)
80206394: 83 35 04 ef  	ld	a1, -272(s0)
80206398: 6d 8d        	and	a0, a0, a1
8020639a: 93 35 15 00  	seqz	a1, a0
8020639e: a3 07 b4 fe  	sb	a1, -17(s0)

00000000802063a2 <.LBB82_33>:
;     kernel.assert(@src(), is_aligned(page_address, kernel.arch.page_size));
802063a2: 17 85 01 00  	auipc	a0, 24
802063a6: 13 05 e5 2e  	addi	a0, a0, 750
802063aa: 97 a0 ff ff  	auipc	ra, 1048570
802063ae: e7 80 20 e6  	jalr	-414(ra)
;     zero(@intToPtr([*]u8, page_address)[0..kernel.arch.page_size]);
802063b2: 03 35 84 fa  	ld	a0, -88(s0)
802063b6: 23 30 a4 ee  	sd	a0, -288(s0)
802063ba: 81 45        	mv	a1, zero
802063bc: 63 1c b5 00  	bne	a0, a1, 0x802063d4 <.LBB82_34+0x12>
802063c0: 09 a0        	j	0x802063c2 <.LBB82_34>

00000000802063c2 <.LBB82_34>:
802063c2: 17 75 01 00  	auipc	a0, 23
802063c6: 13 05 65 13  	addi	a0, a0, 310
802063ca: 81 45        	mv	a1, zero
802063cc: 97 a0 ff ff  	auipc	ra, 1048570
802063d0: e7 80 40 cd  	jalr	-812(ra)
802063d4: 03 35 04 ee  	ld	a0, -288(s0)
802063d8: 23 30 a4 fc  	sd	a0, -64(s0)
802063dc: 23 38 a4 fa  	sd	a0, -80(s0)
802063e0: 05 65        	lui	a0, 1
802063e2: 23 3c a4 ec  	sd	a0, -296(s0)
802063e6: 23 3c a4 fa  	sd	a0, -72(s0)
802063ea: 01 45        	mv	a0, zero
;     for (bytes) |*byte| byte.* = 0;
802063ec: 23 38 a4 fc  	sd	a0, -48(s0)
802063f0: 09 a0        	j	0x802063f2 <.LBB82_34+0x30>
802063f2: 83 35 84 ed  	ld	a1, -296(s0)
802063f6: 03 35 04 fd  	ld	a0, -48(s0)
802063fa: 23 38 a4 ec  	sd	a0, -304(s0)
802063fe: 63 72 b5 02  	bgeu	a0, a1, 0x80206422 <.LBB82_34+0x60>
80206402: 09 a0        	j	0x80206404 <.LBB82_34+0x42>
80206404: 03 35 04 ed  	ld	a0, -304(s0)
80206408: 83 35 04 fb  	ld	a1, -80(s0)
8020640c: 33 86 a5 00  	add	a2, a1, a0
80206410: 23 34 c4 fc  	sd	a2, -56(s0)
80206414: 81 45        	mv	a1, zero
80206416: 23 00 b6 00  	sb	a1, 0(a2)
8020641a: 05 05        	addi	a0, a0, 1
8020641c: 23 38 a4 fc  	sd	a0, -48(s0)
80206420: c9 bf        	j	0x802063f2 <.LBB82_34+0x30>
;     kernel_init_pagetable = @intToPtr([*]usize, new_page);
80206422: 03 35 04 f9  	ld	a0, -112(s0)
80206426: 23 34 a4 ec  	sd	a0, -312(s0)
8020642a: 81 45        	mv	a1, zero
8020642c: 63 09 b5 1a  	beq	a0, a1, 0x802065de <.LBB82_43>
80206430: c1 a2        	j	0x802065f0 <.LBB82_43+0x12>
;     for (kernel.arch.Physical.available_regions) |region| {
80206432: 83 35 84 eb  	ld	a1, -328(s0)
80206436: 03 35 84 f8  	ld	a0, -120(s0)
8020643a: 23 30 a4 ec  	sd	a0, -320(s0)
8020643e: 63 7f b5 04  	bgeu	a0, a1, 0x8020649c <.LBB82_36+0x22>
80206442: 09 a0        	j	0x80206444 <.LBB82_34+0x82>
80206444: 83 35 04 ec  	ld	a1, -320(s0)

0000000080206448 <.LBB82_35>:
80206448: 17 25 06 00  	auipc	a0, 98
8020644c: 13 05 85 98  	addi	a0, a0, -1656
80206450: 08 61        	ld	a0, 0(a0)
80206452: 13 06 80 02  	addi	a2, zero, 40
80206456: b3 85 c5 02  	mul	a1, a1, a2
8020645a: 2e 95        	add	a0, a0, a1
8020645c: 0c 61        	ld	a1, 0(a0)
8020645e: 23 30 b4 f6  	sd	a1, -160(s0)
80206462: 10 65        	ld	a2, 8(a0)
80206464: 23 34 c4 f6  	sd	a2, -152(s0)
80206468: 14 69        	ld	a3, 16(a0)
8020646a: 23 38 d4 f6  	sd	a3, -144(s0)
8020646e: 14 6d        	ld	a3, 24(a0)
80206470: 23 3c d4 f6  	sd	a3, -136(s0)
80206474: 08 71        	ld	a0, 32(a0)
80206476: 23 30 a4 f8  	sd	a0, -128(s0)

000000008020647a <.LBB82_36>:
;         directMap(kernel_init_pagetable, region.descriptor.address, region.descriptor.page_count,
8020647a: 17 e5 66 00  	auipc	a0, 1646
8020647e: 13 05 e5 bb  	addi	a0, a0, -1090
80206482: 08 61        	ld	a0, 0(a0)
80206484: 99 46        	addi	a3, zero, 6
80206486: 01 47        	mv	a4, zero
80206488: 97 00 00 00  	auipc	ra, 0
8020648c: e7 80 20 3e  	jalr	994(ra)
80206490: 03 35 04 ec  	ld	a0, -320(s0)
;     for (kernel.arch.Physical.available_regions) |region| {
80206494: 05 05        	addi	a0, a0, 1
80206496: 23 34 a4 f8  	sd	a0, -120(s0)
8020649a: 61 bf        	j	0x80206432 <.LBB82_34+0x70>
8020649c: 01 45        	mv	a0, zero
;     for (kernel.arch.Physical.reserved_regions) |region| {
8020649e: 23 3c a4 f4  	sd	a0, -168(s0)

00000000802064a2 <.LBB82_37>:
802064a2: 17 15 06 00  	auipc	a0, 97
802064a6: 13 05 e5 51  	addi	a0, a0, 1310
;     for (kernel.arch.Physical.reserved_regions) |region| {
802064aa: 08 65        	ld	a0, 8(a0)
802064ac: 23 38 a4 ea  	sd	a0, -336(s0)
802064b0: 09 a0        	j	0x802064b2 <.LBB82_37+0x10>
802064b2: 83 35 04 eb  	ld	a1, -336(s0)
802064b6: 03 35 84 f5  	ld	a0, -168(s0)
802064ba: 23 34 a4 ea  	sd	a0, -344(s0)
802064be: 63 71 b5 08  	bgeu	a0, a1, 0x80206540 <.LBB82_40+0x2c>
802064c2: 09 a0        	j	0x802064c4 <.LBB82_37+0x22>
802064c4: 83 35 84 ea  	ld	a1, -344(s0)

00000000802064c8 <.LBB82_38>:
802064c8: 17 15 06 00  	auipc	a0, 97
802064cc: 13 05 85 4f  	addi	a0, a0, 1272
802064d0: 08 61        	ld	a0, 0(a0)
802064d2: 92 05        	slli	a1, a1, 4
802064d4: 2e 95        	add	a0, a0, a1
802064d6: 0c 65        	ld	a1, 8(a0)
802064d8: 23 38 b4 f4  	sd	a1, -176(s0)
802064dc: 0c 61        	ld	a1, 0(a0)
802064de: 23 34 b4 f4  	sd	a1, -184(s0)

00000000802064e2 <.LBB82_39>:
;         if (kernel.arch.Physical.kernel_region.address == region.address) continue;
802064e2: 17 e5 66 00  	auipc	a0, 1646
802064e6: 13 05 e5 b9  	addi	a0, a0, -1122
802064ea: 08 61        	ld	a0, 0(a0)
802064ec: 08 61        	ld	a0, 0(a0)
802064ee: 63 14 b5 00  	bne	a0, a1, 0x802064f6 <.LBB82_39+0x14>
802064f2: 09 a0        	j	0x802064f4 <.LBB82_39+0x12>
802064f4: 81 a0        	j	0x80206534 <.LBB82_40+0x20>
802064f6: 09 a0        	j	0x802064f8 <.LBB82_39+0x16>
;         log.debug("mapping region (0x{x}, {})", .{ region.address, region.page_count });
802064f8: 03 35 84 f4  	ld	a0, -184(s0)
802064fc: 23 3c a4 f2  	sd	a0, -200(s0)
80206500: 03 35 04 f5  	ld	a0, -176(s0)
80206504: 23 30 a4 f4  	sd	a0, -192(s0)
80206508: 13 05 84 f3  	addi	a0, s0, -200
8020650c: 97 d0 00 00  	auipc	ra, 13
80206510: e7 80 40 b7  	jalr	-1164(ra)

0000000080206514 <.LBB82_40>:
;             kernel_init_pagetable,
80206514: 17 e5 66 00  	auipc	a0, 1646
80206518: 13 05 45 b2  	addi	a0, a0, -1244
8020651c: 08 61        	ld	a0, 0(a0)
;             region.address,
8020651e: 83 35 84 f4  	ld	a1, -184(s0)
;             region.page_count,
80206522: 03 36 04 f5  	ld	a2, -176(s0)
80206526: 89 46        	addi	a3, zero, 2
80206528: 01 47        	mv	a4, zero
;         directMap(
8020652a: 97 00 00 00  	auipc	ra, 0
8020652e: e7 80 00 34  	jalr	832(ra)
;     for (kernel.arch.Physical.reserved_regions) |region| {
80206532: 09 a0        	j	0x80206534 <.LBB82_40+0x20>
80206534: 03 35 84 ea  	ld	a0, -344(s0)
80206538: 05 05        	addi	a0, a0, 1
8020653a: 23 3c a4 f4  	sd	a0, -168(s0)
8020653e: 95 bf        	j	0x802064b2 <.LBB82_37+0x10>
;     enablePaging();
80206540: 97 d0 00 00  	auipc	ra, 13
80206544: e7 80 40 b6  	jalr	-1180(ra)
;     log.debug("enabled paging", .{});
80206548: 97 d0 00 00  	auipc	ra, 13
8020654c: e7 80 20 b9  	jalr	-1134(ra)
80206550: 01 45        	mv	a0, zero
;     var total_allocated_page_count: u64 = 0;
80206552: 23 38 a4 f2  	sd	a0, -208(s0)
;     for (Physical.available_regions) |region| {
80206556: 23 34 a4 f2  	sd	a0, -216(s0)

000000008020655a <.LBB82_41>:
8020655a: 17 25 06 00  	auipc	a0, 98
8020655e: 13 05 65 87  	addi	a0, a0, -1930
;     for (Physical.available_regions) |region| {
80206562: 08 65        	ld	a0, 8(a0)
80206564: 23 30 a4 ea  	sd	a0, -352(s0)
80206568: 09 a0        	j	0x8020656a <.LBB82_41+0x10>
8020656a: 83 35 04 ea  	ld	a1, -352(s0)
8020656e: 03 35 84 f2  	ld	a0, -216(s0)
80206572: 23 3c a4 e8  	sd	a0, -360(s0)
80206576: 63 76 b5 04  	bgeu	a0, a1, 0x802065c2 <.LBB82_42+0x42>
8020657a: 09 a0        	j	0x8020657c <.LBB82_41+0x22>
8020657c: 83 35 84 e9  	ld	a1, -360(s0)

0000000080206580 <.LBB82_42>:
80206580: 17 25 06 00  	auipc	a0, 98
80206584: 13 05 05 85  	addi	a0, a0, -1968
80206588: 08 61        	ld	a0, 0(a0)
8020658a: 13 06 80 02  	addi	a2, zero, 40
8020658e: b3 85 c5 02  	mul	a1, a1, a2
80206592: aa 95        	add	a1, a1, a0
80206594: 88 61        	ld	a0, 0(a1)
80206596: 23 30 a4 f0  	sd	a0, -256(s0)
8020659a: 88 65        	ld	a0, 8(a1)
8020659c: 23 34 a4 f0  	sd	a0, -248(s0)
802065a0: 88 69        	ld	a0, 16(a1)
802065a2: 23 38 a4 f0  	sd	a0, -240(s0)
802065a6: 90 6d        	ld	a2, 24(a1)
802065a8: 23 3c c4 f0  	sd	a2, -232(s0)
802065ac: 8c 71        	ld	a1, 32(a1)
802065ae: 23 30 b4 f2  	sd	a1, -224(s0)
;         total_allocated_page_count += region.allocated_page_count;
802065b2: 83 35 04 f3  	ld	a1, -208(s0)
802065b6: 2e 95        	add	a0, a0, a1
802065b8: 23 38 a4 e8  	sd	a0, -368(s0)
802065bc: 63 66 b5 0c  	bltu	a0, a1, 0x80206688 <.LBB82_48>
802065c0: e9 a8        	j	0x8020669a <.LBB82_48+0x12>
;     log.debug("Total page count allocated for mapping: {}", .{total_allocated_page_count});
802065c2: 03 35 04 f3  	ld	a0, -208(s0)
802065c6: 23 3c a4 ee  	sd	a0, -264(s0)
802065ca: 13 05 84 ef  	addi	a0, s0, -264
802065ce: 97 d0 00 00  	auipc	ra, 13
802065d2: e7 80 40 b2  	jalr	-1244(ra)
; pub fn init() void {
802065d6: 56 74        	ld	s0, 368(sp)
802065d8: f6 70        	ld	ra, 376(sp)
802065da: 19 61        	addi	sp, sp, 384
802065dc: 82 80        	ret

00000000802065de <.LBB82_43>:
;     kernel_init_pagetable = @intToPtr([*]usize, new_page);
802065de: 17 75 01 00  	auipc	a0, 23
802065e2: 13 05 a5 f1  	addi	a0, a0, -230
802065e6: 81 45        	mv	a1, zero
802065e8: 97 a0 ff ff  	auipc	ra, 1048570
802065ec: e7 80 80 ab  	jalr	-1352(ra)
802065f0: 03 35 84 ec  	ld	a0, -312(s0)
802065f4: 1d 89        	andi	a0, a0, 7
802065f6: 81 45        	mv	a1, zero
802065f8: 63 0c b5 00  	beq	a0, a1, 0x80206610 <.LBB82_44+0x12>
802065fc: 09 a0        	j	0x802065fe <.LBB82_44>

00000000802065fe <.LBB82_44>:
802065fe: 17 75 01 00  	auipc	a0, 23
80206602: 13 05 a5 04  	addi	a0, a0, 74
80206606: 81 45        	mv	a1, zero
80206608: 97 a0 ff ff  	auipc	ra, 1048570
8020660c: e7 80 80 a9  	jalr	-1384(ra)
80206610: 03 35 84 ec  	ld	a0, -312(s0)

0000000080206614 <.LBB82_45>:
80206614: 97 e5 66 00  	auipc	a1, 1646
80206618: 93 85 45 a2  	addi	a1, a1, -1500
8020661c: 23 30 b4 e8  	sd	a1, -384(s0)
80206620: 88 e1        	sd	a0, 0(a1)
;     log.debug("mapping UART", .{});
80206622: 97 d0 00 00  	auipc	ra, 13
80206626: e7 80 e0 a2  	jalr	-1490(ra)
8020662a: 03 35 04 e8  	ld	a0, -384(s0)
;         kernel_init_pagetable,
8020662e: 08 61        	ld	a0, 0(a0)
80206630: b7 05 00 10  	lui	a1, 65536
80206634: 05 46        	addi	a2, zero, 1
80206636: 99 46        	addi	a3, zero, 6
80206638: 01 47        	mv	a4, zero
;     directMap(
8020663a: 23 34 e4 e8  	sd	a4, -376(s0)
8020663e: 97 00 00 00  	auipc	ra, 0
80206642: e7 80 c0 22  	jalr	556(ra)
;     log.debug("mapping kernel", .{});
80206646: 97 d0 00 00  	auipc	ra, 13
8020664a: e7 80 20 a2  	jalr	-1502(ra)
8020664e: 03 35 04 e8  	ld	a0, -384(s0)
80206652: 03 37 84 e8  	ld	a4, -376(s0)
;     directMap(kernel_init_pagetable, kernel.arch.Physical.kernel_region.address, kernel.arch.Physical.kernel_region.page_count,
80206656: 08 61        	ld	a0, 0(a0)

0000000080206658 <.LBB82_46>:
80206658: 97 e5 66 00  	auipc	a1, 1646
8020665c: 93 85 85 a2  	addi	a1, a1, -1496
80206660: 90 61        	ld	a2, 0(a1)
80206662: 0c 62        	ld	a1, 0(a2)
80206664: 10 66        	ld	a2, 8(a2)
80206666: b9 46        	addi	a3, zero, 14
80206668: 97 00 00 00  	auipc	ra, 0
8020666c: e7 80 20 20  	jalr	514(ra)
80206670: 03 35 84 e8  	ld	a0, -376(s0)
;     for (kernel.arch.Physical.available_regions) |region| {
80206674: 23 34 a4 f8  	sd	a0, -120(s0)

0000000080206678 <.LBB82_47>:
80206678: 17 15 06 00  	auipc	a0, 97
8020667c: 13 05 85 75  	addi	a0, a0, 1880
;     for (kernel.arch.Physical.available_regions) |region| {
80206680: 08 65        	ld	a0, 8(a0)
80206682: 23 3c a4 ea  	sd	a0, -328(s0)
80206686: 75 b3        	j	0x80206432 <.LBB82_34+0x70>

0000000080206688 <.LBB82_48>:
;         total_allocated_page_count += region.allocated_page_count;
80206688: 17 75 01 00  	auipc	a0, 23
8020668c: 13 05 85 df  	addi	a0, a0, -520
80206690: 81 45        	mv	a1, zero
80206692: 97 a0 ff ff  	auipc	ra, 1048570
80206696: e7 80 e0 a0  	jalr	-1522(ra)
8020669a: 03 35 84 e9  	ld	a0, -360(s0)
8020669e: 83 35 04 e9  	ld	a1, -368(s0)
802066a2: 23 38 b4 f2  	sd	a1, -208(s0)
;     for (Physical.available_regions) |region| {
802066a6: 05 05        	addi	a0, a0, 1
802066a8: 23 34 a4 f2  	sd	a0, -216(s0)
802066ac: 7d bd        	j	0x8020656a <.LBB82_41+0x10>

00000000802066ae <std.log.scoped(Interrupts_init).debug>:
;         pub fn debug(
802066ae: 41 11        	addi	sp, sp, -16
;             log(.debug, scope, format, args);
802066b0: 06 e4        	sd	ra, 8(sp)
802066b2: 22 e0        	sd	s0, 0(sp)
802066b4: 00 08        	addi	s0, sp, 16
802066b6: 97 d0 00 00  	auipc	ra, 13
802066ba: e7 80 a0 a5  	jalr	-1446(ra)
;         ) void {
802066be: 02 64        	ld	s0, 0(sp)
802066c0: a2 60        	ld	ra, 8(sp)
802066c2: 41 01        	addi	sp, sp, 16
802066c4: 82 80        	ret

00000000802066c6 <arch.riscv64.device_tree.find_property.18>:
; pub fn find_property(self: *@This(), main_node: []const u8, property_name: []const u8, comptime search_type: SearchType, maybe_intermediate_nodes: ?[]const []const u8, comptime maybe_intermediate_search_types: ?[]const SearchType) ?StructureBlock.Parser.Property {
802066c6: 11 71        	addi	sp, sp, -256
802066c8: 86 fd        	sd	ra, 248(sp)
802066ca: a2 f9        	sd	s0, 240(sp)
802066cc: 00 02        	addi	s0, sp, 256
802066ce: 23 30 e4 f2  	sd	a4, -224(s0)
802066d2: 23 34 d4 f2  	sd	a3, -216(s0)
802066d6: 23 30 c4 f4  	sd	a2, -192(s0)
802066da: 23 38 a4 f2  	sd	a0, -208(s0)
802066de: 23 38 b4 f4  	sd	a1, -176(s0)
802066e2: 13 05 04 fd  	addi	a0, s0, -48
;     var parser = self.get_node_finding_parser();
802066e6: 23 3c a4 f2  	sd	a0, -200(s0)
802066ea: 97 60 00 00  	auipc	ra, 6
802066ee: e7 80 80 d3  	jalr	-712(ra)
802066f2: 83 35 84 f3  	ld	a1, -200(s0)
802066f6: 03 36 04 f4  	ld	a2, -192(s0)
802066fa: 13 05 84 fb  	addi	a0, s0, -72
802066fe: 81 46        	mv	a3, zero
;     if (parser.find_node_from_current_offset(main_node, search_type)) |_| {
80206700: 23 34 d4 f4  	sd	a3, -184(s0)
80206704: 97 60 00 00  	auipc	ra, 6
80206708: e7 80 80 e2  	jalr	-472(ra)
8020670c: 83 35 84 f4  	ld	a1, -184(s0)
80206710: 03 45 84 fc  	lbu	a0, -56(s0)
80206714: 63 0a b5 0c  	beq	a0, a1, 0x802067e8 <.LBB84_12+0x48>
80206718: 09 a0        	j	0x8020671a <arch.riscv64.device_tree.find_property.18+0x54>
8020671a: 03 35 04 f2  	ld	a0, -224(s0)
8020671e: 83 35 04 fc  	ld	a1, -64(s0)
80206722: 23 38 b4 fa  	sd	a1, -80(s0)
80206726: 83 35 84 fb  	ld	a1, -72(s0)
8020672a: 23 34 b4 fa  	sd	a1, -88(s0)
;         if (maybe_intermediate_nodes) |intermediate_nodes| {
8020672e: 03 45 05 01  	lbu	a0, 16(a0)
80206732: 81 45        	mv	a1, zero
80206734: 63 0c b5 08  	beq	a0, a1, 0x802067cc <.LBB84_12+0x2c>
80206738: 09 a0        	j	0x8020673a <arch.riscv64.device_tree.find_property.18+0x74>
8020673a: 03 35 04 f2  	ld	a0, -224(s0)
8020673e: 0c 65        	ld	a1, 8(a0)
80206740: 23 3c b4 f0  	sd	a1, -232(s0)
80206744: 23 30 b4 fa  	sd	a1, -96(s0)
80206748: 08 61        	ld	a0, 0(a0)
8020674a: 23 3c a4 f8  	sd	a0, -104(s0)
8020674e: 01 45        	mv	a0, zero
;                 var last_node = false;
80206750: a3 0b a4 f8  	sb	a0, -105(s0)
;                 for (intermediate_nodes) |node, i| {
80206754: 23 34 a4 f8  	sd	a0, -120(s0)
80206758: 09 a0        	j	0x8020675a <arch.riscv64.device_tree.find_property.18+0x94>
8020675a: 83 35 84 f1  	ld	a1, -232(s0)
8020675e: 03 35 84 f8  	ld	a0, -120(s0)
80206762: 23 38 a4 f0  	sd	a0, -240(s0)
80206766: 63 7b b5 02  	bgeu	a0, a1, 0x8020679c <.LBB84_11+0x10>
8020676a: 09 a0        	j	0x8020676c <arch.riscv64.device_tree.find_property.18+0xa6>
8020676c: 83 35 04 f1  	ld	a1, -240(s0)
80206770: 03 35 84 f9  	ld	a0, -104(s0)
80206774: 92 05        	slli	a1, a1, 4
80206776: 2e 95        	add	a0, a0, a1
80206778: 0c 61        	ld	a1, 0(a0)
8020677a: 23 3c b4 f6  	sd	a1, -136(s0)
8020677e: 08 65        	ld	a0, 8(a0)
80206780: 23 30 a4 f8  	sd	a0, -128(s0)
;                     const intermediate_search_type = intermediate_search_types[i];
80206784: 03 35 84 f8  	ld	a0, -120(s0)
80206788: 23 34 a4 f0  	sd	a0, -248(s0)

000000008020678c <.LBB84_11>:
8020678c: 97 75 01 00  	auipc	a1, 23
80206790: 93 85 c5 23  	addi	a1, a1, 572
;                     const intermediate_search_type = intermediate_search_types[i];
80206794: 8c 65        	ld	a1, 8(a1)
80206796: 63 67 b5 08  	bltu	a0, a1, 0x80206824 <.LBB84_14+0x12>
8020679a: a5 a8        	j	0x80206812 <.LBB84_14>
;                 kernel.assert(@src(), last_node);
8020679c: 83 05 74 f9  	lb	a1, -105(s0)

00000000802067a0 <.LBB84_12>:
802067a0: 17 75 01 00  	auipc	a0, 23
802067a4: 13 05 85 23  	addi	a0, a0, 568
802067a8: 97 a0 ff ff  	auipc	ra, 1048570
802067ac: e7 80 40 a6  	jalr	-1436(ra)
802067b0: 03 35 04 f3  	ld	a0, -208(s0)
802067b4: 03 36 84 f2  	ld	a2, -216(s0)
802067b8: 93 05 04 fd  	addi	a1, s0, -48
;                 return parser.find_property_in_current_node(property_name);
802067bc: 97 60 00 00  	auipc	ra, 6
802067c0: e7 80 e0 f3  	jalr	-194(ra)
802067c4: 4e 74        	ld	s0, 240(sp)
802067c6: ee 70        	ld	ra, 248(sp)
802067c8: 11 61        	addi	sp, sp, 256
802067ca: 82 80        	ret
;             return parser.find_property_in_current_node(property_name);
802067cc: 03 36 84 f2  	ld	a2, -216(s0)
802067d0: 03 35 04 f3  	ld	a0, -208(s0)
802067d4: 93 05 04 fd  	addi	a1, s0, -48
802067d8: 97 60 00 00  	auipc	ra, 6
802067dc: e7 80 20 f2  	jalr	-222(ra)
802067e0: 4e 74        	ld	s0, 240(sp)
802067e2: ee 70        	ld	ra, 248(sp)
802067e4: 11 61        	addi	sp, sp, 256
802067e6: 82 80        	ret
;     if (parser.find_node_from_current_offset(main_node, search_type)) |_| {
802067e8: 09 a0        	j	0x802067ea <.LBB84_12+0x4a>
802067ea: 83 35 04 f3  	ld	a1, -208(s0)

00000000802067ee <.LBB84_13>:
802067ee: 17 75 01 00  	auipc	a0, 23
802067f2: 13 05 25 21  	addi	a0, a0, 530
;     return null;
802067f6: 10 71        	ld	a2, 32(a0)
802067f8: 90 f1        	sd	a2, 32(a1)
802067fa: 10 6d        	ld	a2, 24(a0)
802067fc: 90 ed        	sd	a2, 24(a1)
802067fe: 10 69        	ld	a2, 16(a0)
80206800: 90 e9        	sd	a2, 16(a1)
80206802: 10 65        	ld	a2, 8(a0)
80206804: 90 e5        	sd	a2, 8(a1)
80206806: 08 61        	ld	a0, 0(a0)
80206808: 88 e1        	sd	a0, 0(a1)
8020680a: 4e 74        	ld	s0, 240(sp)
8020680c: ee 70        	ld	ra, 248(sp)
8020680e: 11 61        	addi	sp, sp, 256
80206810: 82 80        	ret

0000000080206812 <.LBB84_14>:
;                     const intermediate_search_type = intermediate_search_types[i];
80206812: 17 75 01 00  	auipc	a0, 23
80206816: 13 05 e5 ae  	addi	a0, a0, -1298
8020681a: 81 45        	mv	a1, zero
8020681c: 97 a0 ff ff  	auipc	ra, 1048570
80206820: e7 80 40 88  	jalr	-1916(ra)
80206824: 83 35 84 f0  	ld	a1, -248(s0)

0000000080206828 <.LBB84_15>:
80206828: 17 75 01 00  	auipc	a0, 23
8020682c: 13 05 05 1a  	addi	a0, a0, 416
80206830: 08 61        	ld	a0, 0(a0)
80206832: 2e 95        	add	a0, a0, a1
80206834: 83 46 05 00  	lbu	a3, 0(a0)
80206838: 13 f5 36 00  	andi	a0, a3, 3
8020683c: a3 0b a4 f6  	sb	a0, -137(s0)
80206840: 13 05 84 f5  	addi	a0, s0, -168
80206844: 93 05 04 fd  	addi	a1, s0, -48
80206848: 13 06 84 f7  	addi	a2, s0, -136
;                     last_node = parser.find_node_from_current_offset(node, intermediate_search_type) != null;
8020684c: 97 60 00 00  	auipc	ra, 6
80206850: e7 80 00 ce  	jalr	-800(ra)
80206854: 03 35 04 f1  	ld	a0, -240(s0)
80206858: 83 45 84 f6  	lbu	a1, -152(s0)
8020685c: 85 89        	andi	a1, a1, 1
8020685e: a3 0b b4 f8  	sb	a1, -105(s0)
;                 for (intermediate_nodes) |node, i| {
80206862: 05 05        	addi	a0, a0, 1
80206864: 23 34 a4 f8  	sd	a0, -120(s0)
80206868: cd bd        	j	0x8020675a <arch.riscv64.device_tree.find_property.18+0x94>

000000008020686a <arch.riscv64.virtual.directMap>:
; pub fn directMap(pagetable: pagetable_t, start: usize, page_count: usize, permission: usize, allow_remap: bool) void {
8020686a: 39 71        	addi	sp, sp, -64
8020686c: 06 fc        	sd	ra, 56(sp)
8020686e: 22 f8        	sd	s0, 48(sp)
80206870: 80 00        	addi	s0, sp, 64
80206872: ba 87        	mv	a5, a4
80206874: 36 87        	mv	a4, a3
80206876: b2 86        	mv	a3, a2
80206878: 2e 86        	mv	a2, a1
8020687a: 23 34 a4 fe  	sd	a0, -24(s0)
8020687e: 23 30 c4 fe  	sd	a2, -32(s0)
80206882: 23 3c d4 fc  	sd	a3, -40(s0)
80206886: 23 38 e4 fc  	sd	a4, -48(s0)
8020688a: 93 f5 17 00  	andi	a1, a5, 1
8020688e: a3 07 b4 fc  	sb	a1, -49(s0)
;     map_pages(pagetable, start, start, page_count, permission, allow_remap);
80206892: b2 85        	mv	a1, a2
80206894: 97 d0 00 00  	auipc	ra, 13
80206898: e7 80 40 97  	jalr	-1676(ra)
; pub fn directMap(pagetable: pagetable_t, start: usize, page_count: usize, permission: usize, allow_remap: bool) void {
8020689c: 42 74        	ld	s0, 48(sp)
8020689e: e2 70        	ld	ra, 56(sp)
802068a0: 21 61        	addi	sp, sp, 64
802068a2: 82 80        	ret

00000000802068a4 <std.log.scoped(Interrupts_init).debug.20>:
;         pub fn debug(
802068a4: 41 11        	addi	sp, sp, -16
;             log(.debug, scope, format, args);
802068a6: 06 e4        	sd	ra, 8(sp)
802068a8: 22 e0        	sd	s0, 0(sp)
802068aa: 00 08        	addi	s0, sp, 16
802068ac: 97 d0 00 00  	auipc	ra, 13
802068b0: e7 80 40 c4  	jalr	-956(ra)
;         ) void {
802068b4: 02 64        	ld	s0, 0(sp)
802068b6: a2 60        	ld	ra, 8(sp)
802068b8: 41 01        	addi	sp, sp, 16
802068ba: 82 80        	ret

00000000802068bc <std.log.scoped(RISCV64).debug.21>:
;         pub fn debug(
802068bc: 01 11        	addi	sp, sp, -32
;             log(.debug, scope, format, args);
802068be: 06 ec        	sd	ra, 24(sp)
802068c0: 22 e8        	sd	s0, 16(sp)
802068c2: 00 10        	addi	s0, sp, 32
802068c4: 0c 61        	ld	a1, 0(a0)
802068c6: 23 34 b4 fe  	sd	a1, -24(s0)
802068ca: 97 d0 00 00  	auipc	ra, 13
802068ce: e7 80 60 c5  	jalr	-938(ra)
;         ) void {
802068d2: 42 64        	ld	s0, 16(sp)
802068d4: e2 60        	ld	ra, 24(sp)
802068d6: 05 61        	addi	sp, sp, 32
802068d8: 82 80        	ret

00000000802068da <arch.riscv64.virtual.map>:
; pub fn map(start: u64, page_count: u64) void {
802068da: 01 11        	addi	sp, sp, -32
802068dc: 06 ec        	sd	ra, 24(sp)
802068de: 22 e8        	sd	s0, 16(sp)
802068e0: 00 10        	addi	s0, sp, 32
802068e2: 2e 86        	mv	a2, a1
802068e4: aa 85        	mv	a1, a0
802068e6: 23 34 b4 fe  	sd	a1, -24(s0)
802068ea: 23 30 c4 fe  	sd	a2, -32(s0)

00000000802068ee <.LBB88_1>:
;     directMap(kernel_init_pagetable, start, page_count, arch.PTE_READ | arch.PTE_WRITE, false);
802068ee: 17 d5 66 00  	auipc	a0, 1645
802068f2: 13 05 a5 74  	addi	a0, a0, 1866
802068f6: 08 61        	ld	a0, 0(a0)
802068f8: 99 46        	addi	a3, zero, 6
802068fa: 01 47        	mv	a4, zero
802068fc: 97 00 00 00  	auipc	ra, 0
80206900: e7 80 e0 f6  	jalr	-146(ra)
; pub fn map(start: u64, page_count: u64) void {
80206904: 42 64        	ld	s0, 16(sp)
80206906: e2 60        	ld	ra, 24(sp)
80206908: 05 61        	addi	sp, sp, 32
8020690a: 82 80        	ret

000000008020690c <arch.riscv64.virtio_common.MMIO.init>:
;     pub fn init(self: *volatile @This()) void {
8020690c: 01 11        	addi	sp, sp, -32
8020690e: 06 ec        	sd	ra, 24(sp)
80206910: 22 e8        	sd	s0, 16(sp)
80206912: 00 10        	addi	s0, sp, 32
80206914: 23 30 a4 fe  	sd	a0, -32(s0)
;         if (self.magic_value != magic) @panic("virtio magic corrupted");
80206918: 08 41        	lw	a0, 0(a0)
8020691a: b7 75 72 74  	lui	a1, 476967
8020691e: 9b 85 65 97  	addiw	a1, a1, -1674
80206922: 63 0c b5 00  	beq	a0, a1, 0x8020693a <.LBB89_13+0x12>
80206926: 09 a0        	j	0x80206928 <.LBB89_13>

0000000080206928 <.LBB89_13>:
80206928: 17 75 01 00  	auipc	a0, 23
8020692c: 13 05 05 10  	addi	a0, a0, 256
80206930: 81 45        	mv	a1, zero
80206932: 97 90 ff ff  	auipc	ra, 1048569
80206936: e7 80 e0 76  	jalr	1902(ra)
8020693a: 09 a0        	j	0x8020693c <.LBB89_13+0x14>
;         if (self.version != version) @panic("outdated virtio spec");
8020693c: 03 35 04 fe  	ld	a0, -32(s0)
80206940: 48 41        	lw	a0, 4(a0)
80206942: 89 45        	addi	a1, zero, 2
80206944: 63 0c b5 00  	beq	a0, a1, 0x8020695c <.LBB89_14+0x12>
80206948: 09 a0        	j	0x8020694a <.LBB89_14>

000000008020694a <.LBB89_14>:
8020694a: 17 75 01 00  	auipc	a0, 23
8020694e: 13 05 e5 0e  	addi	a0, a0, 238
80206952: 81 45        	mv	a1, zero
80206954: 97 90 ff ff  	auipc	ra, 1048569
80206958: e7 80 c0 74  	jalr	1868(ra)
8020695c: 09 a0        	j	0x8020695e <.LBB89_14+0x14>
;         if (self.device_id == 0) @panic("invalid device");
8020695e: 03 35 04 fe  	ld	a0, -32(s0)
80206962: 08 45        	lw	a0, 8(a0)
80206964: 81 45        	mv	a1, zero
80206966: 63 1c b5 00  	bne	a0, a1, 0x8020697e <.LBB89_15+0x12>
8020696a: 09 a0        	j	0x8020696c <.LBB89_15>

000000008020696c <.LBB89_15>:
8020696c: 17 75 01 00  	auipc	a0, 23
80206970: 13 05 c5 0d  	addi	a0, a0, 220
80206974: 81 45        	mv	a1, zero
80206976: 97 90 ff ff  	auipc	ra, 1048569
8020697a: e7 80 a0 72  	jalr	1834(ra)
8020697e: 09 a0        	j	0x80206980 <.LBB89_15+0x14>
;         self.status = 0;
80206980: 03 35 04 fe  	ld	a0, -32(s0)
80206984: 81 45        	mv	a1, zero
80206986: 2c d9        	sw	a1, 112(a0)
;         self.status |= @enumToInt(Status.acknowledge);
80206988: 03 36 04 fe  	ld	a2, -32(s0)
8020698c: 28 5a        	lw	a0, 112(a2)
8020698e: 13 65 15 00  	ori	a0, a0, 1
80206992: 28 da        	sw	a0, 112(a2)
;         self.status |= @enumToInt(Status.driver);
80206994: 03 36 04 fe  	ld	a2, -32(s0)
80206998: 28 5a        	lw	a0, 112(a2)
8020699a: 13 65 25 00  	ori	a0, a0, 2
8020699e: 28 da        	sw	a0, 112(a2)
;         var features = self.device_features;
802069a0: 03 35 04 fe  	ld	a0, -32(s0)
802069a4: 08 49        	lw	a0, 16(a0)
802069a6: 37 06 00 e0  	lui	a2, 917504
802069aa: 7d 36        	addiw	a2, a2, -1
;         features &= ~@as(u32, 1 << 29);
802069ac: 71 8d        	and	a0, a0, a2
802069ae: 23 26 a4 fe  	sw	a0, -20(s0)
;         self.driver_features = features;
802069b2: 03 36 04 fe  	ld	a2, -32(s0)
802069b6: 08 d2        	sw	a0, 32(a2)
;         self.status |= @enumToInt(Status.features_ok);
802069b8: 03 36 04 fe  	ld	a2, -32(s0)
802069bc: 28 5a        	lw	a0, 112(a2)
802069be: 13 65 05 08  	ori	a0, a0, 128
802069c2: 28 da        	sw	a0, 112(a2)
;         if (self.status & @enumToInt(Status.features_ok) == 0) @panic("unsupported features");
802069c4: 03 35 04 fe  	ld	a0, -32(s0)
802069c8: 03 65 05 07  	lwu	a0, 112(a0)
802069cc: 13 75 05 08  	andi	a0, a0, 128
802069d0: 63 1c b5 00  	bne	a0, a1, 0x802069e8 <.LBB89_16+0x12>
802069d4: 09 a0        	j	0x802069d6 <.LBB89_16>

00000000802069d6 <.LBB89_16>:
802069d6: 17 75 01 00  	auipc	a0, 23
802069da: 13 05 25 08  	addi	a0, a0, 130
802069de: 81 45        	mv	a1, zero
802069e0: 97 90 ff ff  	auipc	ra, 1048569
802069e4: e7 80 00 6c  	jalr	1728(ra)
802069e8: 09 a0        	j	0x802069ea <.LBB89_16+0x14>
;     pub fn init(self: *volatile @This()) void {
802069ea: 42 64        	ld	s0, 16(sp)
802069ec: e2 60        	ld	ra, 24(sp)
802069ee: 05 61        	addi	sp, sp, 32
802069f0: 82 80        	ret

00000000802069f2 <arch.riscv64.virtio_common.MMIO.add_queue_to_device>:
;     pub fn add_queue_to_device(self: *volatile @This(), selected_queue: u32) *volatile Queue {
802069f2: 51 71        	addi	sp, sp, -240
802069f4: 86 f5        	sd	ra, 232(sp)
802069f6: a2 f1        	sd	s0, 224(sp)
802069f8: 80 19        	addi	s0, sp, 240
802069fa: 23 30 a4 fa  	sd	a0, -96(s0)
802069fe: 23 2e b4 f8  	sw	a1, -100(s0)
;         if (self.queue_num_max < ring_size) {
80206a02: 4c 59        	lw	a1, 52(a0)
80206a04: 13 05 f0 07  	addi	a0, zero, 127
80206a08: 63 6c b5 00  	bltu	a0, a1, 0x80206a20 <.LBB90_50+0x12>
80206a0c: 09 a0        	j	0x80206a0e <.LBB90_50>

0000000080206a0e <.LBB90_50>:
;             @panic("foooo");
80206a0e: 17 75 01 00  	auipc	a0, 23
80206a12: 13 05 a5 05  	addi	a0, a0, 90
80206a16: 81 45        	mv	a1, zero
80206a18: 97 90 ff ff  	auipc	ra, 1048569
80206a1c: e7 80 80 68  	jalr	1672(ra)
;         if (self.queue_num_max < ring_size) {
80206a20: 09 a0        	j	0x80206a22 <.LBB90_50+0x14>
;         self.queue_selector = selected_queue;
80206a22: 83 35 04 fa  	ld	a1, -96(s0)
80206a26: 03 25 c4 f9  	lw	a0, -100(s0)
80206a2a: 88 d9        	sw	a0, 48(a1)
;         self.queue_num = ring_size;
80206a2c: 83 35 04 fa  	ld	a1, -96(s0)
80206a30: 13 05 00 08  	addi	a0, zero, 128
80206a34: 88 dd        	sw	a0, 56(a1)
;         if (self.queue_ready != 0) @panic("queue ready");
80206a36: 03 35 04 fa  	ld	a0, -96(s0)
80206a3a: 68 41        	lw	a0, 68(a0)
80206a3c: 81 45        	mv	a1, zero
80206a3e: 63 0c b5 00  	beq	a0, a1, 0x80206a56 <.LBB90_51+0x12>
80206a42: 09 a0        	j	0x80206a44 <.LBB90_51>

0000000080206a44 <.LBB90_51>:
80206a44: 17 75 01 00  	auipc	a0, 23
80206a48: 13 05 45 03  	addi	a0, a0, 52
80206a4c: 81 45        	mv	a1, zero
80206a4e: 97 90 ff ff  	auipc	ra, 1048569
80206a52: e7 80 20 65  	jalr	1618(ra)
80206a56: 09 a0        	j	0x80206a58 <.LBB90_51+0x14>
80206a58: 13 05 84 fd  	addi	a0, s0, -40
80206a5c: 85 45        	addi	a1, zero, 1
;         const queue_physical = kernel.arch.Physical.allocate1(page_count) orelse @panic("unable to allocate memory for virtio block device queue");
80206a5e: 97 60 00 00  	auipc	ra, 6
80206a62: e7 80 c0 7f  	jalr	2044(ra)
80206a66: 03 45 04 fe  	lbu	a0, -32(s0)
80206a6a: 81 45        	mv	a1, zero
80206a6c: 63 1c b5 00  	bne	a0, a1, 0x80206a84 <.LBB90_52+0x12>
80206a70: 09 a0        	j	0x80206a72 <.LBB90_52>

0000000080206a72 <.LBB90_52>:
80206a72: 17 75 01 00  	auipc	a0, 23
80206a76: 13 05 65 01  	addi	a0, a0, 22
80206a7a: 81 45        	mv	a1, zero
80206a7c: 97 90 ff ff  	auipc	ra, 1048569
80206a80: e7 80 40 62  	jalr	1572(ra)
80206a84: 03 35 84 fd  	ld	a0, -40(s0)
80206a88: 23 38 a4 fc  	sd	a0, -48(s0)
80206a8c: 09 a0        	j	0x80206a8e <.LBB90_52+0x1c>
;         const queue = @intToPtr(*volatile Queue, kernel.arch.Virtual.AddressSpace.physical_to_virtual(queue_physical));
80206a8e: 03 35 04 fd  	ld	a0, -48(s0)
80206a92: 97 d0 00 00  	auipc	ra, 13
80206a96: e7 80 c0 b1  	jalr	-1252(ra)
80206a9a: aa 85        	mv	a1, a0
80206a9c: 23 38 b4 f8  	sd	a1, -112(s0)
80206aa0: 81 45        	mv	a1, zero
80206aa2: 63 1c b5 00  	bne	a0, a1, 0x80206aba <.LBB90_53+0x12>
80206aa6: 09 a0        	j	0x80206aa8 <.LBB90_53>

0000000080206aa8 <.LBB90_53>:
80206aa8: 17 75 01 00  	auipc	a0, 23
80206aac: 13 05 05 a5  	addi	a0, a0, -1456
80206ab0: 81 45        	mv	a1, zero
80206ab2: 97 90 ff ff  	auipc	ra, 1048569
80206ab6: e7 80 e0 5e  	jalr	1518(ra)
80206aba: 03 35 04 f9  	ld	a0, -112(s0)
80206abe: 1d 89        	andi	a0, a0, 7
80206ac0: 81 45        	mv	a1, zero
80206ac2: 63 0c b5 00  	beq	a0, a1, 0x80206ada <.LBB90_54+0x12>
80206ac6: 09 a0        	j	0x80206ac8 <.LBB90_54>

0000000080206ac8 <.LBB90_54>:
80206ac8: 17 75 01 00  	auipc	a0, 23
80206acc: 13 05 05 b8  	addi	a0, a0, -1152
80206ad0: 81 45        	mv	a1, zero
80206ad2: 97 90 ff ff  	auipc	ra, 1048569
80206ad6: e7 80 e0 5c  	jalr	1486(ra)
80206ada: 83 35 04 f9  	ld	a1, -112(s0)
80206ade: 23 34 b4 fc  	sd	a1, -56(s0)
80206ae2: 01 45        	mv	a0, zero
;         queue.num = 0;
80206ae4: 88 c1        	sw	a0, 0(a1)
;         queue.last_seen_used = 0;
80206ae6: 83 35 84 fc  	ld	a1, -56(s0)
80206aea: c8 c1        	sw	a0, 4(a1)
;         queue.descriptors = @intToPtr(@TypeOf(queue.descriptors), @ptrToInt(queue) + @sizeOf(Queue));
80206aec: 83 35 84 fc  	ld	a1, -56(s0)
80206af0: 13 85 85 00  	addi	a0, a1, 8
80206af4: 23 30 a4 f8  	sd	a0, -128(s0)
80206af8: 13 85 05 02  	addi	a0, a1, 32
80206afc: 23 34 a4 f8  	sd	a0, -120(s0)
80206b00: 63 7c b5 00  	bgeu	a0, a1, 0x80206b18 <.LBB90_55+0x12>
80206b04: 09 a0        	j	0x80206b06 <.LBB90_55>

0000000080206b06 <.LBB90_55>:
80206b06: 17 75 01 00  	auipc	a0, 23
80206b0a: 13 05 a5 97  	addi	a0, a0, -1670
80206b0e: 81 45        	mv	a1, zero
80206b10: 97 90 ff ff  	auipc	ra, 1048569
80206b14: e7 80 00 59  	jalr	1424(ra)
80206b18: 03 35 84 f8  	ld	a0, -120(s0)
80206b1c: 81 45        	mv	a1, zero
;         queue.descriptors = @intToPtr(@TypeOf(queue.descriptors), @ptrToInt(queue) + @sizeOf(Queue));
80206b1e: 63 1c b5 00  	bne	a0, a1, 0x80206b36 <.LBB90_56+0x12>
80206b22: 09 a0        	j	0x80206b24 <.LBB90_56>

0000000080206b24 <.LBB90_56>:
80206b24: 17 75 01 00  	auipc	a0, 23
80206b28: 13 05 45 9d  	addi	a0, a0, -1580
80206b2c: 81 45        	mv	a1, zero
80206b2e: 97 90 ff ff  	auipc	ra, 1048569
80206b32: e7 80 20 57  	jalr	1394(ra)
80206b36: 03 35 84 f8  	ld	a0, -120(s0)
80206b3a: 1d 89        	andi	a0, a0, 7
80206b3c: 81 45        	mv	a1, zero
80206b3e: 63 0c b5 00  	beq	a0, a1, 0x80206b56 <.LBB90_57+0x12>
80206b42: 09 a0        	j	0x80206b44 <.LBB90_57>

0000000080206b44 <.LBB90_57>:
80206b44: 17 75 01 00  	auipc	a0, 23
80206b48: 13 05 45 b0  	addi	a0, a0, -1276
80206b4c: 81 45        	mv	a1, zero
80206b4e: 97 90 ff ff  	auipc	ra, 1048569
80206b52: e7 80 20 55  	jalr	1362(ra)
80206b56: 03 35 84 f8  	ld	a0, -120(s0)
80206b5a: 83 35 04 f8  	ld	a1, -128(s0)
80206b5e: 88 e1        	sd	a0, 0(a1)
;         const physical = @ptrToInt(queue);
80206b60: 83 35 84 fc  	ld	a1, -56(s0)
80206b64: 23 30 b4 fc  	sd	a1, -64(s0)
;         const descriptor = physical + @sizeOf(Queue);
80206b68: 13 85 05 02  	addi	a0, a1, 32
80206b6c: 23 3c a4 f6  	sd	a0, -136(s0)
80206b70: 63 7c b5 00  	bgeu	a0, a1, 0x80206b88 <.LBB90_58+0x12>
80206b74: 09 a0        	j	0x80206b76 <.LBB90_58>

0000000080206b76 <.LBB90_58>:
80206b76: 17 75 01 00  	auipc	a0, 23
80206b7a: 13 05 a5 90  	addi	a0, a0, -1782
80206b7e: 81 45        	mv	a1, zero
80206b80: 97 90 ff ff  	auipc	ra, 1048569
80206b84: e7 80 00 52  	jalr	1312(ra)
80206b88: 03 35 84 f7  	ld	a0, -136(s0)
80206b8c: 23 3c a4 fa  	sd	a0, -72(s0)
;         queue.available = @intToPtr(@TypeOf(queue.available), @ptrToInt(queue) + @sizeOf(Queue) + (ring_size * @sizeOf(Descriptor)));
80206b90: 83 35 84 fc  	ld	a1, -56(s0)
80206b94: 13 85 05 01  	addi	a0, a1, 16
80206b98: 23 34 a4 f6  	sd	a0, -152(s0)
80206b9c: 13 85 05 02  	addi	a0, a1, 32
80206ba0: 23 38 a4 f6  	sd	a0, -144(s0)
80206ba4: 63 7c b5 00  	bgeu	a0, a1, 0x80206bbc <.LBB90_59+0x12>
80206ba8: 09 a0        	j	0x80206baa <.LBB90_59>

0000000080206baa <.LBB90_59>:
80206baa: 17 75 01 00  	auipc	a0, 23
80206bae: 13 05 65 8d  	addi	a0, a0, -1834
80206bb2: 81 45        	mv	a1, zero
80206bb4: 97 90 ff ff  	auipc	ra, 1048569
80206bb8: e7 80 c0 4e  	jalr	1260(ra)
80206bbc: 83 35 04 f7  	ld	a1, -144(s0)
80206bc0: 13 85 05 40  	addi	a0, a1, 1024
80206bc4: 13 05 05 40  	addi	a0, a0, 1024
80206bc8: 23 30 a4 f6  	sd	a0, -160(s0)
80206bcc: 63 7c b5 00  	bgeu	a0, a1, 0x80206be4 <.LBB90_60+0x12>
80206bd0: 09 a0        	j	0x80206bd2 <.LBB90_60>

0000000080206bd2 <.LBB90_60>:
80206bd2: 17 75 01 00  	auipc	a0, 23
80206bd6: 13 05 e5 8a  	addi	a0, a0, -1874
80206bda: 81 45        	mv	a1, zero
80206bdc: 97 90 ff ff  	auipc	ra, 1048569
80206be0: e7 80 40 4c  	jalr	1220(ra)
80206be4: 03 35 04 f6  	ld	a0, -160(s0)
80206be8: 81 45        	mv	a1, zero
;         queue.available = @intToPtr(@TypeOf(queue.available), @ptrToInt(queue) + @sizeOf(Queue) + (ring_size * @sizeOf(Descriptor)));
80206bea: 63 1c b5 00  	bne	a0, a1, 0x80206c02 <.LBB90_61+0x12>
80206bee: 09 a0        	j	0x80206bf0 <.LBB90_61>

0000000080206bf0 <.LBB90_61>:
80206bf0: 17 75 01 00  	auipc	a0, 23
80206bf4: 13 05 85 90  	addi	a0, a0, -1784
80206bf8: 81 45        	mv	a1, zero
80206bfa: 97 90 ff ff  	auipc	ra, 1048569
80206bfe: e7 80 60 4a  	jalr	1190(ra)
80206c02: 03 35 04 f6  	ld	a0, -160(s0)
80206c06: 05 89        	andi	a0, a0, 1
80206c08: 81 45        	mv	a1, zero
80206c0a: 63 0c b5 00  	beq	a0, a1, 0x80206c22 <.LBB90_62+0x12>
80206c0e: 09 a0        	j	0x80206c10 <.LBB90_62>

0000000080206c10 <.LBB90_62>:
80206c10: 17 75 01 00  	auipc	a0, 23
80206c14: 13 05 85 a3  	addi	a0, a0, -1480
80206c18: 81 45        	mv	a1, zero
80206c1a: 97 90 ff ff  	auipc	ra, 1048569
80206c1e: e7 80 60 48  	jalr	1158(ra)
80206c22: 03 35 04 f6  	ld	a0, -160(s0)
80206c26: 83 35 84 f6  	ld	a1, -152(s0)
80206c2a: 88 e1        	sd	a0, 0(a1)
;         const available = physical + @sizeOf(Queue) + (ring_size * @sizeOf(Descriptor));
80206c2c: 83 35 04 fc  	ld	a1, -64(s0)
80206c30: 13 85 05 02  	addi	a0, a1, 32
80206c34: 23 3c a4 f4  	sd	a0, -168(s0)
80206c38: 63 7c b5 00  	bgeu	a0, a1, 0x80206c50 <.LBB90_63+0x12>
80206c3c: 09 a0        	j	0x80206c3e <.LBB90_63>

0000000080206c3e <.LBB90_63>:
80206c3e: 17 75 01 00  	auipc	a0, 23
80206c42: 13 05 25 84  	addi	a0, a0, -1982
80206c46: 81 45        	mv	a1, zero
80206c48: 97 90 ff ff  	auipc	ra, 1048569
80206c4c: e7 80 80 45  	jalr	1112(ra)
80206c50: 83 35 84 f5  	ld	a1, -168(s0)
80206c54: 13 85 05 40  	addi	a0, a1, 1024
80206c58: 13 05 05 40  	addi	a0, a0, 1024
80206c5c: 23 38 a4 f4  	sd	a0, -176(s0)
80206c60: 63 7c b5 00  	bgeu	a0, a1, 0x80206c78 <.LBB90_64+0x12>
80206c64: 09 a0        	j	0x80206c66 <.LBB90_64>

0000000080206c66 <.LBB90_64>:
80206c66: 17 75 01 00  	auipc	a0, 23
80206c6a: 13 05 a5 81  	addi	a0, a0, -2022
80206c6e: 81 45        	mv	a1, zero
80206c70: 97 90 ff ff  	auipc	ra, 1048569
80206c74: e7 80 00 43  	jalr	1072(ra)
80206c78: 03 35 04 f5  	ld	a0, -176(s0)
80206c7c: 23 38 a4 fa  	sd	a0, -80(s0)
;         queue.available.flags = 0;
80206c80: 03 35 84 fc  	ld	a0, -56(s0)
80206c84: 0c 69        	ld	a1, 16(a0)
80206c86: 01 45        	mv	a0, zero
80206c88: 23 90 a5 00  	sh	a0, 0(a1)
;         queue.available.index = 0;
80206c8c: 83 35 84 fc  	ld	a1, -56(s0)
80206c90: 8c 69        	ld	a1, 16(a1)
80206c92: 23 91 a5 00  	sh	a0, 2(a1)
;         queue.used = @intToPtr(@TypeOf(queue.used), @ptrToInt(queue) + @sizeOf(Queue) + (ring_size * @sizeOf(Descriptor)) + @sizeOf(Available));
80206c96: 83 35 84 fc  	ld	a1, -56(s0)
80206c9a: 13 85 85 01  	addi	a0, a1, 24
80206c9e: 23 30 a4 f4  	sd	a0, -192(s0)
80206ca2: 13 85 05 02  	addi	a0, a1, 32
80206ca6: 23 34 a4 f4  	sd	a0, -184(s0)
80206caa: 63 7c b5 00  	bgeu	a0, a1, 0x80206cc2 <.LBB90_65+0x12>
80206cae: 09 a0        	j	0x80206cb0 <.LBB90_65>

0000000080206cb0 <.LBB90_65>:
80206cb0: 17 65 01 00  	auipc	a0, 22
80206cb4: 13 05 05 7d  	addi	a0, a0, 2000
80206cb8: 81 45        	mv	a1, zero
80206cba: 97 90 ff ff  	auipc	ra, 1048569
80206cbe: e7 80 60 3e  	jalr	998(ra)
80206cc2: 83 35 84 f4  	ld	a1, -184(s0)
80206cc6: 13 85 05 40  	addi	a0, a1, 1024
80206cca: 13 05 05 40  	addi	a0, a0, 1024
80206cce: 23 3c a4 f2  	sd	a0, -200(s0)
80206cd2: 63 7c b5 00  	bgeu	a0, a1, 0x80206cea <.LBB90_66+0x12>
80206cd6: 09 a0        	j	0x80206cd8 <.LBB90_66>

0000000080206cd8 <.LBB90_66>:
80206cd8: 17 65 01 00  	auipc	a0, 22
80206cdc: 13 05 85 7a  	addi	a0, a0, 1960
80206ce0: 81 45        	mv	a1, zero
80206ce2: 97 90 ff ff  	auipc	ra, 1048569
80206ce6: e7 80 e0 3b  	jalr	958(ra)
80206cea: 83 35 84 f3  	ld	a1, -200(s0)
80206cee: 13 85 85 10  	addi	a0, a1, 264
80206cf2: 23 38 a4 f2  	sd	a0, -208(s0)
80206cf6: 63 7c b5 00  	bgeu	a0, a1, 0x80206d0e <.LBB90_67+0x12>
80206cfa: 09 a0        	j	0x80206cfc <.LBB90_67>

0000000080206cfc <.LBB90_67>:
80206cfc: 17 65 01 00  	auipc	a0, 22
80206d00: 13 05 45 78  	addi	a0, a0, 1924
80206d04: 81 45        	mv	a1, zero
80206d06: 97 90 ff ff  	auipc	ra, 1048569
80206d0a: e7 80 a0 39  	jalr	922(ra)
80206d0e: 03 35 04 f3  	ld	a0, -208(s0)
80206d12: 81 45        	mv	a1, zero
;         queue.used = @intToPtr(@TypeOf(queue.used), @ptrToInt(queue) + @sizeOf(Queue) + (ring_size * @sizeOf(Descriptor)) + @sizeOf(Available));
80206d14: 63 1c b5 00  	bne	a0, a1, 0x80206d2c <.LBB90_68+0x12>
80206d18: 09 a0        	j	0x80206d1a <.LBB90_68>

0000000080206d1a <.LBB90_68>:
80206d1a: 17 65 01 00  	auipc	a0, 22
80206d1e: 13 05 e5 7d  	addi	a0, a0, 2014
80206d22: 81 45        	mv	a1, zero
80206d24: 97 90 ff ff  	auipc	ra, 1048569
80206d28: e7 80 c0 37  	jalr	892(ra)
80206d2c: 03 35 04 f3  	ld	a0, -208(s0)
80206d30: 0d 89        	andi	a0, a0, 3
80206d32: 81 45        	mv	a1, zero
80206d34: 63 0c b5 00  	beq	a0, a1, 0x80206d4c <.LBB90_69+0x12>
80206d38: 09 a0        	j	0x80206d3a <.LBB90_69>

0000000080206d3a <.LBB90_69>:
80206d3a: 17 75 01 00  	auipc	a0, 23
80206d3e: 13 05 e5 90  	addi	a0, a0, -1778
80206d42: 81 45        	mv	a1, zero
80206d44: 97 90 ff ff  	auipc	ra, 1048569
80206d48: e7 80 c0 35  	jalr	860(ra)
80206d4c: 03 35 04 f3  	ld	a0, -208(s0)
80206d50: 83 35 04 f4  	ld	a1, -192(s0)
80206d54: 88 e1        	sd	a0, 0(a1)
;         const used = physical + @sizeOf(Queue) + (ring_size * @sizeOf(Descriptor)) + @sizeOf(Available);
80206d56: 83 35 04 fc  	ld	a1, -64(s0)
80206d5a: 13 85 05 02  	addi	a0, a1, 32
80206d5e: 23 34 a4 f2  	sd	a0, -216(s0)
80206d62: 63 7c b5 00  	bgeu	a0, a1, 0x80206d7a <.LBB90_70+0x12>
80206d66: 09 a0        	j	0x80206d68 <.LBB90_70>

0000000080206d68 <.LBB90_70>:
80206d68: 17 65 01 00  	auipc	a0, 22
80206d6c: 13 05 85 71  	addi	a0, a0, 1816
80206d70: 81 45        	mv	a1, zero
80206d72: 97 90 ff ff  	auipc	ra, 1048569
80206d76: e7 80 e0 32  	jalr	814(ra)
80206d7a: 83 35 84 f2  	ld	a1, -216(s0)
80206d7e: 13 85 05 40  	addi	a0, a1, 1024
80206d82: 13 05 05 40  	addi	a0, a0, 1024
80206d86: 23 30 a4 f2  	sd	a0, -224(s0)
80206d8a: 63 7c b5 00  	bgeu	a0, a1, 0x80206da2 <.LBB90_71+0x12>
80206d8e: 09 a0        	j	0x80206d90 <.LBB90_71>

0000000080206d90 <.LBB90_71>:
80206d90: 17 65 01 00  	auipc	a0, 22
80206d94: 13 05 05 6f  	addi	a0, a0, 1776
80206d98: 81 45        	mv	a1, zero
80206d9a: 97 90 ff ff  	auipc	ra, 1048569
80206d9e: e7 80 60 30  	jalr	774(ra)
80206da2: 83 35 04 f2  	ld	a1, -224(s0)
80206da6: 13 85 85 10  	addi	a0, a1, 264
80206daa: 23 3c a4 f0  	sd	a0, -232(s0)
80206dae: 63 7c b5 00  	bgeu	a0, a1, 0x80206dc6 <.LBB90_72+0x12>
80206db2: 09 a0        	j	0x80206db4 <.LBB90_72>

0000000080206db4 <.LBB90_72>:
80206db4: 17 65 01 00  	auipc	a0, 22
80206db8: 13 05 c5 6c  	addi	a0, a0, 1740
80206dbc: 81 45        	mv	a1, zero
80206dbe: 97 90 ff ff  	auipc	ra, 1048569
80206dc2: e7 80 20 2e  	jalr	738(ra)
80206dc6: 03 35 84 f1  	ld	a0, -232(s0)
80206dca: 23 34 a4 fa  	sd	a0, -88(s0)
;         queue.used.flags = 0;
80206dce: 03 35 84 fc  	ld	a0, -56(s0)
80206dd2: 0c 6d        	ld	a1, 24(a0)
80206dd4: 01 45        	mv	a0, zero
80206dd6: 23 90 a5 00  	sh	a0, 0(a1)
;         queue.used.index = 0;
80206dda: 83 35 84 fc  	ld	a1, -56(s0)
80206dde: 8c 6d        	ld	a1, 24(a1)
80206de0: 23 91 a5 00  	sh	a0, 2(a1)
;         self.queue_num = ring_size;
80206de4: 83 35 04 fa  	ld	a1, -96(s0)
80206de8: 13 05 00 08  	addi	a0, zero, 128
80206dec: 88 dd        	sw	a0, 56(a1)
;         self.queue_descriptor_low = @truncate(u32, descriptor);
80206dee: 83 35 04 fa  	ld	a1, -96(s0)
80206df2: 03 35 84 fb  	ld	a0, -72(s0)
80206df6: 23 a0 a5 08  	sw	a0, 128(a1)
;         self.queue_descriptor_high = @truncate(u32, descriptor >> 32);
80206dfa: 83 35 04 fa  	ld	a1, -96(s0)
80206dfe: 03 65 c4 fb  	lwu	a0, -68(s0)
80206e02: 23 a2 a5 08  	sw	a0, 132(a1)
;         self.queue_available_low = @truncate(u32, available);
80206e06: 83 35 04 fa  	ld	a1, -96(s0)
80206e0a: 03 35 04 fb  	ld	a0, -80(s0)
80206e0e: 23 a8 a5 08  	sw	a0, 144(a1)
;         self.queue_available_high = @truncate(u32, available >> 32);
80206e12: 83 35 04 fa  	ld	a1, -96(s0)
80206e16: 03 65 44 fb  	lwu	a0, -76(s0)
80206e1a: 23 aa a5 08  	sw	a0, 148(a1)
;         self.queue_used_low = @truncate(u32, used);
80206e1e: 83 35 04 fa  	ld	a1, -96(s0)
80206e22: 03 35 84 fa  	ld	a0, -88(s0)
80206e26: 23 a0 a5 0a  	sw	a0, 160(a1)
;         self.queue_used_high = @truncate(u32, used >> 32);
80206e2a: 83 35 04 fa  	ld	a1, -96(s0)
80206e2e: 03 65 c4 fa  	lwu	a0, -84(s0)
80206e32: 23 a2 a5 0a  	sw	a0, 164(a1)
;         self.queue_ready = 1;
80206e36: 83 35 04 fa  	ld	a1, -96(s0)
80206e3a: 05 45        	addi	a0, zero, 1
80206e3c: e8 c1        	sw	a0, 68(a1)
;         return queue;
80206e3e: 03 35 84 fc  	ld	a0, -56(s0)
80206e42: 23 34 a4 fe  	sd	a0, -24(s0)
80206e46: 0e 74        	ld	s0, 224(sp)
80206e48: ae 70        	ld	ra, 232(sp)
80206e4a: 6d 61        	addi	sp, sp, 240
80206e4c: 82 80        	ret

0000000080206e4e <arch.riscv64.virtio_common.block.handler>:
;     pub fn handler() void {
80206e4e: 19 71        	addi	sp, sp, -128
;         const descriptor = queue.pop_used() orelse @panic("descriptor corrupted");
80206e50: 86 fc        	sd	ra, 120(sp)
80206e52: a2 f8        	sd	s0, 112(sp)
80206e54: 00 01        	addi	s0, sp, 128

0000000080206e56 <.LBB91_26>:
80206e56: 17 d5 66 00  	auipc	a0, 1645
80206e5a: 13 05 25 1f  	addi	a0, a0, 498
80206e5e: 08 61        	ld	a0, 0(a0)
80206e60: 97 c0 00 00  	auipc	ra, 12
80206e64: e7 80 60 76  	jalr	1894(ra)
80206e68: 23 34 a4 fe  	sd	a0, -24(s0)
80206e6c: 81 45        	mv	a1, zero
80206e6e: 63 1c b5 00  	bne	a0, a1, 0x80206e86 <.LBB91_27+0x12>
80206e72: 09 a0        	j	0x80206e74 <.LBB91_27>

0000000080206e74 <.LBB91_27>:
80206e74: 17 75 01 00  	auipc	a0, 23
80206e78: 13 05 45 c2  	addi	a0, a0, -988
80206e7c: 81 45        	mv	a1, zero
80206e7e: 97 90 ff ff  	auipc	ra, 1048569
80206e82: e7 80 20 22  	jalr	546(ra)
80206e86: 03 35 84 fe  	ld	a0, -24(s0)
80206e8a: 23 30 a4 fe  	sd	a0, -32(s0)
80206e8e: 09 a0        	j	0x80206e90 <.LBB91_27+0x1c>
;         const header = @intToPtr(*volatile Request.Header, kernel.arch.Virtual.AddressSpace.physical_to_virtual(descriptor.address));
80206e90: 03 35 04 fe  	ld	a0, -32(s0)
80206e94: 08 61        	ld	a0, 0(a0)
80206e96: 97 c0 00 00  	auipc	ra, 12
80206e9a: e7 80 80 71  	jalr	1816(ra)
80206e9e: aa 85        	mv	a1, a0
80206ea0: 23 3c b4 f8  	sd	a1, -104(s0)
80206ea4: 81 45        	mv	a1, zero
80206ea6: 63 0a b5 0e  	beq	a0, a1, 0x80206f9a <.LBB91_35>
80206eaa: 09 a2        	j	0x80206fac <.LBB91_35+0x12>

0000000080206eac <.LBB91_28>:
;             else => unreachable,
80206eac: 17 65 01 00  	auipc	a0, 22
80206eb0: 13 05 45 5e  	addi	a0, a0, 1508
80206eb4: 81 45        	mv	a1, zero
80206eb6: 97 90 ff ff  	auipc	ra, 1048569
80206eba: e7 80 a0 1e  	jalr	490(ra)
80206ebe: 01 45        	mv	a0, zero
;             .in => .read,
80206ec0: a3 0b a4 fc  	sb	a0, -41(s0)
;         const operation: Operation = switch (header.block_type) {
80206ec4: 29 a0        	j	0x80206ece <.LBB91_29>
80206ec6: 05 45        	addi	a0, zero, 1
;             .out => .write,
80206ec8: a3 0b a4 fc  	sb	a0, -41(s0)
;         const operation: Operation = switch (header.block_type) {
80206ecc: 09 a0        	j	0x80206ece <.LBB91_29>

0000000080206ece <.LBB91_29>:
;         const sector_descriptor = queue.get_descriptor(descriptor.next) orelse @panic("unable to get descriptor");
80206ece: 17 d5 66 00  	auipc	a0, 1645
80206ed2: 13 05 a5 17  	addi	a0, a0, 378
80206ed6: 08 61        	ld	a0, 0(a0)
80206ed8: 83 35 04 fe  	ld	a1, -32(s0)
80206edc: 83 95 e5 00  	lh	a1, 14(a1)
80206ee0: 97 c0 00 00  	auipc	ra, 12
80206ee4: e7 80 60 7d  	jalr	2006(ra)
80206ee8: 23 34 a4 fc  	sd	a0, -56(s0)
80206eec: 81 45        	mv	a1, zero
80206eee: 63 1c b5 00  	bne	a0, a1, 0x80206f06 <.LBB91_30+0x12>
80206ef2: 09 a0        	j	0x80206ef4 <.LBB91_30>

0000000080206ef4 <.LBB91_30>:
80206ef4: 17 75 01 00  	auipc	a0, 23
80206ef8: 13 05 45 bb  	addi	a0, a0, -1100
80206efc: 81 45        	mv	a1, zero
80206efe: 97 90 ff ff  	auipc	ra, 1048569
80206f02: e7 80 20 1a  	jalr	418(ra)
80206f06: 03 35 84 fc  	ld	a0, -56(s0)
80206f0a: 23 30 a4 fc  	sd	a0, -64(s0)
80206f0e: 09 a0        	j	0x80206f10 <.LBB91_31>

0000000080206f10 <.LBB91_31>:
;         const status_descriptor = queue.get_descriptor(sector_descriptor.next) orelse @panic("unable to get descriptor");
80206f10: 17 d5 66 00  	auipc	a0, 1645
80206f14: 13 05 85 13  	addi	a0, a0, 312
80206f18: 08 61        	ld	a0, 0(a0)
80206f1a: 83 35 04 fc  	ld	a1, -64(s0)
80206f1e: 83 95 e5 00  	lh	a1, 14(a1)
80206f22: 97 c0 00 00  	auipc	ra, 12
80206f26: e7 80 40 79  	jalr	1940(ra)
80206f2a: 23 3c a4 fa  	sd	a0, -72(s0)
80206f2e: 81 45        	mv	a1, zero
80206f30: 63 1c b5 00  	bne	a0, a1, 0x80206f48 <.LBB91_32+0x12>
80206f34: 09 a0        	j	0x80206f36 <.LBB91_32>

0000000080206f36 <.LBB91_32>:
80206f36: 17 75 01 00  	auipc	a0, 23
80206f3a: 13 05 25 b8  	addi	a0, a0, -1150
80206f3e: 81 45        	mv	a1, zero
80206f40: 97 90 ff ff  	auipc	ra, 1048569
80206f44: e7 80 00 16  	jalr	352(ra)
80206f48: 03 35 84 fb  	ld	a0, -72(s0)
80206f4c: 23 38 a4 fa  	sd	a0, -80(s0)
80206f50: 09 a0        	j	0x80206f52 <.LBB91_32+0x1c>
;         const status = @intToPtr([*]u8, kernel.arch.Virtual.AddressSpace.physical_to_virtual(status_descriptor.address))[0];
80206f52: 03 35 04 fb  	ld	a0, -80(s0)
80206f56: 08 61        	ld	a0, 0(a0)
80206f58: 97 c0 00 00  	auipc	ra, 12
80206f5c: e7 80 60 65  	jalr	1622(ra)
80206f60: aa 85        	mv	a1, a0
80206f62: 23 38 b4 f8  	sd	a1, -112(s0)
80206f66: 81 45        	mv	a1, zero
80206f68: 63 05 b5 08  	beq	a0, a1, 0x80206ff2 <.LBB91_37>
80206f6c: 61 a8        	j	0x80207004 <.LBB91_37+0x12>

0000000080206f6e <.LBB91_33>:
;         if (status != 0) @panic("Disk operation failed");
80206f6e: 17 75 01 00  	auipc	a0, 23
80206f72: 13 05 a5 b5  	addi	a0, a0, -1190
80206f76: 81 45        	mv	a1, zero
80206f78: 97 90 ff ff  	auipc	ra, 1048569
80206f7c: e7 80 80 12  	jalr	296(ra)
80206f80: 09 a0        	j	0x80206f82 <.LBB91_34>

0000000080206f82 <.LBB91_34>:
;         read += kernel.arch.sector_size;
80206f82: 17 d5 66 00  	auipc	a0, 1645
80206f86: 13 05 e5 0e  	addi	a0, a0, 238
80206f8a: 0c 61        	ld	a1, 0(a0)
80206f8c: 13 85 05 20  	addi	a0, a1, 512
80206f90: 23 34 a4 f8  	sd	a0, -120(s0)
80206f94: 63 64 b5 08  	bltu	a0, a1, 0x8020701c <.LBB91_38>
80206f98: 59 a8        	j	0x8020702e <.LBB91_38+0x12>

0000000080206f9a <.LBB91_35>:
;         const header = @intToPtr(*volatile Request.Header, kernel.arch.Virtual.AddressSpace.physical_to_virtual(descriptor.address));
80206f9a: 17 65 01 00  	auipc	a0, 22
80206f9e: 13 05 e5 55  	addi	a0, a0, 1374
80206fa2: 81 45        	mv	a1, zero
80206fa4: 97 90 ff ff  	auipc	ra, 1048569
80206fa8: e7 80 c0 0f  	jalr	252(ra)
80206fac: 03 35 84 f9  	ld	a0, -104(s0)
80206fb0: 1d 89        	andi	a0, a0, 7
80206fb2: 81 45        	mv	a1, zero
80206fb4: 63 0c b5 00  	beq	a0, a1, 0x80206fcc <.LBB91_36+0x12>
80206fb8: 09 a0        	j	0x80206fba <.LBB91_36>

0000000080206fba <.LBB91_36>:
80206fba: 17 65 01 00  	auipc	a0, 22
80206fbe: 13 05 e5 68  	addi	a0, a0, 1678
80206fc2: 81 45        	mv	a1, zero
80206fc4: 97 90 ff ff  	auipc	ra, 1048569
80206fc8: e7 80 c0 0d  	jalr	220(ra)
80206fcc: 03 35 84 f9  	ld	a0, -104(s0)
80206fd0: 23 3c a4 fc  	sd	a0, -40(s0)
;         const operation: Operation = switch (header.block_type) {
80206fd4: 03 65 05 00  	lwu	a0, 0(a0)
80206fd8: 23 30 a4 f8  	sd	a0, -128(s0)
80206fdc: 81 45        	mv	a1, zero
80206fde: e3 00 b5 ee  	beq	a0, a1, 0x80206ebe <.LBB91_28+0x12>
80206fe2: 09 a0        	j	0x80206fe4 <.LBB91_36+0x2a>
80206fe4: 03 35 04 f8  	ld	a0, -128(s0)
80206fe8: 01 25        	sext.w	a0, a0
80206fea: 85 45        	addi	a1, zero, 1
;         const operation: Operation = switch (header.block_type) {
80206fec: e3 0d b5 ec  	beq	a0, a1, 0x80206ec6 <.LBB91_28+0x1a>
80206ff0: 75 bd        	j	0x80206eac <.LBB91_28>

0000000080206ff2 <.LBB91_37>:
;         const status = @intToPtr([*]u8, kernel.arch.Virtual.AddressSpace.physical_to_virtual(status_descriptor.address))[0];
80206ff2: 17 65 01 00  	auipc	a0, 22
80206ff6: 13 05 65 50  	addi	a0, a0, 1286
80206ffa: 81 45        	mv	a1, zero
80206ffc: 97 90 ff ff  	auipc	ra, 1048569
80207000: e7 80 40 0a  	jalr	164(ra)
80207004: 03 35 04 f9  	ld	a0, -112(s0)
80207008: 23 34 a4 fa  	sd	a0, -88(s0)
8020700c: 03 45 05 00  	lbu	a0, 0(a0)
80207010: a3 03 a4 fa  	sb	a0, -89(s0)
80207014: 81 45        	mv	a1, zero
;         if (status != 0) @panic("Disk operation failed");
80207016: e3 1c b5 f4  	bne	a0, a1, 0x80206f6e <.LBB91_33>
8020701a: 9d b7        	j	0x80206f80 <.LBB91_33+0x12>

000000008020701c <.LBB91_38>:
;         read += kernel.arch.sector_size;
8020701c: 17 65 01 00  	auipc	a0, 22
80207020: 13 05 45 46  	addi	a0, a0, 1124
80207024: 81 45        	mv	a1, zero
80207026: 97 90 ff ff  	auipc	ra, 1048569
8020702a: e7 80 a0 07  	jalr	122(ra)
8020702e: 03 35 84 f8  	ld	a0, -120(s0)

0000000080207032 <.LBB91_39>:
80207032: 97 d5 66 00  	auipc	a1, 1645
80207036: 93 85 e5 03  	addi	a1, a1, 62
8020703a: 88 e1        	sd	a0, 0(a1)
;     pub fn handler() void {
8020703c: 46 74        	ld	s0, 112(sp)
8020703e: e6 70        	ld	ra, 120(sp)
80207040: 09 61        	addi	sp, sp, 128
80207042: 82 80        	ret

0000000080207044 <std.log.scoped(VirtioBlock).debug>:
;         pub fn debug(
80207044: 41 11        	addi	sp, sp, -16
;             log(.debug, scope, format, args);
80207046: 06 e4        	sd	ra, 8(sp)
80207048: 22 e0        	sd	s0, 0(sp)
8020704a: 00 08        	addi	s0, sp, 16
8020704c: 97 c0 00 00  	auipc	ra, 12
80207050: e7 80 c0 6b  	jalr	1724(ra)
;         ) void {
80207054: 02 64        	ld	s0, 0(sp)
80207056: a2 60        	ld	ra, 8(sp)
80207058: 41 01        	addi	sp, sp, 16
8020705a: 82 80        	ret

000000008020705c <arch.riscv64.virtio_common.gpu.handler>:
;     fn handler() void {
8020705c: 39 71        	addi	sp, sp, -64
;         const descriptor = control_queue.pop_used() orelse @panic("descriptor corrupted");
8020705e: 06 fc        	sd	ra, 56(sp)
80207060: 22 f8        	sd	s0, 48(sp)
80207062: 80 00        	addi	s0, sp, 64

0000000080207064 <.LBB93_14>:
80207064: 17 d5 66 00  	auipc	a0, 1645
80207068: 13 05 45 ff  	addi	a0, a0, -12
8020706c: 08 61        	ld	a0, 0(a0)
8020706e: 97 c0 00 00  	auipc	ra, 12
80207072: e7 80 80 55  	jalr	1368(ra)
80207076: 23 34 a4 fe  	sd	a0, -24(s0)
8020707a: 81 45        	mv	a1, zero
8020707c: 63 1c b5 00  	bne	a0, a1, 0x80207094 <.LBB93_15+0x12>
80207080: 09 a0        	j	0x80207082 <.LBB93_15>

0000000080207082 <.LBB93_15>:
80207082: 17 75 01 00  	auipc	a0, 23
80207086: 13 05 65 a5  	addi	a0, a0, -1450
8020708a: 81 45        	mv	a1, zero
8020708c: 97 90 ff ff  	auipc	ra, 1048569
80207090: e7 80 40 01  	jalr	20(ra)
80207094: 03 35 84 fe  	ld	a0, -24(s0)
80207098: 23 30 a4 fe  	sd	a0, -32(s0)
8020709c: 09 a0        	j	0x8020709e <.LBB93_15+0x1c>
;         const header = @intToPtr(*volatile ControlHeader, kernel.arch.Virtual.AddressSpace.physical_to_virtual(descriptor.address));
8020709e: 03 35 04 fe  	ld	a0, -32(s0)
802070a2: 08 61        	ld	a0, 0(a0)
802070a4: 97 c0 00 00  	auipc	ra, 12
802070a8: e7 80 a0 50  	jalr	1290(ra)
802070ac: aa 85        	mv	a1, a0
802070ae: 23 30 b4 fc  	sd	a1, -64(s0)
802070b2: 81 45        	mv	a1, zero
802070b4: 63 00 b5 06  	beq	a0, a1, 0x80207114 <.LBB93_19>
802070b8: bd a0        	j	0x80207126 <.LBB93_19+0x12>

00000000802070ba <.LBB93_16>:
;         const request_descriptor = control_queue.get_descriptor(descriptor.next) orelse @panic("unable to request descriptor");
802070ba: 17 75 01 00  	auipc	a0, 23
802070be: 13 05 e5 a2  	addi	a0, a0, -1490
802070c2: 81 45        	mv	a1, zero
802070c4: 97 90 ff ff  	auipc	ra, 1048569
802070c8: e7 80 c0 fd  	jalr	-36(ra)
802070cc: 03 35 04 fd  	ld	a0, -48(s0)
802070d0: 23 34 a4 fc  	sd	a0, -56(s0)
802070d4: 09 a0        	j	0x802070d6 <.LBB93_17>

00000000802070d6 <.LBB93_17>:
;         if (initialized) {
802070d6: 17 d5 66 00  	auipc	a0, 1645
802070da: 13 05 25 fc  	addi	a0, a0, -62
802070de: 03 45 05 00  	lbu	a0, 0(a0)
802070e2: 81 45        	mv	a1, zero
802070e4: 63 0b b5 00  	beq	a0, a1, 0x802070fa <.LBB93_18+0x10>
802070e8: 09 a0        	j	0x802070ea <.LBB93_18>

00000000802070ea <.LBB93_18>:
;             TODO(@src());
802070ea: 17 75 01 00  	auipc	a0, 23
802070ee: 13 05 e5 a0  	addi	a0, a0, -1522
802070f2: 97 90 ff ff  	auipc	ra, 1048569
802070f6: e7 80 00 0e  	jalr	224(ra)
;             handle_ex(header, request_descriptor, true);
802070fa: 03 35 84 fd  	ld	a0, -40(s0)
802070fe: 83 35 84 fc  	ld	a1, -56(s0)
80207102: 97 c0 00 00  	auipc	ra, 12
80207106: e7 80 60 63  	jalr	1590(ra)
;         if (initialized) {
8020710a: 09 a0        	j	0x8020710c <.LBB93_18+0x22>
;     fn handler() void {
8020710c: 42 74        	ld	s0, 48(sp)
8020710e: e2 70        	ld	ra, 56(sp)
80207110: 21 61        	addi	sp, sp, 64
80207112: 82 80        	ret

0000000080207114 <.LBB93_19>:
;         const header = @intToPtr(*volatile ControlHeader, kernel.arch.Virtual.AddressSpace.physical_to_virtual(descriptor.address));
80207114: 17 65 01 00  	auipc	a0, 22
80207118: 13 05 45 3e  	addi	a0, a0, 996
8020711c: 81 45        	mv	a1, zero
8020711e: 97 90 ff ff  	auipc	ra, 1048569
80207122: e7 80 20 f8  	jalr	-126(ra)
80207126: 03 35 04 fc  	ld	a0, -64(s0)
8020712a: 1d 89        	andi	a0, a0, 7
8020712c: 81 45        	mv	a1, zero
8020712e: 63 0c b5 00  	beq	a0, a1, 0x80207146 <.LBB93_20+0x12>
80207132: 09 a0        	j	0x80207134 <.LBB93_20>

0000000080207134 <.LBB93_20>:
80207134: 17 65 01 00  	auipc	a0, 22
80207138: 13 05 45 51  	addi	a0, a0, 1300
8020713c: 81 45        	mv	a1, zero
8020713e: 97 90 ff ff  	auipc	ra, 1048569
80207142: e7 80 20 f6  	jalr	-158(ra)
80207146: 03 35 04 fc  	ld	a0, -64(s0)
8020714a: 23 3c a4 fc  	sd	a0, -40(s0)

000000008020714e <.LBB93_21>:
;         const request_descriptor = control_queue.get_descriptor(descriptor.next) orelse @panic("unable to request descriptor");
8020714e: 17 d5 66 00  	auipc	a0, 1645
80207152: 13 05 a5 f0  	addi	a0, a0, -246
80207156: 08 61        	ld	a0, 0(a0)
80207158: 83 35 04 fe  	ld	a1, -32(s0)
8020715c: 83 95 e5 00  	lh	a1, 14(a1)
80207160: 97 c0 00 00  	auipc	ra, 12
80207164: e7 80 60 55  	jalr	1366(ra)
80207168: 23 38 a4 fc  	sd	a0, -48(s0)
8020716c: 81 45        	mv	a1, zero
8020716e: e3 1f b5 f4  	bne	a0, a1, 0x802070cc <.LBB93_16+0x12>
80207172: a1 b7        	j	0x802070ba <.LBB93_16>

0000000080207174 <std.mem.asBytes>:
; pub fn asBytes(ptr: anytype) AsBytesReturnType(@TypeOf(ptr)) {
80207174: 79 71        	addi	sp, sp, -48
80207176: 06 f4        	sd	ra, 40(sp)
80207178: 22 f0        	sd	s0, 32(sp)
8020717a: 00 18        	addi	s0, sp, 48
8020717c: 23 30 a4 fe  	sd	a0, -32(s0)
;     return @ptrCast(AsBytesReturnType(P), ptr);
80207180: aa 85        	mv	a1, a0
80207182: 23 3c b4 fc  	sd	a1, -40(s0)
80207186: 81 45        	mv	a1, zero
80207188: 63 1c b5 00  	bne	a0, a1, 0x802071a0 <.LBB94_3+0x12>
8020718c: 09 a0        	j	0x8020718e <.LBB94_3>

000000008020718e <.LBB94_3>:
8020718e: 17 65 01 00  	auipc	a0, 22
80207192: 13 05 a5 36  	addi	a0, a0, 874
80207196: 81 45        	mv	a1, zero
80207198: 97 90 ff ff  	auipc	ra, 1048569
8020719c: e7 80 80 f0  	jalr	-248(ra)
802071a0: 03 35 84 fd  	ld	a0, -40(s0)
802071a4: 23 34 a4 fe  	sd	a0, -24(s0)
802071a8: 02 74        	ld	s0, 32(sp)
802071aa: a2 70        	ld	ra, 40(sp)
802071ac: 45 61        	addi	sp, sp, 48
802071ae: 82 80        	ret

00000000802071b0 <arch.riscv64.virtio_common.gpu.operate>:
;     pub fn operate(request_bytes: []const u8, response_size: u32) void {
802071b0: 69 71        	addi	sp, sp, -304
802071b2: 06 f6        	sd	ra, 296(sp)
802071b4: 22 f2        	sd	s0, 288(sp)
802071b6: 00 1a        	addi	s0, sp, 304
802071b8: 23 34 a4 f2  	sd	a0, -216(s0)
802071bc: 23 2a b4 f2  	sw	a1, -204(s0)
;         const request = kernel.heap.allocate(request_bytes.len, true, true) orelse @panic("unable to allocate memory for gpu request");
802071c0: 10 65        	ld	a2, 8(a0)

00000000802071c2 <.LBB95_13>:
802071c2: 97 05 06 00  	auipc	a1, 96
802071c6: 93 85 e5 63  	addi	a1, a1, 1598
802071ca: 13 05 84 fc  	addi	a0, s0, -56
802071ce: 05 47        	addi	a4, zero, 1
802071d0: ba 86        	mv	a3, a4
802071d2: 97 00 00 00  	auipc	ra, 0
802071d6: e7 80 80 29  	jalr	664(ra)
802071da: 03 45 04 fe  	lbu	a0, -32(s0)
802071de: 81 45        	mv	a1, zero
802071e0: 63 1c b5 00  	bne	a0, a1, 0x802071f8 <.LBB95_14+0x12>
802071e4: 09 a0        	j	0x802071e6 <.LBB95_14>

00000000802071e6 <.LBB95_14>:
802071e6: 17 75 01 00  	auipc	a0, 23
802071ea: 13 05 a5 93  	addi	a0, a0, -1734
802071ee: 81 45        	mv	a1, zero
802071f0: 97 90 ff ff  	auipc	ra, 1048569
802071f4: e7 80 00 eb  	jalr	-336(ra)
802071f8: 03 35 84 fd  	ld	a0, -40(s0)
802071fc: 23 30 a4 fc  	sd	a0, -64(s0)
80207200: 03 35 04 fd  	ld	a0, -48(s0)
80207204: 23 3c a4 fa  	sd	a0, -72(s0)
80207208: 03 35 84 fc  	ld	a0, -56(s0)
8020720c: 23 38 a4 fa  	sd	a0, -80(s0)
80207210: 09 a0        	j	0x80207212 <.LBB95_14+0x2c>
;         kernel.copy(u8, @intToPtr([*]u8, request.virtual)[0..request_bytes.len], request_bytes);
80207212: 03 35 84 fb  	ld	a0, -72(s0)
80207216: 23 30 a4 f2  	sd	a0, -224(s0)
8020721a: 81 45        	mv	a1, zero
8020721c: 63 03 b5 0a  	beq	a0, a1, 0x802072c2 <.LBB95_17>
80207220: 55 a8        	j	0x802072d4 <.LBB95_17+0x12>

0000000080207222 <.LBB95_15>:
;             .address = (kernel.heap.allocate(response_size, true, true) orelse @panic("unable to get memory for gpu response")).physical,
80207222: 17 75 01 00  	auipc	a0, 23
80207226: 13 05 e5 90  	addi	a0, a0, -1778
8020722a: 81 45        	mv	a1, zero
8020722c: 97 90 ff ff  	auipc	ra, 1048569
80207230: e7 80 40 e7  	jalr	-396(ra)
80207234: 13 05 84 f5  	addi	a0, s0, -168
;             .address = (kernel.heap.allocate(response_size, true, true) orelse @panic("unable to get memory for gpu response")).physical,
80207238: 23 3c a4 f0  	sd	a0, -232(s0)
8020723c: 03 35 84 f6  	ld	a0, -152(s0)
80207240: 23 38 a4 f4  	sd	a0, -176(s0)
80207244: 03 35 04 f6  	ld	a0, -160(s0)
80207248: 23 34 a4 f4  	sd	a0, -184(s0)
8020724c: 03 35 84 f5  	ld	a0, -168(s0)
80207250: 23 30 a4 f4  	sd	a0, -192(s0)
80207254: 09 a0        	j	0x80207256 <.LBB95_15+0x34>
80207256: 83 35 84 ef  	ld	a1, -264(s0)
8020725a: 03 36 04 ef  	ld	a2, -272(s0)
8020725e: 03 35 84 f1  	ld	a0, -232(s0)
80207262: 08 61        	ld	a0, 0(a0)
80207264: 08 e2        	sd	a0, 0(a2)
80207266: 09 45        	addi	a0, zero, 2
;             .flags = @enumToInt(Descriptor.Flag.write_only),
80207268: 23 96 a5 00  	sh	a0, 12(a1)
;             .length = response_size,
8020726c: 03 25 44 f3  	lw	a0, -204(s0)
80207270: 88 c5        	sw	a0, 8(a1)
80207272: 01 45        	mv	a0, zero
;             .next = 0,
80207274: 23 97 a5 00  	sh	a0, 14(a1)

0000000080207278 <.LBB95_16>:
;         control_queue.push_descriptor(&descriptor1).* = Descriptor{
80207278: 17 d5 66 00  	auipc	a0, 1645
8020727c: 13 05 05 de  	addi	a0, a0, -544
80207280: 08 61        	ld	a0, 0(a0)
80207282: 93 05 64 f8  	addi	a1, s0, -122
80207286: 97 c0 00 00  	auipc	ra, 12
8020728a: e7 80 e0 6f  	jalr	1790(ra)
8020728e: aa 85        	mv	a1, a0
80207290: 03 35 84 f2  	ld	a0, -216(s0)
80207294: 2e 86        	mv	a2, a1
80207296: 23 30 c4 f0  	sd	a2, -256(s0)
8020729a: 23 3c b4 f2  	sd	a1, -200(s0)
;             .address = request.physical,
8020729e: 03 36 04 fb  	ld	a2, -80(s0)
802072a2: 90 e1        	sd	a2, 0(a1)
802072a4: 05 46        	addi	a2, zero, 1
;             .flags = @enumToInt(Descriptor.Flag.next),
802072a6: 23 96 c5 00  	sh	a2, 12(a1)
;             .length = @intCast(u32, request_bytes.len),
802072aa: a1 05        	addi	a1, a1, 8
802072ac: 23 34 b4 f0  	sd	a1, -248(s0)
802072b0: 08 65        	ld	a0, 8(a0)
802072b2: 23 38 a4 f0  	sd	a0, -240(s0)
802072b6: 93 15 05 02  	slli	a1, a0, 32
802072ba: 81 91        	srli	a1, a1, 32
802072bc: 63 09 b5 0c  	beq	a0, a1, 0x8020738e <.LBB95_20+0x26>
802072c0: 11 aa        	j	0x802073d4 <.LBB95_23>

00000000802072c2 <.LBB95_17>:
;         kernel.copy(u8, @intToPtr([*]u8, request.virtual)[0..request_bytes.len], request_bytes);
802072c2: 17 65 01 00  	auipc	a0, 22
802072c6: 13 05 65 23  	addi	a0, a0, 566
802072ca: 81 45        	mv	a1, zero
802072cc: 97 90 ff ff  	auipc	ra, 1048569
802072d0: e7 80 40 dd  	jalr	-556(ra)
802072d4: 03 35 04 f2  	ld	a0, -224(s0)
802072d8: 83 35 84 f2  	ld	a1, -216(s0)
802072dc: 23 34 a4 fa  	sd	a0, -88(s0)
802072e0: 8c 65        	ld	a1, 8(a1)
802072e2: 23 30 b4 ee  	sd	a1, -288(s0)
802072e6: 23 34 a4 ee  	sd	a0, -280(s0)
802072ea: 81 45        	mv	a1, zero
802072ec: 05 45        	addi	a0, zero, 1
802072ee: 63 1c b5 00  	bne	a0, a1, 0x80207306 <.LBB95_18+0x12>
802072f2: 09 a0        	j	0x802072f4 <.LBB95_18>

00000000802072f4 <.LBB95_18>:
802072f4: 17 65 01 00  	auipc	a0, 22
802072f8: 13 05 c5 00  	addi	a0, a0, 12
802072fc: 81 45        	mv	a1, zero
802072fe: 97 90 ff ff  	auipc	ra, 1048569
80207302: e7 80 20 da  	jalr	-606(ra)
80207306: 83 35 84 f2  	ld	a1, -216(s0)
8020730a: 03 35 04 ee  	ld	a0, -288(s0)
8020730e: 03 36 84 ee  	ld	a2, -280(s0)
80207312: 23 3c c4 f8  	sd	a2, -104(s0)
80207316: 23 30 a4 fa  	sd	a0, -96(s0)
8020731a: 88 61        	ld	a0, 0(a1)
8020731c: 23 34 a4 f8  	sd	a0, -120(s0)
80207320: 88 65        	ld	a0, 8(a1)
80207322: 23 38 a4 f8  	sd	a0, -112(s0)
80207326: 13 05 84 f9  	addi	a0, s0, -104
8020732a: 97 c0 00 00  	auipc	ra, 12
8020732e: e7 80 e0 5d  	jalr	1502(ra)
80207332: 01 45        	mv	a0, zero
;         var descriptor1: u16 = 0;
80207334: 23 3c a4 ec  	sd	a0, -296(s0)
80207338: 23 13 a4 f8  	sh	a0, -122(s0)
;         var descriptor2: u16 = 0;
8020733c: 23 12 a4 f8  	sh	a0, -124(s0)

0000000080207340 <.LBB95_19>:
;         control_queue.push_descriptor(&descriptor2).* = Descriptor{
80207340: 17 d5 66 00  	auipc	a0, 1645
80207344: 13 05 85 d1  	addi	a0, a0, -744
80207348: 08 61        	ld	a0, 0(a0)
8020734a: 93 05 44 f8  	addi	a1, s0, -124
8020734e: 97 c0 00 00  	auipc	ra, 12
80207352: e7 80 60 63  	jalr	1590(ra)
80207356: aa 85        	mv	a1, a0
80207358: 23 3c b4 ee  	sd	a1, -264(s0)
8020735c: 23 3c a4 f6  	sd	a0, -136(s0)
;             .address = (kernel.heap.allocate(response_size, true, true) orelse @panic("unable to get memory for gpu response")).physical,
80207360: 23 38 a4 ee  	sd	a0, -272(s0)
80207364: 03 66 44 f3  	lwu	a2, -204(s0)

0000000080207368 <.LBB95_20>:
80207368: 97 05 06 00  	auipc	a1, 96
8020736c: 93 85 85 49  	addi	a1, a1, 1176
80207370: 13 05 84 f5  	addi	a0, s0, -168
80207374: 05 47        	addi	a4, zero, 1
80207376: ba 86        	mv	a3, a4
80207378: 97 00 00 00  	auipc	ra, 0
8020737c: e7 80 20 0f  	jalr	242(ra)
80207380: 83 35 84 ed  	ld	a1, -296(s0)
80207384: 03 45 04 f7  	lbu	a0, -144(s0)
80207388: e3 16 b5 ea  	bne	a0, a1, 0x80207234 <.LBB95_15+0x12>
8020738c: 59 bd        	j	0x80207222 <.LBB95_15>
;             .length = @intCast(u32, request_bytes.len),
8020738e: 83 35 04 f0  	ld	a1, -256(s0)
80207392: 03 35 04 f1  	ld	a0, -240(s0)
80207396: 03 36 84 f0  	ld	a2, -248(s0)
8020739a: 08 c2        	sw	a0, 0(a2)
;             .next = descriptor2,
8020739c: 03 15 44 f8  	lh	a0, -124(s0)
802073a0: 23 97 a5 00  	sh	a0, 14(a1)

00000000802073a4 <.LBB95_21>:
;         control_queue.push_available(descriptor1);
802073a4: 17 d5 66 00  	auipc	a0, 1645
802073a8: 13 05 45 cb  	addi	a0, a0, -844
802073ac: 08 61        	ld	a0, 0(a0)
802073ae: 83 15 64 f8  	lh	a1, -122(s0)
802073b2: 97 c0 00 00  	auipc	ra, 12
802073b6: e7 80 40 6b  	jalr	1716(ra)

00000000802073ba <.LBB95_22>:
;         mmio.notify_queue();
802073ba: 17 d5 66 00  	auipc	a0, 1645
802073be: 13 05 65 c9  	addi	a0, a0, -874
802073c2: 0c 61        	ld	a1, 0(a0)
802073c4: 23 34 b4 fe  	sd	a1, -24(s0)
802073c8: 01 45        	mv	a0, zero
;         self.queue_notify = 0;
802073ca: a8 c9        	sw	a0, 80(a1)
;     pub fn operate(request_bytes: []const u8, response_size: u32) void {
802073cc: 12 74        	ld	s0, 288(sp)
802073ce: b2 70        	ld	ra, 296(sp)
802073d0: 55 61        	addi	sp, sp, 304
802073d2: 82 80        	ret

00000000802073d4 <.LBB95_23>:
;             .length = @intCast(u32, request_bytes.len),
802073d4: 17 65 01 00  	auipc	a0, 22
802073d8: 13 05 c5 f1  	addi	a0, a0, -228
802073dc: 81 45        	mv	a1, zero
802073de: 97 90 ff ff  	auipc	ra, 1048569
802073e2: e7 80 20 cc  	jalr	-830(ra)

00000000802073e6 <std.log.scoped(VirtioGPU).debug>:
;         pub fn debug(
802073e6: 41 11        	addi	sp, sp, -16
;             log(.debug, scope, format, args);
802073e8: 06 e4        	sd	ra, 8(sp)
802073ea: 22 e0        	sd	s0, 0(sp)
802073ec: 00 08        	addi	s0, sp, 16
802073ee: 97 c0 00 00  	auipc	ra, 12
802073f2: e7 80 00 74  	jalr	1856(ra)
;         ) void {
802073f6: 02 64        	ld	s0, 0(sp)
802073f8: a2 60        	ld	ra, 8(sp)
802073fa: 41 01        	addi	sp, sp, 16
802073fc: 82 80        	ret

00000000802073fe <std.log.scoped(VirtioGPU).debug.22>:
;         pub fn debug(
802073fe: 79 71        	addi	sp, sp, -48
;             log(.debug, scope, format, args);
80207400: 06 f4        	sd	ra, 40(sp)
80207402: 22 f0        	sd	s0, 32(sp)
80207404: 00 18        	addi	s0, sp, 48
80207406: 0c 6d        	ld	a1, 24(a0)
80207408: 23 34 b4 fe  	sd	a1, -24(s0)
8020740c: 0c 69        	ld	a1, 16(a0)
8020740e: 23 30 b4 fe  	sd	a1, -32(s0)
80207412: 0c 65        	ld	a1, 8(a0)
80207414: 23 3c b4 fc  	sd	a1, -40(s0)
80207418: 0c 61        	ld	a1, 0(a0)
8020741a: 23 38 b4 fc  	sd	a1, -48(s0)
8020741e: 97 c0 00 00  	auipc	ra, 12
80207422: e7 80 00 74  	jalr	1856(ra)
;         ) void {
80207426: 02 74        	ld	s0, 32(sp)
80207428: a2 70        	ld	ra, 40(sp)
8020742a: 45 61        	addi	sp, sp, 48
8020742c: 82 80        	ret

000000008020742e <std.mem.asBytes.24>:
; pub fn asBytes(ptr: anytype) AsBytesReturnType(@TypeOf(ptr)) {
8020742e: 79 71        	addi	sp, sp, -48
80207430: 06 f4        	sd	ra, 40(sp)
80207432: 22 f0        	sd	s0, 32(sp)
80207434: 00 18        	addi	s0, sp, 48
80207436: 23 30 a4 fe  	sd	a0, -32(s0)
;     return @ptrCast(AsBytesReturnType(P), ptr);
8020743a: aa 85        	mv	a1, a0
8020743c: 23 3c b4 fc  	sd	a1, -40(s0)
80207440: 81 45        	mv	a1, zero
80207442: 63 1c b5 00  	bne	a0, a1, 0x8020745a <.LBB98_3+0x12>
80207446: 09 a0        	j	0x80207448 <.LBB98_3>

0000000080207448 <.LBB98_3>:
80207448: 17 65 01 00  	auipc	a0, 22
8020744c: 13 05 05 0b  	addi	a0, a0, 176
80207450: 81 45        	mv	a1, zero
80207452: 97 90 ff ff  	auipc	ra, 1048569
80207456: e7 80 e0 c4  	jalr	-946(ra)
8020745a: 03 35 84 fd  	ld	a0, -40(s0)
8020745e: 23 34 a4 fe  	sd	a0, -24(s0)
80207462: 02 74        	ld	s0, 32(sp)
80207464: a2 70        	ld	ra, 40(sp)
80207466: 45 61        	addi	sp, sp, 48
80207468: 82 80        	ret

000000008020746a <heap.allocate>:
; pub fn allocate(self: *@This(), size: u64, zero: bool, separate_page: bool) ?AllocationResult {
8020746a: 55 71        	addi	sp, sp, -208
8020746c: 86 e5        	sd	ra, 200(sp)
8020746e: a2 e1        	sd	s0, 192(sp)
80207470: 80 09        	addi	s0, sp, 208
80207472: 23 30 a4 f8  	sd	a0, -128(s0)
80207476: 23 3c b4 f8  	sd	a1, -104(s0)
8020747a: 23 38 c4 f8  	sd	a2, -112(s0)
8020747e: 13 f5 16 00  	andi	a0, a3, 1
80207482: a3 07 a4 f8  	sb	a0, -113(s0)
80207486: 13 75 17 00  	andi	a0, a4, 1
8020748a: 23 07 a4 f8  	sb	a0, -114(s0)
;     self.lock.acquire();
8020748e: 13 85 05 08  	addi	a0, a1, 128
80207492: 97 90 ff ff  	auipc	ra, 1048569
80207496: e7 80 60 45  	jalr	1110(ra)
;     kernel.assert(@src(), size < kernel.maxInt(u32));
8020749a: 03 35 04 f9  	ld	a0, -112(s0)
8020749e: fd 55        	addi	a1, zero, -1
802074a0: 81 91        	srli	a1, a1, 32
802074a2: b3 35 b5 00  	sltu	a1, a0, a1

00000000802074a6 <.LBB99_22>:
802074a6: 17 65 01 00  	auipc	a0, 22
802074aa: 13 05 a5 69  	addi	a0, a0, 1690
802074ae: 97 90 ff ff  	auipc	ra, 1048569
802074b2: e7 80 e0 d5  	jalr	-674(ra)
;     if (separate_page) {
802074b6: 03 45 e4 f8  	lbu	a0, -114(s0)
802074ba: 81 45        	mv	a1, zero
802074bc: 63 0d b5 0c  	beq	a0, a1, 0x80207596 <.LBB99_24+0x70>
802074c0: 09 a0        	j	0x802074c2 <.LBB99_22+0x1c>
;         const page_count = kernel.bytes_to_pages(size);
802074c2: 83 35 04 f9  	ld	a1, -112(s0)
802074c6: 23 3c b4 fc  	sd	a1, -40(s0)
;     const pages = (bytes / page_size) + @boolToInt(bytes % page_size != 0);
802074ca: 13 d5 c5 00  	srli	a0, a1, 12
802074ce: 05 66        	lui	a2, 1
802074d0: 7d 36        	addiw	a2, a2, -1
802074d2: f1 8d        	and	a1, a1, a2
802074d4: b3 35 b0 00  	snez	a1, a1
802074d8: 2e 95        	add	a0, a0, a1
802074da: 23 3c a4 f6  	sd	a0, -136(s0)
802074de: 81 45        	mv	a1, zero
802074e0: 05 45        	addi	a0, zero, 1
802074e2: 63 1c b5 00  	bne	a0, a1, 0x802074fa <.LBB99_23+0x12>
802074e6: 09 a0        	j	0x802074e8 <.LBB99_23>

00000000802074e8 <.LBB99_23>:
802074e8: 17 65 01 00  	auipc	a0, 22
802074ec: 13 05 85 f9  	addi	a0, a0, -104
802074f0: 81 45        	mv	a1, zero
802074f2: 97 90 ff ff  	auipc	ra, 1048569
802074f6: e7 80 e0 ba  	jalr	-1106(ra)
802074fa: 83 35 84 f7  	ld	a1, -136(s0)
802074fe: 23 30 b4 fe  	sd	a1, -32(s0)
;     return pages;
80207502: 23 34 b4 fe  	sd	a1, -24(s0)
;         const page_count = kernel.bytes_to_pages(size);
80207506: 23 38 b4 fc  	sd	a1, -48(s0)
8020750a: 13 05 04 fc  	addi	a0, s0, -64
;         const physical_result = Physical.allocate1(page_count) orelse return null;
8020750e: 97 60 00 00  	auipc	ra, 6
80207512: e7 80 c0 d4  	jalr	-692(ra)
80207516: 03 45 84 fc  	lbu	a0, -56(s0)
8020751a: 81 45        	mv	a1, zero
8020751c: 63 1d b5 02  	bne	a0, a1, 0x80207556 <.LBB99_24+0x30>
80207520: 09 a0        	j	0x80207522 <.LBB99_23+0x3a>
80207522: 83 35 04 f8  	ld	a1, -128(s0)

0000000080207526 <.LBB99_24>:
80207526: 17 e5 01 00  	auipc	a0, 30
8020752a: 13 05 25 8e  	addi	a0, a0, -1822
;         const physical_result = Physical.allocate1(page_count) orelse return null;
8020752e: 10 6d        	ld	a2, 24(a0)
80207530: 90 ed        	sd	a2, 24(a1)
80207532: 10 69        	ld	a2, 16(a0)
80207534: 90 e9        	sd	a2, 16(a1)
80207536: 10 65        	ld	a2, 8(a0)
80207538: 90 e5        	sd	a2, 8(a1)
8020753a: 08 61        	ld	a0, 0(a0)
8020753c: 88 e1        	sd	a0, 0(a1)
;     defer self.lock.release();
8020753e: 03 35 84 f9  	ld	a0, -104(s0)
80207542: 13 05 05 08  	addi	a0, a0, 128
80207546: 97 90 ff ff  	auipc	ra, 1048569
8020754a: e7 80 60 49  	jalr	1174(ra)
;         const physical_result = Physical.allocate1(page_count) orelse return null;
8020754e: 0e 64        	ld	s0, 192(sp)
80207550: ae 60        	ld	ra, 200(sp)
80207552: 69 61        	addi	sp, sp, 208
80207554: 82 80        	ret
80207556: 03 35 04 fc  	ld	a0, -64(s0)
8020755a: 23 3c a4 fa  	sd	a0, -72(s0)
8020755e: 09 a0        	j	0x80207560 <.LBB99_24+0x3a>
80207560: 03 35 04 f8  	ld	a0, -128(s0)
80207564: 85 45        	addi	a1, zero, 1
;         return AllocationResult{
80207566: 23 0c b5 00  	sb	a1, 24(a0)
8020756a: aa 85        	mv	a1, a0
;             .physical = physical_result,
8020756c: 23 30 b4 f6  	sd	a1, -160(s0)
80207570: 83 35 84 fb  	ld	a1, -72(s0)
80207574: 0c e1        	sd	a1, 0(a0)
;             .virtual = physical_result,
80207576: 83 35 84 fb  	ld	a1, -72(s0)
8020757a: 0c e5        	sd	a1, 8(a0)
;             .asked_size = @intCast(u32, size),
8020757c: 41 05        	addi	a0, a0, 16
8020757e: 23 34 a4 f6  	sd	a0, -152(s0)
80207582: 03 35 04 f9  	ld	a0, -112(s0)
80207586: 23 38 a4 f6  	sd	a0, -144(s0)
8020758a: 93 15 05 02  	slli	a1, a0, 32
8020758e: 81 91        	srli	a1, a1, 32
80207590: 63 0c b5 08  	beq	a0, a1, 0x80207628 <.LBB99_28+0x10>
80207594: c1 a0        	j	0x80207654 <.LBB99_29>
;         if (size < region_default_size) {
80207596: 03 35 04 f9  	ld	a0, -112(s0)
8020759a: 41 81        	srli	a0, a0, 16
8020759c: 81 45        	mv	a1, zero
8020759e: 63 14 b5 06  	bne	a0, a1, 0x80207606 <.LBB99_27>
802075a2: 09 a0        	j	0x802075a4 <.LBB99_24+0x7e>
;             for (self.regions) |maybe_region| {
802075a4: 03 35 84 f9  	ld	a0, -104(s0)
802075a8: 23 3c a4 f4  	sd	a0, -168(s0)
802075ac: 01 45        	mv	a0, zero
802075ae: 23 38 a4 fa  	sd	a0, -80(s0)
802075b2: 09 a0        	j	0x802075b4 <.LBB99_24+0x8e>
802075b4: 83 35 04 fb  	ld	a1, -80(s0)
802075b8: 23 38 b4 f4  	sd	a1, -176(s0)
802075bc: 3d 45        	addi	a0, zero, 15
802075be: 63 6c b5 04  	bltu	a0, a1, 0x80207616 <.LBB99_27+0x10>
802075c2: 09 a0        	j	0x802075c4 <.LBB99_24+0x9e>
802075c4: 03 35 84 f5  	ld	a0, -168(s0)
802075c8: 83 35 04 f5  	ld	a1, -176(s0)
802075cc: 8e 05        	slli	a1, a1, 3
802075ce: 2e 95        	add	a0, a0, a1
802075d0: 08 61        	ld	a0, 0(a0)
802075d2: 23 34 a4 fa  	sd	a0, -88(s0)
802075d6: 81 45        	mv	a1, zero
;                 if (maybe_region) |region| {
802075d8: 63 0f b5 00  	beq	a0, a1, 0x802075f6 <.LBB99_26>
802075dc: 09 a0        	j	0x802075de <.LBB99_24+0xb8>
802075de: 03 35 84 fa  	ld	a0, -88(s0)
802075e2: 23 30 a4 fa  	sd	a0, -96(s0)

00000000802075e6 <.LBB99_25>:
;                     TODO(@src());
802075e6: 17 65 01 00  	auipc	a0, 22
802075ea: 13 05 25 58  	addi	a0, a0, 1410
802075ee: 97 90 ff ff  	auipc	ra, 1048569
802075f2: e7 80 40 be  	jalr	-1052(ra)

00000000802075f6 <.LBB99_26>:
;                     TODO(@src());
802075f6: 17 65 01 00  	auipc	a0, 22
802075fa: 13 05 a5 59  	addi	a0, a0, 1434
802075fe: 97 90 ff ff  	auipc	ra, 1048569
80207602: e7 80 40 bd  	jalr	-1068(ra)

0000000080207606 <.LBB99_27>:
;             TODO(@src());
80207606: 17 65 01 00  	auipc	a0, 22
8020760a: 13 05 25 5b  	addi	a0, a0, 1458
8020760e: 97 90 ff ff  	auipc	ra, 1048569
80207612: e7 80 40 bc  	jalr	-1084(ra)
;         if (size < region_default_size) {
80207616: 09 a0        	j	0x80207618 <.LBB99_28>

0000000080207618 <.LBB99_28>:
;         TODO(@src());
80207618: 17 65 01 00  	auipc	a0, 22
8020761c: 13 05 85 5c  	addi	a0, a0, 1480
80207620: 97 90 ff ff  	auipc	ra, 1048569
80207624: e7 80 20 bb  	jalr	-1102(ra)
;             .asked_size = @intCast(u32, size),
80207628: 03 35 04 f6  	ld	a0, -160(s0)
8020762c: 83 35 04 f7  	ld	a1, -144(s0)
80207630: 03 36 84 f6  	ld	a2, -152(s0)
80207634: 0c c2        	sw	a1, 0(a2)
;             .given_size = @intCast(u32, page_count * kernel.arch.page_size),
80207636: 51 05        	addi	a0, a0, 20
80207638: 23 30 a4 f4  	sd	a0, -192(s0)
8020763c: 83 35 04 fd  	ld	a1, -48(s0)
80207640: 7d 55        	addi	a0, zero, -1
80207642: 31 81        	srli	a0, a0, 12
80207644: 6d 8d        	and	a0, a0, a1
80207646: 13 96 c5 00  	slli	a2, a1, 12
8020764a: 23 34 c4 f4  	sd	a2, -184(s0)
8020764e: 63 1c b5 00  	bne	a0, a1, 0x80207666 <.LBB99_30>
80207652: 1d a0        	j	0x80207678 <.LBB99_30+0x12>

0000000080207654 <.LBB99_29>:
;             .asked_size = @intCast(u32, size),
80207654: 17 65 01 00  	auipc	a0, 22
80207658: 13 05 c5 c9  	addi	a0, a0, -868
8020765c: 81 45        	mv	a1, zero
8020765e: 97 90 ff ff  	auipc	ra, 1048569
80207662: e7 80 20 a4  	jalr	-1470(ra)

0000000080207666 <.LBB99_30>:
;             .given_size = @intCast(u32, page_count * kernel.arch.page_size),
80207666: 17 65 01 00  	auipc	a0, 22
8020766a: 13 05 a5 e1  	addi	a0, a0, -486
8020766e: 81 45        	mv	a1, zero
80207670: 97 90 ff ff  	auipc	ra, 1048569
80207674: e7 80 00 a3  	jalr	-1488(ra)
80207678: 03 35 84 f4  	ld	a0, -184(s0)
8020767c: aa 85        	mv	a1, a0
8020767e: 23 3c b4 f2  	sd	a1, -200(s0)
80207682: 93 15 05 02  	slli	a1, a0, 32
80207686: 81 91        	srli	a1, a1, 32
80207688: 63 11 b5 04  	bne	a0, a1, 0x802076ca <.LBB99_31>
8020768c: 09 a0        	j	0x8020768e <.LBB99_30+0x28>
8020768e: 83 35 04 f8  	ld	a1, -128(s0)
80207692: 03 35 04 f6  	ld	a0, -160(s0)
80207696: 03 36 84 f3  	ld	a2, -200(s0)
8020769a: 83 36 04 f4  	ld	a3, -192(s0)
8020769e: 90 c2        	sw	a2, 0(a3)
802076a0: 05 46        	addi	a2, zero, 1
;         return AllocationResult{
802076a2: 23 8c c5 00  	sb	a2, 24(a1)
802076a6: 10 61        	ld	a2, 0(a0)
802076a8: 90 e1        	sd	a2, 0(a1)
802076aa: 10 65        	ld	a2, 8(a0)
802076ac: 90 e5        	sd	a2, 8(a1)
802076ae: 08 69        	ld	a0, 16(a0)
802076b0: 88 e9        	sd	a0, 16(a1)
;     defer self.lock.release();
802076b2: 03 35 84 f9  	ld	a0, -104(s0)
802076b6: 13 05 05 08  	addi	a0, a0, 128
802076ba: 97 90 ff ff  	auipc	ra, 1048569
802076be: e7 80 20 32  	jalr	802(ra)
;         return AllocationResult{
802076c2: 0e 64        	ld	s0, 192(sp)
802076c4: ae 60        	ld	ra, 200(sp)
802076c6: 69 61        	addi	sp, sp, 208
802076c8: 82 80        	ret

00000000802076ca <.LBB99_31>:
;             .given_size = @intCast(u32, page_count * kernel.arch.page_size),
802076ca: 17 65 01 00  	auipc	a0, 22
802076ce: 13 05 65 c2  	addi	a0, a0, -986
802076d2: 81 45        	mv	a1, zero
802076d4: 97 90 ff ff  	auipc	ra, 1048569
802076d8: e7 80 c0 9c  	jalr	-1588(ra)

00000000802076dc <std.mem.asBytes.26>:
; pub fn asBytes(ptr: anytype) AsBytesReturnType(@TypeOf(ptr)) {
802076dc: 79 71        	addi	sp, sp, -48
802076de: 06 f4        	sd	ra, 40(sp)
802076e0: 22 f0        	sd	s0, 32(sp)
802076e2: 00 18        	addi	s0, sp, 48
802076e4: 23 30 a4 fe  	sd	a0, -32(s0)
;     return @ptrCast(AsBytesReturnType(P), ptr);
802076e8: aa 85        	mv	a1, a0
802076ea: 23 3c b4 fc  	sd	a1, -40(s0)
802076ee: 81 45        	mv	a1, zero
802076f0: 63 1c b5 00  	bne	a0, a1, 0x80207708 <.LBB100_3+0x12>
802076f4: 09 a0        	j	0x802076f6 <.LBB100_3>

00000000802076f6 <.LBB100_3>:
802076f6: 17 65 01 00  	auipc	a0, 22
802076fa: 13 05 25 e0  	addi	a0, a0, -510
802076fe: 81 45        	mv	a1, zero
80207700: 97 90 ff ff  	auipc	ra, 1048569
80207704: e7 80 00 9a  	jalr	-1632(ra)
80207708: 03 35 84 fd  	ld	a0, -40(s0)
8020770c: 23 34 a4 fe  	sd	a0, -24(s0)
80207710: 02 74        	ld	s0, 32(sp)
80207712: a2 70        	ld	ra, 40(sp)
80207714: 45 61        	addi	sp, sp, 48
80207716: 82 80        	ret

0000000080207718 <std.log.scoped(VirtioGPU).debug.27>:
;         pub fn debug(
80207718: 41 11        	addi	sp, sp, -16
;             log(.debug, scope, format, args);
8020771a: 06 e4        	sd	ra, 8(sp)
8020771c: 22 e0        	sd	s0, 0(sp)
8020771e: 00 08        	addi	s0, sp, 16
80207720: 97 c0 00 00  	auipc	ra, 12
80207724: e7 80 e0 48  	jalr	1166(ra)
;         ) void {
80207728: 02 64        	ld	s0, 0(sp)
8020772a: a2 60        	ld	ra, 8(sp)
8020772c: 41 01        	addi	sp, sp, 16
8020772e: 82 80        	ret

0000000080207730 <arch.riscv64.virtual.AddressSpace.virtual_to_physical>:
;     pub fn virtual_to_physical(virtual: u64) u64 {
80207730: 01 11        	addi	sp, sp, -32
80207732: 06 ec        	sd	ra, 24(sp)
80207734: 22 e8        	sd	s0, 16(sp)
80207736: 00 10        	addi	s0, sp, 32
80207738: 23 30 a4 fe  	sd	a0, -32(s0)
;         return virtual;
8020773c: 23 34 a4 fe  	sd	a0, -24(s0)
80207740: 42 64        	ld	s0, 16(sp)
80207742: e2 60        	ld	ra, 24(sp)
80207744: 05 61        	addi	sp, sp, 32
80207746: 82 80        	ret

0000000080207748 <arch.riscv64.virtio_common.block.operate>:
;     pub fn operate(comptime operation: Operation, sector_index: u64, sector_buffer_physical_address: u64) void {
80207748: 15 71        	addi	sp, sp, -224
8020774a: 86 ed        	sd	ra, 216(sp)
8020774c: a2 e9        	sd	s0, 208(sp)
8020774e: 80 11        	addi	s0, sp, 224
80207750: 23 34 a4 f4  	sd	a0, -184(s0)
80207754: 23 30 b4 f4  	sd	a1, -192(s0)

0000000080207758 <.LBB103_11>:
;         const status_buffer = kernel.heap.allocate(status_size, true, true) orelse @panic("status buffer unable to be allocated");
80207758: 97 05 06 00  	auipc	a1, 96
8020775c: 93 85 85 0a  	addi	a1, a1, 168
80207760: 13 05 84 fc  	addi	a0, s0, -56
80207764: 05 47        	addi	a4, zero, 1
80207766: 3a 86        	mv	a2, a4
80207768: ba 86        	mv	a3, a4
8020776a: 97 00 00 00  	auipc	ra, 0
8020776e: e7 80 00 d0  	jalr	-768(ra)
80207772: 03 45 04 fe  	lbu	a0, -32(s0)
80207776: 81 45        	mv	a1, zero
80207778: 63 1c b5 00  	bne	a0, a1, 0x80207790 <.LBB103_12+0x12>
8020777c: 09 a0        	j	0x8020777e <.LBB103_12>

000000008020777e <.LBB103_12>:
8020777e: 17 65 01 00  	auipc	a0, 22
80207782: 13 05 a5 48  	addi	a0, a0, 1162
80207786: 81 45        	mv	a1, zero
80207788: 97 90 ff ff  	auipc	ra, 1048569
8020778c: e7 80 80 91  	jalr	-1768(ra)
80207790: 03 35 84 fd  	ld	a0, -40(s0)
80207794: 23 30 a4 fc  	sd	a0, -64(s0)
80207798: 03 35 04 fd  	ld	a0, -48(s0)
8020779c: 23 3c a4 fa  	sd	a0, -72(s0)
802077a0: 03 35 84 fc  	ld	a0, -56(s0)
802077a4: 23 38 a4 fa  	sd	a0, -80(s0)
802077a8: 09 a0        	j	0x802077aa <.LBB103_13>

00000000802077aa <.LBB103_13>:
;         const header_buffer = kernel.heap.allocate(header_size, true, true) orelse @panic("header buffer unable to be allocated");
802077aa: 97 05 06 00  	auipc	a1, 96
802077ae: 93 85 65 05  	addi	a1, a1, 86
802077b2: 13 05 04 f9  	addi	a0, s0, -112
802077b6: 41 46        	addi	a2, zero, 16
802077b8: 05 47        	addi	a4, zero, 1
802077ba: ba 86        	mv	a3, a4
802077bc: 97 00 00 00  	auipc	ra, 0
802077c0: e7 80 e0 ca  	jalr	-850(ra)
802077c4: 03 45 84 fa  	lbu	a0, -88(s0)
802077c8: 81 45        	mv	a1, zero
802077ca: 63 1c b5 00  	bne	a0, a1, 0x802077e2 <.LBB103_14+0x12>
802077ce: 09 a0        	j	0x802077d0 <.LBB103_14>

00000000802077d0 <.LBB103_14>:
802077d0: 17 65 01 00  	auipc	a0, 22
802077d4: 13 05 85 44  	addi	a0, a0, 1096
802077d8: 81 45        	mv	a1, zero
802077da: 97 90 ff ff  	auipc	ra, 1048569
802077de: e7 80 60 8c  	jalr	-1850(ra)
802077e2: 03 35 04 fa  	ld	a0, -96(s0)
802077e6: 23 34 a4 f8  	sd	a0, -120(s0)
802077ea: 03 35 84 f9  	ld	a0, -104(s0)
802077ee: 23 30 a4 f8  	sd	a0, -128(s0)
802077f2: 03 35 04 f9  	ld	a0, -112(s0)
802077f6: 23 3c a4 f6  	sd	a0, -136(s0)
802077fa: 09 a0        	j	0x802077fc <.LBB103_14+0x2c>
;         const header = @intToPtr(*Request.Header, header_buffer.virtual);
802077fc: 03 35 04 f8  	ld	a0, -128(s0)
80207800: 23 3c a4 f2  	sd	a0, -200(s0)
80207804: 81 45        	mv	a1, zero
80207806: 63 1c b5 00  	bne	a0, a1, 0x8020781e <.LBB103_15+0x12>
8020780a: 09 a0        	j	0x8020780c <.LBB103_15>

000000008020780c <.LBB103_15>:
8020780c: 17 65 01 00  	auipc	a0, 22
80207810: 13 05 c5 ce  	addi	a0, a0, -788
80207814: 81 45        	mv	a1, zero
80207816: 97 90 ff ff  	auipc	ra, 1048569
8020781a: e7 80 a0 88  	jalr	-1910(ra)
8020781e: 03 35 84 f3  	ld	a0, -200(s0)
80207822: 1d 89        	andi	a0, a0, 7
80207824: 81 45        	mv	a1, zero
80207826: 63 0c b5 00  	beq	a0, a1, 0x8020783e <.LBB103_16+0x12>
8020782a: 09 a0        	j	0x8020782c <.LBB103_16>

000000008020782c <.LBB103_16>:
8020782c: 17 65 01 00  	auipc	a0, 22
80207830: 13 05 c5 e1  	addi	a0, a0, -484
80207834: 81 45        	mv	a1, zero
80207836: 97 90 ff ff  	auipc	ra, 1048569
8020783a: e7 80 a0 86  	jalr	-1942(ra)
8020783e: 83 35 84 f3  	ld	a1, -200(s0)
80207842: 23 38 b4 f6  	sd	a1, -144(s0)
80207846: 01 45        	mv	a0, zero
;             .read => BlockType.in,
80207848: 23 38 a4 f2  	sd	a0, -208(s0)
8020784c: 88 c1        	sw	a0, 0(a1)
;         header.sector = sector_index;
8020784e: 03 36 04 f7  	ld	a2, -144(s0)
80207852: 83 35 84 f4  	ld	a1, -184(s0)
80207856: 0c e6        	sd	a1, 8(a2)
;         var descriptor1: u16 = 0;
80207858: 23 17 a4 f6  	sh	a0, -146(s0)
;         var descriptor2: u16 = 0;
8020785c: 23 16 a4 f6  	sh	a0, -148(s0)
;         var descriptor3: u16 = 0;
80207860: 23 15 a4 f6  	sh	a0, -150(s0)

0000000080207864 <.LBB103_17>:
;         queue.push_descriptor(&descriptor3).* = Descriptor{
80207864: 17 c5 66 00  	auipc	a0, 1644
80207868: 13 05 45 7e  	addi	a0, a0, 2020
8020786c: 23 34 a4 f2  	sd	a0, -216(s0)
80207870: 08 61        	ld	a0, 0(a0)
80207872: 93 05 a4 f6  	addi	a1, s0, -150
80207876: 97 c0 00 00  	auipc	ra, 12
8020787a: e7 80 e0 10  	jalr	270(ra)
8020787e: 83 35 04 f3  	ld	a1, -208(s0)
80207882: 2a 86        	mv	a2, a0
80207884: 03 35 84 f2  	ld	a0, -216(s0)
80207888: 23 30 c4 f6  	sd	a2, -160(s0)
;             .address = status_buffer.physical,
8020788c: 83 36 04 fb  	ld	a3, -80(s0)
80207890: 14 e2        	sd	a3, 0(a2)
80207892: 89 46        	addi	a3, zero, 2
;             .flags = @enumToInt(Descriptor.Flag.write_only),
80207894: 23 16 d6 00  	sh	a3, 12(a2)
80207898: 85 46        	addi	a3, zero, 1
;             .length = 1,
8020789a: 23 30 d4 f2  	sd	a3, -224(s0)
8020789e: 14 c6        	sw	a3, 8(a2)
;             .next = 0,
802078a0: 23 17 b6 00  	sh	a1, 14(a2)
;         queue.push_descriptor(&descriptor2).* = Descriptor{
802078a4: 08 61        	ld	a0, 0(a0)
802078a6: 93 05 c4 f6  	addi	a1, s0, -148
802078aa: 97 c0 00 00  	auipc	ra, 12
802078ae: e7 80 a0 0d  	jalr	218(ra)
802078b2: 2a 86        	mv	a2, a0
802078b4: 03 35 84 f2  	ld	a0, -216(s0)
802078b8: 23 3c c4 f4  	sd	a2, -168(s0)
;             .address = sector_buffer_physical_address,
802078bc: 83 35 04 f4  	ld	a1, -192(s0)
802078c0: 0c e2        	sd	a1, 0(a2)
802078c2: 8d 45        	addi	a1, zero, 3
;             .flags = @enumToInt(Descriptor.Flag.next) | if (operation == Operation.read) @enumToInt(Descriptor.Flag.write_only) else 0,
802078c4: 23 16 b6 00  	sh	a1, 12(a2)
802078c8: 93 05 00 20  	addi	a1, zero, 512
;             .length = kernel.arch.sector_size,
802078cc: 0c c6        	sw	a1, 8(a2)
;             .next = descriptor3,
802078ce: 83 15 a4 f6  	lh	a1, -150(s0)
802078d2: 23 17 b6 00  	sh	a1, 14(a2)
;         queue.push_descriptor(&descriptor1).* = Descriptor{
802078d6: 08 61        	ld	a0, 0(a0)
802078d8: 93 05 e4 f6  	addi	a1, s0, -146
802078dc: 97 c0 00 00  	auipc	ra, 12
802078e0: e7 80 80 0a  	jalr	168(ra)
802078e4: 83 35 04 f2  	ld	a1, -224(s0)
802078e8: 2a 86        	mv	a2, a0
802078ea: 03 35 84 f2  	ld	a0, -216(s0)
802078ee: 23 38 c4 f4  	sd	a2, -176(s0)
;             .address = header_buffer.physical,
802078f2: 83 36 84 f7  	ld	a3, -136(s0)
802078f6: 14 e2        	sd	a3, 0(a2)
;             .flags = @enumToInt(Descriptor.Flag.next),
802078f8: 23 16 b6 00  	sh	a1, 12(a2)
802078fc: c1 45        	addi	a1, zero, 16
;             .length = @sizeOf(Request.Header),
802078fe: 0c c6        	sw	a1, 8(a2)
;             .next = descriptor2,
80207900: 83 15 c4 f6  	lh	a1, -148(s0)
80207904: 23 17 b6 00  	sh	a1, 14(a2)
;         queue.push_available(descriptor1);
80207908: 08 61        	ld	a0, 0(a0)
8020790a: 83 15 e4 f6  	lh	a1, -146(s0)
8020790e: 97 c0 00 00  	auipc	ra, 12
80207912: e7 80 80 15  	jalr	344(ra)
80207916: 03 35 04 f3  	ld	a0, -208(s0)

000000008020791a <.LBB103_18>:
;         mmio.notify_queue();
8020791a: 97 c5 66 00  	auipc	a1, 1644
8020791e: 93 85 65 72  	addi	a1, a1, 1830
80207922: 8c 61        	ld	a1, 0(a1)
80207924: 23 34 b4 fe  	sd	a1, -24(s0)
;         self.queue_notify = 0;
80207928: a8 c9        	sw	a0, 80(a1)
;     pub fn operate(comptime operation: Operation, sector_index: u64, sector_buffer_physical_address: u64) void {
8020792a: 4e 64        	ld	s0, 208(sp)
8020792c: ee 60        	ld	ra, 216(sp)
8020792e: 2d 61        	addi	sp, sp, 224
80207930: 82 80        	ret

0000000080207932 <std.log.scoped(RISCV64).debug.28>:
;         pub fn debug(
80207932: 01 11        	addi	sp, sp, -32
;             log(.debug, scope, format, args);
80207934: 06 ec        	sd	ra, 24(sp)
80207936: 22 e8        	sd	s0, 16(sp)
80207938: 00 10        	addi	s0, sp, 32
8020793a: 0c 61        	ld	a1, 0(a0)
8020793c: 23 34 b4 fe  	sd	a1, -24(s0)
80207940: 97 c0 00 00  	auipc	ra, 12
80207944: e7 80 e0 29  	jalr	670(ra)
;         ) void {
80207948: 42 64        	ld	s0, 16(sp)
8020794a: e2 60        	ld	ra, 24(sp)
8020794c: 05 61        	addi	sp, sp, 32
8020794e: 82 80        	ret

0000000080207950 <std.log.scoped(PSF1).debug>:
;         pub fn debug(
80207950: 01 11        	addi	sp, sp, -32
;             log(.debug, scope, format, args);
80207952: 06 ec        	sd	ra, 24(sp)
80207954: 22 e8        	sd	s0, 16(sp)
80207956: 00 10        	addi	s0, sp, 32
80207958: 03 46 05 00  	lbu	a2, 0(a0)
8020795c: 83 45 15 00  	lbu	a1, 1(a0)
80207960: a2 05        	slli	a1, a1, 8
80207962: 4d 8e        	or	a2, a2, a1
80207964: 83 46 25 00  	lbu	a3, 2(a0)
80207968: 83 05 35 00  	lb	a1, 3(a0)
8020796c: a2 05        	slli	a1, a1, 8
8020796e: d5 8d        	or	a1, a1, a3
80207970: c2 05        	slli	a1, a1, 16
80207972: d1 8d        	or	a1, a1, a2
80207974: 23 24 b4 fe  	sw	a1, -24(s0)
80207978: 97 c0 00 00  	auipc	ra, 12
8020797c: e7 80 40 2a  	jalr	676(ra)
;         ) void {
80207980: 42 64        	ld	s0, 16(sp)
80207982: e2 60        	ld	ra, 24(sp)
80207984: 05 61        	addi	sp, sp, 32
80207986: 82 80        	ret

0000000080207988 <std.log.log.29>:
; fn log(
80207988: 79 71        	addi	sp, sp, -48
;     args: anytype,
8020798a: 06 f4        	sd	ra, 40(sp)
8020798c: 22 f0        	sd	s0, 32(sp)
8020798e: 00 18        	addi	s0, sp, 48
80207990: 23 3c a4 fc  	sd	a0, -40(s0)
80207994: 0d 45        	addi	a0, zero, 3
;         break :blk level;
80207996: a3 07 a4 fe  	sb	a0, -17(s0)
8020799a: 09 a0        	j	0x8020799c <std.log.log.29+0x14>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
8020799c: 03 45 f4 fe  	lbu	a0, -17(s0)
802079a0: 8d 45        	addi	a1, zero, 3
802079a2: 63 12 b5 02  	bne	a0, a1, 0x802079c6 <std.log.log.29+0x3e>
802079a6: 09 a0        	j	0x802079a8 <std.log.log.29+0x20>
;             root.log(message_level, scope, format, args);
802079a8: 03 35 84 fd  	ld	a0, -40(s0)
802079ac: 03 66 05 00  	lwu	a2, 0(a0)
802079b0: 83 65 45 00  	lwu	a1, 4(a0)
802079b4: 82 15        	slli	a1, a1, 32
802079b6: d1 8d        	or	a1, a1, a2
802079b8: 23 30 b4 fe  	sd	a1, -32(s0)
802079bc: 97 c0 00 00  	auipc	ra, 12
802079c0: e7 80 80 2b  	jalr	696(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
802079c4: 11 a0        	j	0x802079c8 <std.log.log.29+0x40>
802079c6: 09 a0        	j	0x802079c8 <std.log.log.29+0x40>
; ) void {
802079c8: 02 74        	ld	s0, 32(sp)
802079ca: a2 70        	ld	ra, 40(sp)
802079cc: 45 61        	addi	sp, sp, 48
802079ce: 82 80        	ret

00000000802079d0 <std.log.scoped(VirtioGPU).debug.31>:
;         pub fn debug(
802079d0: 41 11        	addi	sp, sp, -16
;             log(.debug, scope, format, args);
802079d2: 06 e4        	sd	ra, 8(sp)
802079d4: 22 e0        	sd	s0, 0(sp)
802079d6: 00 08        	addi	s0, sp, 16
802079d8: 97 c0 00 00  	auipc	ra, 12
802079dc: e7 80 c0 30  	jalr	780(ra)
;         ) void {
802079e0: 02 64        	ld	s0, 0(sp)
802079e2: a2 60        	ld	ra, 8(sp)
802079e4: 41 01        	addi	sp, sp, 16
802079e6: 82 80        	ret

00000000802079e8 <std.mem.asBytes.32>:
; pub fn asBytes(ptr: anytype) AsBytesReturnType(@TypeOf(ptr)) {
802079e8: 79 71        	addi	sp, sp, -48
802079ea: 06 f4        	sd	ra, 40(sp)
802079ec: 22 f0        	sd	s0, 32(sp)
802079ee: 00 18        	addi	s0, sp, 48
802079f0: 23 30 a4 fe  	sd	a0, -32(s0)
;     return @ptrCast(AsBytesReturnType(P), ptr);
802079f4: aa 85        	mv	a1, a0
802079f6: 23 3c b4 fc  	sd	a1, -40(s0)
802079fa: 81 45        	mv	a1, zero
802079fc: 63 1c b5 00  	bne	a0, a1, 0x80207a14 <.LBB108_3+0x12>
80207a00: 09 a0        	j	0x80207a02 <.LBB108_3>

0000000080207a02 <.LBB108_3>:
80207a02: 17 65 01 00  	auipc	a0, 22
80207a06: 13 05 65 af  	addi	a0, a0, -1290
80207a0a: 81 45        	mv	a1, zero
80207a0c: 97 80 ff ff  	auipc	ra, 1048568
80207a10: e7 80 40 69  	jalr	1684(ra)
80207a14: 03 35 84 fd  	ld	a0, -40(s0)
80207a18: 23 34 a4 fe  	sd	a0, -24(s0)
80207a1c: 02 74        	ld	s0, 32(sp)
80207a1e: a2 70        	ld	ra, 40(sp)
80207a20: 45 61        	addi	sp, sp, 48
80207a22: 82 80        	ret

0000000080207a24 <std.log.scoped(VirtioGPU).debug.34>:
;         pub fn debug(
80207a24: 41 11        	addi	sp, sp, -16
;             log(.debug, scope, format, args);
80207a26: 06 e4        	sd	ra, 8(sp)
80207a28: 22 e0        	sd	s0, 0(sp)
80207a2a: 00 08        	addi	s0, sp, 16
80207a2c: 97 c0 00 00  	auipc	ra, 12
80207a30: e7 80 80 2e  	jalr	744(ra)
;         ) void {
80207a34: 02 64        	ld	s0, 0(sp)
80207a36: a2 60        	ld	ra, 8(sp)
80207a38: 41 01        	addi	sp, sp, 16
80207a3a: 82 80        	ret

0000000080207a3c <std.mem.asBytes.35>:
; pub fn asBytes(ptr: anytype) AsBytesReturnType(@TypeOf(ptr)) {
80207a3c: 79 71        	addi	sp, sp, -48
80207a3e: 06 f4        	sd	ra, 40(sp)
80207a40: 22 f0        	sd	s0, 32(sp)
80207a42: 00 18        	addi	s0, sp, 48
80207a44: 23 30 a4 fe  	sd	a0, -32(s0)
;     return @ptrCast(AsBytesReturnType(P), ptr);
80207a48: aa 85        	mv	a1, a0
80207a4a: 23 3c b4 fc  	sd	a1, -40(s0)
80207a4e: 81 45        	mv	a1, zero
80207a50: 63 1c b5 00  	bne	a0, a1, 0x80207a68 <.LBB110_3+0x12>
80207a54: 09 a0        	j	0x80207a56 <.LBB110_3>

0000000080207a56 <.LBB110_3>:
80207a56: 17 65 01 00  	auipc	a0, 22
80207a5a: 13 05 25 aa  	addi	a0, a0, -1374
80207a5e: 81 45        	mv	a1, zero
80207a60: 97 80 ff ff  	auipc	ra, 1048568
80207a64: e7 80 00 64  	jalr	1600(ra)
80207a68: 03 35 84 fd  	ld	a0, -40(s0)
80207a6c: 23 34 a4 fe  	sd	a0, -24(s0)
80207a70: 02 74        	ld	s0, 32(sp)
80207a72: a2 70        	ld	ra, 40(sp)
80207a74: 45 61        	addi	sp, sp, 48
80207a76: 82 80        	ret

0000000080207a78 <std.log.log.36>:
; fn log(
80207a78: 79 71        	addi	sp, sp, -48
;     args: anytype,
80207a7a: 06 f4        	sd	ra, 40(sp)
80207a7c: 22 f0        	sd	s0, 32(sp)
80207a7e: 00 18        	addi	s0, sp, 48
80207a80: 23 38 a4 fc  	sd	a0, -48(s0)
80207a84: 0d 45        	addi	a0, zero, 3
;         break :blk level;
80207a86: a3 07 a4 fe  	sb	a0, -17(s0)
80207a8a: 09 a0        	j	0x80207a8c <std.log.log.36+0x14>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80207a8c: 03 45 f4 fe  	lbu	a0, -17(s0)
80207a90: 8d 45        	addi	a1, zero, 3
80207a92: 63 10 b5 02  	bne	a0, a1, 0x80207ab2 <std.log.log.36+0x3a>
80207a96: 09 a0        	j	0x80207a98 <std.log.log.36+0x20>
;             root.log(message_level, scope, format, args);
80207a98: 03 35 04 fd  	ld	a0, -48(s0)
80207a9c: 0c 65        	ld	a1, 8(a0)
80207a9e: 23 30 b4 fe  	sd	a1, -32(s0)
80207aa2: 0c 61        	ld	a1, 0(a0)
80207aa4: 23 3c b4 fc  	sd	a1, -40(s0)
80207aa8: 97 c0 00 00  	auipc	ra, 12
80207aac: e7 80 c0 29  	jalr	668(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80207ab0: 11 a0        	j	0x80207ab4 <std.log.log.36+0x3c>
80207ab2: 09 a0        	j	0x80207ab4 <std.log.log.36+0x3c>
; ) void {
80207ab4: 02 74        	ld	s0, 32(sp)
80207ab6: a2 70        	ld	ra, 40(sp)
80207ab8: 45 61        	addi	sp, sp, 48
80207aba: 82 80        	ret

0000000080207abc <log.0.37>:
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80207abc: 4d 71        	addi	sp, sp, -336
80207abe: 86 e6        	sd	ra, 328(sp)
80207ac0: a2 e2        	sd	s0, 320(sp)
80207ac2: 80 0a        	addi	s0, sp, 336
80207ac4: aa 85        	mv	a1, a0
80207ac6: 01 45        	mv	a0, zero
80207ac8: 23 38 a4 ea  	sd	a0, -336(s0)
80207acc: 23 3c a4 ec  	sd	a0, -296(s0)
80207ad0: 13 05 04 ef  	addi	a0, s0, -272
80207ad4: 23 30 a4 ee  	sd	a0, -288(s0)
80207ad8: 13 05 00 02  	addi	a0, zero, 32
80207adc: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80207ae0: 88 61        	ld	a0, 0(a1)
80207ae2: 23 34 a4 ec  	sd	a0, -312(s0)
80207ae6: 88 65        	ld	a0, 8(a1)
80207ae8: 23 38 a4 ec  	sd	a0, -304(s0)
80207aec: 13 05 84 ed  	addi	a0, s0, -296
80207af0: 97 c0 00 00  	auipc	ra, 12
80207af4: e7 80 00 2c  	jalr	704(ra)
80207af8: 83 35 04 eb  	ld	a1, -336(s0)
80207afc: 23 13 a4 ec  	sh	a0, -314(s0)
80207b00: 41 66        	lui	a2, 16
80207b02: 7d 36        	addiw	a2, a2, -1
80207b04: 71 8d        	and	a0, a0, a2
80207b06: 23 3c a4 ea  	sd	a0, -328(s0)
80207b0a: 63 0b b5 00  	beq	a0, a1, 0x80207b20 <log.0.37+0x64>
80207b0e: 09 a0        	j	0x80207b10 <log.0.37+0x54>
80207b10: 83 35 84 eb  	ld	a1, -328(s0)
80207b14: 13 05 84 ed  	addi	a0, s0, -296
80207b18: 97 90 ff ff  	auipc	ra, 1048569
80207b1c: e7 80 60 ad  	jalr	-1322(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80207b20: 16 64        	ld	s0, 320(sp)
80207b22: b6 60        	ld	ra, 328(sp)
80207b24: 71 61        	addi	sp, sp, 336
80207b26: 82 80        	ret

0000000080207b28 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.38>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80207b28: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80207b2a: 06 ec        	sd	ra, 24(sp)
80207b2c: 22 e8        	sd	s0, 16(sp)
80207b2e: 00 10        	addi	s0, sp, 32
80207b30: 23 30 a4 fe  	sd	a0, -32(s0)
80207b34: 97 c0 00 00  	auipc	ra, 12
80207b38: e7 80 c0 2c  	jalr	716(ra)
80207b3c: aa 85        	mv	a1, a0
80207b3e: 41 65        	lui	a0, 16
80207b40: 7d 35        	addiw	a0, a0, -1
80207b42: 6d 8d        	and	a0, a0, a1
80207b44: 23 17 b4 fe  	sh	a1, -18(s0)
80207b48: 81 45        	mv	a1, zero
80207b4a: 63 0a b5 00  	beq	a0, a1, 0x80207b5e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.38+0x36>
80207b4e: 09 a0        	j	0x80207b50 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.38+0x28>
80207b50: 03 35 04 fe  	ld	a0, -32(s0)
80207b54: 97 90 ff ff  	auipc	ra, 1048569
80207b58: e7 80 e0 d4  	jalr	-690(ra)
80207b5c: 11 a0        	j	0x80207b60 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.38+0x38>
80207b5e: 09 a0        	j	0x80207b60 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.38+0x38>
80207b60: 03 15 e4 fe  	lh	a0, -18(s0)
80207b64: 42 64        	ld	s0, 16(sp)
80207b66: e2 60        	ld	ra, 24(sp)
80207b68: 05 61        	addi	sp, sp, 32
80207b6a: 82 80        	ret

0000000080207b6c <std.mem.readIntSliceForeign>:
; pub fn readIntSliceForeign(comptime T: type, bytes: []const u8) T {
80207b6c: 79 71        	addi	sp, sp, -48
;     return @byteSwap(T, readIntSliceNative(T, bytes));
80207b6e: 06 f4        	sd	ra, 40(sp)
80207b70: 22 f0        	sd	s0, 32(sp)
80207b72: 00 18        	addi	s0, sp, 48
80207b74: 0c 65        	ld	a1, 8(a0)
80207b76: 23 30 b4 fe  	sd	a1, -32(s0)
80207b7a: 0c 61        	ld	a1, 0(a0)
80207b7c: 23 3c b4 fc  	sd	a1, -40(s0)
80207b80: 97 c0 00 00  	auipc	ra, 12
80207b84: e7 80 e0 49  	jalr	1182(ra)
80207b88: 9b 55 85 00  	srliw	a1, a0, 8
80207b8c: 41 66        	lui	a2, 16
80207b8e: 1b 06 06 f0  	addiw	a2, a2, -256
80207b92: f1 8d        	and	a1, a1, a2
80207b94: 1b 56 85 01  	srliw	a2, a0, 24
80207b98: d1 8d        	or	a1, a1, a2
80207b9a: 13 16 85 00  	slli	a2, a0, 8
80207b9e: b7 06 ff 00  	lui	a3, 4080
80207ba2: 75 8e        	and	a2, a2, a3
80207ba4: 62 05        	slli	a0, a0, 24
80207ba6: 51 8d        	or	a0, a0, a2
80207ba8: 4d 8d        	or	a0, a0, a1
80207baa: 23 26 a4 fe  	sw	a0, -20(s0)
80207bae: 02 74        	ld	s0, 32(sp)
80207bb0: a2 70        	ld	ra, 40(sp)
80207bb2: 45 61        	addi	sp, sp, 48
80207bb4: 82 80        	ret

0000000080207bb6 <std.mem.readIntSliceForeign.39>:
; pub fn readIntSliceForeign(comptime T: type, bytes: []const u8) T {
80207bb6: 79 71        	addi	sp, sp, -48
;     return @byteSwap(T, readIntSliceNative(T, bytes));
80207bb8: 06 f4        	sd	ra, 40(sp)
80207bba: 22 f0        	sd	s0, 32(sp)
80207bbc: 00 18        	addi	s0, sp, 48
80207bbe: 0c 65        	ld	a1, 8(a0)
80207bc0: 23 30 b4 fe  	sd	a1, -32(s0)
80207bc4: 0c 61        	ld	a1, 0(a0)
80207bc6: 23 3c b4 fc  	sd	a1, -40(s0)
80207bca: 97 c0 00 00  	auipc	ra, 12
80207bce: e7 80 20 4d  	jalr	1234(ra)
80207bd2: 93 55 85 01  	srli	a1, a0, 24
80207bd6: 37 06 ff 00  	lui	a2, 4080
80207bda: 6d 8e        	and	a2, a2, a1
80207bdc: 93 55 85 00  	srli	a1, a0, 8
80207be0: 13 07 f0 0f  	addi	a4, zero, 255
80207be4: 93 16 87 01  	slli	a3, a4, 24
80207be8: f5 8d        	and	a1, a1, a3
80207bea: d1 8d        	or	a1, a1, a2
80207bec: 13 56 85 02  	srli	a2, a0, 40
80207bf0: c1 66        	lui	a3, 16
80207bf2: 9b 86 06 f0  	addiw	a3, a3, -256
80207bf6: 75 8e        	and	a2, a2, a3
80207bf8: 93 56 85 03  	srli	a3, a0, 56
80207bfc: 55 8e        	or	a2, a2, a3
80207bfe: d1 8d        	or	a1, a1, a2
80207c00: 13 16 85 00  	slli	a2, a0, 8
80207c04: 93 16 07 02  	slli	a3, a4, 32
80207c08: f1 8e        	and	a3, a3, a2
80207c0a: 13 16 85 01  	slli	a2, a0, 24
80207c0e: 93 17 87 02  	slli	a5, a4, 40
80207c12: 7d 8e        	and	a2, a2, a5
80207c14: 55 8e        	or	a2, a2, a3
80207c16: 93 16 85 02  	slli	a3, a0, 40
80207c1a: 42 17        	slli	a4, a4, 48
80207c1c: f9 8e        	and	a3, a3, a4
80207c1e: 62 15        	slli	a0, a0, 56
80207c20: 55 8d        	or	a0, a0, a3
80207c22: 51 8d        	or	a0, a0, a2
80207c24: 4d 8d        	or	a0, a0, a1
80207c26: 23 34 a4 fe  	sd	a0, -24(s0)
80207c2a: 02 74        	ld	s0, 32(sp)
80207c2c: a2 70        	ld	ra, 40(sp)
80207c2e: 45 61        	addi	sp, sp, 48
80207c30: 82 80        	ret

0000000080207c32 <arch.riscv64.device_tree.Parser.parse_token>:
;         fn parse_token(self: *@This()) Token {
80207c32: 79 71        	addi	sp, sp, -48
80207c34: 06 f4        	sd	ra, 40(sp)
80207c36: 22 f0        	sd	s0, 32(sp)
80207c38: 00 18        	addi	s0, sp, 48
80207c3a: 23 3c a4 fc  	sd	a0, -40(s0)
;             assert(@src(), self.i & 0b11 == 0);
80207c3e: 08 69        	ld	a0, 16(a0)
80207c40: 0d 89        	andi	a0, a0, 3
80207c42: 93 35 15 00  	seqz	a1, a0

0000000080207c46 <.LBB116_4>:
80207c46: 17 65 01 00  	auipc	a0, 22
80207c4a: 13 05 25 ff  	addi	a0, a0, -14
80207c4e: 97 80 ff ff  	auipc	ra, 1048568
80207c52: e7 80 e0 5b  	jalr	1470(ra)
;             const token_int = self.parse_int(u32);
80207c56: 03 35 84 fd  	ld	a0, -40(s0)
80207c5a: 97 00 00 00  	auipc	ra, 0
80207c5e: e7 80 60 27  	jalr	630(ra)
80207c62: 23 24 a4 fe  	sw	a0, -24(s0)
;             const token = @intToEnum(Token, token_int);
80207c66: 93 15 05 02  	slli	a1, a0, 32
80207c6a: 81 91        	srli	a1, a1, 32
80207c6c: 23 38 b4 fc  	sd	a1, -48(s0)
80207c70: 7d 35        	addiw	a0, a0, -1
80207c72: 91 45        	addi	a1, zero, 4
80207c74: 63 63 b5 02  	bltu	a0, a1, 0x80207c9a <.LBB116_5+0x12>
80207c78: 09 a0        	j	0x80207c7a <.LBB116_4+0x34>
80207c7a: 03 35 04 fd  	ld	a0, -48(s0)
80207c7e: 01 25        	sext.w	a0, a0
80207c80: a5 45        	addi	a1, zero, 9
;             const token = @intToEnum(Token, token_int);
80207c82: 63 0c b5 00  	beq	a0, a1, 0x80207c9a <.LBB116_5+0x12>
80207c86: 09 a0        	j	0x80207c88 <.LBB116_5>

0000000080207c88 <.LBB116_5>:
80207c88: 17 65 01 00  	auipc	a0, 22
80207c8c: 13 05 85 fd  	addi	a0, a0, -40
80207c90: 81 45        	mv	a1, zero
80207c92: 97 80 ff ff  	auipc	ra, 1048568
80207c96: e7 80 e0 40  	jalr	1038(ra)
80207c9a: 03 35 04 fd  	ld	a0, -48(s0)
80207c9e: 23 22 a4 fe  	sw	a0, -28(s0)
;             return token;
80207ca2: 23 26 a4 fe  	sw	a0, -20(s0)
80207ca6: 02 74        	ld	s0, 32(sp)
80207ca8: a2 70        	ld	ra, 40(sp)
80207caa: 45 61        	addi	sp, sp, 48
80207cac: 82 80        	ret

0000000080207cae <arch.riscv64.device_tree.Parser.parse_begin_node>:
;         fn parse_begin_node(self: *@This()) []const u8 {
80207cae: 19 71        	addi	sp, sp, -128
80207cb0: 86 fc        	sd	ra, 120(sp)
80207cb2: a2 f8        	sd	s0, 112(sp)
80207cb4: 00 01        	addi	s0, sp, 128
80207cb6: 23 34 a4 f8  	sd	a0, -120(s0)
80207cba: 23 30 b4 fa  	sd	a1, -96(s0)
80207cbe: 13 05 84 fa  	addi	a0, s0, -88
;             const node_name = self.read_cstr_advancing_it();
80207cc2: 97 c0 00 00  	auipc	ra, 12
80207cc6: e7 80 80 4a  	jalr	1192(ra)
;             self.i = align_to_u32(self.i);
80207cca: 03 35 04 fa  	ld	a0, -96(s0)
80207cce: 93 05 05 01  	addi	a1, a0, 16
80207cd2: 23 38 b4 f8  	sd	a1, -112(s0)
80207cd6: 08 69        	ld	a0, 16(a0)
80207cd8: 23 3c a4 fa  	sd	a0, -72(s0)
80207cdc: 23 38 a4 fc  	sd	a0, -48(s0)
80207ce0: 11 45        	addi	a0, zero, 4
80207ce2: 23 34 a4 fc  	sd	a0, -56(s0)
80207ce6: 0d 45        	addi	a0, zero, 3
80207ce8: 23 3c a4 f8  	sd	a0, -104(s0)
80207cec: 01 45        	mv	a0, zero
;     const mask: u64 = alignment - 1;
80207cee: 63 0c a5 00  	beq	a0, a0, 0x80207d06 <.LBB117_5+0x12>
80207cf2: 09 a0        	j	0x80207cf4 <.LBB117_5>

0000000080207cf4 <.LBB117_5>:
80207cf4: 17 55 01 00  	auipc	a0, 21
80207cf8: 13 05 c5 78  	addi	a0, a0, 1932
80207cfc: 81 45        	mv	a1, zero
80207cfe: 97 80 ff ff  	auipc	ra, 1048568
80207d02: e7 80 20 3a  	jalr	930(ra)
80207d06: 03 35 84 f9  	ld	a0, -104(s0)
80207d0a: 23 30 a4 fe  	sd	a0, -32(s0)
;     const result = (n + mask) & ~mask;
80207d0e: 83 35 04 fd  	ld	a1, -48(s0)
80207d12: 2e 95        	add	a0, a0, a1
80207d14: 23 30 a4 f8  	sd	a0, -128(s0)
80207d18: 63 7c b5 00  	bgeu	a0, a1, 0x80207d30 <.LBB117_6+0x12>
80207d1c: 09 a0        	j	0x80207d1e <.LBB117_6>

0000000080207d1e <.LBB117_6>:
80207d1e: 17 55 01 00  	auipc	a0, 21
80207d22: 13 05 25 76  	addi	a0, a0, 1890
80207d26: 81 45        	mv	a1, zero
80207d28: 97 80 ff ff  	auipc	ra, 1048568
80207d2c: e7 80 80 37  	jalr	888(ra)
80207d30: 83 35 84 f8  	ld	a1, -120(s0)
80207d34: 03 36 04 f9  	ld	a2, -112(s0)
80207d38: 03 35 04 f8  	ld	a0, -128(s0)
80207d3c: 83 36 04 fe  	ld	a3, -32(s0)
80207d40: 93 c6 f6 ff  	not	a3, a3
80207d44: 75 8d        	and	a0, a0, a3
80207d46: 23 3c a4 fc  	sd	a0, -40(s0)
;     return result;
80207d4a: 23 34 a4 fe  	sd	a0, -24(s0)
;             return align_forward(i, @sizeOf(u32));
80207d4e: 23 30 a4 fc  	sd	a0, -64(s0)
;             self.i = align_to_u32(self.i);
80207d52: 08 e2        	sd	a0, 0(a2)
;             return node_name;
80207d54: 03 35 04 fb  	ld	a0, -80(s0)
80207d58: 88 e5        	sd	a0, 8(a1)
80207d5a: 03 35 84 fa  	ld	a0, -88(s0)
80207d5e: 88 e1        	sd	a0, 0(a1)
80207d60: 46 74        	ld	s0, 112(sp)
80207d62: e6 70        	ld	ra, 120(sp)
80207d64: 09 61        	addi	sp, sp, 128
80207d66: 82 80        	ret

0000000080207d68 <panic.panic.41>:
; pub fn panic(comptime format: []const u8, args: anytype) noreturn {
80207d68: 01 11        	addi	sp, sp, -32
80207d6a: 06 ec        	sd	ra, 24(sp)
80207d6c: 22 e8        	sd	s0, 16(sp)
80207d6e: 00 10        	addi	s0, sp, 32
80207d70: 23 30 a4 fe  	sd	a0, -32(s0)
;     kernel.arch.disable_interrupts();
80207d74: 97 80 ff ff  	auipc	ra, 1048568
80207d78: e7 80 00 75  	jalr	1872(ra)
80207d7c: 03 35 04 fe  	ld	a0, -32(s0)

0000000080207d80 <.LBB118_2>:
;     kernel.arch.Writer.should_lock = true;
80207d80: 17 c6 66 00  	auipc	a2, 1644
80207d84: 13 06 06 28  	addi	a2, a2, 640
80207d88: 85 45        	addi	a1, zero, 1
80207d8a: 23 00 b6 00  	sb	a1, 0(a2)
;     log.err(format, args);
80207d8e: 0c 41        	lw	a1, 0(a0)
80207d90: 23 24 b4 fe  	sw	a1, -24(s0)
80207d94: 97 c0 00 00  	auipc	ra, 12
80207d98: e7 80 e0 67  	jalr	1662(ra)
;     while (true) {}
80207d9c: 09 a0        	j	0x80207d9e <.LBB118_2+0x1e>
80207d9e: 01 a0        	j	0x80207d9e <.LBB118_2+0x1e>

0000000080207da0 <arch.riscv64.device_tree.Parser.parse_property_value_descriptor>:
;         fn parse_property_value_descriptor(self: *@This()) Property.ValueDescriptor {
80207da0: 79 71        	addi	sp, sp, -48
80207da2: 06 f4        	sd	ra, 40(sp)
80207da4: 22 f0        	sd	s0, 32(sp)
80207da6: 00 18        	addi	s0, sp, 48
80207da8: 23 3c b4 fc  	sd	a1, -40(s0)
80207dac: aa 85        	mv	a1, a0
80207dae: 03 35 84 fd  	ld	a0, -40(s0)
80207db2: 23 30 b4 fe  	sd	a1, -32(s0)
80207db6: 23 34 a4 fe  	sd	a0, -24(s0)
;                 .len = self.parse_int(u32),
80207dba: 97 00 00 00  	auipc	ra, 0
80207dbe: e7 80 60 11  	jalr	278(ra)
80207dc2: 83 35 04 fe  	ld	a1, -32(s0)
80207dc6: 88 c1        	sw	a0, 0(a1)
;                 .name_offset = self.parse_int(u32),
80207dc8: 03 35 84 fe  	ld	a0, -24(s0)
80207dcc: 97 00 00 00  	auipc	ra, 0
80207dd0: e7 80 40 10  	jalr	260(ra)
80207dd4: 83 35 04 fe  	ld	a1, -32(s0)
80207dd8: c8 c1        	sw	a0, 4(a1)
;             return Property.ValueDescriptor{
80207dda: 02 74        	ld	s0, 32(sp)
80207ddc: a2 70        	ld	ra, 40(sp)
80207dde: 45 61        	addi	sp, sp, 48
80207de0: 82 80        	ret

0000000080207de2 <arch.riscv64.device_tree.Parser.parse_string_in_string_table>:
;         fn parse_string_in_string_table(self: *@This(), descriptor: Property.ValueDescriptor) []const u8 {
80207de2: 19 71        	addi	sp, sp, -128
80207de4: 86 fc        	sd	ra, 120(sp)
80207de6: a2 f8        	sd	s0, 112(sp)
80207de8: 00 01        	addi	s0, sp, 128
80207dea: 23 30 c4 fa  	sd	a2, -96(s0)
80207dee: 23 34 a4 fa  	sd	a0, -88(s0)
80207df2: 23 3c b4 fa  	sd	a1, -72(s0)
;             const strings_offset = self.device_tree.header.device_tree_strings_offset;
80207df6: 88 6d        	ld	a0, 24(a1)
80207df8: 03 65 c5 00  	lwu	a0, 12(a0)
80207dfc: 23 26 a4 fe  	sw	a0, -20(s0)
;             const string_offset = self.device_tree.base_address + strings_offset + descriptor.name_offset;
80207e00: 8c 6d        	ld	a1, 24(a1)
80207e02: 8c 75        	ld	a1, 40(a1)
80207e04: 2e 95        	add	a0, a0, a1
80207e06: 23 38 a4 fa  	sd	a0, -80(s0)
80207e0a: 63 7c b5 00  	bgeu	a0, a1, 0x80207e22 <.LBB120_9+0x12>
80207e0e: 09 a0        	j	0x80207e10 <.LBB120_9>

0000000080207e10 <.LBB120_9>:
80207e10: 17 55 01 00  	auipc	a0, 21
80207e14: 13 05 05 67  	addi	a0, a0, 1648
80207e18: 81 45        	mv	a1, zero
80207e1a: 97 80 ff ff  	auipc	ra, 1048568
80207e1e: e7 80 60 28  	jalr	646(ra)
80207e22: 83 35 04 fb  	ld	a1, -80(s0)
80207e26: 03 35 04 fa  	ld	a0, -96(s0)
80207e2a: 03 65 45 00  	lwu	a0, 4(a0)
80207e2e: 2e 95        	add	a0, a0, a1
80207e30: 23 3c a4 f8  	sd	a0, -104(s0)
80207e34: 63 7c b5 00  	bgeu	a0, a1, 0x80207e4c <.LBB120_10+0x12>
80207e38: 09 a0        	j	0x80207e3a <.LBB120_10>

0000000080207e3a <.LBB120_10>:
80207e3a: 17 55 01 00  	auipc	a0, 21
80207e3e: 13 05 65 64  	addi	a0, a0, 1606
80207e42: 81 45        	mv	a1, zero
80207e44: 97 80 ff ff  	auipc	ra, 1048568
80207e48: e7 80 c0 25  	jalr	604(ra)
80207e4c: 03 35 84 f9  	ld	a0, -104(s0)
80207e50: 23 30 a4 fe  	sd	a0, -32(s0)
;             const property_key_cstr = @intToPtr([*:0]u8, string_offset);
80207e54: aa 85        	mv	a1, a0
80207e56: 23 38 b4 f8  	sd	a1, -112(s0)
80207e5a: 81 45        	mv	a1, zero
80207e5c: 63 1c b5 00  	bne	a0, a1, 0x80207e74 <.LBB120_11+0x12>
80207e60: 09 a0        	j	0x80207e62 <.LBB120_11>

0000000080207e62 <.LBB120_11>:
80207e62: 17 55 01 00  	auipc	a0, 21
80207e66: 13 05 65 69  	addi	a0, a0, 1686
80207e6a: 81 45        	mv	a1, zero
80207e6c: 97 80 ff ff  	auipc	ra, 1048568
80207e70: e7 80 40 23  	jalr	564(ra)
80207e74: 03 35 04 f9  	ld	a0, -112(s0)
80207e78: 23 3c a4 fc  	sd	a0, -40(s0)
;             const value = property_key_cstr[0..std.mem.len(property_key_cstr)];
80207e7c: 23 38 a4 fc  	sd	a0, -48(s0)
80207e80: 97 c0 00 00  	auipc	ra, 12
80207e84: e7 80 00 5b  	jalr	1456(ra)
80207e88: 23 30 a4 f8  	sd	a0, -128(s0)
80207e8c: 03 35 84 fd  	ld	a0, -40(s0)
80207e90: 23 34 a4 f8  	sd	a0, -120(s0)
80207e94: 81 45        	mv	a1, zero
80207e96: 05 45        	addi	a0, zero, 1
80207e98: 63 1c b5 00  	bne	a0, a1, 0x80207eb0 <.LBB120_12+0x12>
80207e9c: 09 a0        	j	0x80207e9e <.LBB120_12>

0000000080207e9e <.LBB120_12>:
80207e9e: 17 55 01 00  	auipc	a0, 21
80207ea2: 13 05 25 46  	addi	a0, a0, 1122
80207ea6: 81 45        	mv	a1, zero
80207ea8: 97 80 ff ff  	auipc	ra, 1048568
80207eac: e7 80 80 1f  	jalr	504(ra)
80207eb0: 03 35 84 f8  	ld	a0, -120(s0)
80207eb4: 83 35 84 fa  	ld	a1, -88(s0)
80207eb8: 03 36 04 f8  	ld	a2, -128(s0)
80207ebc: 23 30 a4 fc  	sd	a0, -64(s0)
80207ec0: 23 34 c4 fc  	sd	a2, -56(s0)
;             return value;
80207ec4: 90 e5        	sd	a2, 8(a1)
80207ec6: 88 e1        	sd	a0, 0(a1)
80207ec8: 46 74        	ld	s0, 112(sp)
80207eca: e6 70        	ld	ra, 120(sp)
80207ecc: 09 61        	addi	sp, sp, 128
80207ece: 82 80        	ret

0000000080207ed0 <arch.riscv64.device_tree.Parser.parse_int>:
;         fn parse_int(self: *@This(), comptime Int: type) Int {
80207ed0: 1d 71        	addi	sp, sp, -96
80207ed2: 86 ec        	sd	ra, 88(sp)
80207ed4: a2 e8        	sd	s0, 80(sp)
80207ed6: 80 10        	addi	s0, sp, 96
80207ed8: 23 34 a4 fc  	sd	a0, -56(s0)
;             const int = read_big_endian(Int, self.slice[self.i..]);
80207edc: aa 85        	mv	a1, a0
80207ede: 23 38 b4 fa  	sd	a1, -80(s0)
80207ee2: 0c 69        	ld	a1, 16(a0)
80207ee4: 23 3c b4 fa  	sd	a1, -72(s0)
80207ee8: 08 65        	ld	a0, 8(a0)
80207eea: 23 30 a4 fc  	sd	a0, -64(s0)
80207eee: 63 7c b5 00  	bgeu	a0, a1, 0x80207f06 <.LBB121_7+0x12>
80207ef2: 09 a0        	j	0x80207ef4 <.LBB121_7>

0000000080207ef4 <.LBB121_7>:
80207ef4: 17 55 01 00  	auipc	a0, 21
80207ef8: 13 05 c5 40  	addi	a0, a0, 1036
80207efc: 81 45        	mv	a1, zero
80207efe: 97 80 ff ff  	auipc	ra, 1048568
80207f02: e7 80 20 1a  	jalr	418(ra)
80207f06: 81 45        	mv	a1, zero
80207f08: 05 45        	addi	a0, zero, 1
;             const int = read_big_endian(Int, self.slice[self.i..]);
80207f0a: 63 1c b5 00  	bne	a0, a1, 0x80207f22 <.LBB121_8+0x12>
80207f0e: 09 a0        	j	0x80207f10 <.LBB121_8>

0000000080207f10 <.LBB121_8>:
80207f10: 17 55 01 00  	auipc	a0, 21
80207f14: 13 05 05 3f  	addi	a0, a0, 1008
80207f18: 81 45        	mv	a1, zero
80207f1a: 97 80 ff ff  	auipc	ra, 1048568
80207f1e: e7 80 60 18  	jalr	390(ra)
80207f22: 03 35 04 fc  	ld	a0, -64(s0)
80207f26: 03 36 84 fb  	ld	a2, -72(s0)
80207f2a: 83 35 04 fb  	ld	a1, -80(s0)
80207f2e: 8c 61        	ld	a1, 0(a1)
80207f30: b2 95        	add	a1, a1, a2
80207f32: 11 8d        	sub	a0, a0, a2
80207f34: 23 3c b4 fc  	sd	a1, -40(s0)
80207f38: 23 30 a4 fe  	sd	a0, -32(s0)
80207f3c: 13 05 84 fd  	addi	a0, s0, -40
80207f40: 97 00 00 00  	auipc	ra, 0
80207f44: e7 80 c0 c2  	jalr	-980(ra)
80207f48: 23 2a a4 fc  	sw	a0, -44(s0)
;             self.i += @sizeOf(Int);
80207f4c: 03 35 84 fc  	ld	a0, -56(s0)
80207f50: 93 05 05 01  	addi	a1, a0, 16
80207f54: 23 30 b4 fa  	sd	a1, -96(s0)
80207f58: 0c 69        	ld	a1, 16(a0)
80207f5a: 13 85 45 00  	addi	a0, a1, 4
80207f5e: 23 34 a4 fa  	sd	a0, -88(s0)
80207f62: 63 7c b5 00  	bgeu	a0, a1, 0x80207f7a <.LBB121_9+0x12>
80207f66: 09 a0        	j	0x80207f68 <.LBB121_9>

0000000080207f68 <.LBB121_9>:
80207f68: 17 55 01 00  	auipc	a0, 21
80207f6c: 13 05 85 51  	addi	a0, a0, 1304
80207f70: 81 45        	mv	a1, zero
80207f72: 97 80 ff ff  	auipc	ra, 1048568
80207f76: e7 80 e0 12  	jalr	302(ra)
80207f7a: 03 35 84 fa  	ld	a0, -88(s0)
80207f7e: 83 35 04 fa  	ld	a1, -96(s0)
80207f82: 88 e1        	sd	a0, 0(a1)
;             return int;
80207f84: 03 25 44 fd  	lw	a0, -44(s0)
80207f88: 23 26 a4 fe  	sw	a0, -20(s0)
80207f8c: 46 64        	ld	s0, 80(sp)
80207f8e: e6 60        	ld	ra, 88(sp)
80207f90: 25 61        	addi	sp, sp, 96
80207f92: 82 80        	ret

0000000080207f94 <arch.riscv64.device_tree.Parser.parse_property_name>:
;         fn parse_property_name(self: *@This(), descriptor: Property.ValueDescriptor) []const u8 {
80207f94: 71 71        	addi	sp, sp, -176
80207f96: 06 f5        	sd	ra, 168(sp)
80207f98: 22 f1        	sd	s0, 160(sp)
80207f9a: 00 19        	addi	s0, sp, 176
80207f9c: 23 3c c4 f6  	sd	a2, -136(s0)
80207fa0: 23 30 a4 f8  	sd	a0, -128(s0)
80207fa4: 23 30 b4 fa  	sd	a1, -96(s0)
;             const property_value = self.slice[self.i .. self.i + descriptor.len];
80207fa8: 2e 85        	mv	a0, a1
80207faa: 23 34 a4 f8  	sd	a0, -120(s0)
80207fae: 8c 69        	ld	a1, 16(a1)
80207fb0: 23 38 b4 f8  	sd	a1, -112(s0)
80207fb4: 03 65 06 00  	lwu	a0, 0(a2)
80207fb8: 2e 95        	add	a0, a0, a1
80207fba: 23 3c a4 f8  	sd	a0, -104(s0)
80207fbe: 63 7c b5 00  	bgeu	a0, a1, 0x80207fd6 <.LBB122_13+0x12>
80207fc2: 09 a0        	j	0x80207fc4 <.LBB122_13>

0000000080207fc4 <.LBB122_13>:
80207fc4: 17 55 01 00  	auipc	a0, 21
80207fc8: 13 05 c5 4b  	addi	a0, a0, 1212
80207fcc: 81 45        	mv	a1, zero
80207fce: 97 80 ff ff  	auipc	ra, 1048568
80207fd2: e7 80 20 0d  	jalr	210(ra)
80207fd6: 03 35 84 f9  	ld	a0, -104(s0)
80207fda: 83 35 04 f9  	ld	a1, -112(s0)
80207fde: 03 36 84 f8  	ld	a2, -120(s0)
80207fe2: 10 66        	ld	a2, 8(a2)
80207fe4: 23 38 c4 f6  	sd	a2, -144(s0)
80207fe8: 63 7c b5 00  	bgeu	a0, a1, 0x80208000 <.LBB122_14+0x12>
80207fec: 09 a0        	j	0x80207fee <.LBB122_14>

0000000080207fee <.LBB122_14>:
80207fee: 17 55 01 00  	auipc	a0, 21
80207ff2: 13 05 25 31  	addi	a0, a0, 786
80207ff6: 81 45        	mv	a1, zero
80207ff8: 97 80 ff ff  	auipc	ra, 1048568
80207ffc: e7 80 80 0a  	jalr	168(ra)
80208000: 03 35 04 f7  	ld	a0, -144(s0)
80208004: 83 35 84 f9  	ld	a1, -104(s0)
80208008: 63 7c b5 00  	bgeu	a0, a1, 0x80208020 <.LBB122_15+0x12>
8020800c: 09 a0        	j	0x8020800e <.LBB122_15>

000000008020800e <.LBB122_15>:
8020800e: 17 55 01 00  	auipc	a0, 21
80208012: 13 05 25 2f  	addi	a0, a0, 754
80208016: 81 45        	mv	a1, zero
80208018: 97 80 ff ff  	auipc	ra, 1048568
8020801c: e7 80 80 08  	jalr	136(ra)
80208020: 03 35 84 f7  	ld	a0, -136(s0)
80208024: 83 35 84 f9  	ld	a1, -104(s0)
80208028: 83 36 04 f9  	ld	a3, -112(s0)
8020802c: 03 36 84 f8  	ld	a2, -120(s0)
80208030: 10 62        	ld	a2, 0(a2)
80208032: 36 96        	add	a2, a2, a3
80208034: 95 8d        	sub	a1, a1, a3
80208036: 23 34 c4 fa  	sd	a2, -88(s0)
8020803a: 23 38 b4 fa  	sd	a1, -80(s0)
;             self.i = align_to_u32(self.i + descriptor.len);
8020803e: 83 35 04 fa  	ld	a1, -96(s0)
80208042: 13 86 05 01  	addi	a2, a1, 16
80208046: 23 30 c4 f6  	sd	a2, -160(s0)
8020804a: 8c 69        	ld	a1, 16(a1)
8020804c: 03 65 05 00  	lwu	a0, 0(a0)
80208050: 2e 95        	add	a0, a0, a1
80208052: 23 34 a4 f6  	sd	a0, -152(s0)
80208056: 63 7c b5 00  	bgeu	a0, a1, 0x8020806e <.LBB122_16+0x12>
8020805a: 09 a0        	j	0x8020805c <.LBB122_16>

000000008020805c <.LBB122_16>:
8020805c: 17 55 01 00  	auipc	a0, 21
80208060: 13 05 45 42  	addi	a0, a0, 1060
80208064: 81 45        	mv	a1, zero
80208066: 97 80 ff ff  	auipc	ra, 1048568
8020806a: e7 80 a0 03  	jalr	58(ra)
8020806e: 03 35 84 f6  	ld	a0, -152(s0)
80208072: 23 3c a4 fa  	sd	a0, -72(s0)
80208076: 23 38 a4 fc  	sd	a0, -48(s0)
8020807a: 11 45        	addi	a0, zero, 4
8020807c: 23 34 a4 fc  	sd	a0, -56(s0)
80208080: 0d 45        	addi	a0, zero, 3
80208082: 23 3c a4 f4  	sd	a0, -168(s0)
80208086: 01 45        	mv	a0, zero
;     const mask: u64 = alignment - 1;
80208088: 63 0c a5 00  	beq	a0, a0, 0x802080a0 <.LBB122_17+0x12>
8020808c: 09 a0        	j	0x8020808e <.LBB122_17>

000000008020808e <.LBB122_17>:
8020808e: 17 55 01 00  	auipc	a0, 21
80208092: 13 05 25 3f  	addi	a0, a0, 1010
80208096: 81 45        	mv	a1, zero
80208098: 97 80 ff ff  	auipc	ra, 1048568
8020809c: e7 80 80 00  	jalr	8(ra)
802080a0: 03 35 84 f5  	ld	a0, -168(s0)
802080a4: 23 30 a4 fe  	sd	a0, -32(s0)
;     const result = (n + mask) & ~mask;
802080a8: 83 35 04 fd  	ld	a1, -48(s0)
802080ac: 2e 95        	add	a0, a0, a1
802080ae: 23 38 a4 f4  	sd	a0, -176(s0)
802080b2: 63 7c b5 00  	bgeu	a0, a1, 0x802080ca <.LBB122_18+0x12>
802080b6: 09 a0        	j	0x802080b8 <.LBB122_18>

00000000802080b8 <.LBB122_18>:
802080b8: 17 55 01 00  	auipc	a0, 21
802080bc: 13 05 85 3c  	addi	a0, a0, 968
802080c0: 81 45        	mv	a1, zero
802080c2: 97 80 ff ff  	auipc	ra, 1048568
802080c6: e7 80 e0 fd  	jalr	-34(ra)
802080ca: 83 35 04 f8  	ld	a1, -128(s0)
802080ce: 03 36 04 f6  	ld	a2, -160(s0)
802080d2: 03 35 04 f5  	ld	a0, -176(s0)
802080d6: 83 36 04 fe  	ld	a3, -32(s0)
802080da: 93 c6 f6 ff  	not	a3, a3
802080de: 75 8d        	and	a0, a0, a3
802080e0: 23 3c a4 fc  	sd	a0, -40(s0)
;     return result;
802080e4: 23 34 a4 fe  	sd	a0, -24(s0)
;             return align_forward(i, @sizeOf(u32));
802080e8: 23 30 a4 fc  	sd	a0, -64(s0)
;             self.i = align_to_u32(self.i + descriptor.len);
802080ec: 08 e2        	sd	a0, 0(a2)
;             return property_value;
802080ee: 03 35 04 fb  	ld	a0, -80(s0)
802080f2: 88 e5        	sd	a0, 8(a1)
802080f4: 03 35 84 fa  	ld	a0, -88(s0)
802080f8: 88 e1        	sd	a0, 0(a1)
802080fa: 0a 74        	ld	s0, 160(sp)
802080fc: aa 70        	ld	ra, 168(sp)
802080fe: 4d 61        	addi	sp, sp, 176
80208100: 82 80        	ret

0000000080208102 <arch.riscv64.device_tree.Parser.parse_node>:
;         fn parse_node(self: *@This(), identation: u32, parent_address_cells: u32, parent_size_cells: u32) void {
80208102: 13 01 01 81  	addi	sp, sp, -2032
80208106: 23 34 11 7e  	sd	ra, 2024(sp)
8020810a: 23 30 81 7e  	sd	s0, 2016(sp)
8020810e: 13 04 01 7f  	addi	s0, sp, 2032
80208112: 11 67        	lui	a4, 4
80208114: 1b 07 07 85  	addiw	a4, a4, -1968
80208118: 33 01 e1 40  	sub	sp, sp, a4
8020811c: 71 77        	lui	a4, 1048572
8020811e: 1b 07 07 30  	addiw	a4, a4, 768
80208122: 22 97        	add	a4, a4, s0
80208124: 0c e3        	sd	a1, 0(a4)
80208126: aa 85        	mv	a1, a0
80208128: 71 75        	lui	a0, 1048572
8020812a: 1b 05 05 30  	addiw	a0, a0, 768
8020812e: 22 95        	add	a0, a0, s0
80208130: 08 61        	ld	a0, 0(a0)
80208132: 71 77        	lui	a4, 1048572
80208134: 1b 07 07 32  	addiw	a4, a4, 800
80208138: 22 97        	add	a4, a4, s0
8020813a: 0c e3        	sd	a1, 0(a4)
8020813c: 71 77        	lui	a4, 1048572
8020813e: 1b 07 c7 31  	addiw	a4, a4, 796
80208142: 22 97        	add	a4, a4, s0
80208144: 08 c3        	sw	a0, 0(a4)
80208146: 71 75        	lui	a0, 1048572
80208148: 1b 05 85 31  	addiw	a0, a0, 792
8020814c: 22 95        	add	a0, a0, s0
8020814e: 10 c1        	sw	a2, 0(a0)
80208150: 71 75        	lui	a0, 1048572
80208152: 1b 05 45 31  	addiw	a0, a0, 788
80208156: 22 95        	add	a0, a0, s0
80208158: 14 c1        	sw	a3, 0(a0)
8020815a: 71 75        	lui	a0, 1048572
8020815c: 1b 05 85 61  	addiw	a0, a0, 1560
80208160: 22 95        	add	a0, a0, s0
;             const node_name = self.parse_begin_node();
80208162: 97 00 00 00  	auipc	ra, 0
80208166: e7 80 c0 b4  	jalr	-1204(ra)
;             print_ident(identation, "* {s}:\n", .{node_name});
8020816a: 71 75        	lui	a0, 1048572
8020816c: 1b 05 85 61  	addiw	a0, a0, 1560
80208170: 22 95        	add	a0, a0, s0
80208172: 08 61        	ld	a0, 0(a0)
80208174: f1 75        	lui	a1, 1048572
80208176: 9b 85 85 60  	addiw	a1, a1, 1544
8020817a: a2 95        	add	a1, a1, s0
8020817c: 88 e1        	sd	a0, 0(a1)
8020817e: 71 75        	lui	a0, 1048572
80208180: 1b 05 05 62  	addiw	a0, a0, 1568
80208184: 22 95        	add	a0, a0, s0
80208186: 08 61        	ld	a0, 0(a0)
80208188: f1 75        	lui	a1, 1048572
8020818a: 9b 85 05 61  	addiw	a1, a1, 1552
8020818e: a2 95        	add	a1, a1, s0
80208190: 88 e1        	sd	a0, 0(a1)
80208192: 71 75        	lui	a0, 1048572
80208194: 1b 05 c5 31  	addiw	a0, a0, 796
80208198: 22 95        	add	a0, a0, s0
8020819a: 08 41        	lw	a0, 0(a0)
8020819c: f1 75        	lui	a1, 1048572
8020819e: 9b 85 85 60  	addiw	a1, a1, 1544
802081a2: a2 95        	add	a1, a1, s0
802081a4: 97 c0 00 00  	auipc	ra, 12
802081a8: e7 80 40 43  	jalr	1076(ra)
;             const attribute_identation = identation + 1;
802081ac: 71 75        	lui	a0, 1048572
802081ae: 1b 05 c5 31  	addiw	a0, a0, 796
802081b2: 22 95        	add	a0, a0, s0
802081b4: 0c 41        	lw	a1, 0(a0)
802081b6: 1b 85 15 00  	addiw	a0, a1, 1
802081ba: 71 76        	lui	a2, 1048572
802081bc: 1b 06 86 30  	addiw	a2, a2, 776
802081c0: 22 96        	add	a2, a2, s0
802081c2: 08 e2        	sd	a0, 0(a2)
802081c4: 63 74 b5 00  	bgeu	a0, a1, 0x802081cc <arch.riscv64.device_tree.Parser.parse_node+0xca>
802081c8: 6f 30 10 6a  	j	0x8020c068 <.LBB123_391>
802081cc: 6f 30 f0 6a  	j	0x8020c07a <.LBB123_391+0x12>
;             while (true) {
802081d0: 09 a0        	j	0x802081d2 <arch.riscv64.device_tree.Parser.parse_node+0xd0>
;                 const token = self.parse_token();
802081d2: 71 75        	lui	a0, 1048572
802081d4: 1b 05 05 32  	addiw	a0, a0, 800
802081d8: 22 95        	add	a0, a0, s0
802081da: 08 61        	ld	a0, 0(a0)
802081dc: 97 00 00 00  	auipc	ra, 0
802081e0: e7 80 60 a5  	jalr	-1450(ra)
802081e4: f1 75        	lui	a1, 1048572
802081e6: 9b 85 85 5f  	addiw	a1, a1, 1528
802081ea: a2 95        	add	a1, a1, s0
802081ec: 88 c1        	sw	a0, 0(a1)
;                 switch (token) {
802081ee: 02 15        	slli	a0, a0, 32
802081f0: 01 91        	srli	a0, a0, 32
802081f2: f1 75        	lui	a1, 1048572
802081f4: 9b 85 85 2f  	addiw	a1, a1, 760
802081f8: a2 95        	add	a1, a1, s0
802081fa: 88 e1        	sd	a0, 0(a1)
802081fc: 85 45        	addi	a1, zero, 1
802081fe: 63 14 b5 00  	bne	a0, a1, 0x80208206 <arch.riscv64.device_tree.Parser.parse_node+0x104>
80208202: 6f 30 f0 61  	j	0x8020c020 <.LBB123_390+0x60>
80208206: 71 75        	lui	a0, 1048572
80208208: 1b 05 85 2f  	addiw	a0, a0, 760
8020820c: 22 95        	add	a0, a0, s0
8020820e: 08 61        	ld	a0, 0(a0)
80208210: 01 25        	sext.w	a0, a0
80208212: 89 45        	addi	a1, zero, 2
;                 switch (token) {
80208214: 63 14 b5 00  	bne	a0, a1, 0x8020821c <arch.riscv64.device_tree.Parser.parse_node+0x11a>
80208218: 6f 30 30 57  	j	0x8020bf8a <.LBB123_389+0x28>
8020821c: 71 75        	lui	a0, 1048572
8020821e: 1b 05 85 2f  	addiw	a0, a0, 760
80208222: 22 95        	add	a0, a0, s0
80208224: 08 61        	ld	a0, 0(a0)
80208226: 01 25        	sext.w	a0, a0
80208228: 8d 45        	addi	a1, zero, 3
;                 switch (token) {
8020822a: 63 00 b5 04  	beq	a0, a1, 0x8020826a <arch.riscv64.device_tree.Parser.parse_node+0x168>
8020822e: 09 a0        	j	0x80208230 <arch.riscv64.device_tree.Parser.parse_node+0x12e>
;                     else => kernel.panic("NI: {s}\n", .{@tagName(token)}),
80208230: 71 75        	lui	a0, 1048572
80208232: 1b 05 85 5f  	addiw	a0, a0, 1528
80208236: 22 95        	add	a0, a0, s0
80208238: 08 41        	lw	a0, 0(a0)
8020823a: 97 c0 00 00  	auipc	ra, 12
8020823e: e7 80 40 4c  	jalr	1220(ra)
80208242: 0c 61        	ld	a1, 0(a0)
80208244: 71 76        	lui	a2, 1048572
80208246: 1b 06 86 5e  	addiw	a2, a2, 1512
8020824a: 22 96        	add	a2, a2, s0
8020824c: 0c e2        	sd	a1, 0(a2)
8020824e: 08 65        	ld	a0, 8(a0)
80208250: f1 75        	lui	a1, 1048572
80208252: 9b 85 05 5f  	addiw	a1, a1, 1520
80208256: a2 95        	add	a1, a1, s0
80208258: 88 e1        	sd	a0, 0(a1)
8020825a: 71 75        	lui	a0, 1048572
8020825c: 1b 05 85 5e  	addiw	a0, a0, 1512
80208260: 22 95        	add	a0, a0, s0
80208262: 97 c0 00 00  	auipc	ra, 12
80208266: e7 80 e0 52  	jalr	1326(ra)
;                         const property_value_descriptor = self.parse_property_value_descriptor();
8020826a: 71 75        	lui	a0, 1048572
8020826c: 1b 05 05 32  	addiw	a0, a0, 800
80208270: 22 95        	add	a0, a0, s0
80208272: 0c 61        	ld	a1, 0(a0)
80208274: 71 75        	lui	a0, 1048572
80208276: 1b 05 05 5e  	addiw	a0, a0, 1504
8020827a: 22 95        	add	a0, a0, s0
8020827c: 71 76        	lui	a2, 1048572
8020827e: 1b 06 86 2e  	addiw	a2, a2, 744
80208282: 22 96        	add	a2, a2, s0
80208284: 08 e2        	sd	a0, 0(a2)
80208286: 97 00 00 00  	auipc	ra, 0
8020828a: e7 80 a0 b1  	jalr	-1254(ra)
8020828e: 71 75        	lui	a0, 1048572
80208290: 1b 05 85 2e  	addiw	a0, a0, 744
80208294: 22 95        	add	a0, a0, s0
80208296: 10 61        	ld	a2, 0(a0)
;                         const property_name = self.parse_string_in_string_table(property_value_descriptor);
80208298: 71 75        	lui	a0, 1048572
8020829a: 1b 05 05 32  	addiw	a0, a0, 800
8020829e: 22 95        	add	a0, a0, s0
802082a0: 0c 61        	ld	a1, 0(a0)
802082a2: 71 75        	lui	a0, 1048572
802082a4: 1b 05 05 5d  	addiw	a0, a0, 1488
802082a8: 22 95        	add	a0, a0, s0
802082aa: f1 76        	lui	a3, 1048572
802082ac: 9b 86 06 2f  	addiw	a3, a3, 752
802082b0: a2 96        	add	a3, a3, s0
802082b2: 88 e2        	sd	a0, 0(a3)
802082b4: 97 00 00 00  	auipc	ra, 0
802082b8: e7 80 e0 b2  	jalr	-1234(ra)
;                         print_ident(attribute_identation, "{s}: ", .{property_name});
802082bc: 71 75        	lui	a0, 1048572
802082be: 1b 05 05 5d  	addiw	a0, a0, 1488
802082c2: 22 95        	add	a0, a0, s0
802082c4: 08 61        	ld	a0, 0(a0)
802082c6: f1 75        	lui	a1, 1048572
802082c8: 9b 85 05 5c  	addiw	a1, a1, 1472
802082cc: a2 95        	add	a1, a1, s0
802082ce: 88 e1        	sd	a0, 0(a1)
802082d0: 71 75        	lui	a0, 1048572
802082d2: 1b 05 85 5d  	addiw	a0, a0, 1496
802082d6: 22 95        	add	a0, a0, s0
802082d8: 08 61        	ld	a0, 0(a0)
802082da: f1 75        	lui	a1, 1048572
802082dc: 9b 85 85 5c  	addiw	a1, a1, 1480
802082e0: a2 95        	add	a1, a1, s0
802082e2: 88 e1        	sd	a0, 0(a1)
802082e4: 71 75        	lui	a0, 1048572
802082e6: 1b 05 45 60  	addiw	a0, a0, 1540
802082ea: 22 95        	add	a0, a0, s0
802082ec: 08 41        	lw	a0, 0(a0)
802082ee: f1 75        	lui	a1, 1048572
802082f0: 9b 85 05 5c  	addiw	a1, a1, 1472
802082f4: a2 95        	add	a1, a1, s0
802082f6: 97 c0 00 00  	auipc	ra, 12
802082fa: e7 80 80 4d  	jalr	1240(ra)
802082fe: 71 75        	lui	a0, 1048572
80208300: 1b 05 05 2f  	addiw	a0, a0, 752
80208304: 22 95        	add	a0, a0, s0
80208306: 08 61        	ld	a0, 0(a0)
;     return std.mem.eql(u8, a, b);
80208308: f1 75        	lui	a1, 1048572
8020830a: 9b 85 85 5d  	addiw	a1, a1, 1496
8020830e: a2 95        	add	a1, a1, s0
80208310: 8c 61        	ld	a1, 0(a1)
80208312: 75 76        	lui	a2, 1048573
80208314: 1b 06 06 7b  	addiw	a2, a2, 1968
80208318: 22 96        	add	a2, a2, s0
8020831a: 0c e2        	sd	a1, 0(a2)
8020831c: f1 75        	lui	a1, 1048572
8020831e: 9b 85 05 5d  	addiw	a1, a1, 1488
80208322: a2 95        	add	a1, a1, s0
80208324: 8c 61        	ld	a1, 0(a1)
80208326: 75 76        	lui	a2, 1048573
80208328: 1b 06 86 7a  	addiw	a2, a2, 1960
8020832c: 22 96        	add	a2, a2, s0
8020832e: 0c e2        	sd	a1, 0(a2)

0000000080208330 <.LBB123_302>:
80208330: 97 65 01 00  	auipc	a1, 22
80208334: 93 85 05 99  	addi	a1, a1, -1648
;     return std.mem.eql(u8, a, b);
80208338: 90 61        	ld	a2, 0(a1)
8020833a: f5 76        	lui	a3, 1048573
8020833c: 9b 86 86 79  	addiw	a3, a3, 1944
80208340: a2 96        	add	a3, a3, s0
80208342: 90 e2        	sd	a2, 0(a3)
80208344: 90 65        	ld	a2, 8(a1)
80208346: f5 76        	lui	a3, 1048573
80208348: 9b 86 06 7a  	addiw	a3, a3, 1952
8020834c: a2 96        	add	a3, a3, s0
8020834e: 90 e2        	sd	a2, 0(a3)
80208350: 97 c0 00 00  	auipc	ra, 12
80208354: e7 80 40 fd  	jalr	-44(ra)
80208358: 05 89        	andi	a0, a0, 1
8020835a: f5 75        	lui	a1, 1048573
8020835c: 9b 85 f5 7b  	addiw	a1, a1, 1983
80208360: a2 95        	add	a1, a1, s0
80208362: 23 80 a5 00  	sb	a0, 0(a1)
80208366: 81 45        	mv	a1, zero
;                         if (string_eq(property_name, "compatible")) {
80208368: 63 04 b5 00  	beq	a0, a1, 0x80208370 <.LBB123_302+0x40>
8020836c: 6f 30 b0 08  	j	0x8020bbf6 <.LBB123_385+0x42>
;     return std.mem.eql(u8, a, b);
80208370: 71 75        	lui	a0, 1048572
80208372: 1b 05 85 5d  	addiw	a0, a0, 1496
80208376: 22 95        	add	a0, a0, s0
80208378: 08 61        	ld	a0, 0(a0)
8020837a: f5 75        	lui	a1, 1048573
8020837c: 9b 85 85 78  	addiw	a1, a1, 1928
80208380: a2 95        	add	a1, a1, s0
80208382: 88 e1        	sd	a0, 0(a1)
80208384: 71 75        	lui	a0, 1048572
80208386: 1b 05 05 5d  	addiw	a0, a0, 1488
8020838a: 22 95        	add	a0, a0, s0
8020838c: 08 61        	ld	a0, 0(a0)
8020838e: f5 75        	lui	a1, 1048573
80208390: 9b 85 05 78  	addiw	a1, a1, 1920
80208394: a2 95        	add	a1, a1, s0
80208396: 88 e1        	sd	a0, 0(a1)

0000000080208398 <.LBB123_303>:
80208398: 97 65 01 00  	auipc	a1, 22
8020839c: 93 85 85 93  	addi	a1, a1, -1736
;     return std.mem.eql(u8, a, b);
802083a0: 88 61        	ld	a0, 0(a1)
802083a2: 75 76        	lui	a2, 1048573
802083a4: 1b 06 06 77  	addiw	a2, a2, 1904
802083a8: 22 96        	add	a2, a2, s0
802083aa: 08 e2        	sd	a0, 0(a2)
802083ac: 88 65        	ld	a0, 8(a1)
802083ae: 75 76        	lui	a2, 1048573
802083b0: 1b 06 86 77  	addiw	a2, a2, 1912
802083b4: 22 96        	add	a2, a2, s0
802083b6: 08 e2        	sd	a0, 0(a2)
802083b8: 71 75        	lui	a0, 1048572
802083ba: 1b 05 05 5d  	addiw	a0, a0, 1488
802083be: 22 95        	add	a0, a0, s0
802083c0: 97 c0 00 00  	auipc	ra, 12
802083c4: e7 80 40 f6  	jalr	-156(ra)
802083c8: 05 89        	andi	a0, a0, 1
802083ca: f5 75        	lui	a1, 1048573
802083cc: 9b 85 75 79  	addiw	a1, a1, 1943
802083d0: a2 95        	add	a1, a1, s0
802083d2: 23 80 a5 00  	sb	a0, 0(a1)
802083d6: 81 45        	mv	a1, zero
;                         } else if (string_eq(property_name, "model")) {
802083d8: 63 0b b5 00  	beq	a0, a1, 0x802083ee <.LBB123_304+0x10>
802083dc: 09 a0        	j	0x802083de <.LBB123_304>

00000000802083de <.LBB123_304>:
;                             TODO(@src());
802083de: 17 65 01 00  	auipc	a0, 22
802083e2: 13 05 25 90  	addi	a0, a0, -1790
802083e6: 97 80 ff ff  	auipc	ra, 1048568
802083ea: e7 80 c0 de  	jalr	-532(ra)
;     return std.mem.eql(u8, a, b);
802083ee: 71 75        	lui	a0, 1048572
802083f0: 1b 05 85 5d  	addiw	a0, a0, 1496
802083f4: 22 95        	add	a0, a0, s0
802083f6: 08 61        	ld	a0, 0(a0)
802083f8: f5 75        	lui	a1, 1048573
802083fa: 9b 85 05 76  	addiw	a1, a1, 1888
802083fe: a2 95        	add	a1, a1, s0
80208400: 88 e1        	sd	a0, 0(a1)
80208402: 71 75        	lui	a0, 1048572
80208404: 1b 05 05 5d  	addiw	a0, a0, 1488
80208408: 22 95        	add	a0, a0, s0
8020840a: 08 61        	ld	a0, 0(a0)
8020840c: f5 75        	lui	a1, 1048573
8020840e: 9b 85 85 75  	addiw	a1, a1, 1880
80208412: a2 95        	add	a1, a1, s0
80208414: 88 e1        	sd	a0, 0(a1)

0000000080208416 <.LBB123_305>:
80208416: 97 65 01 00  	auipc	a1, 22
8020841a: 93 85 25 8f  	addi	a1, a1, -1806
;     return std.mem.eql(u8, a, b);
8020841e: 88 61        	ld	a0, 0(a1)
80208420: 75 76        	lui	a2, 1048573
80208422: 1b 06 86 74  	addiw	a2, a2, 1864
80208426: 22 96        	add	a2, a2, s0
80208428: 08 e2        	sd	a0, 0(a2)
8020842a: 88 65        	ld	a0, 8(a1)
8020842c: 75 76        	lui	a2, 1048573
8020842e: 1b 06 06 75  	addiw	a2, a2, 1872
80208432: 22 96        	add	a2, a2, s0
80208434: 08 e2        	sd	a0, 0(a2)
80208436: 71 75        	lui	a0, 1048572
80208438: 1b 05 05 5d  	addiw	a0, a0, 1488
8020843c: 22 95        	add	a0, a0, s0
8020843e: 97 c0 00 00  	auipc	ra, 12
80208442: e7 80 60 ee  	jalr	-282(ra)
80208446: 05 89        	andi	a0, a0, 1
80208448: f5 75        	lui	a1, 1048573
8020844a: 9b 85 f5 76  	addiw	a1, a1, 1903
8020844e: a2 95        	add	a1, a1, s0
80208450: 23 80 a5 00  	sb	a0, 0(a1)
80208454: 81 45        	mv	a1, zero
;                         } else if (string_eq(property_name, "phandle")) {
80208456: 63 04 b5 00  	beq	a0, a1, 0x8020845e <.LBB123_305+0x48>
8020845a: 6f 30 f0 05  	j	0x8020bcb8 <.LBB123_385+0x104>
;     return std.mem.eql(u8, a, b);
8020845e: 71 75        	lui	a0, 1048572
80208460: 1b 05 85 5d  	addiw	a0, a0, 1496
80208464: 22 95        	add	a0, a0, s0
80208466: 08 61        	ld	a0, 0(a0)
80208468: f5 75        	lui	a1, 1048573
8020846a: 9b 85 85 73  	addiw	a1, a1, 1848
8020846e: a2 95        	add	a1, a1, s0
80208470: 88 e1        	sd	a0, 0(a1)
80208472: 71 75        	lui	a0, 1048572
80208474: 1b 05 05 5d  	addiw	a0, a0, 1488
80208478: 22 95        	add	a0, a0, s0
8020847a: 08 61        	ld	a0, 0(a0)
8020847c: f5 75        	lui	a1, 1048573
8020847e: 9b 85 05 73  	addiw	a1, a1, 1840
80208482: a2 95        	add	a1, a1, s0
80208484: 88 e1        	sd	a0, 0(a1)

0000000080208486 <.LBB123_306>:
80208486: 97 65 01 00  	auipc	a1, 22
8020848a: 93 85 25 89  	addi	a1, a1, -1902
;     return std.mem.eql(u8, a, b);
8020848e: 88 61        	ld	a0, 0(a1)
80208490: 75 76        	lui	a2, 1048573
80208492: 1b 06 06 72  	addiw	a2, a2, 1824
80208496: 22 96        	add	a2, a2, s0
80208498: 08 e2        	sd	a0, 0(a2)
8020849a: 88 65        	ld	a0, 8(a1)
8020849c: 75 76        	lui	a2, 1048573
8020849e: 1b 06 86 72  	addiw	a2, a2, 1832
802084a2: 22 96        	add	a2, a2, s0
802084a4: 08 e2        	sd	a0, 0(a2)
802084a6: 71 75        	lui	a0, 1048572
802084a8: 1b 05 05 5d  	addiw	a0, a0, 1488
802084ac: 22 95        	add	a0, a0, s0
802084ae: 97 c0 00 00  	auipc	ra, 12
802084b2: e7 80 60 e7  	jalr	-394(ra)
802084b6: 05 89        	andi	a0, a0, 1
802084b8: f5 75        	lui	a1, 1048573
802084ba: 9b 85 75 74  	addiw	a1, a1, 1863
802084be: a2 95        	add	a1, a1, s0
802084c0: 23 80 a5 00  	sb	a0, 0(a1)
802084c4: 81 45        	mv	a1, zero
;                         } else if (string_eq(property_name, "status")) {
802084c6: 63 04 b5 00  	beq	a0, a1, 0x802084ce <.LBB123_306+0x48>
802084ca: 6f 30 90 0a  	j	0x8020bd72 <.LBB123_386+0xaa>
;     return std.mem.eql(u8, a, b);
802084ce: 71 75        	lui	a0, 1048572
802084d0: 1b 05 85 5d  	addiw	a0, a0, 1496
802084d4: 22 95        	add	a0, a0, s0
802084d6: 08 61        	ld	a0, 0(a0)
802084d8: f5 75        	lui	a1, 1048573
802084da: 9b 85 05 71  	addiw	a1, a1, 1808
802084de: a2 95        	add	a1, a1, s0
802084e0: 88 e1        	sd	a0, 0(a1)
802084e2: 71 75        	lui	a0, 1048572
802084e4: 1b 05 05 5d  	addiw	a0, a0, 1488
802084e8: 22 95        	add	a0, a0, s0
802084ea: 08 61        	ld	a0, 0(a0)
802084ec: f5 75        	lui	a1, 1048573
802084ee: 9b 85 85 70  	addiw	a1, a1, 1800
802084f2: a2 95        	add	a1, a1, s0
802084f4: 88 e1        	sd	a0, 0(a1)

00000000802084f6 <.LBB123_307>:
802084f6: 97 65 01 00  	auipc	a1, 22
802084fa: 93 85 25 83  	addi	a1, a1, -1998
;     return std.mem.eql(u8, a, b);
802084fe: 88 61        	ld	a0, 0(a1)
80208500: 75 76        	lui	a2, 1048573
80208502: 1b 06 86 6f  	addiw	a2, a2, 1784
80208506: 22 96        	add	a2, a2, s0
80208508: 08 e2        	sd	a0, 0(a2)
8020850a: 88 65        	ld	a0, 8(a1)
8020850c: 75 76        	lui	a2, 1048573
8020850e: 1b 06 06 70  	addiw	a2, a2, 1792
80208512: 22 96        	add	a2, a2, s0
80208514: 08 e2        	sd	a0, 0(a2)
80208516: 71 75        	lui	a0, 1048572
80208518: 1b 05 05 5d  	addiw	a0, a0, 1488
8020851c: 22 95        	add	a0, a0, s0
8020851e: 97 c0 00 00  	auipc	ra, 12
80208522: e7 80 60 e0  	jalr	-506(ra)
80208526: 05 89        	andi	a0, a0, 1
80208528: f5 75        	lui	a1, 1048573
8020852a: 9b 85 f5 71  	addiw	a1, a1, 1823
8020852e: a2 95        	add	a1, a1, s0
80208530: 23 80 a5 00  	sb	a0, 0(a1)
80208534: 81 45        	mv	a1, zero
;                         } else if (string_eq(property_name, "#address-cells")) {
80208536: 63 04 b5 00  	beq	a0, a1, 0x8020853e <.LBB123_307+0x48>
8020853a: 6f 30 b0 0f  	j	0x8020be34 <.LBB123_386+0x16c>
;     return std.mem.eql(u8, a, b);
8020853e: 71 75        	lui	a0, 1048572
80208540: 1b 05 85 5d  	addiw	a0, a0, 1496
80208544: 22 95        	add	a0, a0, s0
80208546: 08 61        	ld	a0, 0(a0)
80208548: f5 75        	lui	a1, 1048573
8020854a: 9b 85 85 6e  	addiw	a1, a1, 1768
8020854e: a2 95        	add	a1, a1, s0
80208550: 88 e1        	sd	a0, 0(a1)
80208552: 71 75        	lui	a0, 1048572
80208554: 1b 05 05 5d  	addiw	a0, a0, 1488
80208558: 22 95        	add	a0, a0, s0
8020855a: 08 61        	ld	a0, 0(a0)
8020855c: f5 75        	lui	a1, 1048573
8020855e: 9b 85 05 6e  	addiw	a1, a1, 1760
80208562: a2 95        	add	a1, a1, s0
80208564: 88 e1        	sd	a0, 0(a1)

0000000080208566 <.LBB123_308>:
80208566: 97 55 01 00  	auipc	a1, 21
8020856a: 93 85 25 7d  	addi	a1, a1, 2002
;     return std.mem.eql(u8, a, b);
8020856e: 88 61        	ld	a0, 0(a1)
80208570: 75 76        	lui	a2, 1048573
80208572: 1b 06 06 6d  	addiw	a2, a2, 1744
80208576: 22 96        	add	a2, a2, s0
80208578: 08 e2        	sd	a0, 0(a2)
8020857a: 88 65        	ld	a0, 8(a1)
8020857c: 75 76        	lui	a2, 1048573
8020857e: 1b 06 86 6d  	addiw	a2, a2, 1752
80208582: 22 96        	add	a2, a2, s0
80208584: 08 e2        	sd	a0, 0(a2)
80208586: 71 75        	lui	a0, 1048572
80208588: 1b 05 05 5d  	addiw	a0, a0, 1488
8020858c: 22 95        	add	a0, a0, s0
8020858e: 97 c0 00 00  	auipc	ra, 12
80208592: e7 80 60 d9  	jalr	-618(ra)
80208596: 05 89        	andi	a0, a0, 1
80208598: f5 75        	lui	a1, 1048573
8020859a: 9b 85 75 6f  	addiw	a1, a1, 1783
8020859e: a2 95        	add	a1, a1, s0
802085a0: 23 80 a5 00  	sb	a0, 0(a1)
802085a4: 81 45        	mv	a1, zero
;                         } else if (string_eq(property_name, "#size-cells")) {
802085a6: 63 04 b5 00  	beq	a0, a1, 0x802085ae <.LBB123_308+0x48>
802085aa: 6f 30 50 14  	j	0x8020beee <.LBB123_387+0xaa>
;     return std.mem.eql(u8, a, b);
802085ae: 71 75        	lui	a0, 1048572
802085b0: 1b 05 85 5d  	addiw	a0, a0, 1496
802085b4: 22 95        	add	a0, a0, s0
802085b6: 08 61        	ld	a0, 0(a0)
802085b8: f5 75        	lui	a1, 1048573
802085ba: 9b 85 05 6c  	addiw	a1, a1, 1728
802085be: a2 95        	add	a1, a1, s0
802085c0: 88 e1        	sd	a0, 0(a1)
802085c2: 71 75        	lui	a0, 1048572
802085c4: 1b 05 05 5d  	addiw	a0, a0, 1488
802085c8: 22 95        	add	a0, a0, s0
802085ca: 08 61        	ld	a0, 0(a0)
802085cc: f5 75        	lui	a1, 1048573
802085ce: 9b 85 85 6b  	addiw	a1, a1, 1720
802085d2: a2 95        	add	a1, a1, s0
802085d4: 88 e1        	sd	a0, 0(a1)

00000000802085d6 <.LBB123_309>:
802085d6: 97 55 01 00  	auipc	a1, 21
802085da: 93 85 25 77  	addi	a1, a1, 1906
;     return std.mem.eql(u8, a, b);
802085de: 88 61        	ld	a0, 0(a1)
802085e0: 75 76        	lui	a2, 1048573
802085e2: 1b 06 86 6a  	addiw	a2, a2, 1704
802085e6: 22 96        	add	a2, a2, s0
802085e8: 08 e2        	sd	a0, 0(a2)
802085ea: 88 65        	ld	a0, 8(a1)
802085ec: 75 76        	lui	a2, 1048573
802085ee: 1b 06 06 6b  	addiw	a2, a2, 1712
802085f2: 22 96        	add	a2, a2, s0
802085f4: 08 e2        	sd	a0, 0(a2)
802085f6: 71 75        	lui	a0, 1048572
802085f8: 1b 05 05 5d  	addiw	a0, a0, 1488
802085fc: 22 95        	add	a0, a0, s0
802085fe: 97 c0 00 00  	auipc	ra, 12
80208602: e7 80 60 d2  	jalr	-730(ra)
80208606: 05 89        	andi	a0, a0, 1
80208608: f5 75        	lui	a1, 1048573
8020860a: 9b 85 f5 6c  	addiw	a1, a1, 1743
8020860e: a2 95        	add	a1, a1, s0
80208610: 23 80 a5 00  	sb	a0, 0(a1)
80208614: 81 45        	mv	a1, zero
;                         } else if (string_eq(property_name, "reg")) {
80208616: 63 02 b5 52  	beq	a0, a1, 0x80208b3a <.LBB123_314+0x84>
8020861a: 09 a0        	j	0x8020861c <.LBB123_309+0x46>
;                             const address_byte_count = address_cells * @sizeOf(u32);
8020861c: 71 75        	lui	a0, 1048572
8020861e: 1b 05 05 60  	addiw	a0, a0, 1536
80208622: 22 95        	add	a0, a0, s0
80208624: 03 65 05 00  	lwu	a0, 0(a0)
80208628: 0a 05        	slli	a0, a0, 2
8020862a: f1 75        	lui	a1, 1048572
8020862c: 9b 85 05 2e  	addiw	a1, a1, 736
80208630: a2 95        	add	a1, a1, s0
80208632: 88 e1        	sd	a0, 0(a1)
80208634: 01 91        	srli	a0, a0, 32
80208636: 81 45        	mv	a1, zero
80208638: 63 04 b5 00  	beq	a0, a1, 0x80208640 <.LBB123_309+0x6a>
8020863c: 6f 30 f0 27  	j	0x8020c0ba <.LBB123_392>
80208640: 6f 30 d0 28  	j	0x8020c0cc <.LBB123_392+0x12>
;                             while (pair_i < pair_count) : (pair_i += 1) {
80208644: 71 75        	lui	a0, 1048572
80208646: 1b 05 05 55  	addiw	a0, a0, 1360
8020864a: 22 95        	add	a0, a0, s0
8020864c: 08 61        	ld	a0, 0(a0)
8020864e: f1 75        	lui	a1, 1048572
80208650: 9b 85 85 55  	addiw	a1, a1, 1368
80208654: a2 95        	add	a1, a1, s0
80208656: 83 e5 05 00  	lwu	a1, 0(a1)
8020865a: 63 64 b5 00  	bltu	a0, a1, 0x80208662 <.LBB123_309+0x8c>
8020865e: 6f 30 30 0f  	j	0x8020bf50 <.LBB123_388+0x52>
80208662: 01 45        	mv	a0, zero
80208664: f1 75        	lui	a1, 1048572
80208666: 9b 85 05 2d  	addiw	a1, a1, 720
8020866a: a2 95        	add	a1, a1, s0
8020866c: 88 e1        	sd	a0, 0(a1)
8020866e: f5 75        	lui	a1, 1048573
80208670: 9b 85 85 f7  	addiw	a1, a1, -136
80208674: a2 95        	add	a1, a1, s0
80208676: 88 e1        	sd	a0, 0(a1)
80208678: 75 75        	lui	a0, 1048573
8020867a: 1b 05 05 f9  	addiw	a0, a0, -112
8020867e: 22 95        	add	a0, a0, s0
80208680: f5 75        	lui	a1, 1048573
80208682: 9b 85 05 f8  	addiw	a1, a1, -128
80208686: a2 95        	add	a1, a1, s0
80208688: 88 e1        	sd	a0, 0(a1)
8020868a: 13 05 00 02  	addi	a0, zero, 32
8020868e: f5 75        	lui	a1, 1048573
80208690: 9b 85 85 f8  	addiw	a1, a1, -120
80208694: a2 95        	add	a1, a1, s0
80208696: 88 e1        	sd	a0, 0(a1)

0000000080208698 <.LBB123_310>:
;     _ = writer.write(bytes) catch unreachable;
80208698: 17 56 01 00  	auipc	a2, 21
8020869c: 13 06 06 6c  	addi	a2, a2, 1728
802086a0: 75 75        	lui	a0, 1048573
802086a2: 1b 05 85 f6  	addiw	a0, a0, -152
802086a6: 22 95        	add	a0, a0, s0
802086a8: f5 75        	lui	a1, 1048573
802086aa: 9b 85 85 f7  	addiw	a1, a1, -136
802086ae: a2 95        	add	a1, a1, s0
802086b0: 97 80 ff ff  	auipc	ra, 1048568
802086b4: e7 80 c0 58  	jalr	1420(ra)
802086b8: 71 75        	lui	a0, 1048572
802086ba: 1b 05 05 2d  	addiw	a0, a0, 720
802086be: 22 95        	add	a0, a0, s0
802086c0: 0c 61        	ld	a1, 0(a0)
802086c2: 75 75        	lui	a0, 1048573
802086c4: 1b 05 05 f7  	addiw	a0, a0, -144
802086c8: 22 95        	add	a0, a0, s0
802086ca: 03 55 05 00  	lhu	a0, 0(a0)
802086ce: 71 76        	lui	a2, 1048572
802086d0: 1b 06 86 2d  	addiw	a2, a2, 728
802086d4: 22 96        	add	a2, a2, s0
802086d6: 08 e2        	sd	a0, 0(a2)
802086d8: 63 00 b5 02  	beq	a0, a1, 0x802086f8 <.LBB123_310+0x60>
802086dc: 09 a0        	j	0x802086de <.LBB123_310+0x46>
802086de: 71 75        	lui	a0, 1048572
802086e0: 1b 05 85 2d  	addiw	a0, a0, 728
802086e4: 22 95        	add	a0, a0, s0
802086e6: 0c 61        	ld	a1, 0(a0)
802086e8: 75 75        	lui	a0, 1048573
802086ea: 1b 05 85 f7  	addiw	a0, a0, -136
802086ee: 22 95        	add	a0, a0, s0
802086f0: 97 80 ff ff  	auipc	ra, 1048568
802086f4: e7 80 e0 ef  	jalr	-258(ra)
;                                 switch (address_byte_count) {
802086f8: 71 75        	lui	a0, 1048572
802086fa: 1b 05 45 56  	addiw	a0, a0, 1380
802086fe: 22 95        	add	a0, a0, s0
80208700: 03 65 05 00  	lwu	a0, 0(a0)
80208704: f1 75        	lui	a1, 1048572
80208706: 9b 85 85 2c  	addiw	a1, a1, 712
8020870a: a2 95        	add	a1, a1, s0
8020870c: 88 e1        	sd	a0, 0(a1)
8020870e: 81 45        	mv	a1, zero
80208710: 63 06 b5 1c  	beq	a0, a1, 0x802088dc <.LBB123_311+0x19e>
80208714: 09 a0        	j	0x80208716 <.LBB123_310+0x7e>
80208716: 71 75        	lui	a0, 1048572
80208718: 1b 05 85 2c  	addiw	a0, a0, 712
8020871c: 22 95        	add	a0, a0, s0
8020871e: 08 61        	ld	a0, 0(a0)
80208720: 01 25        	sext.w	a0, a0
80208722: 91 45        	addi	a1, zero, 4
;                                 switch (address_byte_count) {
80208724: 63 06 b5 02  	beq	a0, a1, 0x80208750 <.LBB123_311+0x12>
80208728: 09 a0        	j	0x8020872a <.LBB123_310+0x92>
8020872a: 71 75        	lui	a0, 1048572
8020872c: 1b 05 85 2c  	addiw	a0, a0, 712
80208730: 22 95        	add	a0, a0, s0
80208732: 08 61        	ld	a0, 0(a0)
80208734: 01 25        	sext.w	a0, a0
80208736: a1 45        	addi	a1, zero, 8
;                                 switch (address_byte_count) {
80208738: 63 0f b5 0c  	beq	a0, a1, 0x80208816 <.LBB123_311+0xd8>
8020873c: 09 a0        	j	0x8020873e <.LBB123_311>

000000008020873e <.LBB123_311>:
;                                     else => unreachable,
8020873e: 17 55 01 00  	auipc	a0, 21
80208742: 13 05 25 d5  	addi	a0, a0, -686
80208746: 81 45        	mv	a1, zero
80208748: 97 80 ff ff  	auipc	ra, 1048568
8020874c: e7 80 80 95  	jalr	-1704(ra)
;                                         const value = self.parse_int(u32);
80208750: 71 75        	lui	a0, 1048572
80208752: 1b 05 05 32  	addiw	a0, a0, 800
80208756: 22 95        	add	a0, a0, s0
80208758: 08 61        	ld	a0, 0(a0)
8020875a: 97 f0 ff ff  	auipc	ra, 1048575
8020875e: e7 80 60 77  	jalr	1910(ra)
80208762: f1 75        	lui	a1, 1048572
80208764: 9b 85 c5 54  	addiw	a1, a1, 1356
80208768: a2 95        	add	a1, a1, s0
8020876a: 88 c1        	sw	a0, 0(a1)
;                                         print("0x{x}", .{value});
8020876c: f1 75        	lui	a1, 1048572
8020876e: 9b 85 85 54  	addiw	a1, a1, 1352
80208772: a2 95        	add	a1, a1, s0
80208774: 88 c1        	sw	a0, 0(a1)
80208776: 81 45        	mv	a1, zero
80208778: 71 76        	lui	a2, 1048572
8020877a: 1b 06 86 2b  	addiw	a2, a2, 696
8020877e: 22 96        	add	a2, a2, s0
80208780: 0c e2        	sd	a1, 0(a2)
80208782: 79 76        	lui	a2, 1048574
80208784: 1b 06 86 95  	addiw	a2, a2, -1704
80208788: 22 96        	add	a2, a2, s0
8020878a: 0c e2        	sd	a1, 0(a2)
8020878c: f9 75        	lui	a1, 1048574
8020878e: 9b 85 05 97  	addiw	a1, a1, -1680
80208792: a2 95        	add	a1, a1, s0
80208794: 79 76        	lui	a2, 1048574
80208796: 1b 06 06 96  	addiw	a2, a2, -1696
8020879a: 22 96        	add	a2, a2, s0
8020879c: 0c e2        	sd	a1, 0(a2)
8020879e: 93 05 00 02  	addi	a1, zero, 32
802087a2: 79 76        	lui	a2, 1048574
802087a4: 1b 06 86 96  	addiw	a2, a2, -1688
802087a8: 22 96        	add	a2, a2, s0
802087aa: 0c e2        	sd	a1, 0(a2)
;     writer.print(format, args) catch unreachable;
802087ac: f9 75        	lui	a1, 1048574
802087ae: 9b 85 05 95  	addiw	a1, a1, -1712
802087b2: a2 95        	add	a1, a1, s0
802087b4: 88 c1        	sw	a0, 0(a1)
802087b6: 79 75        	lui	a0, 1048574
802087b8: 1b 05 85 95  	addiw	a0, a0, -1704
802087bc: 22 95        	add	a0, a0, s0
802087be: f1 75        	lui	a1, 1048572
802087c0: 9b 85 85 54  	addiw	a1, a1, 1352
802087c4: a2 95        	add	a1, a1, s0
802087c6: 97 e0 00 00  	auipc	ra, 14
802087ca: e7 80 a0 e8  	jalr	-374(ra)
802087ce: f1 75        	lui	a1, 1048572
802087d0: 9b 85 85 2b  	addiw	a1, a1, 696
802087d4: a2 95        	add	a1, a1, s0
802087d6: 8c 61        	ld	a1, 0(a1)
802087d8: 79 76        	lui	a2, 1048574
802087da: 1b 06 e6 94  	addiw	a2, a2, -1714
802087de: 22 96        	add	a2, a2, s0
802087e0: 23 10 a6 00  	sh	a0, 0(a2)
802087e4: 41 66        	lui	a2, 16
802087e6: 7d 36        	addiw	a2, a2, -1
802087e8: 71 8d        	and	a0, a0, a2
802087ea: 71 76        	lui	a2, 1048572
802087ec: 1b 06 06 2c  	addiw	a2, a2, 704
802087f0: 22 96        	add	a2, a2, s0
802087f2: 08 e2        	sd	a0, 0(a2)
802087f4: 63 00 b5 02  	beq	a0, a1, 0x80208814 <.LBB123_311+0xd6>
802087f8: 09 a0        	j	0x802087fa <.LBB123_311+0xbc>
802087fa: 71 75        	lui	a0, 1048572
802087fc: 1b 05 05 2c  	addiw	a0, a0, 704
80208800: 22 95        	add	a0, a0, s0
80208802: 0c 61        	ld	a1, 0(a0)
80208804: 79 75        	lui	a0, 1048574
80208806: 1b 05 85 95  	addiw	a0, a0, -1704
8020880a: 22 95        	add	a0, a0, s0
8020880c: 97 80 ff ff  	auipc	ra, 1048568
80208810: e7 80 20 de  	jalr	-542(ra)
;                                 switch (address_byte_count) {
80208814: e9 a0        	j	0x802088de <.LBB123_311+0x1a0>
;                                         const value = self.parse_int(u64);
80208816: 71 75        	lui	a0, 1048572
80208818: 1b 05 05 32  	addiw	a0, a0, 800
8020881c: 22 95        	add	a0, a0, s0
8020881e: 08 61        	ld	a0, 0(a0)
80208820: 97 c0 00 00  	auipc	ra, 12
80208824: e7 80 40 0d  	jalr	212(ra)
80208828: f1 75        	lui	a1, 1048572
8020882a: 9b 85 05 54  	addiw	a1, a1, 1344
8020882e: a2 95        	add	a1, a1, s0
80208830: 88 e1        	sd	a0, 0(a1)
;                                         print("0x{x}", .{value});
80208832: f1 75        	lui	a1, 1048572
80208834: 9b 85 85 53  	addiw	a1, a1, 1336
80208838: a2 95        	add	a1, a1, s0
8020883a: 88 e1        	sd	a0, 0(a1)
8020883c: 81 45        	mv	a1, zero
8020883e: 71 76        	lui	a2, 1048572
80208840: 1b 06 86 2a  	addiw	a2, a2, 680
80208844: 22 96        	add	a2, a2, s0
80208846: 0c e2        	sd	a1, 0(a2)
80208848: 79 76        	lui	a2, 1048574
8020884a: 1b 06 06 a8  	addiw	a2, a2, -1408
8020884e: 22 96        	add	a2, a2, s0
80208850: 0c e2        	sd	a1, 0(a2)
80208852: f9 75        	lui	a1, 1048574
80208854: 9b 85 85 a9  	addiw	a1, a1, -1384
80208858: a2 95        	add	a1, a1, s0
8020885a: 79 76        	lui	a2, 1048574
8020885c: 1b 06 86 a8  	addiw	a2, a2, -1400
80208860: 22 96        	add	a2, a2, s0
80208862: 0c e2        	sd	a1, 0(a2)
80208864: 93 05 00 02  	addi	a1, zero, 32
80208868: 79 76        	lui	a2, 1048574
8020886a: 1b 06 06 a9  	addiw	a2, a2, -1392
8020886e: 22 96        	add	a2, a2, s0
80208870: 0c e2        	sd	a1, 0(a2)
;     writer.print(format, args) catch unreachable;
80208872: f9 75        	lui	a1, 1048574
80208874: 9b 85 85 a7  	addiw	a1, a1, -1416
80208878: a2 95        	add	a1, a1, s0
8020887a: 88 e1        	sd	a0, 0(a1)
8020887c: 79 75        	lui	a0, 1048574
8020887e: 1b 05 05 a8  	addiw	a0, a0, -1408
80208882: 22 95        	add	a0, a0, s0
80208884: f1 75        	lui	a1, 1048572
80208886: 9b 85 85 53  	addiw	a1, a1, 1336
8020888a: a2 95        	add	a1, a1, s0
8020888c: 97 e0 00 00  	auipc	ra, 14
80208890: e7 80 e0 e0  	jalr	-498(ra)
80208894: f1 75        	lui	a1, 1048572
80208896: 9b 85 85 2a  	addiw	a1, a1, 680
8020889a: a2 95        	add	a1, a1, s0
8020889c: 8c 61        	ld	a1, 0(a1)
8020889e: 79 76        	lui	a2, 1048574
802088a0: 1b 06 66 a7  	addiw	a2, a2, -1418
802088a4: 22 96        	add	a2, a2, s0
802088a6: 23 10 a6 00  	sh	a0, 0(a2)
802088aa: 41 66        	lui	a2, 16
802088ac: 7d 36        	addiw	a2, a2, -1
802088ae: 71 8d        	and	a0, a0, a2
802088b0: 71 76        	lui	a2, 1048572
802088b2: 1b 06 06 2b  	addiw	a2, a2, 688
802088b6: 22 96        	add	a2, a2, s0
802088b8: 08 e2        	sd	a0, 0(a2)
802088ba: 63 00 b5 02  	beq	a0, a1, 0x802088da <.LBB123_311+0x19c>
802088be: 09 a0        	j	0x802088c0 <.LBB123_311+0x182>
802088c0: 71 75        	lui	a0, 1048572
802088c2: 1b 05 05 2b  	addiw	a0, a0, 688
802088c6: 22 95        	add	a0, a0, s0
802088c8: 0c 61        	ld	a1, 0(a0)
802088ca: 79 75        	lui	a0, 1048574
802088cc: 1b 05 05 a8  	addiw	a0, a0, -1408
802088d0: 22 95        	add	a0, a0, s0
802088d2: 97 80 ff ff  	auipc	ra, 1048568
802088d6: e7 80 c0 d1  	jalr	-740(ra)
;                                 switch (address_byte_count) {
802088da: 11 a0        	j	0x802088de <.LBB123_311+0x1a0>
802088dc: 09 a0        	j	0x802088de <.LBB123_311+0x1a0>
802088de: 01 45        	mv	a0, zero
802088e0: f1 75        	lui	a1, 1048572
802088e2: 9b 85 85 29  	addiw	a1, a1, 664
802088e6: a2 95        	add	a1, a1, s0
802088e8: 88 e1        	sd	a0, 0(a1)
802088ea: f5 75        	lui	a1, 1048573
802088ec: 9b 85 05 e5  	addiw	a1, a1, -432
802088f0: a2 95        	add	a1, a1, s0
802088f2: 88 e1        	sd	a0, 0(a1)
802088f4: 75 75        	lui	a0, 1048573
802088f6: 1b 05 85 e6  	addiw	a0, a0, -408
802088fa: 22 95        	add	a0, a0, s0
802088fc: f5 75        	lui	a1, 1048573
802088fe: 9b 85 85 e5  	addiw	a1, a1, -424
80208902: a2 95        	add	a1, a1, s0
80208904: 88 e1        	sd	a0, 0(a1)
80208906: 13 05 00 02  	addi	a0, zero, 32
8020890a: f5 75        	lui	a1, 1048573
8020890c: 9b 85 05 e6  	addiw	a1, a1, -416
80208910: a2 95        	add	a1, a1, s0
80208912: 88 e1        	sd	a0, 0(a1)

0000000080208914 <.LBB123_312>:
;     _ = writer.write(bytes) catch unreachable;
80208914: 17 56 01 00  	auipc	a2, 21
80208918: 13 06 46 45  	addi	a2, a2, 1108
8020891c: 75 75        	lui	a0, 1048573
8020891e: 1b 05 05 e4  	addiw	a0, a0, -448
80208922: 22 95        	add	a0, a0, s0
80208924: f5 75        	lui	a1, 1048573
80208926: 9b 85 05 e5  	addiw	a1, a1, -432
8020892a: a2 95        	add	a1, a1, s0
8020892c: 97 80 ff ff  	auipc	ra, 1048568
80208930: e7 80 00 31  	jalr	784(ra)
80208934: 71 75        	lui	a0, 1048572
80208936: 1b 05 85 29  	addiw	a0, a0, 664
8020893a: 22 95        	add	a0, a0, s0
8020893c: 0c 61        	ld	a1, 0(a0)
8020893e: 75 75        	lui	a0, 1048573
80208940: 1b 05 85 e4  	addiw	a0, a0, -440
80208944: 22 95        	add	a0, a0, s0
80208946: 03 55 05 00  	lhu	a0, 0(a0)
8020894a: 71 76        	lui	a2, 1048572
8020894c: 1b 06 06 2a  	addiw	a2, a2, 672
80208950: 22 96        	add	a2, a2, s0
80208952: 08 e2        	sd	a0, 0(a2)
80208954: 63 00 b5 02  	beq	a0, a1, 0x80208974 <.LBB123_312+0x60>
80208958: 09 a0        	j	0x8020895a <.LBB123_312+0x46>
8020895a: 71 75        	lui	a0, 1048572
8020895c: 1b 05 05 2a  	addiw	a0, a0, 672
80208960: 22 95        	add	a0, a0, s0
80208962: 0c 61        	ld	a1, 0(a0)
80208964: 75 75        	lui	a0, 1048573
80208966: 1b 05 05 e5  	addiw	a0, a0, -432
8020896a: 22 95        	add	a0, a0, s0
8020896c: 97 80 ff ff  	auipc	ra, 1048568
80208970: e7 80 20 c8  	jalr	-894(ra)
;                                 switch (size_byte_count) {
80208974: 71 75        	lui	a0, 1048572
80208976: 1b 05 05 56  	addiw	a0, a0, 1376
8020897a: 22 95        	add	a0, a0, s0
8020897c: 03 65 05 00  	lwu	a0, 0(a0)
80208980: f1 75        	lui	a1, 1048572
80208982: 9b 85 05 29  	addiw	a1, a1, 656
80208986: a2 95        	add	a1, a1, s0
80208988: 88 e1        	sd	a0, 0(a1)
8020898a: 81 45        	mv	a1, zero
8020898c: 63 09 b5 0e  	beq	a0, a1, 0x80208a7e <.LBB123_313+0xd8>
80208990: 09 a0        	j	0x80208992 <.LBB123_312+0x7e>
80208992: 71 75        	lui	a0, 1048572
80208994: 1b 05 05 29  	addiw	a0, a0, 656
80208998: 22 95        	add	a0, a0, s0
8020899a: 08 61        	ld	a0, 0(a0)
8020899c: 01 25        	sext.w	a0, a0
8020899e: a1 45        	addi	a1, zero, 8
;                                 switch (size_byte_count) {
802089a0: 63 0c b5 00  	beq	a0, a1, 0x802089b8 <.LBB123_313+0x12>
802089a4: 09 a0        	j	0x802089a6 <.LBB123_313>

00000000802089a6 <.LBB123_313>:
;                                     else => unreachable,
802089a6: 17 55 01 00  	auipc	a0, 21
802089aa: 13 05 a5 ae  	addi	a0, a0, -1302
802089ae: 81 45        	mv	a1, zero
802089b0: 97 70 ff ff  	auipc	ra, 1048567
802089b4: e7 80 00 6f  	jalr	1776(ra)
;                                         const value = self.parse_int(u64);
802089b8: 71 75        	lui	a0, 1048572
802089ba: 1b 05 05 32  	addiw	a0, a0, 800
802089be: 22 95        	add	a0, a0, s0
802089c0: 08 61        	ld	a0, 0(a0)
802089c2: 97 c0 00 00  	auipc	ra, 12
802089c6: e7 80 20 f3  	jalr	-206(ra)
802089ca: f1 75        	lui	a1, 1048572
802089cc: 9b 85 05 53  	addiw	a1, a1, 1328
802089d0: a2 95        	add	a1, a1, s0
802089d2: 88 e1        	sd	a0, 0(a1)
;                                         print("0x{x}", .{value});
802089d4: f1 75        	lui	a1, 1048572
802089d6: 9b 85 85 52  	addiw	a1, a1, 1320
802089da: a2 95        	add	a1, a1, s0
802089dc: 88 e1        	sd	a0, 0(a1)
802089de: 81 45        	mv	a1, zero
802089e0: 71 76        	lui	a2, 1048572
802089e2: 1b 06 06 28  	addiw	a2, a2, 640
802089e6: 22 96        	add	a2, a2, s0
802089e8: 0c e2        	sd	a1, 0(a2)
802089ea: 79 76        	lui	a2, 1048574
802089ec: 1b 06 86 ba  	addiw	a2, a2, -1112
802089f0: 22 96        	add	a2, a2, s0
802089f2: 0c e2        	sd	a1, 0(a2)
802089f4: f9 75        	lui	a1, 1048574
802089f6: 9b 85 05 bc  	addiw	a1, a1, -1088
802089fa: a2 95        	add	a1, a1, s0
802089fc: 79 76        	lui	a2, 1048574
802089fe: 1b 06 06 bb  	addiw	a2, a2, -1104
80208a02: 22 96        	add	a2, a2, s0
80208a04: 0c e2        	sd	a1, 0(a2)
80208a06: 93 05 00 02  	addi	a1, zero, 32
80208a0a: 79 76        	lui	a2, 1048574
80208a0c: 1b 06 86 bb  	addiw	a2, a2, -1096
80208a10: 22 96        	add	a2, a2, s0
80208a12: 0c e2        	sd	a1, 0(a2)
;     writer.print(format, args) catch unreachable;
80208a14: f9 75        	lui	a1, 1048574
80208a16: 9b 85 05 ba  	addiw	a1, a1, -1120
80208a1a: a2 95        	add	a1, a1, s0
80208a1c: 88 e1        	sd	a0, 0(a1)
80208a1e: 79 75        	lui	a0, 1048574
80208a20: 1b 05 85 ba  	addiw	a0, a0, -1112
80208a24: 22 95        	add	a0, a0, s0
80208a26: f1 75        	lui	a1, 1048572
80208a28: 9b 85 85 52  	addiw	a1, a1, 1320
80208a2c: a2 95        	add	a1, a1, s0
80208a2e: 97 e0 00 00  	auipc	ra, 14
80208a32: e7 80 60 cb  	jalr	-842(ra)
80208a36: f1 75        	lui	a1, 1048572
80208a38: 9b 85 05 28  	addiw	a1, a1, 640
80208a3c: a2 95        	add	a1, a1, s0
80208a3e: 8c 61        	ld	a1, 0(a1)
80208a40: 79 76        	lui	a2, 1048574
80208a42: 1b 06 e6 b9  	addiw	a2, a2, -1122
80208a46: 22 96        	add	a2, a2, s0
80208a48: 23 10 a6 00  	sh	a0, 0(a2)
80208a4c: 41 66        	lui	a2, 16
80208a4e: 7d 36        	addiw	a2, a2, -1
80208a50: 71 8d        	and	a0, a0, a2
80208a52: 71 76        	lui	a2, 1048572
80208a54: 1b 06 86 28  	addiw	a2, a2, 648
80208a58: 22 96        	add	a2, a2, s0
80208a5a: 08 e2        	sd	a0, 0(a2)
80208a5c: 63 00 b5 02  	beq	a0, a1, 0x80208a7c <.LBB123_313+0xd6>
80208a60: 09 a0        	j	0x80208a62 <.LBB123_313+0xbc>
80208a62: 71 75        	lui	a0, 1048572
80208a64: 1b 05 85 28  	addiw	a0, a0, 648
80208a68: 22 95        	add	a0, a0, s0
80208a6a: 0c 61        	ld	a1, 0(a0)
80208a6c: 79 75        	lui	a0, 1048574
80208a6e: 1b 05 85 ba  	addiw	a0, a0, -1112
80208a72: 22 95        	add	a0, a0, s0
80208a74: 97 80 ff ff  	auipc	ra, 1048568
80208a78: e7 80 a0 b7  	jalr	-1158(ra)
;                                 switch (size_byte_count) {
80208a7c: 11 a0        	j	0x80208a80 <.LBB123_313+0xda>
80208a7e: 09 a0        	j	0x80208a80 <.LBB123_313+0xda>
80208a80: 01 45        	mv	a0, zero
80208a82: f1 75        	lui	a1, 1048572
80208a84: 9b 85 05 27  	addiw	a1, a1, 624
80208a88: a2 95        	add	a1, a1, s0
80208a8a: 88 e1        	sd	a0, 0(a1)
80208a8c: f5 75        	lui	a1, 1048573
80208a8e: 9b 85 85 d2  	addiw	a1, a1, -728
80208a92: a2 95        	add	a1, a1, s0
80208a94: 88 e1        	sd	a0, 0(a1)
80208a96: 75 75        	lui	a0, 1048573
80208a98: 1b 05 05 d4  	addiw	a0, a0, -704
80208a9c: 22 95        	add	a0, a0, s0
80208a9e: f5 75        	lui	a1, 1048573
80208aa0: 9b 85 05 d3  	addiw	a1, a1, -720
80208aa4: a2 95        	add	a1, a1, s0
80208aa6: 88 e1        	sd	a0, 0(a1)
80208aa8: 13 05 00 02  	addi	a0, zero, 32
80208aac: f5 75        	lui	a1, 1048573
80208aae: 9b 85 85 d3  	addiw	a1, a1, -712
80208ab2: a2 95        	add	a1, a1, s0
80208ab4: 88 e1        	sd	a0, 0(a1)

0000000080208ab6 <.LBB123_314>:
;     _ = writer.write(bytes) catch unreachable;
80208ab6: 17 56 01 00  	auipc	a2, 21
80208aba: 13 06 26 2c  	addi	a2, a2, 706
80208abe: 75 75        	lui	a0, 1048573
80208ac0: 1b 05 85 d1  	addiw	a0, a0, -744
80208ac4: 22 95        	add	a0, a0, s0
80208ac6: f5 75        	lui	a1, 1048573
80208ac8: 9b 85 85 d2  	addiw	a1, a1, -728
80208acc: a2 95        	add	a1, a1, s0
80208ace: 97 80 ff ff  	auipc	ra, 1048568
80208ad2: e7 80 e0 16  	jalr	366(ra)
80208ad6: 71 75        	lui	a0, 1048572
80208ad8: 1b 05 05 27  	addiw	a0, a0, 624
80208adc: 22 95        	add	a0, a0, s0
80208ade: 0c 61        	ld	a1, 0(a0)
80208ae0: 75 75        	lui	a0, 1048573
80208ae2: 1b 05 05 d2  	addiw	a0, a0, -736
80208ae6: 22 95        	add	a0, a0, s0
80208ae8: 03 55 05 00  	lhu	a0, 0(a0)
80208aec: 71 76        	lui	a2, 1048572
80208aee: 1b 06 86 27  	addiw	a2, a2, 632
80208af2: 22 96        	add	a2, a2, s0
80208af4: 08 e2        	sd	a0, 0(a2)
80208af6: 63 00 b5 02  	beq	a0, a1, 0x80208b16 <.LBB123_314+0x60>
80208afa: 09 a0        	j	0x80208afc <.LBB123_314+0x46>
80208afc: 71 75        	lui	a0, 1048572
80208afe: 1b 05 85 27  	addiw	a0, a0, 632
80208b02: 22 95        	add	a0, a0, s0
80208b04: 0c 61        	ld	a1, 0(a0)
80208b06: 75 75        	lui	a0, 1048573
80208b08: 1b 05 85 d2  	addiw	a0, a0, -728
80208b0c: 22 95        	add	a0, a0, s0
80208b0e: 97 80 ff ff  	auipc	ra, 1048568
80208b12: e7 80 00 ae  	jalr	-1312(ra)
;                             while (pair_i < pair_count) : (pair_i += 1) {
80208b16: 71 75        	lui	a0, 1048572
80208b18: 1b 05 05 55  	addiw	a0, a0, 1360
80208b1c: 22 95        	add	a0, a0, s0
80208b1e: 0c 61        	ld	a1, 0(a0)
80208b20: 13 85 15 00  	addi	a0, a1, 1
80208b24: 71 76        	lui	a2, 1048572
80208b26: 1b 06 86 26  	addiw	a2, a2, 616
80208b2a: 22 96        	add	a2, a2, s0
80208b2c: 08 e2        	sd	a0, 0(a2)
80208b2e: 63 74 b5 00  	bgeu	a0, a1, 0x80208b36 <.LBB123_314+0x80>
80208b32: 6f 30 40 69  	j	0x8020c1c6 <.LBB123_396>
80208b36: 6f 30 20 6a  	j	0x8020c1d8 <.LBB123_396+0x12>
;     return std.mem.eql(u8, a, b);
80208b3a: 71 75        	lui	a0, 1048572
80208b3c: 1b 05 85 5d  	addiw	a0, a0, 1496
80208b40: 22 95        	add	a0, a0, s0
80208b42: 08 61        	ld	a0, 0(a0)
80208b44: f5 75        	lui	a1, 1048573
80208b46: 9b 85 85 69  	addiw	a1, a1, 1688
80208b4a: a2 95        	add	a1, a1, s0
80208b4c: 88 e1        	sd	a0, 0(a1)
80208b4e: 71 75        	lui	a0, 1048572
80208b50: 1b 05 05 5d  	addiw	a0, a0, 1488
80208b54: 22 95        	add	a0, a0, s0
80208b56: 08 61        	ld	a0, 0(a0)
80208b58: f5 75        	lui	a1, 1048573
80208b5a: 9b 85 05 69  	addiw	a1, a1, 1680
80208b5e: a2 95        	add	a1, a1, s0
80208b60: 88 e1        	sd	a0, 0(a1)

0000000080208b62 <.LBB123_315>:
80208b62: 97 55 01 00  	auipc	a1, 21
80208b66: 93 85 65 22  	addi	a1, a1, 550
;     return std.mem.eql(u8, a, b);
80208b6a: 88 61        	ld	a0, 0(a1)
80208b6c: 75 76        	lui	a2, 1048573
80208b6e: 1b 06 06 68  	addiw	a2, a2, 1664
80208b72: 22 96        	add	a2, a2, s0
80208b74: 08 e2        	sd	a0, 0(a2)
80208b76: 88 65        	ld	a0, 8(a1)
80208b78: 75 76        	lui	a2, 1048573
80208b7a: 1b 06 86 68  	addiw	a2, a2, 1672
80208b7e: 22 96        	add	a2, a2, s0
80208b80: 08 e2        	sd	a0, 0(a2)
80208b82: 71 75        	lui	a0, 1048572
80208b84: 1b 05 05 5d  	addiw	a0, a0, 1488
80208b88: 22 95        	add	a0, a0, s0
80208b8a: 97 b0 00 00  	auipc	ra, 11
80208b8e: e7 80 a0 79  	jalr	1946(ra)
80208b92: 05 89        	andi	a0, a0, 1
80208b94: f5 75        	lui	a1, 1048573
80208b96: 9b 85 75 6a  	addiw	a1, a1, 1703
80208b9a: a2 95        	add	a1, a1, s0
80208b9c: 23 80 a5 00  	sb	a0, 0(a1)
80208ba0: 81 45        	mv	a1, zero
;                         } else if (string_eq(property_name, "virtual-reg")) {
80208ba2: 63 0b b5 00  	beq	a0, a1, 0x80208bb8 <.LBB123_316+0x10>
80208ba6: 09 a0        	j	0x80208ba8 <.LBB123_316>

0000000080208ba8 <.LBB123_316>:
;                             TODO(@src());
80208ba8: 17 55 01 00  	auipc	a0, 21
80208bac: 13 05 05 1f  	addi	a0, a0, 496
80208bb0: 97 70 ff ff  	auipc	ra, 1048567
80208bb4: e7 80 20 62  	jalr	1570(ra)
;     return std.mem.eql(u8, a, b);
80208bb8: 71 75        	lui	a0, 1048572
80208bba: 1b 05 85 5d  	addiw	a0, a0, 1496
80208bbe: 22 95        	add	a0, a0, s0
80208bc0: 08 61        	ld	a0, 0(a0)
80208bc2: f5 75        	lui	a1, 1048573
80208bc4: 9b 85 05 67  	addiw	a1, a1, 1648
80208bc8: a2 95        	add	a1, a1, s0
80208bca: 88 e1        	sd	a0, 0(a1)
80208bcc: 71 75        	lui	a0, 1048572
80208bce: 1b 05 05 5d  	addiw	a0, a0, 1488
80208bd2: 22 95        	add	a0, a0, s0
80208bd4: 08 61        	ld	a0, 0(a0)
80208bd6: f5 75        	lui	a1, 1048573
80208bd8: 9b 85 85 66  	addiw	a1, a1, 1640
80208bdc: a2 95        	add	a1, a1, s0
80208bde: 88 e1        	sd	a0, 0(a1)

0000000080208be0 <.LBB123_317>:
80208be0: 97 55 01 00  	auipc	a1, 21
80208be4: 93 85 05 1e  	addi	a1, a1, 480
;     return std.mem.eql(u8, a, b);
80208be8: 88 61        	ld	a0, 0(a1)
80208bea: 75 76        	lui	a2, 1048573
80208bec: 1b 06 86 65  	addiw	a2, a2, 1624
80208bf0: 22 96        	add	a2, a2, s0
80208bf2: 08 e2        	sd	a0, 0(a2)
80208bf4: 88 65        	ld	a0, 8(a1)
80208bf6: 75 76        	lui	a2, 1048573
80208bf8: 1b 06 06 66  	addiw	a2, a2, 1632
80208bfc: 22 96        	add	a2, a2, s0
80208bfe: 08 e2        	sd	a0, 0(a2)
80208c00: 71 75        	lui	a0, 1048572
80208c02: 1b 05 05 5d  	addiw	a0, a0, 1488
80208c06: 22 95        	add	a0, a0, s0
80208c08: 97 b0 00 00  	auipc	ra, 11
80208c0c: e7 80 c0 71  	jalr	1820(ra)
80208c10: 05 89        	andi	a0, a0, 1
80208c12: f5 75        	lui	a1, 1048573
80208c14: 9b 85 f5 67  	addiw	a1, a1, 1663
80208c18: a2 95        	add	a1, a1, s0
80208c1a: 23 80 a5 00  	sb	a0, 0(a1)
80208c1e: 81 45        	mv	a1, zero
;                         } else if (string_eq(property_name, "ranges")) {
80208c20: 63 08 b5 0e  	beq	a0, a1, 0x80208d10 <.LBB123_318+0x64>
80208c24: 09 a0        	j	0x80208c26 <.LBB123_317+0x46>
;                             if (property_value_descriptor.len != 0) {
80208c26: 71 75        	lui	a0, 1048572
80208c28: 1b 05 05 5e  	addiw	a0, a0, 1504
80208c2c: 22 95        	add	a0, a0, s0
80208c2e: 08 41        	lw	a0, 0(a0)
80208c30: 81 45        	mv	a1, zero
80208c32: 63 02 b5 04  	beq	a0, a1, 0x80208c76 <.LBB123_317+0x96>
80208c36: 09 a0        	j	0x80208c38 <.LBB123_317+0x58>
;                                 self.i += property_value_descriptor.len;
80208c38: 71 75        	lui	a0, 1048572
80208c3a: 1b 05 05 32  	addiw	a0, a0, 800
80208c3e: 22 95        	add	a0, a0, s0
80208c40: 08 61        	ld	a0, 0(a0)
80208c42: 93 05 05 01  	addi	a1, a0, 16
80208c46: 71 76        	lui	a2, 1048572
80208c48: 1b 06 86 25  	addiw	a2, a2, 600
80208c4c: 22 96        	add	a2, a2, s0
80208c4e: 0c e2        	sd	a1, 0(a2)
80208c50: 0c 69        	ld	a1, 16(a0)
80208c52: 71 75        	lui	a0, 1048572
80208c54: 1b 05 05 5e  	addiw	a0, a0, 1504
80208c58: 22 95        	add	a0, a0, s0
80208c5a: 03 65 05 00  	lwu	a0, 0(a0)
80208c5e: 2e 95        	add	a0, a0, a1
80208c60: 71 76        	lui	a2, 1048572
80208c62: 1b 06 06 26  	addiw	a2, a2, 608
80208c66: 22 96        	add	a2, a2, s0
80208c68: 08 e2        	sd	a0, 0(a2)
80208c6a: 63 74 b5 00  	bgeu	a0, a1, 0x80208c72 <.LBB123_317+0x92>
80208c6e: 6f 30 20 58  	j	0x8020c1f0 <.LBB123_397>
80208c72: 6f 30 00 59  	j	0x8020c202 <.LBB123_397+0x12>
80208c76: 01 45        	mv	a0, zero
80208c78: f1 75        	lui	a1, 1048572
80208c7a: 9b 85 85 24  	addiw	a1, a1, 584
80208c7e: a2 95        	add	a1, a1, s0
80208c80: 88 e1        	sd	a0, 0(a1)
80208c82: f5 75        	lui	a1, 1048573
80208c84: 9b 85 85 ad  	addiw	a1, a1, -1320
80208c88: a2 95        	add	a1, a1, s0
80208c8a: 88 e1        	sd	a0, 0(a1)
80208c8c: 75 75        	lui	a0, 1048573
80208c8e: 1b 05 05 af  	addiw	a0, a0, -1296
80208c92: 22 95        	add	a0, a0, s0
80208c94: f5 75        	lui	a1, 1048573
80208c96: 9b 85 05 ae  	addiw	a1, a1, -1312
80208c9a: a2 95        	add	a1, a1, s0
80208c9c: 88 e1        	sd	a0, 0(a1)
80208c9e: 13 05 00 02  	addi	a0, zero, 32
80208ca2: f5 75        	lui	a1, 1048573
80208ca4: 9b 85 85 ae  	addiw	a1, a1, -1304
80208ca8: a2 95        	add	a1, a1, s0
80208caa: 88 e1        	sd	a0, 0(a1)

0000000080208cac <.LBB123_318>:
;     _ = writer.write(bytes) catch unreachable;
80208cac: 17 56 01 00  	auipc	a2, 21
80208cb0: 13 06 46 13  	addi	a2, a2, 308
80208cb4: 75 75        	lui	a0, 1048573
80208cb6: 1b 05 85 ac  	addiw	a0, a0, -1336
80208cba: 22 95        	add	a0, a0, s0
80208cbc: f5 75        	lui	a1, 1048573
80208cbe: 9b 85 85 ad  	addiw	a1, a1, -1320
80208cc2: a2 95        	add	a1, a1, s0
80208cc4: 97 80 ff ff  	auipc	ra, 1048568
80208cc8: e7 80 80 f7  	jalr	-136(ra)
80208ccc: 71 75        	lui	a0, 1048572
80208cce: 1b 05 85 24  	addiw	a0, a0, 584
80208cd2: 22 95        	add	a0, a0, s0
80208cd4: 0c 61        	ld	a1, 0(a0)
80208cd6: 75 75        	lui	a0, 1048573
80208cd8: 1b 05 05 ad  	addiw	a0, a0, -1328
80208cdc: 22 95        	add	a0, a0, s0
80208cde: 03 55 05 00  	lhu	a0, 0(a0)
80208ce2: 71 76        	lui	a2, 1048572
80208ce4: 1b 06 06 25  	addiw	a2, a2, 592
80208ce8: 22 96        	add	a2, a2, s0
80208cea: 08 e2        	sd	a0, 0(a2)
80208cec: 63 00 b5 02  	beq	a0, a1, 0x80208d0c <.LBB123_318+0x60>
80208cf0: 09 a0        	j	0x80208cf2 <.LBB123_318+0x46>
80208cf2: 71 75        	lui	a0, 1048572
80208cf4: 1b 05 05 25  	addiw	a0, a0, 592
80208cf8: 22 95        	add	a0, a0, s0
80208cfa: 0c 61        	ld	a1, 0(a0)
80208cfc: 75 75        	lui	a0, 1048573
80208cfe: 1b 05 85 ad  	addiw	a0, a0, -1320
80208d02: 22 95        	add	a0, a0, s0
80208d04: 97 80 ff ff  	auipc	ra, 1048568
80208d08: e7 80 a0 8e  	jalr	-1814(ra)
;                             if (property_value_descriptor.len != 0) {
80208d0c: 6f 30 60 24  	j	0x8020bf52 <.LBB123_388+0x54>
;     return std.mem.eql(u8, a, b);
80208d10: 71 75        	lui	a0, 1048572
80208d12: 1b 05 85 5d  	addiw	a0, a0, 1496
80208d16: 22 95        	add	a0, a0, s0
80208d18: 08 61        	ld	a0, 0(a0)
80208d1a: f5 75        	lui	a1, 1048573
80208d1c: 9b 85 85 64  	addiw	a1, a1, 1608
80208d20: a2 95        	add	a1, a1, s0
80208d22: 88 e1        	sd	a0, 0(a1)
80208d24: 71 75        	lui	a0, 1048572
80208d26: 1b 05 05 5d  	addiw	a0, a0, 1488
80208d2a: 22 95        	add	a0, a0, s0
80208d2c: 08 61        	ld	a0, 0(a0)
80208d2e: f5 75        	lui	a1, 1048573
80208d30: 9b 85 05 64  	addiw	a1, a1, 1600
80208d34: a2 95        	add	a1, a1, s0
80208d36: 88 e1        	sd	a0, 0(a1)

0000000080208d38 <.LBB123_319>:
80208d38: 97 55 01 00  	auipc	a1, 21
80208d3c: 93 85 85 0b  	addi	a1, a1, 184
;     return std.mem.eql(u8, a, b);
80208d40: 88 61        	ld	a0, 0(a1)
80208d42: 75 76        	lui	a2, 1048573
80208d44: 1b 06 06 63  	addiw	a2, a2, 1584
80208d48: 22 96        	add	a2, a2, s0
80208d4a: 08 e2        	sd	a0, 0(a2)
80208d4c: 88 65        	ld	a0, 8(a1)
80208d4e: 75 76        	lui	a2, 1048573
80208d50: 1b 06 86 63  	addiw	a2, a2, 1592
80208d54: 22 96        	add	a2, a2, s0
80208d56: 08 e2        	sd	a0, 0(a2)
80208d58: 71 75        	lui	a0, 1048572
80208d5a: 1b 05 05 5d  	addiw	a0, a0, 1488
80208d5e: 22 95        	add	a0, a0, s0
80208d60: 97 b0 00 00  	auipc	ra, 11
80208d64: e7 80 40 5c  	jalr	1476(ra)
80208d68: 05 89        	andi	a0, a0, 1
80208d6a: f5 75        	lui	a1, 1048573
80208d6c: 9b 85 75 65  	addiw	a1, a1, 1623
80208d70: a2 95        	add	a1, a1, s0
80208d72: 23 80 a5 00  	sb	a0, 0(a1)
80208d76: 81 45        	mv	a1, zero
;                         } else if (string_eq(property_name, "dma-ranges")) {
80208d78: 63 0b b5 00  	beq	a0, a1, 0x80208d8e <.LBB123_320+0x10>
80208d7c: 09 a0        	j	0x80208d7e <.LBB123_320>

0000000080208d7e <.LBB123_320>:
;                             TODO(@src());
80208d7e: 17 55 01 00  	auipc	a0, 21
80208d82: 13 05 25 08  	addi	a0, a0, 130
80208d86: 97 70 ff ff  	auipc	ra, 1048567
80208d8a: e7 80 c0 44  	jalr	1100(ra)
;     return std.mem.eql(u8, a, b);
80208d8e: 71 75        	lui	a0, 1048572
80208d90: 1b 05 85 5d  	addiw	a0, a0, 1496
80208d94: 22 95        	add	a0, a0, s0
80208d96: 08 61        	ld	a0, 0(a0)
80208d98: f5 75        	lui	a1, 1048573
80208d9a: 9b 85 05 62  	addiw	a1, a1, 1568
80208d9e: a2 95        	add	a1, a1, s0
80208da0: 88 e1        	sd	a0, 0(a1)
80208da2: 71 75        	lui	a0, 1048572
80208da4: 1b 05 05 5d  	addiw	a0, a0, 1488
80208da8: 22 95        	add	a0, a0, s0
80208daa: 08 61        	ld	a0, 0(a0)
80208dac: f5 75        	lui	a1, 1048573
80208dae: 9b 85 85 61  	addiw	a1, a1, 1560
80208db2: a2 95        	add	a1, a1, s0
80208db4: 88 e1        	sd	a0, 0(a1)

0000000080208db6 <.LBB123_321>:
80208db6: 97 55 01 00  	auipc	a1, 21
80208dba: 93 85 25 07  	addi	a1, a1, 114
;     return std.mem.eql(u8, a, b);
80208dbe: 88 61        	ld	a0, 0(a1)
80208dc0: 75 76        	lui	a2, 1048573
80208dc2: 1b 06 86 60  	addiw	a2, a2, 1544
80208dc6: 22 96        	add	a2, a2, s0
80208dc8: 08 e2        	sd	a0, 0(a2)
80208dca: 88 65        	ld	a0, 8(a1)
80208dcc: 75 76        	lui	a2, 1048573
80208dce: 1b 06 06 61  	addiw	a2, a2, 1552
80208dd2: 22 96        	add	a2, a2, s0
80208dd4: 08 e2        	sd	a0, 0(a2)
80208dd6: 71 75        	lui	a0, 1048572
80208dd8: 1b 05 05 5d  	addiw	a0, a0, 1488
80208ddc: 22 95        	add	a0, a0, s0
80208dde: 97 b0 00 00  	auipc	ra, 11
80208de2: e7 80 60 54  	jalr	1350(ra)
80208de6: 05 89        	andi	a0, a0, 1
80208de8: f5 75        	lui	a1, 1048573
80208dea: 9b 85 f5 62  	addiw	a1, a1, 1583
80208dee: a2 95        	add	a1, a1, s0
80208df0: 23 80 a5 00  	sb	a0, 0(a1)
80208df4: 81 45        	mv	a1, zero
;                         } else if (string_eq(property_name, "dma-coherent")) {
80208df6: 63 04 b5 00  	beq	a0, a1, 0x80208dfe <.LBB123_321+0x48>
80208dfa: 6f 30 a0 15  	j	0x8020bf54 <.LBB123_388+0x56>
;     return std.mem.startsWith(u8, str, slice);
80208dfe: 71 75        	lui	a0, 1048572
80208e00: 1b 05 05 62  	addiw	a0, a0, 1568
80208e04: 22 95        	add	a0, a0, s0
80208e06: 08 61        	ld	a0, 0(a0)
80208e08: f9 75        	lui	a1, 1048574
80208e0a: 9b 85 05 94  	addiw	a1, a1, -1728
80208e0e: a2 95        	add	a1, a1, s0
80208e10: 88 e1        	sd	a0, 0(a1)
80208e12: 71 75        	lui	a0, 1048572
80208e14: 1b 05 85 61  	addiw	a0, a0, 1560
80208e18: 22 95        	add	a0, a0, s0
80208e1a: 08 61        	ld	a0, 0(a0)
80208e1c: f9 75        	lui	a1, 1048574
80208e1e: 9b 85 85 93  	addiw	a1, a1, -1736
80208e22: a2 95        	add	a1, a1, s0
80208e24: 88 e1        	sd	a0, 0(a1)

0000000080208e26 <.LBB123_322>:
80208e26: 97 55 01 00  	auipc	a1, 21
80208e2a: 93 85 25 01  	addi	a1, a1, 18
;     return std.mem.startsWith(u8, str, slice);
80208e2e: 88 61        	ld	a0, 0(a1)
80208e30: 79 76        	lui	a2, 1048574
80208e32: 1b 06 86 92  	addiw	a2, a2, -1752
80208e36: 22 96        	add	a2, a2, s0
80208e38: 08 e2        	sd	a0, 0(a2)
80208e3a: 88 65        	ld	a0, 8(a1)
80208e3c: 79 76        	lui	a2, 1048574
80208e3e: 1b 06 06 93  	addiw	a2, a2, -1744
80208e42: 22 96        	add	a2, a2, s0
80208e44: 08 e2        	sd	a0, 0(a2)
80208e46: 71 75        	lui	a0, 1048572
80208e48: 1b 05 85 61  	addiw	a0, a0, 1560
80208e4c: 22 95        	add	a0, a0, s0
80208e4e: 97 e0 00 00  	auipc	ra, 14
80208e52: e7 80 00 8e  	jalr	-1824(ra)
80208e56: 05 89        	andi	a0, a0, 1
80208e58: f9 75        	lui	a1, 1048574
80208e5a: 9b 85 d5 94  	addiw	a1, a1, -1715
80208e5e: a2 95        	add	a1, a1, s0
80208e60: 23 80 a5 00  	sb	a0, 0(a1)
80208e64: 81 45        	mv	a1, zero
;                             if (starts_with(node_name, "flash")) {
80208e66: 63 06 b5 16  	beq	a0, a1, 0x80208fd2 <.LBB123_325+0xd8>
80208e6a: 09 a0        	j	0x80208e6c <.LBB123_322+0x46>
;     return std.mem.eql(u8, a, b);
80208e6c: 71 75        	lui	a0, 1048572
80208e6e: 1b 05 85 5d  	addiw	a0, a0, 1496
80208e72: 22 95        	add	a0, a0, s0
80208e74: 08 61        	ld	a0, 0(a0)
80208e76: f5 75        	lui	a1, 1048573
80208e78: 9b 85 85 5f  	addiw	a1, a1, 1528
80208e7c: a2 95        	add	a1, a1, s0
80208e7e: 88 e1        	sd	a0, 0(a1)
80208e80: 71 75        	lui	a0, 1048572
80208e82: 1b 05 05 5d  	addiw	a0, a0, 1488
80208e86: 22 95        	add	a0, a0, s0
80208e88: 08 61        	ld	a0, 0(a0)
80208e8a: f5 75        	lui	a1, 1048573
80208e8c: 9b 85 05 5f  	addiw	a1, a1, 1520
80208e90: a2 95        	add	a1, a1, s0
80208e92: 88 e1        	sd	a0, 0(a1)

0000000080208e94 <.LBB123_323>:
80208e94: 97 55 01 00  	auipc	a1, 21
80208e98: 93 85 45 fb  	addi	a1, a1, -76
;     return std.mem.eql(u8, a, b);
80208e9c: 88 61        	ld	a0, 0(a1)
80208e9e: 75 76        	lui	a2, 1048573
80208ea0: 1b 06 06 5e  	addiw	a2, a2, 1504
80208ea4: 22 96        	add	a2, a2, s0
80208ea6: 08 e2        	sd	a0, 0(a2)
80208ea8: 88 65        	ld	a0, 8(a1)
80208eaa: 75 76        	lui	a2, 1048573
80208eac: 1b 06 86 5e  	addiw	a2, a2, 1512
80208eb0: 22 96        	add	a2, a2, s0
80208eb2: 08 e2        	sd	a0, 0(a2)
80208eb4: 71 75        	lui	a0, 1048572
80208eb6: 1b 05 05 5d  	addiw	a0, a0, 1488
80208eba: 22 95        	add	a0, a0, s0
80208ebc: 97 b0 00 00  	auipc	ra, 11
80208ec0: e7 80 80 46  	jalr	1128(ra)
80208ec4: 05 89        	andi	a0, a0, 1
80208ec6: f5 75        	lui	a1, 1048573
80208ec8: 9b 85 75 60  	addiw	a1, a1, 1543
80208ecc: a2 95        	add	a1, a1, s0
80208ece: 23 80 a5 00  	sb	a0, 0(a1)
80208ed2: 81 45        	mv	a1, zero
;                                 if (string_eq(property_name, "bank-width")) {
80208ed4: 63 1b b5 00  	bne	a0, a1, 0x80208eea <.LBB123_324+0x10>
80208ed8: 09 a0        	j	0x80208eda <.LBB123_324>

0000000080208eda <.LBB123_324>:
;                                     TODO(@src());
80208eda: 17 55 01 00  	auipc	a0, 21
80208ede: 13 05 e5 f7  	addi	a0, a0, -130
80208ee2: 97 70 ff ff  	auipc	ra, 1048567
80208ee6: e7 80 00 2f  	jalr	752(ra)
;                                     assert(@src(), property_value_descriptor.len == @sizeOf(u32));
80208eea: 71 75        	lui	a0, 1048572
80208eec: 1b 05 05 5e  	addiw	a0, a0, 1504
80208ef0: 22 95        	add	a0, a0, s0
80208ef2: 08 41        	lw	a0, 0(a0)
80208ef4: 71 15        	addi	a0, a0, -4
80208ef6: 93 35 15 00  	seqz	a1, a0

0000000080208efa <.LBB123_325>:
80208efa: 17 55 01 00  	auipc	a0, 21
80208efe: 13 05 65 f8  	addi	a0, a0, -122
80208f02: 97 70 ff ff  	auipc	ra, 1048567
80208f06: e7 80 a0 30  	jalr	778(ra)
;                                     const bank_width = self.parse_int(u32);
80208f0a: 71 75        	lui	a0, 1048572
80208f0c: 1b 05 05 32  	addiw	a0, a0, 800
80208f10: 22 95        	add	a0, a0, s0
80208f12: 08 61        	ld	a0, 0(a0)
80208f14: 97 f0 ff ff  	auipc	ra, 1048575
80208f18: e7 80 c0 fb  	jalr	-68(ra)
80208f1c: f1 75        	lui	a1, 1048572
80208f1e: 9b 85 45 52  	addiw	a1, a1, 1316
80208f22: a2 95        	add	a1, a1, s0
80208f24: 88 c1        	sw	a0, 0(a1)
;                                     print("{}", .{bank_width});
80208f26: f1 75        	lui	a1, 1048572
80208f28: 9b 85 05 52  	addiw	a1, a1, 1312
80208f2c: a2 95        	add	a1, a1, s0
80208f2e: 88 c1        	sw	a0, 0(a1)
80208f30: 81 45        	mv	a1, zero
80208f32: 71 76        	lui	a2, 1048572
80208f34: 1b 06 86 23  	addiw	a2, a2, 568
80208f38: 22 96        	add	a2, a2, s0
80208f3a: 0c e2        	sd	a1, 0(a2)
80208f3c: 79 76        	lui	a2, 1048574
80208f3e: 1b 06 06 cd  	addiw	a2, a2, -816
80208f42: 22 96        	add	a2, a2, s0
80208f44: 0c e2        	sd	a1, 0(a2)
80208f46: f9 75        	lui	a1, 1048574
80208f48: 9b 85 85 ce  	addiw	a1, a1, -792
80208f4c: a2 95        	add	a1, a1, s0
80208f4e: 79 76        	lui	a2, 1048574
80208f50: 1b 06 86 cd  	addiw	a2, a2, -808
80208f54: 22 96        	add	a2, a2, s0
80208f56: 0c e2        	sd	a1, 0(a2)
80208f58: 93 05 00 02  	addi	a1, zero, 32
80208f5c: 79 76        	lui	a2, 1048574
80208f5e: 1b 06 06 ce  	addiw	a2, a2, -800
80208f62: 22 96        	add	a2, a2, s0
80208f64: 0c e2        	sd	a1, 0(a2)
;     writer.print(format, args) catch unreachable;
80208f66: f9 75        	lui	a1, 1048574
80208f68: 9b 85 85 cc  	addiw	a1, a1, -824
80208f6c: a2 95        	add	a1, a1, s0
80208f6e: 88 c1        	sw	a0, 0(a1)
80208f70: 79 75        	lui	a0, 1048574
80208f72: 1b 05 05 cd  	addiw	a0, a0, -816
80208f76: 22 95        	add	a0, a0, s0
80208f78: f1 75        	lui	a1, 1048572
80208f7a: 9b 85 05 52  	addiw	a1, a1, 1312
80208f7e: a2 95        	add	a1, a1, s0
80208f80: 97 e0 00 00  	auipc	ra, 14
80208f84: e7 80 20 86  	jalr	-1950(ra)
80208f88: f1 75        	lui	a1, 1048572
80208f8a: 9b 85 85 23  	addiw	a1, a1, 568
80208f8e: a2 95        	add	a1, a1, s0
80208f90: 8c 61        	ld	a1, 0(a1)
80208f92: 79 76        	lui	a2, 1048574
80208f94: 1b 06 66 cc  	addiw	a2, a2, -826
80208f98: 22 96        	add	a2, a2, s0
80208f9a: 23 10 a6 00  	sh	a0, 0(a2)
80208f9e: 41 66        	lui	a2, 16
80208fa0: 7d 36        	addiw	a2, a2, -1
80208fa2: 71 8d        	and	a0, a0, a2
80208fa4: 71 76        	lui	a2, 1048572
80208fa6: 1b 06 06 24  	addiw	a2, a2, 576
80208faa: 22 96        	add	a2, a2, s0
80208fac: 08 e2        	sd	a0, 0(a2)
80208fae: 63 00 b5 02  	beq	a0, a1, 0x80208fce <.LBB123_325+0xd4>
80208fb2: 09 a0        	j	0x80208fb4 <.LBB123_325+0xba>
80208fb4: 71 75        	lui	a0, 1048572
80208fb6: 1b 05 05 24  	addiw	a0, a0, 576
80208fba: 22 95        	add	a0, a0, s0
80208fbc: 0c 61        	ld	a1, 0(a0)
80208fbe: 79 75        	lui	a0, 1048574
80208fc0: 1b 05 05 cd  	addiw	a0, a0, -816
80208fc4: 22 95        	add	a0, a0, s0
80208fc6: 97 70 ff ff  	auipc	ra, 1048567
80208fca: e7 80 80 62  	jalr	1576(ra)
;                                 if (string_eq(property_name, "bank-width")) {
80208fce: 6f 20 70 3f  	j	0x8020bbc4 <.LBB123_385+0x10>
;     return std.mem.eql(u8, a, b);
80208fd2: 71 75        	lui	a0, 1048572
80208fd4: 1b 05 05 62  	addiw	a0, a0, 1568
80208fd8: 22 95        	add	a0, a0, s0
80208fda: 08 61        	ld	a0, 0(a0)
80208fdc: f5 75        	lui	a1, 1048573
80208fde: 9b 85 05 5d  	addiw	a1, a1, 1488
80208fe2: a2 95        	add	a1, a1, s0
80208fe4: 88 e1        	sd	a0, 0(a1)
80208fe6: 71 75        	lui	a0, 1048572
80208fe8: 1b 05 85 61  	addiw	a0, a0, 1560
80208fec: 22 95        	add	a0, a0, s0
80208fee: 08 61        	ld	a0, 0(a0)
80208ff0: f5 75        	lui	a1, 1048573
80208ff2: 9b 85 85 5c  	addiw	a1, a1, 1480
80208ff6: a2 95        	add	a1, a1, s0
80208ff8: 88 e1        	sd	a0, 0(a1)

0000000080208ffa <.LBB123_326>:
80208ffa: 97 55 01 00  	auipc	a1, 21
80208ffe: 93 85 e5 ea  	addi	a1, a1, -338
;     return std.mem.eql(u8, a, b);
80209002: 88 61        	ld	a0, 0(a1)
80209004: 75 76        	lui	a2, 1048573
80209006: 1b 06 86 5b  	addiw	a2, a2, 1464
8020900a: 22 96        	add	a2, a2, s0
8020900c: 08 e2        	sd	a0, 0(a2)
8020900e: 88 65        	ld	a0, 8(a1)
80209010: 75 76        	lui	a2, 1048573
80209012: 1b 06 06 5c  	addiw	a2, a2, 1472
80209016: 22 96        	add	a2, a2, s0
80209018: 08 e2        	sd	a0, 0(a2)
8020901a: 71 75        	lui	a0, 1048572
8020901c: 1b 05 85 61  	addiw	a0, a0, 1560
80209020: 22 95        	add	a0, a0, s0
80209022: 97 b0 00 00  	auipc	ra, 11
80209026: e7 80 20 30  	jalr	770(ra)
8020902a: 05 89        	andi	a0, a0, 1
8020902c: f5 75        	lui	a1, 1048573
8020902e: 9b 85 f5 5d  	addiw	a1, a1, 1503
80209032: a2 95        	add	a1, a1, s0
80209034: 23 80 a5 00  	sb	a0, 0(a1)
80209038: 81 45        	mv	a1, zero
;                             } else if (string_eq(node_name, "chosen")) {
8020903a: 63 08 b5 3a  	beq	a0, a1, 0x802093ea <.LBB123_329+0x1fe>
8020903e: 09 a0        	j	0x80209040 <.LBB123_326+0x46>
;     return std.mem.eql(u8, a, b);
80209040: 71 75        	lui	a0, 1048572
80209042: 1b 05 85 5d  	addiw	a0, a0, 1496
80209046: 22 95        	add	a0, a0, s0
80209048: 08 61        	ld	a0, 0(a0)
8020904a: f5 75        	lui	a1, 1048573
8020904c: 9b 85 85 5a  	addiw	a1, a1, 1448
80209050: a2 95        	add	a1, a1, s0
80209052: 88 e1        	sd	a0, 0(a1)
80209054: 71 75        	lui	a0, 1048572
80209056: 1b 05 05 5d  	addiw	a0, a0, 1488
8020905a: 22 95        	add	a0, a0, s0
8020905c: 08 61        	ld	a0, 0(a0)
8020905e: f5 75        	lui	a1, 1048573
80209060: 9b 85 05 5a  	addiw	a1, a1, 1440
80209064: a2 95        	add	a1, a1, s0
80209066: 88 e1        	sd	a0, 0(a1)

0000000080209068 <.LBB123_327>:
80209068: 97 55 01 00  	auipc	a1, 21
8020906c: 93 85 05 e5  	addi	a1, a1, -432
;     return std.mem.eql(u8, a, b);
80209070: 88 61        	ld	a0, 0(a1)
80209072: 75 76        	lui	a2, 1048573
80209074: 1b 06 06 59  	addiw	a2, a2, 1424
80209078: 22 96        	add	a2, a2, s0
8020907a: 08 e2        	sd	a0, 0(a2)
8020907c: 88 65        	ld	a0, 8(a1)
8020907e: 75 76        	lui	a2, 1048573
80209080: 1b 06 86 59  	addiw	a2, a2, 1432
80209084: 22 96        	add	a2, a2, s0
80209086: 08 e2        	sd	a0, 0(a2)
80209088: 71 75        	lui	a0, 1048572
8020908a: 1b 05 05 5d  	addiw	a0, a0, 1488
8020908e: 22 95        	add	a0, a0, s0
80209090: 97 b0 00 00  	auipc	ra, 11
80209094: e7 80 40 29  	jalr	660(ra)
80209098: 05 89        	andi	a0, a0, 1
8020909a: f5 75        	lui	a1, 1048573
8020909c: 9b 85 75 5b  	addiw	a1, a1, 1463
802090a0: a2 95        	add	a1, a1, s0
802090a2: 23 80 a5 00  	sb	a0, 0(a1)
802090a6: 81 45        	mv	a1, zero
;                                 if (string_eq(property_name, "bootargs")) {
802090a8: 63 1a b5 14  	bne	a0, a1, 0x802091fc <.LBB123_329+0x10>
802090ac: 09 a0        	j	0x802090ae <.LBB123_327+0x46>
;     return std.mem.eql(u8, a, b);
802090ae: 71 75        	lui	a0, 1048572
802090b0: 1b 05 85 5d  	addiw	a0, a0, 1496
802090b4: 22 95        	add	a0, a0, s0
802090b6: 08 61        	ld	a0, 0(a0)
802090b8: f5 75        	lui	a1, 1048573
802090ba: 9b 85 05 58  	addiw	a1, a1, 1408
802090be: a2 95        	add	a1, a1, s0
802090c0: 88 e1        	sd	a0, 0(a1)
802090c2: 71 75        	lui	a0, 1048572
802090c4: 1b 05 05 5d  	addiw	a0, a0, 1488
802090c8: 22 95        	add	a0, a0, s0
802090ca: 08 61        	ld	a0, 0(a0)
802090cc: f5 75        	lui	a1, 1048573
802090ce: 9b 85 85 57  	addiw	a1, a1, 1400
802090d2: a2 95        	add	a1, a1, s0
802090d4: 88 e1        	sd	a0, 0(a1)

00000000802090d6 <.LBB123_328>:
802090d6: 97 55 01 00  	auipc	a1, 21
802090da: 93 85 25 df  	addi	a1, a1, -526
;     return std.mem.eql(u8, a, b);
802090de: 88 61        	ld	a0, 0(a1)
802090e0: 75 76        	lui	a2, 1048573
802090e2: 1b 06 86 56  	addiw	a2, a2, 1384
802090e6: 22 96        	add	a2, a2, s0
802090e8: 08 e2        	sd	a0, 0(a2)
802090ea: 88 65        	ld	a0, 8(a1)
802090ec: 75 76        	lui	a2, 1048573
802090ee: 1b 06 06 57  	addiw	a2, a2, 1392
802090f2: 22 96        	add	a2, a2, s0
802090f4: 08 e2        	sd	a0, 0(a2)
802090f6: 71 75        	lui	a0, 1048572
802090f8: 1b 05 05 5d  	addiw	a0, a0, 1488
802090fc: 22 95        	add	a0, a0, s0
802090fe: 97 b0 00 00  	auipc	ra, 11
80209102: e7 80 60 22  	jalr	550(ra)
80209106: 05 89        	andi	a0, a0, 1
80209108: f5 75        	lui	a1, 1048573
8020910a: 9b 85 f5 58  	addiw	a1, a1, 1423
8020910e: a2 95        	add	a1, a1, s0
80209110: 23 80 a5 00  	sb	a0, 0(a1)
80209114: 81 45        	mv	a1, zero
;                                 } else if (string_eq(property_name, "stdout-path")) {
80209116: 63 1e b5 1c  	bne	a0, a1, 0x802092f2 <.LBB123_329+0x106>
8020911a: 09 a0        	j	0x8020911c <.LBB123_328+0x46>
;                                     print("Property unknown: {s}", .{property_name});
8020911c: 71 75        	lui	a0, 1048572
8020911e: 1b 05 85 5d  	addiw	a0, a0, 1496
80209122: 22 95        	add	a0, a0, s0
80209124: 08 61        	ld	a0, 0(a0)
80209126: f1 75        	lui	a1, 1048572
80209128: 9b 85 85 4d  	addiw	a1, a1, 1240
8020912c: a2 95        	add	a1, a1, s0
8020912e: 88 e1        	sd	a0, 0(a1)
80209130: f1 75        	lui	a1, 1048572
80209132: 9b 85 05 5d  	addiw	a1, a1, 1488
80209136: a2 95        	add	a1, a1, s0
80209138: 8c 61        	ld	a1, 0(a1)
8020913a: 71 76        	lui	a2, 1048572
8020913c: 1b 06 06 4d  	addiw	a2, a2, 1232
80209140: 22 96        	add	a2, a2, s0
80209142: 0c e2        	sd	a1, 0(a2)
80209144: 01 46        	mv	a2, zero
80209146: f1 76        	lui	a3, 1048572
80209148: 9b 86 86 22  	addiw	a3, a3, 552
8020914c: a2 96        	add	a3, a3, s0
8020914e: 90 e2        	sd	a2, 0(a3)
80209150: f9 76        	lui	a3, 1048574
80209152: 9b 86 06 e0  	addiw	a3, a3, -512
80209156: a2 96        	add	a3, a3, s0
80209158: 90 e2        	sd	a2, 0(a3)
8020915a: 79 76        	lui	a2, 1048574
8020915c: 1b 06 86 e1  	addiw	a2, a2, -488
80209160: 22 96        	add	a2, a2, s0
80209162: f9 76        	lui	a3, 1048574
80209164: 9b 86 86 e0  	addiw	a3, a3, -504
80209168: a2 96        	add	a3, a3, s0
8020916a: 90 e2        	sd	a2, 0(a3)
8020916c: 13 06 00 02  	addi	a2, zero, 32
80209170: f9 76        	lui	a3, 1048574
80209172: 9b 86 06 e1  	addiw	a3, a3, -496
80209176: a2 96        	add	a3, a3, s0
80209178: 90 e2        	sd	a2, 0(a3)
;     writer.print(format, args) catch unreachable;
8020917a: 79 76        	lui	a2, 1048574
8020917c: 1b 06 06 df  	addiw	a2, a2, -528
80209180: 22 96        	add	a2, a2, s0
80209182: 0c e2        	sd	a1, 0(a2)
80209184: f9 75        	lui	a1, 1048574
80209186: 9b 85 85 df  	addiw	a1, a1, -520
8020918a: a2 95        	add	a1, a1, s0
8020918c: 88 e1        	sd	a0, 0(a1)
8020918e: 79 75        	lui	a0, 1048574
80209190: 1b 05 05 e0  	addiw	a0, a0, -512
80209194: 22 95        	add	a0, a0, s0
80209196: f1 75        	lui	a1, 1048572
80209198: 9b 85 05 4d  	addiw	a1, a1, 1232
8020919c: a2 95        	add	a1, a1, s0
8020919e: 97 d0 00 00  	auipc	ra, 13
802091a2: e7 80 e0 72  	jalr	1838(ra)
802091a6: f1 75        	lui	a1, 1048572
802091a8: 9b 85 85 22  	addiw	a1, a1, 552
802091ac: a2 95        	add	a1, a1, s0
802091ae: 8c 61        	ld	a1, 0(a1)
802091b0: 79 76        	lui	a2, 1048574
802091b2: 1b 06 e6 de  	addiw	a2, a2, -530
802091b6: 22 96        	add	a2, a2, s0
802091b8: 23 10 a6 00  	sh	a0, 0(a2)
802091bc: 41 66        	lui	a2, 16
802091be: 7d 36        	addiw	a2, a2, -1
802091c0: 71 8d        	and	a0, a0, a2
802091c2: 71 76        	lui	a2, 1048572
802091c4: 1b 06 06 23  	addiw	a2, a2, 560
802091c8: 22 96        	add	a2, a2, s0
802091ca: 08 e2        	sd	a0, 0(a2)
802091cc: 63 00 b5 02  	beq	a0, a1, 0x802091ec <.LBB123_329>
802091d0: 09 a0        	j	0x802091d2 <.LBB123_328+0xfc>
802091d2: 71 75        	lui	a0, 1048572
802091d4: 1b 05 05 23  	addiw	a0, a0, 560
802091d8: 22 95        	add	a0, a0, s0
802091da: 0c 61        	ld	a1, 0(a0)
802091dc: 79 75        	lui	a0, 1048574
802091de: 1b 05 05 e0  	addiw	a0, a0, -512
802091e2: 22 95        	add	a0, a0, s0
802091e4: 97 70 ff ff  	auipc	ra, 1048567
802091e8: e7 80 a0 40  	jalr	1034(ra)

00000000802091ec <.LBB123_329>:
;                                     TODO(@src());
802091ec: 17 55 01 00  	auipc	a0, 21
802091f0: 13 05 c5 ce  	addi	a0, a0, -788
802091f4: 97 70 ff ff  	auipc	ra, 1048567
802091f8: e7 80 e0 fd  	jalr	-34(ra)
;                                     const value = self.parse_property_name(property_value_descriptor);
802091fc: 71 75        	lui	a0, 1048572
802091fe: 1b 05 05 32  	addiw	a0, a0, 800
80209202: 22 95        	add	a0, a0, s0
80209204: 0c 61        	ld	a1, 0(a0)
80209206: 71 75        	lui	a0, 1048572
80209208: 1b 05 05 51  	addiw	a0, a0, 1296
8020920c: 22 95        	add	a0, a0, s0
8020920e: 71 76        	lui	a2, 1048572
80209210: 1b 06 06 5e  	addiw	a2, a2, 1504
80209214: 22 96        	add	a2, a2, s0
80209216: 97 f0 ff ff  	auipc	ra, 1048575
8020921a: e7 80 e0 d7  	jalr	-642(ra)
;                                     print("{s}", .{value});
8020921e: 71 75        	lui	a0, 1048572
80209220: 1b 05 05 51  	addiw	a0, a0, 1296
80209224: 22 95        	add	a0, a0, s0
80209226: 0c 61        	ld	a1, 0(a0)
80209228: 71 75        	lui	a0, 1048572
8020922a: 1b 05 05 50  	addiw	a0, a0, 1280
8020922e: 22 95        	add	a0, a0, s0
80209230: 0c e1        	sd	a1, 0(a0)
80209232: 71 75        	lui	a0, 1048572
80209234: 1b 05 85 51  	addiw	a0, a0, 1304
80209238: 22 95        	add	a0, a0, s0
8020923a: 08 61        	ld	a0, 0(a0)
8020923c: 71 76        	lui	a2, 1048572
8020923e: 1b 06 86 50  	addiw	a2, a2, 1288
80209242: 22 96        	add	a2, a2, s0
80209244: 08 e2        	sd	a0, 0(a2)
80209246: 01 46        	mv	a2, zero
80209248: f1 76        	lui	a3, 1048572
8020924a: 9b 86 86 21  	addiw	a3, a3, 536
8020924e: a2 96        	add	a3, a3, s0
80209250: 90 e2        	sd	a2, 0(a3)
80209252: f9 76        	lui	a3, 1048574
80209254: 9b 86 06 f3  	addiw	a3, a3, -208
80209258: a2 96        	add	a3, a3, s0
8020925a: 90 e2        	sd	a2, 0(a3)
8020925c: 79 76        	lui	a2, 1048574
8020925e: 1b 06 86 f4  	addiw	a2, a2, -184
80209262: 22 96        	add	a2, a2, s0
80209264: f9 76        	lui	a3, 1048574
80209266: 9b 86 86 f3  	addiw	a3, a3, -200
8020926a: a2 96        	add	a3, a3, s0
8020926c: 90 e2        	sd	a2, 0(a3)
8020926e: 13 06 00 02  	addi	a2, zero, 32
80209272: f9 76        	lui	a3, 1048574
80209274: 9b 86 06 f4  	addiw	a3, a3, -192
80209278: a2 96        	add	a3, a3, s0
8020927a: 90 e2        	sd	a2, 0(a3)
;     writer.print(format, args) catch unreachable;
8020927c: 79 76        	lui	a2, 1048574
8020927e: 1b 06 06 f2  	addiw	a2, a2, -224
80209282: 22 96        	add	a2, a2, s0
80209284: 0c e2        	sd	a1, 0(a2)
80209286: f9 75        	lui	a1, 1048574
80209288: 9b 85 85 f2  	addiw	a1, a1, -216
8020928c: a2 95        	add	a1, a1, s0
8020928e: 88 e1        	sd	a0, 0(a1)
80209290: 79 75        	lui	a0, 1048574
80209292: 1b 05 05 f3  	addiw	a0, a0, -208
80209296: 22 95        	add	a0, a0, s0
80209298: f1 75        	lui	a1, 1048572
8020929a: 9b 85 05 50  	addiw	a1, a1, 1280
8020929e: a2 95        	add	a1, a1, s0
802092a0: 97 d0 00 00  	auipc	ra, 13
802092a4: e7 80 c0 58  	jalr	1420(ra)
802092a8: f1 75        	lui	a1, 1048572
802092aa: 9b 85 85 21  	addiw	a1, a1, 536
802092ae: a2 95        	add	a1, a1, s0
802092b0: 8c 61        	ld	a1, 0(a1)
802092b2: 79 76        	lui	a2, 1048574
802092b4: 1b 06 e6 f1  	addiw	a2, a2, -226
802092b8: 22 96        	add	a2, a2, s0
802092ba: 23 10 a6 00  	sh	a0, 0(a2)
802092be: 41 66        	lui	a2, 16
802092c0: 7d 36        	addiw	a2, a2, -1
802092c2: 71 8d        	and	a0, a0, a2
802092c4: 71 76        	lui	a2, 1048572
802092c6: 1b 06 06 22  	addiw	a2, a2, 544
802092ca: 22 96        	add	a2, a2, s0
802092cc: 08 e2        	sd	a0, 0(a2)
802092ce: 63 00 b5 02  	beq	a0, a1, 0x802092ee <.LBB123_329+0x102>
802092d2: 09 a0        	j	0x802092d4 <.LBB123_329+0xe8>
802092d4: 71 75        	lui	a0, 1048572
802092d6: 1b 05 05 22  	addiw	a0, a0, 544
802092da: 22 95        	add	a0, a0, s0
802092dc: 0c 61        	ld	a1, 0(a0)
802092de: 79 75        	lui	a0, 1048574
802092e0: 1b 05 05 f3  	addiw	a0, a0, -208
802092e4: 22 95        	add	a0, a0, s0
802092e6: 97 70 ff ff  	auipc	ra, 1048567
802092ea: e7 80 80 30  	jalr	776(ra)
;                                 if (string_eq(property_name, "bootargs")) {
802092ee: 6f 20 90 0d  	j	0x8020bbc6 <.LBB123_385+0x12>
;                                     const value = self.parse_property_name(property_value_descriptor);
802092f2: 71 75        	lui	a0, 1048572
802092f4: 1b 05 05 32  	addiw	a0, a0, 800
802092f8: 22 95        	add	a0, a0, s0
802092fa: 0c 61        	ld	a1, 0(a0)
802092fc: 71 75        	lui	a0, 1048572
802092fe: 1b 05 05 4f  	addiw	a0, a0, 1264
80209302: 22 95        	add	a0, a0, s0
80209304: 71 76        	lui	a2, 1048572
80209306: 1b 06 06 5e  	addiw	a2, a2, 1504
8020930a: 22 96        	add	a2, a2, s0
8020930c: 97 f0 ff ff  	auipc	ra, 1048575
80209310: e7 80 80 c8  	jalr	-888(ra)
;                                     print("{s}", .{value});
80209314: 71 75        	lui	a0, 1048572
80209316: 1b 05 05 4f  	addiw	a0, a0, 1264
8020931a: 22 95        	add	a0, a0, s0
8020931c: 0c 61        	ld	a1, 0(a0)
8020931e: 71 75        	lui	a0, 1048572
80209320: 1b 05 05 4e  	addiw	a0, a0, 1248
80209324: 22 95        	add	a0, a0, s0
80209326: 0c e1        	sd	a1, 0(a0)
80209328: 71 75        	lui	a0, 1048572
8020932a: 1b 05 85 4f  	addiw	a0, a0, 1272
8020932e: 22 95        	add	a0, a0, s0
80209330: 08 61        	ld	a0, 0(a0)
80209332: 71 76        	lui	a2, 1048572
80209334: 1b 06 86 4e  	addiw	a2, a2, 1256
80209338: 22 96        	add	a2, a2, s0
8020933a: 08 e2        	sd	a0, 0(a2)
8020933c: 01 46        	mv	a2, zero
8020933e: f1 76        	lui	a3, 1048572
80209340: 9b 86 86 20  	addiw	a3, a3, 520
80209344: a2 96        	add	a3, a3, s0
80209346: 90 e2        	sd	a2, 0(a3)
80209348: f9 76        	lui	a3, 1048574
8020934a: 9b 86 06 06  	addiw	a3, a3, 96
8020934e: a2 96        	add	a3, a3, s0
80209350: 90 e2        	sd	a2, 0(a3)
80209352: 79 76        	lui	a2, 1048574
80209354: 1b 06 86 07  	addiw	a2, a2, 120
80209358: 22 96        	add	a2, a2, s0
8020935a: f9 76        	lui	a3, 1048574
8020935c: 9b 86 86 06  	addiw	a3, a3, 104
80209360: a2 96        	add	a3, a3, s0
80209362: 90 e2        	sd	a2, 0(a3)
80209364: 13 06 00 02  	addi	a2, zero, 32
80209368: f9 76        	lui	a3, 1048574
8020936a: 9b 86 06 07  	addiw	a3, a3, 112
8020936e: a2 96        	add	a3, a3, s0
80209370: 90 e2        	sd	a2, 0(a3)
;     writer.print(format, args) catch unreachable;
80209372: 79 76        	lui	a2, 1048574
80209374: 1b 06 06 05  	addiw	a2, a2, 80
80209378: 22 96        	add	a2, a2, s0
8020937a: 0c e2        	sd	a1, 0(a2)
8020937c: f9 75        	lui	a1, 1048574
8020937e: 9b 85 85 05  	addiw	a1, a1, 88
80209382: a2 95        	add	a1, a1, s0
80209384: 88 e1        	sd	a0, 0(a1)
80209386: 79 75        	lui	a0, 1048574
80209388: 1b 05 05 06  	addiw	a0, a0, 96
8020938c: 22 95        	add	a0, a0, s0
8020938e: f1 75        	lui	a1, 1048572
80209390: 9b 85 05 4e  	addiw	a1, a1, 1248
80209394: a2 95        	add	a1, a1, s0
80209396: 97 d0 00 00  	auipc	ra, 13
8020939a: e7 80 60 4e  	jalr	1254(ra)
8020939e: f1 75        	lui	a1, 1048572
802093a0: 9b 85 85 20  	addiw	a1, a1, 520
802093a4: a2 95        	add	a1, a1, s0
802093a6: 8c 61        	ld	a1, 0(a1)
802093a8: 79 76        	lui	a2, 1048574
802093aa: 1b 06 e6 04  	addiw	a2, a2, 78
802093ae: 22 96        	add	a2, a2, s0
802093b0: 23 10 a6 00  	sh	a0, 0(a2)
802093b4: 41 66        	lui	a2, 16
802093b6: 7d 36        	addiw	a2, a2, -1
802093b8: 71 8d        	and	a0, a0, a2
802093ba: 71 76        	lui	a2, 1048572
802093bc: 1b 06 06 21  	addiw	a2, a2, 528
802093c0: 22 96        	add	a2, a2, s0
802093c2: 08 e2        	sd	a0, 0(a2)
802093c4: 63 00 b5 02  	beq	a0, a1, 0x802093e4 <.LBB123_329+0x1f8>
802093c8: 09 a0        	j	0x802093ca <.LBB123_329+0x1de>
802093ca: 71 75        	lui	a0, 1048572
802093cc: 1b 05 05 21  	addiw	a0, a0, 528
802093d0: 22 95        	add	a0, a0, s0
802093d2: 0c 61        	ld	a1, 0(a0)
802093d4: 79 75        	lui	a0, 1048574
802093d6: 1b 05 05 06  	addiw	a0, a0, 96
802093da: 22 95        	add	a0, a0, s0
802093dc: 97 70 ff ff  	auipc	ra, 1048567
802093e0: e7 80 20 21  	jalr	530(ra)
;                                 } else if (string_eq(property_name, "stdout-path")) {
802093e4: 09 a0        	j	0x802093e6 <.LBB123_329+0x1fa>
;                                 if (string_eq(property_name, "bootargs")) {
802093e6: 6f 20 00 7e  	j	0x8020bbc6 <.LBB123_385+0x12>
;     return std.mem.startsWith(u8, str, slice);
802093ea: 71 75        	lui	a0, 1048572
802093ec: 1b 05 05 62  	addiw	a0, a0, 1568
802093f0: 22 95        	add	a0, a0, s0
802093f2: 08 61        	ld	a0, 0(a0)
802093f4: f9 75        	lui	a1, 1048574
802093f6: 9b 85 85 91  	addiw	a1, a1, -1768
802093fa: a2 95        	add	a1, a1, s0
802093fc: 88 e1        	sd	a0, 0(a1)
802093fe: 71 75        	lui	a0, 1048572
80209400: 1b 05 85 61  	addiw	a0, a0, 1560
80209404: 22 95        	add	a0, a0, s0
80209406: 08 61        	ld	a0, 0(a0)
80209408: f9 75        	lui	a1, 1048574
8020940a: 9b 85 05 91  	addiw	a1, a1, -1776
8020940e: a2 95        	add	a1, a1, s0
80209410: 88 e1        	sd	a0, 0(a1)

0000000080209412 <.LBB123_330>:
80209412: 97 55 01 00  	auipc	a1, 21
80209416: 93 85 e5 ae  	addi	a1, a1, -1298
;     return std.mem.startsWith(u8, str, slice);
8020941a: 88 61        	ld	a0, 0(a1)
8020941c: 79 76        	lui	a2, 1048574
8020941e: 1b 06 06 90  	addiw	a2, a2, -1792
80209422: 22 96        	add	a2, a2, s0
80209424: 08 e2        	sd	a0, 0(a2)
80209426: 88 65        	ld	a0, 8(a1)
80209428: 79 76        	lui	a2, 1048574
8020942a: 1b 06 86 90  	addiw	a2, a2, -1784
8020942e: 22 96        	add	a2, a2, s0
80209430: 08 e2        	sd	a0, 0(a2)
80209432: 71 75        	lui	a0, 1048572
80209434: 1b 05 85 61  	addiw	a0, a0, 1560
80209438: 22 95        	add	a0, a0, s0
8020943a: 97 d0 00 00  	auipc	ra, 13
8020943e: e7 80 40 2f  	jalr	756(ra)
80209442: 05 89        	andi	a0, a0, 1
80209444: f9 75        	lui	a1, 1048574
80209446: 9b 85 75 92  	addiw	a1, a1, -1753
8020944a: a2 95        	add	a1, a1, s0
8020944c: 23 80 a5 00  	sb	a0, 0(a1)
80209450: 81 45        	mv	a1, zero
;                             } else if (starts_with(node_name, "memory")) {
80209452: 63 0d b5 16  	beq	a0, a1, 0x802095cc <.LBB123_332+0x106>
80209456: 09 a0        	j	0x80209458 <.LBB123_330+0x46>
;     return std.mem.eql(u8, a, b);
80209458: 71 75        	lui	a0, 1048572
8020945a: 1b 05 85 5d  	addiw	a0, a0, 1496
8020945e: 22 95        	add	a0, a0, s0
80209460: 08 61        	ld	a0, 0(a0)
80209462: f5 75        	lui	a1, 1048573
80209464: 9b 85 85 55  	addiw	a1, a1, 1368
80209468: a2 95        	add	a1, a1, s0
8020946a: 88 e1        	sd	a0, 0(a1)
8020946c: 71 75        	lui	a0, 1048572
8020946e: 1b 05 05 5d  	addiw	a0, a0, 1488
80209472: 22 95        	add	a0, a0, s0
80209474: 08 61        	ld	a0, 0(a0)
80209476: f5 75        	lui	a1, 1048573
80209478: 9b 85 05 55  	addiw	a1, a1, 1360
8020947c: a2 95        	add	a1, a1, s0
8020947e: 88 e1        	sd	a0, 0(a1)

0000000080209480 <.LBB123_331>:
80209480: 97 55 01 00  	auipc	a1, 21
80209484: 93 85 05 a9  	addi	a1, a1, -1392
;     return std.mem.eql(u8, a, b);
80209488: 88 61        	ld	a0, 0(a1)
8020948a: 75 76        	lui	a2, 1048573
8020948c: 1b 06 06 54  	addiw	a2, a2, 1344
80209490: 22 96        	add	a2, a2, s0
80209492: 08 e2        	sd	a0, 0(a2)
80209494: 88 65        	ld	a0, 8(a1)
80209496: 75 76        	lui	a2, 1048573
80209498: 1b 06 86 54  	addiw	a2, a2, 1352
8020949c: 22 96        	add	a2, a2, s0
8020949e: 08 e2        	sd	a0, 0(a2)
802094a0: 71 75        	lui	a0, 1048572
802094a2: 1b 05 05 5d  	addiw	a0, a0, 1488
802094a6: 22 95        	add	a0, a0, s0
802094a8: 97 b0 00 00  	auipc	ra, 11
802094ac: e7 80 c0 e7  	jalr	-388(ra)
802094b0: 05 89        	andi	a0, a0, 1
802094b2: f5 75        	lui	a1, 1048573
802094b4: 9b 85 75 56  	addiw	a1, a1, 1383
802094b8: a2 95        	add	a1, a1, s0
802094ba: 23 80 a5 00  	sb	a0, 0(a1)
802094be: 81 45        	mv	a1, zero
;                                 if (string_eq(property_name, "device_type")) {
802094c0: 63 1b b5 00  	bne	a0, a1, 0x802094d6 <.LBB123_332+0x10>
802094c4: 09 a0        	j	0x802094c6 <.LBB123_332>

00000000802094c6 <.LBB123_332>:
;                                     TODO(@src());
802094c6: 17 55 01 00  	auipc	a0, 21
802094ca: 13 05 a5 a5  	addi	a0, a0, -1446
802094ce: 97 70 ff ff  	auipc	ra, 1048567
802094d2: e7 80 40 d0  	jalr	-764(ra)
;                                     const value = self.parse_property_name(property_value_descriptor);
802094d6: 71 75        	lui	a0, 1048572
802094d8: 1b 05 05 32  	addiw	a0, a0, 800
802094dc: 22 95        	add	a0, a0, s0
802094de: 0c 61        	ld	a1, 0(a0)
802094e0: 71 75        	lui	a0, 1048572
802094e2: 1b 05 05 4c  	addiw	a0, a0, 1216
802094e6: 22 95        	add	a0, a0, s0
802094e8: 71 76        	lui	a2, 1048572
802094ea: 1b 06 06 5e  	addiw	a2, a2, 1504
802094ee: 22 96        	add	a2, a2, s0
802094f0: 97 f0 ff ff  	auipc	ra, 1048575
802094f4: e7 80 40 aa  	jalr	-1372(ra)
;                                     print("{s}", .{value});
802094f8: 71 75        	lui	a0, 1048572
802094fa: 1b 05 05 4c  	addiw	a0, a0, 1216
802094fe: 22 95        	add	a0, a0, s0
80209500: 0c 61        	ld	a1, 0(a0)
80209502: 71 75        	lui	a0, 1048572
80209504: 1b 05 05 4b  	addiw	a0, a0, 1200
80209508: 22 95        	add	a0, a0, s0
8020950a: 0c e1        	sd	a1, 0(a0)
8020950c: 71 75        	lui	a0, 1048572
8020950e: 1b 05 85 4c  	addiw	a0, a0, 1224
80209512: 22 95        	add	a0, a0, s0
80209514: 08 61        	ld	a0, 0(a0)
80209516: 71 76        	lui	a2, 1048572
80209518: 1b 06 86 4b  	addiw	a2, a2, 1208
8020951c: 22 96        	add	a2, a2, s0
8020951e: 08 e2        	sd	a0, 0(a2)
80209520: 01 46        	mv	a2, zero
80209522: f1 76        	lui	a3, 1048572
80209524: 9b 86 86 1f  	addiw	a3, a3, 504
80209528: a2 96        	add	a3, a3, s0
8020952a: 90 e2        	sd	a2, 0(a3)
8020952c: f9 76        	lui	a3, 1048574
8020952e: 9b 86 06 19  	addiw	a3, a3, 400
80209532: a2 96        	add	a3, a3, s0
80209534: 90 e2        	sd	a2, 0(a3)
80209536: 79 76        	lui	a2, 1048574
80209538: 1b 06 86 1a  	addiw	a2, a2, 424
8020953c: 22 96        	add	a2, a2, s0
8020953e: f9 76        	lui	a3, 1048574
80209540: 9b 86 86 19  	addiw	a3, a3, 408
80209544: a2 96        	add	a3, a3, s0
80209546: 90 e2        	sd	a2, 0(a3)
80209548: 13 06 00 02  	addi	a2, zero, 32
8020954c: f9 76        	lui	a3, 1048574
8020954e: 9b 86 06 1a  	addiw	a3, a3, 416
80209552: a2 96        	add	a3, a3, s0
80209554: 90 e2        	sd	a2, 0(a3)
;     writer.print(format, args) catch unreachable;
80209556: 79 76        	lui	a2, 1048574
80209558: 1b 06 06 18  	addiw	a2, a2, 384
8020955c: 22 96        	add	a2, a2, s0
8020955e: 0c e2        	sd	a1, 0(a2)
80209560: f9 75        	lui	a1, 1048574
80209562: 9b 85 85 18  	addiw	a1, a1, 392
80209566: a2 95        	add	a1, a1, s0
80209568: 88 e1        	sd	a0, 0(a1)
8020956a: 79 75        	lui	a0, 1048574
8020956c: 1b 05 05 19  	addiw	a0, a0, 400
80209570: 22 95        	add	a0, a0, s0
80209572: f1 75        	lui	a1, 1048572
80209574: 9b 85 05 4b  	addiw	a1, a1, 1200
80209578: a2 95        	add	a1, a1, s0
8020957a: 97 d0 00 00  	auipc	ra, 13
8020957e: e7 80 20 3a  	jalr	930(ra)
80209582: f1 75        	lui	a1, 1048572
80209584: 9b 85 85 1f  	addiw	a1, a1, 504
80209588: a2 95        	add	a1, a1, s0
8020958a: 8c 61        	ld	a1, 0(a1)
8020958c: 79 76        	lui	a2, 1048574
8020958e: 1b 06 e6 17  	addiw	a2, a2, 382
80209592: 22 96        	add	a2, a2, s0
80209594: 23 10 a6 00  	sh	a0, 0(a2)
80209598: 41 66        	lui	a2, 16
8020959a: 7d 36        	addiw	a2, a2, -1
8020959c: 71 8d        	and	a0, a0, a2
8020959e: 71 76        	lui	a2, 1048572
802095a0: 1b 06 06 20  	addiw	a2, a2, 512
802095a4: 22 96        	add	a2, a2, s0
802095a6: 08 e2        	sd	a0, 0(a2)
802095a8: 63 00 b5 02  	beq	a0, a1, 0x802095c8 <.LBB123_332+0x102>
802095ac: 09 a0        	j	0x802095ae <.LBB123_332+0xe8>
802095ae: 71 75        	lui	a0, 1048572
802095b0: 1b 05 05 20  	addiw	a0, a0, 512
802095b4: 22 95        	add	a0, a0, s0
802095b6: 0c 61        	ld	a1, 0(a0)
802095b8: 79 75        	lui	a0, 1048574
802095ba: 1b 05 05 19  	addiw	a0, a0, 400
802095be: 22 95        	add	a0, a0, s0
802095c0: 97 70 ff ff  	auipc	ra, 1048567
802095c4: e7 80 e0 02  	jalr	46(ra)
;                                 if (string_eq(property_name, "device_type")) {
802095c8: 6f 20 00 60  	j	0x8020bbc8 <.LBB123_385+0x14>
;     return std.mem.eql(u8, a, b);
802095cc: 71 75        	lui	a0, 1048572
802095ce: 1b 05 05 62  	addiw	a0, a0, 1568
802095d2: 22 95        	add	a0, a0, s0
802095d4: 08 61        	ld	a0, 0(a0)
802095d6: f5 75        	lui	a1, 1048573
802095d8: 9b 85 05 53  	addiw	a1, a1, 1328
802095dc: a2 95        	add	a1, a1, s0
802095de: 88 e1        	sd	a0, 0(a1)
802095e0: 71 75        	lui	a0, 1048572
802095e2: 1b 05 85 61  	addiw	a0, a0, 1560
802095e6: 22 95        	add	a0, a0, s0
802095e8: 08 61        	ld	a0, 0(a0)
802095ea: f5 75        	lui	a1, 1048573
802095ec: 9b 85 85 52  	addiw	a1, a1, 1320
802095f0: a2 95        	add	a1, a1, s0
802095f2: 88 e1        	sd	a0, 0(a1)

00000000802095f4 <.LBB123_333>:
802095f4: 97 55 01 00  	auipc	a1, 21
802095f8: 93 85 45 95  	addi	a1, a1, -1708
;     return std.mem.eql(u8, a, b);
802095fc: 88 61        	ld	a0, 0(a1)
802095fe: 75 76        	lui	a2, 1048573
80209600: 1b 06 86 51  	addiw	a2, a2, 1304
80209604: 22 96        	add	a2, a2, s0
80209606: 08 e2        	sd	a0, 0(a2)
80209608: 88 65        	ld	a0, 8(a1)
8020960a: 75 76        	lui	a2, 1048573
8020960c: 1b 06 06 52  	addiw	a2, a2, 1312
80209610: 22 96        	add	a2, a2, s0
80209612: 08 e2        	sd	a0, 0(a2)
80209614: 71 75        	lui	a0, 1048572
80209616: 1b 05 85 61  	addiw	a0, a0, 1560
8020961a: 22 95        	add	a0, a0, s0
8020961c: 97 b0 00 00  	auipc	ra, 11
80209620: e7 80 80 d0  	jalr	-760(ra)
80209624: 05 89        	andi	a0, a0, 1
80209626: f5 75        	lui	a1, 1048573
80209628: 9b 85 f5 53  	addiw	a1, a1, 1343
8020962c: a2 95        	add	a1, a1, s0
8020962e: 23 80 a5 00  	sb	a0, 0(a1)
80209632: 81 45        	mv	a1, zero
;                             } else if (string_eq(node_name, "cpus")) {
80209634: 63 01 b5 0a  	beq	a0, a1, 0x802096d6 <.LBB123_335+0x2e>
80209638: 09 a0        	j	0x8020963a <.LBB123_333+0x46>
;     return std.mem.eql(u8, a, b);
8020963a: 71 75        	lui	a0, 1048572
8020963c: 1b 05 85 5d  	addiw	a0, a0, 1496
80209640: 22 95        	add	a0, a0, s0
80209642: 08 61        	ld	a0, 0(a0)
80209644: f5 75        	lui	a1, 1048573
80209646: 9b 85 85 50  	addiw	a1, a1, 1288
8020964a: a2 95        	add	a1, a1, s0
8020964c: 88 e1        	sd	a0, 0(a1)
8020964e: 71 75        	lui	a0, 1048572
80209650: 1b 05 05 5d  	addiw	a0, a0, 1488
80209654: 22 95        	add	a0, a0, s0
80209656: 08 61        	ld	a0, 0(a0)
80209658: f5 75        	lui	a1, 1048573
8020965a: 9b 85 05 50  	addiw	a1, a1, 1280
8020965e: a2 95        	add	a1, a1, s0
80209660: 88 e1        	sd	a0, 0(a1)

0000000080209662 <.LBB123_334>:
80209662: 97 55 01 00  	auipc	a1, 21
80209666: 93 85 65 8f  	addi	a1, a1, -1802
;     return std.mem.eql(u8, a, b);
8020966a: 88 61        	ld	a0, 0(a1)
8020966c: 75 76        	lui	a2, 1048573
8020966e: 1b 06 06 4f  	addiw	a2, a2, 1264
80209672: 22 96        	add	a2, a2, s0
80209674: 08 e2        	sd	a0, 0(a2)
80209676: 88 65        	ld	a0, 8(a1)
80209678: 75 76        	lui	a2, 1048573
8020967a: 1b 06 86 4f  	addiw	a2, a2, 1272
8020967e: 22 96        	add	a2, a2, s0
80209680: 08 e2        	sd	a0, 0(a2)
80209682: 71 75        	lui	a0, 1048572
80209684: 1b 05 05 5d  	addiw	a0, a0, 1488
80209688: 22 95        	add	a0, a0, s0
8020968a: 97 b0 00 00  	auipc	ra, 11
8020968e: e7 80 a0 c9  	jalr	-870(ra)
80209692: 05 89        	andi	a0, a0, 1
80209694: f5 75        	lui	a1, 1048573
80209696: 9b 85 75 51  	addiw	a1, a1, 1303
8020969a: a2 95        	add	a1, a1, s0
8020969c: 23 80 a5 00  	sb	a0, 0(a1)
802096a0: 81 45        	mv	a1, zero
;                                 if (string_eq(property_name, "timebase-frequency")) {
802096a2: 63 1b b5 00  	bne	a0, a1, 0x802096b8 <.LBB123_335+0x10>
802096a6: 09 a0        	j	0x802096a8 <.LBB123_335>

00000000802096a8 <.LBB123_335>:
;                                     TODO(@src());
802096a8: 17 55 01 00  	auipc	a0, 21
802096ac: 13 05 05 8c  	addi	a0, a0, -1856
802096b0: 97 70 ff ff  	auipc	ra, 1048567
802096b4: e7 80 20 b2  	jalr	-1246(ra)
;                                     self.parse_and_print_freq(property_value_descriptor);
802096b8: 71 75        	lui	a0, 1048572
802096ba: 1b 05 05 32  	addiw	a0, a0, 800
802096be: 22 95        	add	a0, a0, s0
802096c0: 08 61        	ld	a0, 0(a0)
802096c2: f1 75        	lui	a1, 1048572
802096c4: 9b 85 05 5e  	addiw	a1, a1, 1504
802096c8: a2 95        	add	a1, a1, s0
802096ca: 97 b0 00 00  	auipc	ra, 11
802096ce: e7 80 e0 2e  	jalr	750(ra)
;                                 if (string_eq(property_name, "timebase-frequency")) {
802096d2: 6f 20 80 4f  	j	0x8020bbca <.LBB123_385+0x16>
;     return std.mem.startsWith(u8, str, slice);
802096d6: 71 75        	lui	a0, 1048572
802096d8: 1b 05 05 62  	addiw	a0, a0, 1568
802096dc: 22 95        	add	a0, a0, s0
802096de: 08 61        	ld	a0, 0(a0)
802096e0: f9 75        	lui	a1, 1048574
802096e2: 9b 85 05 8f  	addiw	a1, a1, -1808
802096e6: a2 95        	add	a1, a1, s0
802096e8: 88 e1        	sd	a0, 0(a1)
802096ea: 71 75        	lui	a0, 1048572
802096ec: 1b 05 85 61  	addiw	a0, a0, 1560
802096f0: 22 95        	add	a0, a0, s0
802096f2: 08 61        	ld	a0, 0(a0)
802096f4: f9 75        	lui	a1, 1048574
802096f6: 9b 85 85 8e  	addiw	a1, a1, -1816
802096fa: a2 95        	add	a1, a1, s0
802096fc: 88 e1        	sd	a0, 0(a1)

00000000802096fe <.LBB123_336>:
802096fe: 97 55 01 00  	auipc	a1, 21
80209702: 93 85 25 89  	addi	a1, a1, -1902
;     return std.mem.startsWith(u8, str, slice);
80209706: 88 61        	ld	a0, 0(a1)
80209708: 79 76        	lui	a2, 1048574
8020970a: 1b 06 86 8d  	addiw	a2, a2, -1832
8020970e: 22 96        	add	a2, a2, s0
80209710: 08 e2        	sd	a0, 0(a2)
80209712: 88 65        	ld	a0, 8(a1)
80209714: 79 76        	lui	a2, 1048574
80209716: 1b 06 06 8e  	addiw	a2, a2, -1824
8020971a: 22 96        	add	a2, a2, s0
8020971c: 08 e2        	sd	a0, 0(a2)
8020971e: 71 75        	lui	a0, 1048572
80209720: 1b 05 85 61  	addiw	a0, a0, 1560
80209724: 22 95        	add	a0, a0, s0
80209726: 97 d0 00 00  	auipc	ra, 13
8020972a: e7 80 80 00  	jalr	8(ra)
8020972e: 05 89        	andi	a0, a0, 1
80209730: f9 75        	lui	a1, 1048574
80209732: 9b 85 f5 8f  	addiw	a1, a1, -1793
80209736: a2 95        	add	a1, a1, s0
80209738: 23 80 a5 00  	sb	a0, 0(a1)
8020973c: 81 45        	mv	a1, zero
;                             } else if (starts_with(node_name, "cpu@")) {
8020973e: 63 02 b5 44  	beq	a0, a1, 0x80209b82 <.LBB123_340+0x2f4>
80209742: 09 a0        	j	0x80209744 <.LBB123_336+0x46>
;     return std.mem.eql(u8, a, b);
80209744: 71 75        	lui	a0, 1048572
80209746: 1b 05 85 5d  	addiw	a0, a0, 1496
8020974a: 22 95        	add	a0, a0, s0
8020974c: 08 61        	ld	a0, 0(a0)
8020974e: f5 75        	lui	a1, 1048573
80209750: 9b 85 05 4e  	addiw	a1, a1, 1248
80209754: a2 95        	add	a1, a1, s0
80209756: 88 e1        	sd	a0, 0(a1)
80209758: 71 75        	lui	a0, 1048572
8020975a: 1b 05 05 5d  	addiw	a0, a0, 1488
8020975e: 22 95        	add	a0, a0, s0
80209760: 08 61        	ld	a0, 0(a0)
80209762: f5 75        	lui	a1, 1048573
80209764: 9b 85 85 4d  	addiw	a1, a1, 1240
80209768: a2 95        	add	a1, a1, s0
8020976a: 88 e1        	sd	a0, 0(a1)

000000008020976c <.LBB123_337>:
8020976c: 97 55 01 00  	auipc	a1, 21
80209770: 93 85 45 83  	addi	a1, a1, -1996
;     return std.mem.eql(u8, a, b);
80209774: 88 61        	ld	a0, 0(a1)
80209776: 75 76        	lui	a2, 1048573
80209778: 1b 06 86 4c  	addiw	a2, a2, 1224
8020977c: 22 96        	add	a2, a2, s0
8020977e: 08 e2        	sd	a0, 0(a2)
80209780: 88 65        	ld	a0, 8(a1)
80209782: 75 76        	lui	a2, 1048573
80209784: 1b 06 06 4d  	addiw	a2, a2, 1232
80209788: 22 96        	add	a2, a2, s0
8020978a: 08 e2        	sd	a0, 0(a2)
8020978c: 71 75        	lui	a0, 1048572
8020978e: 1b 05 05 5d  	addiw	a0, a0, 1488
80209792: 22 95        	add	a0, a0, s0
80209794: 97 b0 00 00  	auipc	ra, 11
80209798: e7 80 00 b9  	jalr	-1136(ra)
8020979c: 05 89        	andi	a0, a0, 1
8020979e: f5 75        	lui	a1, 1048573
802097a0: 9b 85 f5 4e  	addiw	a1, a1, 1263
802097a4: a2 95        	add	a1, a1, s0
802097a6: 23 80 a5 00  	sb	a0, 0(a1)
802097aa: 81 45        	mv	a1, zero
;                                 if (string_eq(property_name, "device_type")) {
802097ac: 63 19 b5 0e  	bne	a0, a1, 0x8020989e <.LBB123_340+0x10>
802097b0: 09 a0        	j	0x802097b2 <.LBB123_337+0x46>
;     return std.mem.eql(u8, a, b);
802097b2: 71 75        	lui	a0, 1048572
802097b4: 1b 05 85 5d  	addiw	a0, a0, 1496
802097b8: 22 95        	add	a0, a0, s0
802097ba: 08 61        	ld	a0, 0(a0)
802097bc: f5 75        	lui	a1, 1048573
802097be: 9b 85 85 4b  	addiw	a1, a1, 1208
802097c2: a2 95        	add	a1, a1, s0
802097c4: 88 e1        	sd	a0, 0(a1)
802097c6: 71 75        	lui	a0, 1048572
802097c8: 1b 05 05 5d  	addiw	a0, a0, 1488
802097cc: 22 95        	add	a0, a0, s0
802097ce: 08 61        	ld	a0, 0(a0)
802097d0: f5 75        	lui	a1, 1048573
802097d2: 9b 85 05 4b  	addiw	a1, a1, 1200
802097d6: a2 95        	add	a1, a1, s0
802097d8: 88 e1        	sd	a0, 0(a1)

00000000802097da <.LBB123_338>:
802097da: 97 45 01 00  	auipc	a1, 20
802097de: 93 85 65 7d  	addi	a1, a1, 2006
;     return std.mem.eql(u8, a, b);
802097e2: 88 61        	ld	a0, 0(a1)
802097e4: 75 76        	lui	a2, 1048573
802097e6: 1b 06 06 4a  	addiw	a2, a2, 1184
802097ea: 22 96        	add	a2, a2, s0
802097ec: 08 e2        	sd	a0, 0(a2)
802097ee: 88 65        	ld	a0, 8(a1)
802097f0: 75 76        	lui	a2, 1048573
802097f2: 1b 06 86 4a  	addiw	a2, a2, 1192
802097f6: 22 96        	add	a2, a2, s0
802097f8: 08 e2        	sd	a0, 0(a2)
802097fa: 71 75        	lui	a0, 1048572
802097fc: 1b 05 05 5d  	addiw	a0, a0, 1488
80209800: 22 95        	add	a0, a0, s0
80209802: 97 b0 00 00  	auipc	ra, 11
80209806: e7 80 20 b2  	jalr	-1246(ra)
8020980a: 05 89        	andi	a0, a0, 1
8020980c: f5 75        	lui	a1, 1048573
8020980e: 9b 85 75 4c  	addiw	a1, a1, 1223
80209812: a2 95        	add	a1, a1, s0
80209814: 23 80 a5 00  	sb	a0, 0(a1)
80209818: 81 45        	mv	a1, zero
;                                 } else if (string_eq(property_name, "riscv,isa")) {
8020981a: 63 1d b5 16  	bne	a0, a1, 0x80209994 <.LBB123_340+0x106>
8020981e: 09 a0        	j	0x80209820 <.LBB123_338+0x46>
;     return std.mem.eql(u8, a, b);
80209820: 71 75        	lui	a0, 1048572
80209822: 1b 05 85 5d  	addiw	a0, a0, 1496
80209826: 22 95        	add	a0, a0, s0
80209828: 08 61        	ld	a0, 0(a0)
8020982a: f5 75        	lui	a1, 1048573
8020982c: 9b 85 05 49  	addiw	a1, a1, 1168
80209830: a2 95        	add	a1, a1, s0
80209832: 88 e1        	sd	a0, 0(a1)
80209834: 71 75        	lui	a0, 1048572
80209836: 1b 05 05 5d  	addiw	a0, a0, 1488
8020983a: 22 95        	add	a0, a0, s0
8020983c: 08 61        	ld	a0, 0(a0)
8020983e: f5 75        	lui	a1, 1048573
80209840: 9b 85 85 48  	addiw	a1, a1, 1160
80209844: a2 95        	add	a1, a1, s0
80209846: 88 e1        	sd	a0, 0(a1)

0000000080209848 <.LBB123_339>:
80209848: 97 45 01 00  	auipc	a1, 20
8020984c: 93 85 85 77  	addi	a1, a1, 1912
;     return std.mem.eql(u8, a, b);
80209850: 88 61        	ld	a0, 0(a1)
80209852: 75 76        	lui	a2, 1048573
80209854: 1b 06 86 47  	addiw	a2, a2, 1144
80209858: 22 96        	add	a2, a2, s0
8020985a: 08 e2        	sd	a0, 0(a2)
8020985c: 88 65        	ld	a0, 8(a1)
8020985e: 75 76        	lui	a2, 1048573
80209860: 1b 06 06 48  	addiw	a2, a2, 1152
80209864: 22 96        	add	a2, a2, s0
80209866: 08 e2        	sd	a0, 0(a2)
80209868: 71 75        	lui	a0, 1048572
8020986a: 1b 05 05 5d  	addiw	a0, a0, 1488
8020986e: 22 95        	add	a0, a0, s0
80209870: 97 b0 00 00  	auipc	ra, 11
80209874: e7 80 40 ab  	jalr	-1356(ra)
80209878: 05 89        	andi	a0, a0, 1
8020987a: f5 75        	lui	a1, 1048573
8020987c: 9b 85 f5 49  	addiw	a1, a1, 1183
80209880: a2 95        	add	a1, a1, s0
80209882: 23 80 a5 00  	sb	a0, 0(a1)
80209886: 81 45        	mv	a1, zero
;                                 } else if (string_eq(property_name, "mmu-type")) {
80209888: 63 10 b5 20  	bne	a0, a1, 0x80209a88 <.LBB123_340+0x1fa>
8020988c: 09 a0        	j	0x8020988e <.LBB123_340>

000000008020988e <.LBB123_340>:
;                                     TODO(@src());
8020988e: 17 45 01 00  	auipc	a0, 20
80209892: 13 05 25 74  	addi	a0, a0, 1858
80209896: 97 70 ff ff  	auipc	ra, 1048567
8020989a: e7 80 c0 93  	jalr	-1732(ra)
;                                     const value = self.parse_property_name(property_value_descriptor);
8020989e: 71 75        	lui	a0, 1048572
802098a0: 1b 05 05 32  	addiw	a0, a0, 800
802098a4: 22 95        	add	a0, a0, s0
802098a6: 0c 61        	ld	a1, 0(a0)
802098a8: 71 75        	lui	a0, 1048572
802098aa: 1b 05 05 4a  	addiw	a0, a0, 1184
802098ae: 22 95        	add	a0, a0, s0
802098b0: 71 76        	lui	a2, 1048572
802098b2: 1b 06 06 5e  	addiw	a2, a2, 1504
802098b6: 22 96        	add	a2, a2, s0
802098b8: 97 e0 ff ff  	auipc	ra, 1048574
802098bc: e7 80 c0 6d  	jalr	1756(ra)
;                                     print("{s}", .{value});
802098c0: 71 75        	lui	a0, 1048572
802098c2: 1b 05 05 4a  	addiw	a0, a0, 1184
802098c6: 22 95        	add	a0, a0, s0
802098c8: 0c 61        	ld	a1, 0(a0)
802098ca: 71 75        	lui	a0, 1048572
802098cc: 1b 05 05 49  	addiw	a0, a0, 1168
802098d0: 22 95        	add	a0, a0, s0
802098d2: 0c e1        	sd	a1, 0(a0)
802098d4: 71 75        	lui	a0, 1048572
802098d6: 1b 05 85 4a  	addiw	a0, a0, 1192
802098da: 22 95        	add	a0, a0, s0
802098dc: 08 61        	ld	a0, 0(a0)
802098de: 71 76        	lui	a2, 1048572
802098e0: 1b 06 86 49  	addiw	a2, a2, 1176
802098e4: 22 96        	add	a2, a2, s0
802098e6: 08 e2        	sd	a0, 0(a2)
802098e8: 01 46        	mv	a2, zero
802098ea: f1 76        	lui	a3, 1048572
802098ec: 9b 86 86 1e  	addiw	a3, a3, 488
802098f0: a2 96        	add	a3, a3, s0
802098f2: 90 e2        	sd	a2, 0(a3)
802098f4: f9 76        	lui	a3, 1048574
802098f6: 9b 86 06 2c  	addiw	a3, a3, 704
802098fa: a2 96        	add	a3, a3, s0
802098fc: 90 e2        	sd	a2, 0(a3)
802098fe: 79 76        	lui	a2, 1048574
80209900: 1b 06 86 2d  	addiw	a2, a2, 728
80209904: 22 96        	add	a2, a2, s0
80209906: f9 76        	lui	a3, 1048574
80209908: 9b 86 86 2c  	addiw	a3, a3, 712
8020990c: a2 96        	add	a3, a3, s0
8020990e: 90 e2        	sd	a2, 0(a3)
80209910: 13 06 00 02  	addi	a2, zero, 32
80209914: f9 76        	lui	a3, 1048574
80209916: 9b 86 06 2d  	addiw	a3, a3, 720
8020991a: a2 96        	add	a3, a3, s0
8020991c: 90 e2        	sd	a2, 0(a3)
;     writer.print(format, args) catch unreachable;
8020991e: 79 76        	lui	a2, 1048574
80209920: 1b 06 06 2b  	addiw	a2, a2, 688
80209924: 22 96        	add	a2, a2, s0
80209926: 0c e2        	sd	a1, 0(a2)
80209928: f9 75        	lui	a1, 1048574
8020992a: 9b 85 85 2b  	addiw	a1, a1, 696
8020992e: a2 95        	add	a1, a1, s0
80209930: 88 e1        	sd	a0, 0(a1)
80209932: 79 75        	lui	a0, 1048574
80209934: 1b 05 05 2c  	addiw	a0, a0, 704
80209938: 22 95        	add	a0, a0, s0
8020993a: f1 75        	lui	a1, 1048572
8020993c: 9b 85 05 49  	addiw	a1, a1, 1168
80209940: a2 95        	add	a1, a1, s0
80209942: 97 d0 00 00  	auipc	ra, 13
80209946: e7 80 a0 02  	jalr	42(ra)
8020994a: f1 75        	lui	a1, 1048572
8020994c: 9b 85 85 1e  	addiw	a1, a1, 488
80209950: a2 95        	add	a1, a1, s0
80209952: 8c 61        	ld	a1, 0(a1)
80209954: 79 76        	lui	a2, 1048574
80209956: 1b 06 e6 2a  	addiw	a2, a2, 686
8020995a: 22 96        	add	a2, a2, s0
8020995c: 23 10 a6 00  	sh	a0, 0(a2)
80209960: 41 66        	lui	a2, 16
80209962: 7d 36        	addiw	a2, a2, -1
80209964: 71 8d        	and	a0, a0, a2
80209966: 71 76        	lui	a2, 1048572
80209968: 1b 06 06 1f  	addiw	a2, a2, 496
8020996c: 22 96        	add	a2, a2, s0
8020996e: 08 e2        	sd	a0, 0(a2)
80209970: 63 00 b5 02  	beq	a0, a1, 0x80209990 <.LBB123_340+0x102>
80209974: 09 a0        	j	0x80209976 <.LBB123_340+0xe8>
80209976: 71 75        	lui	a0, 1048572
80209978: 1b 05 05 1f  	addiw	a0, a0, 496
8020997c: 22 95        	add	a0, a0, s0
8020997e: 0c 61        	ld	a1, 0(a0)
80209980: 79 75        	lui	a0, 1048574
80209982: 1b 05 05 2c  	addiw	a0, a0, 704
80209986: 22 95        	add	a0, a0, s0
80209988: 97 70 ff ff  	auipc	ra, 1048567
8020998c: e7 80 60 c6  	jalr	-922(ra)
;                                 if (string_eq(property_name, "device_type")) {
80209990: 6f 20 c0 23  	j	0x8020bbcc <.LBB123_385+0x18>
;                                     const value = self.parse_property_name(property_value_descriptor);
80209994: 71 75        	lui	a0, 1048572
80209996: 1b 05 05 32  	addiw	a0, a0, 800
8020999a: 22 95        	add	a0, a0, s0
8020999c: 0c 61        	ld	a1, 0(a0)
8020999e: 71 75        	lui	a0, 1048572
802099a0: 1b 05 05 48  	addiw	a0, a0, 1152
802099a4: 22 95        	add	a0, a0, s0
802099a6: 71 76        	lui	a2, 1048572
802099a8: 1b 06 06 5e  	addiw	a2, a2, 1504
802099ac: 22 96        	add	a2, a2, s0
802099ae: 97 e0 ff ff  	auipc	ra, 1048574
802099b2: e7 80 60 5e  	jalr	1510(ra)
;                                     print("{s}", .{value});
802099b6: 71 75        	lui	a0, 1048572
802099b8: 1b 05 05 48  	addiw	a0, a0, 1152
802099bc: 22 95        	add	a0, a0, s0
802099be: 0c 61        	ld	a1, 0(a0)
802099c0: 71 75        	lui	a0, 1048572
802099c2: 1b 05 05 47  	addiw	a0, a0, 1136
802099c6: 22 95        	add	a0, a0, s0
802099c8: 0c e1        	sd	a1, 0(a0)
802099ca: 71 75        	lui	a0, 1048572
802099cc: 1b 05 85 48  	addiw	a0, a0, 1160
802099d0: 22 95        	add	a0, a0, s0
802099d2: 08 61        	ld	a0, 0(a0)
802099d4: 71 76        	lui	a2, 1048572
802099d6: 1b 06 86 47  	addiw	a2, a2, 1144
802099da: 22 96        	add	a2, a2, s0
802099dc: 08 e2        	sd	a0, 0(a2)
802099de: 01 46        	mv	a2, zero
802099e0: f1 76        	lui	a3, 1048572
802099e2: 9b 86 86 1d  	addiw	a3, a3, 472
802099e6: a2 96        	add	a3, a3, s0
802099e8: 90 e2        	sd	a2, 0(a3)
802099ea: f9 76        	lui	a3, 1048574
802099ec: 9b 86 06 3f  	addiw	a3, a3, 1008
802099f0: a2 96        	add	a3, a3, s0
802099f2: 90 e2        	sd	a2, 0(a3)
802099f4: 79 76        	lui	a2, 1048574
802099f6: 1b 06 86 40  	addiw	a2, a2, 1032
802099fa: 22 96        	add	a2, a2, s0
802099fc: f9 76        	lui	a3, 1048574
802099fe: 9b 86 86 3f  	addiw	a3, a3, 1016
80209a02: a2 96        	add	a3, a3, s0
80209a04: 90 e2        	sd	a2, 0(a3)
80209a06: 13 06 00 02  	addi	a2, zero, 32
80209a0a: f9 76        	lui	a3, 1048574
80209a0c: 9b 86 06 40  	addiw	a3, a3, 1024
80209a10: a2 96        	add	a3, a3, s0
80209a12: 90 e2        	sd	a2, 0(a3)
;     writer.print(format, args) catch unreachable;
80209a14: 79 76        	lui	a2, 1048574
80209a16: 1b 06 06 3e  	addiw	a2, a2, 992
80209a1a: 22 96        	add	a2, a2, s0
80209a1c: 0c e2        	sd	a1, 0(a2)
80209a1e: f9 75        	lui	a1, 1048574
80209a20: 9b 85 85 3e  	addiw	a1, a1, 1000
80209a24: a2 95        	add	a1, a1, s0
80209a26: 88 e1        	sd	a0, 0(a1)
80209a28: 79 75        	lui	a0, 1048574
80209a2a: 1b 05 05 3f  	addiw	a0, a0, 1008
80209a2e: 22 95        	add	a0, a0, s0
80209a30: f1 75        	lui	a1, 1048572
80209a32: 9b 85 05 47  	addiw	a1, a1, 1136
80209a36: a2 95        	add	a1, a1, s0
80209a38: 97 d0 00 00  	auipc	ra, 13
80209a3c: e7 80 40 f8  	jalr	-124(ra)
80209a40: f1 75        	lui	a1, 1048572
80209a42: 9b 85 85 1d  	addiw	a1, a1, 472
80209a46: a2 95        	add	a1, a1, s0
80209a48: 8c 61        	ld	a1, 0(a1)
80209a4a: 79 76        	lui	a2, 1048574
80209a4c: 1b 06 e6 3d  	addiw	a2, a2, 990
80209a50: 22 96        	add	a2, a2, s0
80209a52: 23 10 a6 00  	sh	a0, 0(a2)
80209a56: 41 66        	lui	a2, 16
80209a58: 7d 36        	addiw	a2, a2, -1
80209a5a: 71 8d        	and	a0, a0, a2
80209a5c: 71 76        	lui	a2, 1048572
80209a5e: 1b 06 06 1e  	addiw	a2, a2, 480
80209a62: 22 96        	add	a2, a2, s0
80209a64: 08 e2        	sd	a0, 0(a2)
80209a66: 63 00 b5 02  	beq	a0, a1, 0x80209a86 <.LBB123_340+0x1f8>
80209a6a: 09 a0        	j	0x80209a6c <.LBB123_340+0x1de>
80209a6c: 71 75        	lui	a0, 1048572
80209a6e: 1b 05 05 1e  	addiw	a0, a0, 480
80209a72: 22 95        	add	a0, a0, s0
80209a74: 0c 61        	ld	a1, 0(a0)
80209a76: 79 75        	lui	a0, 1048574
80209a78: 1b 05 05 3f  	addiw	a0, a0, 1008
80209a7c: 22 95        	add	a0, a0, s0
80209a7e: 97 70 ff ff  	auipc	ra, 1048567
80209a82: e7 80 00 b7  	jalr	-1168(ra)
;                                 } else if (string_eq(property_name, "riscv,isa")) {
80209a86: e5 a8        	j	0x80209b7e <.LBB123_340+0x2f0>
;                                     const value = self.parse_property_name(property_value_descriptor);
80209a88: 71 75        	lui	a0, 1048572
80209a8a: 1b 05 05 32  	addiw	a0, a0, 800
80209a8e: 22 95        	add	a0, a0, s0
80209a90: 0c 61        	ld	a1, 0(a0)
80209a92: 71 75        	lui	a0, 1048572
80209a94: 1b 05 05 46  	addiw	a0, a0, 1120
80209a98: 22 95        	add	a0, a0, s0
80209a9a: 71 76        	lui	a2, 1048572
80209a9c: 1b 06 06 5e  	addiw	a2, a2, 1504
80209aa0: 22 96        	add	a2, a2, s0
80209aa2: 97 e0 ff ff  	auipc	ra, 1048574
80209aa6: e7 80 20 4f  	jalr	1266(ra)
;                                     print("{s}", .{value});
80209aaa: 71 75        	lui	a0, 1048572
80209aac: 1b 05 05 46  	addiw	a0, a0, 1120
80209ab0: 22 95        	add	a0, a0, s0
80209ab2: 0c 61        	ld	a1, 0(a0)
80209ab4: 71 75        	lui	a0, 1048572
80209ab6: 1b 05 05 45  	addiw	a0, a0, 1104
80209aba: 22 95        	add	a0, a0, s0
80209abc: 0c e1        	sd	a1, 0(a0)
80209abe: 71 75        	lui	a0, 1048572
80209ac0: 1b 05 85 46  	addiw	a0, a0, 1128
80209ac4: 22 95        	add	a0, a0, s0
80209ac6: 08 61        	ld	a0, 0(a0)
80209ac8: 71 76        	lui	a2, 1048572
80209aca: 1b 06 86 45  	addiw	a2, a2, 1112
80209ace: 22 96        	add	a2, a2, s0
80209ad0: 08 e2        	sd	a0, 0(a2)
80209ad2: 01 46        	mv	a2, zero
80209ad4: f1 76        	lui	a3, 1048572
80209ad6: 9b 86 86 1c  	addiw	a3, a3, 456
80209ada: a2 96        	add	a3, a3, s0
80209adc: 90 e2        	sd	a2, 0(a3)
80209ade: f9 76        	lui	a3, 1048574
80209ae0: 9b 86 06 52  	addiw	a3, a3, 1312
80209ae4: a2 96        	add	a3, a3, s0
80209ae6: 90 e2        	sd	a2, 0(a3)
80209ae8: 79 76        	lui	a2, 1048574
80209aea: 1b 06 86 53  	addiw	a2, a2, 1336
80209aee: 22 96        	add	a2, a2, s0
80209af0: f9 76        	lui	a3, 1048574
80209af2: 9b 86 86 52  	addiw	a3, a3, 1320
80209af6: a2 96        	add	a3, a3, s0
80209af8: 90 e2        	sd	a2, 0(a3)
80209afa: 13 06 00 02  	addi	a2, zero, 32
80209afe: f9 76        	lui	a3, 1048574
80209b00: 9b 86 06 53  	addiw	a3, a3, 1328
80209b04: a2 96        	add	a3, a3, s0
80209b06: 90 e2        	sd	a2, 0(a3)
;     writer.print(format, args) catch unreachable;
80209b08: 79 76        	lui	a2, 1048574
80209b0a: 1b 06 06 51  	addiw	a2, a2, 1296
80209b0e: 22 96        	add	a2, a2, s0
80209b10: 0c e2        	sd	a1, 0(a2)
80209b12: f9 75        	lui	a1, 1048574
80209b14: 9b 85 85 51  	addiw	a1, a1, 1304
80209b18: a2 95        	add	a1, a1, s0
80209b1a: 88 e1        	sd	a0, 0(a1)
80209b1c: 79 75        	lui	a0, 1048574
80209b1e: 1b 05 05 52  	addiw	a0, a0, 1312
80209b22: 22 95        	add	a0, a0, s0
80209b24: f1 75        	lui	a1, 1048572
80209b26: 9b 85 05 45  	addiw	a1, a1, 1104
80209b2a: a2 95        	add	a1, a1, s0
80209b2c: 97 d0 00 00  	auipc	ra, 13
80209b30: e7 80 00 ee  	jalr	-288(ra)
80209b34: f1 75        	lui	a1, 1048572
80209b36: 9b 85 85 1c  	addiw	a1, a1, 456
80209b3a: a2 95        	add	a1, a1, s0
80209b3c: 8c 61        	ld	a1, 0(a1)
80209b3e: 79 76        	lui	a2, 1048574
80209b40: 1b 06 e6 50  	addiw	a2, a2, 1294
80209b44: 22 96        	add	a2, a2, s0
80209b46: 23 10 a6 00  	sh	a0, 0(a2)
80209b4a: 41 66        	lui	a2, 16
80209b4c: 7d 36        	addiw	a2, a2, -1
80209b4e: 71 8d        	and	a0, a0, a2
80209b50: 71 76        	lui	a2, 1048572
80209b52: 1b 06 06 1d  	addiw	a2, a2, 464
80209b56: 22 96        	add	a2, a2, s0
80209b58: 08 e2        	sd	a0, 0(a2)
80209b5a: 63 00 b5 02  	beq	a0, a1, 0x80209b7a <.LBB123_340+0x2ec>
80209b5e: 09 a0        	j	0x80209b60 <.LBB123_340+0x2d2>
80209b60: 71 75        	lui	a0, 1048572
80209b62: 1b 05 05 1d  	addiw	a0, a0, 464
80209b66: 22 95        	add	a0, a0, s0
80209b68: 0c 61        	ld	a1, 0(a0)
80209b6a: 79 75        	lui	a0, 1048574
80209b6c: 1b 05 05 52  	addiw	a0, a0, 1312
80209b70: 22 95        	add	a0, a0, s0
80209b72: 97 70 ff ff  	auipc	ra, 1048567
80209b76: e7 80 c0 a7  	jalr	-1412(ra)
;                                 } else if (string_eq(property_name, "mmu-type")) {
80209b7a: 09 a0        	j	0x80209b7c <.LBB123_340+0x2ee>
;                                 } else if (string_eq(property_name, "riscv,isa")) {
80209b7c: 09 a0        	j	0x80209b7e <.LBB123_340+0x2f0>
;                                 if (string_eq(property_name, "device_type")) {
80209b7e: 6f 20 e0 04  	j	0x8020bbcc <.LBB123_385+0x18>
;     return std.mem.eql(u8, a, b);
80209b82: 71 75        	lui	a0, 1048572
80209b84: 1b 05 05 62  	addiw	a0, a0, 1568
80209b88: 22 95        	add	a0, a0, s0
80209b8a: 08 61        	ld	a0, 0(a0)
80209b8c: f5 75        	lui	a1, 1048573
80209b8e: 9b 85 85 46  	addiw	a1, a1, 1128
80209b92: a2 95        	add	a1, a1, s0
80209b94: 88 e1        	sd	a0, 0(a1)
80209b96: 71 75        	lui	a0, 1048572
80209b98: 1b 05 85 61  	addiw	a0, a0, 1560
80209b9c: 22 95        	add	a0, a0, s0
80209b9e: 08 61        	ld	a0, 0(a0)
80209ba0: f5 75        	lui	a1, 1048573
80209ba2: 9b 85 05 46  	addiw	a1, a1, 1120
80209ba6: a2 95        	add	a1, a1, s0
80209ba8: 88 e1        	sd	a0, 0(a1)

0000000080209baa <.LBB123_341>:
80209baa: 97 45 01 00  	auipc	a1, 20
80209bae: 93 85 e5 44  	addi	a1, a1, 1102
;     return std.mem.eql(u8, a, b);
80209bb2: 88 61        	ld	a0, 0(a1)
80209bb4: 75 76        	lui	a2, 1048573
80209bb6: 1b 06 06 45  	addiw	a2, a2, 1104
80209bba: 22 96        	add	a2, a2, s0
80209bbc: 08 e2        	sd	a0, 0(a2)
80209bbe: 88 65        	ld	a0, 8(a1)
80209bc0: 75 76        	lui	a2, 1048573
80209bc2: 1b 06 86 45  	addiw	a2, a2, 1112
80209bc6: 22 96        	add	a2, a2, s0
80209bc8: 08 e2        	sd	a0, 0(a2)
80209bca: 71 75        	lui	a0, 1048572
80209bcc: 1b 05 85 61  	addiw	a0, a0, 1560
80209bd0: 22 95        	add	a0, a0, s0
80209bd2: 97 a0 00 00  	auipc	ra, 10
80209bd6: e7 80 20 75  	jalr	1874(ra)
80209bda: 05 89        	andi	a0, a0, 1
80209bdc: f5 75        	lui	a1, 1048573
80209bde: 9b 85 75 47  	addiw	a1, a1, 1143
80209be2: a2 95        	add	a1, a1, s0
80209be4: 23 80 a5 00  	sb	a0, 0(a1)
80209be8: 81 45        	mv	a1, zero
;                             } else if (string_eq(node_name, "interrupt-controller")) {
80209bea: 63 0f b5 1c  	beq	a0, a1, 0x80209dc8 <.LBB123_345+0x16>
80209bee: 09 a0        	j	0x80209bf0 <.LBB123_341+0x46>
;     return std.mem.eql(u8, a, b);
80209bf0: 71 75        	lui	a0, 1048572
80209bf2: 1b 05 85 5d  	addiw	a0, a0, 1496
80209bf6: 22 95        	add	a0, a0, s0
80209bf8: 08 61        	ld	a0, 0(a0)
80209bfa: f5 75        	lui	a1, 1048573
80209bfc: 9b 85 05 44  	addiw	a1, a1, 1088
80209c00: a2 95        	add	a1, a1, s0
80209c02: 88 e1        	sd	a0, 0(a1)
80209c04: 71 75        	lui	a0, 1048572
80209c06: 1b 05 05 5d  	addiw	a0, a0, 1488
80209c0a: 22 95        	add	a0, a0, s0
80209c0c: 08 61        	ld	a0, 0(a0)
80209c0e: f5 75        	lui	a1, 1048573
80209c10: 9b 85 85 43  	addiw	a1, a1, 1080
80209c14: a2 95        	add	a1, a1, s0
80209c16: 88 e1        	sd	a0, 0(a1)

0000000080209c18 <.LBB123_342>:
80209c18: 97 45 01 00  	auipc	a1, 20
80209c1c: 93 85 05 3f  	addi	a1, a1, 1008
;     return std.mem.eql(u8, a, b);
80209c20: 88 61        	ld	a0, 0(a1)
80209c22: 75 76        	lui	a2, 1048573
80209c24: 1b 06 86 42  	addiw	a2, a2, 1064
80209c28: 22 96        	add	a2, a2, s0
80209c2a: 08 e2        	sd	a0, 0(a2)
80209c2c: 88 65        	ld	a0, 8(a1)
80209c2e: 75 76        	lui	a2, 1048573
80209c30: 1b 06 06 43  	addiw	a2, a2, 1072
80209c34: 22 96        	add	a2, a2, s0
80209c36: 08 e2        	sd	a0, 0(a2)
80209c38: 71 75        	lui	a0, 1048572
80209c3a: 1b 05 05 5d  	addiw	a0, a0, 1488
80209c3e: 22 95        	add	a0, a0, s0
80209c40: 97 a0 00 00  	auipc	ra, 10
80209c44: e7 80 40 6e  	jalr	1764(ra)
80209c48: 05 89        	andi	a0, a0, 1
80209c4a: f5 75        	lui	a1, 1048573
80209c4c: 9b 85 f5 44  	addiw	a1, a1, 1103
80209c50: a2 95        	add	a1, a1, s0
80209c52: 23 80 a5 00  	sb	a0, 0(a1)
80209c56: 81 45        	mv	a1, zero
;                                 if (string_eq(property_name, "#interrupt-cells")) {
80209c58: 63 12 b5 08  	bne	a0, a1, 0x80209cdc <.LBB123_344+0x10>
80209c5c: 09 a0        	j	0x80209c5e <.LBB123_342+0x46>
;     return std.mem.eql(u8, a, b);
80209c5e: 71 75        	lui	a0, 1048572
80209c60: 1b 05 85 5d  	addiw	a0, a0, 1496
80209c64: 22 95        	add	a0, a0, s0
80209c66: 08 61        	ld	a0, 0(a0)
80209c68: f5 75        	lui	a1, 1048573
80209c6a: 9b 85 85 41  	addiw	a1, a1, 1048
80209c6e: a2 95        	add	a1, a1, s0
80209c70: 88 e1        	sd	a0, 0(a1)
80209c72: 71 75        	lui	a0, 1048572
80209c74: 1b 05 05 5d  	addiw	a0, a0, 1488
80209c78: 22 95        	add	a0, a0, s0
80209c7a: 08 61        	ld	a0, 0(a0)
80209c7c: f5 75        	lui	a1, 1048573
80209c7e: 9b 85 05 41  	addiw	a1, a1, 1040
80209c82: a2 95        	add	a1, a1, s0
80209c84: 88 e1        	sd	a0, 0(a1)

0000000080209c86 <.LBB123_343>:
80209c86: 97 45 01 00  	auipc	a1, 20
80209c8a: 93 85 25 39  	addi	a1, a1, 914
;     return std.mem.eql(u8, a, b);
80209c8e: 88 61        	ld	a0, 0(a1)
80209c90: 75 76        	lui	a2, 1048573
80209c92: 1b 06 06 40  	addiw	a2, a2, 1024
80209c96: 22 96        	add	a2, a2, s0
80209c98: 08 e2        	sd	a0, 0(a2)
80209c9a: 88 65        	ld	a0, 8(a1)
80209c9c: 75 76        	lui	a2, 1048573
80209c9e: 1b 06 86 40  	addiw	a2, a2, 1032
80209ca2: 22 96        	add	a2, a2, s0
80209ca4: 08 e2        	sd	a0, 0(a2)
80209ca6: 71 75        	lui	a0, 1048572
80209ca8: 1b 05 05 5d  	addiw	a0, a0, 1488
80209cac: 22 95        	add	a0, a0, s0
80209cae: 97 a0 00 00  	auipc	ra, 10
80209cb2: e7 80 60 67  	jalr	1654(ra)
80209cb6: 05 89        	andi	a0, a0, 1
80209cb8: f5 75        	lui	a1, 1048573
80209cba: 9b 85 75 42  	addiw	a1, a1, 1063
80209cbe: a2 95        	add	a1, a1, s0
80209cc0: 23 80 a5 00  	sb	a0, 0(a1)
80209cc4: 81 45        	mv	a1, zero
;                                 } else if (string_eq(property_name, "interrupt-controller")) {
80209cc6: 63 1f b5 0c  	bne	a0, a1, 0x80209da4 <.LBB123_344+0xd8>
80209cca: 09 a0        	j	0x80209ccc <.LBB123_344>

0000000080209ccc <.LBB123_344>:
;                                     TODO(@src());
80209ccc: 17 45 01 00  	auipc	a0, 20
80209cd0: 13 05 c5 35  	addi	a0, a0, 860
80209cd4: 97 60 ff ff  	auipc	ra, 1048566
80209cd8: e7 80 e0 4f  	jalr	1278(ra)
;                                     const value = self.parse_int(u32);
80209cdc: 71 75        	lui	a0, 1048572
80209cde: 1b 05 05 32  	addiw	a0, a0, 800
80209ce2: 22 95        	add	a0, a0, s0
80209ce4: 08 61        	ld	a0, 0(a0)
80209ce6: 97 e0 ff ff  	auipc	ra, 1048574
80209cea: e7 80 a0 1e  	jalr	490(ra)
80209cee: f1 75        	lui	a1, 1048572
80209cf0: 9b 85 c5 44  	addiw	a1, a1, 1100
80209cf4: a2 95        	add	a1, a1, s0
80209cf6: 88 c1        	sw	a0, 0(a1)
;                                     print("{}", .{value});
80209cf8: f1 75        	lui	a1, 1048572
80209cfa: 9b 85 85 44  	addiw	a1, a1, 1096
80209cfe: a2 95        	add	a1, a1, s0
80209d00: 88 c1        	sw	a0, 0(a1)
80209d02: 81 45        	mv	a1, zero
80209d04: 71 76        	lui	a2, 1048572
80209d06: 1b 06 86 1b  	addiw	a2, a2, 440
80209d0a: 22 96        	add	a2, a2, s0
80209d0c: 0c e2        	sd	a1, 0(a2)
80209d0e: 79 76        	lui	a2, 1048574
80209d10: 1b 06 86 64  	addiw	a2, a2, 1608
80209d14: 22 96        	add	a2, a2, s0
80209d16: 0c e2        	sd	a1, 0(a2)
80209d18: f9 75        	lui	a1, 1048574
80209d1a: 9b 85 05 66  	addiw	a1, a1, 1632
80209d1e: a2 95        	add	a1, a1, s0
80209d20: 79 76        	lui	a2, 1048574
80209d22: 1b 06 06 65  	addiw	a2, a2, 1616
80209d26: 22 96        	add	a2, a2, s0
80209d28: 0c e2        	sd	a1, 0(a2)
80209d2a: 93 05 00 02  	addi	a1, zero, 32
80209d2e: 79 76        	lui	a2, 1048574
80209d30: 1b 06 86 65  	addiw	a2, a2, 1624
80209d34: 22 96        	add	a2, a2, s0
80209d36: 0c e2        	sd	a1, 0(a2)
;     writer.print(format, args) catch unreachable;
80209d38: f9 75        	lui	a1, 1048574
80209d3a: 9b 85 05 64  	addiw	a1, a1, 1600
80209d3e: a2 95        	add	a1, a1, s0
80209d40: 88 c1        	sw	a0, 0(a1)
80209d42: 79 75        	lui	a0, 1048574
80209d44: 1b 05 85 64  	addiw	a0, a0, 1608
80209d48: 22 95        	add	a0, a0, s0
80209d4a: f1 75        	lui	a1, 1048572
80209d4c: 9b 85 85 44  	addiw	a1, a1, 1096
80209d50: a2 95        	add	a1, a1, s0
80209d52: 97 d0 00 00  	auipc	ra, 13
80209d56: e7 80 a0 d0  	jalr	-758(ra)
80209d5a: f1 75        	lui	a1, 1048572
80209d5c: 9b 85 85 1b  	addiw	a1, a1, 440
80209d60: a2 95        	add	a1, a1, s0
80209d62: 8c 61        	ld	a1, 0(a1)
80209d64: 79 76        	lui	a2, 1048574
80209d66: 1b 06 e6 63  	addiw	a2, a2, 1598
80209d6a: 22 96        	add	a2, a2, s0
80209d6c: 23 10 a6 00  	sh	a0, 0(a2)
80209d70: 41 66        	lui	a2, 16
80209d72: 7d 36        	addiw	a2, a2, -1
80209d74: 71 8d        	and	a0, a0, a2
80209d76: 71 76        	lui	a2, 1048572
80209d78: 1b 06 06 1c  	addiw	a2, a2, 448
80209d7c: 22 96        	add	a2, a2, s0
80209d7e: 08 e2        	sd	a0, 0(a2)
80209d80: 63 00 b5 02  	beq	a0, a1, 0x80209da0 <.LBB123_344+0xd4>
80209d84: 09 a0        	j	0x80209d86 <.LBB123_344+0xba>
80209d86: 71 75        	lui	a0, 1048572
80209d88: 1b 05 05 1c  	addiw	a0, a0, 448
80209d8c: 22 95        	add	a0, a0, s0
80209d8e: 0c 61        	ld	a1, 0(a0)
80209d90: 79 75        	lui	a0, 1048574
80209d92: 1b 05 85 64  	addiw	a0, a0, 1608
80209d96: 22 95        	add	a0, a0, s0
80209d98: 97 70 ff ff  	auipc	ra, 1048567
80209d9c: e7 80 60 85  	jalr	-1962(ra)
;                                 if (string_eq(property_name, "#interrupt-cells")) {
80209da0: 6f 10 f0 62  	j	0x8020bbce <.LBB123_385+0x1a>
;                                     assert(@src(), property_value_descriptor.len == 0);
80209da4: 71 75        	lui	a0, 1048572
80209da6: 1b 05 05 5e  	addiw	a0, a0, 1504
80209daa: 22 95        	add	a0, a0, s0
80209dac: 08 41        	lw	a0, 0(a0)
80209dae: 93 35 15 00  	seqz	a1, a0

0000000080209db2 <.LBB123_345>:
80209db2: 17 45 01 00  	auipc	a0, 20
80209db6: 13 05 e5 29  	addi	a0, a0, 670
80209dba: 97 60 ff ff  	auipc	ra, 1048566
80209dbe: e7 80 20 45  	jalr	1106(ra)
;                                 } else if (string_eq(property_name, "interrupt-controller")) {
80209dc2: 09 a0        	j	0x80209dc4 <.LBB123_345+0x12>
;                                 if (string_eq(property_name, "#interrupt-cells")) {
80209dc4: 6f 10 b0 60  	j	0x8020bbce <.LBB123_385+0x1a>
;     return std.mem.startsWith(u8, str, slice);
80209dc8: 71 75        	lui	a0, 1048572
80209dca: 1b 05 05 62  	addiw	a0, a0, 1568
80209dce: 22 95        	add	a0, a0, s0
80209dd0: 08 61        	ld	a0, 0(a0)
80209dd2: f9 75        	lui	a1, 1048574
80209dd4: 9b 85 85 8c  	addiw	a1, a1, -1848
80209dd8: a2 95        	add	a1, a1, s0
80209dda: 88 e1        	sd	a0, 0(a1)
80209ddc: 71 75        	lui	a0, 1048572
80209dde: 1b 05 85 61  	addiw	a0, a0, 1560
80209de2: 22 95        	add	a0, a0, s0
80209de4: 08 61        	ld	a0, 0(a0)
80209de6: f9 75        	lui	a1, 1048574
80209de8: 9b 85 05 8c  	addiw	a1, a1, -1856
80209dec: a2 95        	add	a1, a1, s0
80209dee: 88 e1        	sd	a0, 0(a1)

0000000080209df0 <.LBB123_346>:
80209df0: 97 45 01 00  	auipc	a1, 20
80209df4: 93 85 85 28  	addi	a1, a1, 648
;     return std.mem.startsWith(u8, str, slice);
80209df8: 88 61        	ld	a0, 0(a1)
80209dfa: 79 76        	lui	a2, 1048574
80209dfc: 1b 06 06 8b  	addiw	a2, a2, -1872
80209e00: 22 96        	add	a2, a2, s0
80209e02: 08 e2        	sd	a0, 0(a2)
80209e04: 88 65        	ld	a0, 8(a1)
80209e06: 79 76        	lui	a2, 1048574
80209e08: 1b 06 86 8b  	addiw	a2, a2, -1864
80209e0c: 22 96        	add	a2, a2, s0
80209e0e: 08 e2        	sd	a0, 0(a2)
80209e10: 71 75        	lui	a0, 1048572
80209e12: 1b 05 85 61  	addiw	a0, a0, 1560
80209e16: 22 95        	add	a0, a0, s0
80209e18: 97 d0 00 00  	auipc	ra, 13
80209e1c: e7 80 60 91  	jalr	-1770(ra)
80209e20: 05 89        	andi	a0, a0, 1
80209e22: f9 75        	lui	a1, 1048574
80209e24: 9b 85 75 8d  	addiw	a1, a1, -1833
80209e28: a2 95        	add	a1, a1, s0
80209e2a: 23 80 a5 00  	sb	a0, 0(a1)
80209e2e: 81 45        	mv	a1, zero
;                             } else if (starts_with(node_name, "core")) {
80209e30: 63 06 b5 14  	beq	a0, a1, 0x80209f7c <.LBB123_348+0xd8>
80209e34: 09 a0        	j	0x80209e36 <.LBB123_346+0x46>
;     return std.mem.eql(u8, a, b);
80209e36: 71 75        	lui	a0, 1048572
80209e38: 1b 05 85 5d  	addiw	a0, a0, 1496
80209e3c: 22 95        	add	a0, a0, s0
80209e3e: 08 61        	ld	a0, 0(a0)
80209e40: f5 75        	lui	a1, 1048573
80209e42: 9b 85 05 3f  	addiw	a1, a1, 1008
80209e46: a2 95        	add	a1, a1, s0
80209e48: 88 e1        	sd	a0, 0(a1)
80209e4a: 71 75        	lui	a0, 1048572
80209e4c: 1b 05 05 5d  	addiw	a0, a0, 1488
80209e50: 22 95        	add	a0, a0, s0
80209e52: 08 61        	ld	a0, 0(a0)
80209e54: f5 75        	lui	a1, 1048573
80209e56: 9b 85 85 3e  	addiw	a1, a1, 1000
80209e5a: a2 95        	add	a1, a1, s0
80209e5c: 88 e1        	sd	a0, 0(a1)

0000000080209e5e <.LBB123_347>:
80209e5e: 97 45 01 00  	auipc	a1, 20
80209e62: 93 85 a5 22  	addi	a1, a1, 554
;     return std.mem.eql(u8, a, b);
80209e66: 88 61        	ld	a0, 0(a1)
80209e68: 75 76        	lui	a2, 1048573
80209e6a: 1b 06 86 3d  	addiw	a2, a2, 984
80209e6e: 22 96        	add	a2, a2, s0
80209e70: 08 e2        	sd	a0, 0(a2)
80209e72: 88 65        	ld	a0, 8(a1)
80209e74: 75 76        	lui	a2, 1048573
80209e76: 1b 06 06 3e  	addiw	a2, a2, 992
80209e7a: 22 96        	add	a2, a2, s0
80209e7c: 08 e2        	sd	a0, 0(a2)
80209e7e: 71 75        	lui	a0, 1048572
80209e80: 1b 05 05 5d  	addiw	a0, a0, 1488
80209e84: 22 95        	add	a0, a0, s0
80209e86: 97 a0 00 00  	auipc	ra, 10
80209e8a: e7 80 e0 49  	jalr	1182(ra)
80209e8e: 05 89        	andi	a0, a0, 1
80209e90: f5 75        	lui	a1, 1048573
80209e92: 9b 85 f5 3f  	addiw	a1, a1, 1023
80209e96: a2 95        	add	a1, a1, s0
80209e98: 23 80 a5 00  	sb	a0, 0(a1)
80209e9c: 81 45        	mv	a1, zero
;                                 if (string_eq(property_name, "cpu")) {
80209e9e: 63 1b b5 00  	bne	a0, a1, 0x80209eb4 <.LBB123_348+0x10>
80209ea2: 09 a0        	j	0x80209ea4 <.LBB123_348>

0000000080209ea4 <.LBB123_348>:
;                                     TODO(@src());
80209ea4: 17 45 01 00  	auipc	a0, 20
80209ea8: 13 05 45 1f  	addi	a0, a0, 500
80209eac: 97 60 ff ff  	auipc	ra, 1048566
80209eb0: e7 80 60 32  	jalr	806(ra)
;                                     const value = self.parse_int(u32);
80209eb4: 71 75        	lui	a0, 1048572
80209eb6: 1b 05 05 32  	addiw	a0, a0, 800
80209eba: 22 95        	add	a0, a0, s0
80209ebc: 08 61        	ld	a0, 0(a0)
80209ebe: 97 e0 ff ff  	auipc	ra, 1048574
80209ec2: e7 80 20 01  	jalr	18(ra)
80209ec6: f1 75        	lui	a1, 1048572
80209ec8: 9b 85 45 44  	addiw	a1, a1, 1092
80209ecc: a2 95        	add	a1, a1, s0
80209ece: 88 c1        	sw	a0, 0(a1)
;                                     print("{}", .{value});
80209ed0: f1 75        	lui	a1, 1048572
80209ed2: 9b 85 05 44  	addiw	a1, a1, 1088
80209ed6: a2 95        	add	a1, a1, s0
80209ed8: 88 c1        	sw	a0, 0(a1)
80209eda: 81 45        	mv	a1, zero
80209edc: 71 76        	lui	a2, 1048572
80209ede: 1b 06 86 1a  	addiw	a2, a2, 424
80209ee2: 22 96        	add	a2, a2, s0
80209ee4: 0c e2        	sd	a1, 0(a2)
80209ee6: 79 76        	lui	a2, 1048574
80209ee8: 1b 06 06 77  	addiw	a2, a2, 1904
80209eec: 22 96        	add	a2, a2, s0
80209eee: 0c e2        	sd	a1, 0(a2)
80209ef0: f9 75        	lui	a1, 1048574
80209ef2: 9b 85 85 78  	addiw	a1, a1, 1928
80209ef6: a2 95        	add	a1, a1, s0
80209ef8: 79 76        	lui	a2, 1048574
80209efa: 1b 06 86 77  	addiw	a2, a2, 1912
80209efe: 22 96        	add	a2, a2, s0
80209f00: 0c e2        	sd	a1, 0(a2)
80209f02: 93 05 00 02  	addi	a1, zero, 32
80209f06: 79 76        	lui	a2, 1048574
80209f08: 1b 06 06 78  	addiw	a2, a2, 1920
80209f0c: 22 96        	add	a2, a2, s0
80209f0e: 0c e2        	sd	a1, 0(a2)
;     writer.print(format, args) catch unreachable;
80209f10: f9 75        	lui	a1, 1048574
80209f12: 9b 85 85 76  	addiw	a1, a1, 1896
80209f16: a2 95        	add	a1, a1, s0
80209f18: 88 c1        	sw	a0, 0(a1)
80209f1a: 79 75        	lui	a0, 1048574
80209f1c: 1b 05 05 77  	addiw	a0, a0, 1904
80209f20: 22 95        	add	a0, a0, s0
80209f22: f1 75        	lui	a1, 1048572
80209f24: 9b 85 05 44  	addiw	a1, a1, 1088
80209f28: a2 95        	add	a1, a1, s0
80209f2a: 97 d0 00 00  	auipc	ra, 13
80209f2e: e7 80 c0 b7  	jalr	-1156(ra)
80209f32: f1 75        	lui	a1, 1048572
80209f34: 9b 85 85 1a  	addiw	a1, a1, 424
80209f38: a2 95        	add	a1, a1, s0
80209f3a: 8c 61        	ld	a1, 0(a1)
80209f3c: 79 76        	lui	a2, 1048574
80209f3e: 1b 06 66 76  	addiw	a2, a2, 1894
80209f42: 22 96        	add	a2, a2, s0
80209f44: 23 10 a6 00  	sh	a0, 0(a2)
80209f48: 41 66        	lui	a2, 16
80209f4a: 7d 36        	addiw	a2, a2, -1
80209f4c: 71 8d        	and	a0, a0, a2
80209f4e: 71 76        	lui	a2, 1048572
80209f50: 1b 06 06 1b  	addiw	a2, a2, 432
80209f54: 22 96        	add	a2, a2, s0
80209f56: 08 e2        	sd	a0, 0(a2)
80209f58: 63 00 b5 02  	beq	a0, a1, 0x80209f78 <.LBB123_348+0xd4>
80209f5c: 09 a0        	j	0x80209f5e <.LBB123_348+0xba>
80209f5e: 71 75        	lui	a0, 1048572
80209f60: 1b 05 05 1b  	addiw	a0, a0, 432
80209f64: 22 95        	add	a0, a0, s0
80209f66: 0c 61        	ld	a1, 0(a0)
80209f68: 79 75        	lui	a0, 1048574
80209f6a: 1b 05 05 77  	addiw	a0, a0, 1904
80209f6e: 22 95        	add	a0, a0, s0
80209f70: 97 60 ff ff  	auipc	ra, 1048566
80209f74: e7 80 e0 67  	jalr	1662(ra)
;                                 if (string_eq(property_name, "cpu")) {
80209f78: 6f 10 90 45  	j	0x8020bbd0 <.LBB123_385+0x1c>
;     return std.mem.startsWith(u8, str, slice);
80209f7c: 71 75        	lui	a0, 1048572
80209f7e: 1b 05 05 62  	addiw	a0, a0, 1568
80209f82: 22 95        	add	a0, a0, s0
80209f84: 08 61        	ld	a0, 0(a0)
80209f86: f9 75        	lui	a1, 1048574
80209f88: 9b 85 05 8a  	addiw	a1, a1, -1888
80209f8c: a2 95        	add	a1, a1, s0
80209f8e: 88 e1        	sd	a0, 0(a1)
80209f90: 71 75        	lui	a0, 1048572
80209f92: 1b 05 85 61  	addiw	a0, a0, 1560
80209f96: 22 95        	add	a0, a0, s0
80209f98: 08 61        	ld	a0, 0(a0)
80209f9a: f9 75        	lui	a1, 1048574
80209f9c: 9b 85 85 89  	addiw	a1, a1, -1896
80209fa0: a2 95        	add	a1, a1, s0
80209fa2: 88 e1        	sd	a0, 0(a1)

0000000080209fa4 <.LBB123_349>:
80209fa4: 97 45 01 00  	auipc	a1, 20
80209fa8: 93 85 c5 11  	addi	a1, a1, 284
;     return std.mem.startsWith(u8, str, slice);
80209fac: 88 61        	ld	a0, 0(a1)
80209fae: 79 76        	lui	a2, 1048574
80209fb0: 1b 06 86 88  	addiw	a2, a2, -1912
80209fb4: 22 96        	add	a2, a2, s0
80209fb6: 08 e2        	sd	a0, 0(a2)
80209fb8: 88 65        	ld	a0, 8(a1)
80209fba: 79 76        	lui	a2, 1048574
80209fbc: 1b 06 06 89  	addiw	a2, a2, -1904
80209fc0: 22 96        	add	a2, a2, s0
80209fc2: 08 e2        	sd	a0, 0(a2)
80209fc4: 71 75        	lui	a0, 1048572
80209fc6: 1b 05 85 61  	addiw	a0, a0, 1560
80209fca: 22 95        	add	a0, a0, s0
80209fcc: 97 c0 00 00  	auipc	ra, 12
80209fd0: e7 80 20 76  	jalr	1890(ra)
80209fd4: 2a 86        	mv	a2, a0
80209fd6: 13 75 16 00  	andi	a0, a2, 1
80209fda: f9 75        	lui	a1, 1048574
80209fdc: 9b 85 f5 8a  	addiw	a1, a1, -1873
80209fe0: a2 95        	add	a1, a1, s0
80209fe2: 23 80 a5 00  	sb	a0, 0(a1)
80209fe6: 81 45        	mv	a1, zero
;                             } else if (starts_with(node_name, "rtc@") or starts_with(node_name, "uart@")) {
80209fe8: f1 76        	lui	a3, 1048572
80209fea: 9b 86 06 1a  	addiw	a3, a3, 416
80209fee: a2 96        	add	a3, a3, s0
80209ff0: 90 e2        	sd	a2, 0(a3)
80209ff2: 63 1d b5 06  	bne	a0, a1, 0x8020a06c <.LBB123_350+0x4c>
80209ff6: 09 a0        	j	0x80209ff8 <.LBB123_349+0x54>
;     return std.mem.startsWith(u8, str, slice);
80209ff8: 71 75        	lui	a0, 1048572
80209ffa: 1b 05 05 62  	addiw	a0, a0, 1568
80209ffe: 22 95        	add	a0, a0, s0
8020a000: 08 61        	ld	a0, 0(a0)
8020a002: f9 75        	lui	a1, 1048574
8020a004: 9b 85 85 87  	addiw	a1, a1, -1928
8020a008: a2 95        	add	a1, a1, s0
8020a00a: 88 e1        	sd	a0, 0(a1)
8020a00c: 71 75        	lui	a0, 1048572
8020a00e: 1b 05 85 61  	addiw	a0, a0, 1560
8020a012: 22 95        	add	a0, a0, s0
8020a014: 08 61        	ld	a0, 0(a0)
8020a016: f9 75        	lui	a1, 1048574
8020a018: 9b 85 05 87  	addiw	a1, a1, -1936
8020a01c: a2 95        	add	a1, a1, s0
8020a01e: 88 e1        	sd	a0, 0(a1)

000000008020a020 <.LBB123_350>:
8020a020: 97 45 01 00  	auipc	a1, 20
8020a024: 93 85 05 0b  	addi	a1, a1, 176
;     return std.mem.startsWith(u8, str, slice);
8020a028: 88 61        	ld	a0, 0(a1)
8020a02a: 79 76        	lui	a2, 1048574
8020a02c: 1b 06 06 86  	addiw	a2, a2, -1952
8020a030: 22 96        	add	a2, a2, s0
8020a032: 08 e2        	sd	a0, 0(a2)
8020a034: 88 65        	ld	a0, 8(a1)
8020a036: 79 76        	lui	a2, 1048574
8020a038: 1b 06 86 86  	addiw	a2, a2, -1944
8020a03c: 22 96        	add	a2, a2, s0
8020a03e: 08 e2        	sd	a0, 0(a2)
8020a040: 71 75        	lui	a0, 1048572
8020a042: 1b 05 85 61  	addiw	a0, a0, 1560
8020a046: 22 95        	add	a0, a0, s0
8020a048: 97 c0 00 00  	auipc	ra, 12
8020a04c: e7 80 60 6e  	jalr	1766(ra)
8020a050: 93 75 15 00  	andi	a1, a0, 1
8020a054: 79 76        	lui	a2, 1048574
8020a056: 1b 06 76 88  	addiw	a2, a2, -1913
8020a05a: 22 96        	add	a2, a2, s0
8020a05c: 23 00 b6 00  	sb	a1, 0(a2)
;                             } else if (starts_with(node_name, "rtc@") or starts_with(node_name, "uart@")) {
8020a060: f1 75        	lui	a1, 1048572
8020a062: 9b 85 05 1a  	addiw	a1, a1, 416
8020a066: a2 95        	add	a1, a1, s0
8020a068: 88 e1        	sd	a0, 0(a1)
8020a06a: 09 a0        	j	0x8020a06c <.LBB123_350+0x4c>
8020a06c: 71 75        	lui	a0, 1048572
8020a06e: 1b 05 05 1a  	addiw	a0, a0, 416
8020a072: 22 95        	add	a0, a0, s0
8020a074: 08 61        	ld	a0, 0(a0)
8020a076: 05 89        	andi	a0, a0, 1
8020a078: 81 45        	mv	a1, zero
8020a07a: 63 08 b5 30  	beq	a0, a1, 0x8020a38a <.LBB123_354+0x1c0>
8020a07e: 09 a0        	j	0x8020a080 <.LBB123_350+0x60>
;     return std.mem.eql(u8, a, b);
8020a080: 71 75        	lui	a0, 1048572
8020a082: 1b 05 85 5d  	addiw	a0, a0, 1496
8020a086: 22 95        	add	a0, a0, s0
8020a088: 08 61        	ld	a0, 0(a0)
8020a08a: f5 75        	lui	a1, 1048573
8020a08c: 9b 85 85 3c  	addiw	a1, a1, 968
8020a090: a2 95        	add	a1, a1, s0
8020a092: 88 e1        	sd	a0, 0(a1)
8020a094: 71 75        	lui	a0, 1048572
8020a096: 1b 05 05 5d  	addiw	a0, a0, 1488
8020a09a: 22 95        	add	a0, a0, s0
8020a09c: 08 61        	ld	a0, 0(a0)
8020a09e: f5 75        	lui	a1, 1048573
8020a0a0: 9b 85 05 3c  	addiw	a1, a1, 960
8020a0a4: a2 95        	add	a1, a1, s0
8020a0a6: 88 e1        	sd	a0, 0(a1)

000000008020a0a8 <.LBB123_351>:
8020a0a8: 97 45 01 00  	auipc	a1, 20
8020a0ac: 93 85 85 03  	addi	a1, a1, 56
;     return std.mem.eql(u8, a, b);
8020a0b0: 88 61        	ld	a0, 0(a1)
8020a0b2: 75 76        	lui	a2, 1048573
8020a0b4: 1b 06 06 3b  	addiw	a2, a2, 944
8020a0b8: 22 96        	add	a2, a2, s0
8020a0ba: 08 e2        	sd	a0, 0(a2)
8020a0bc: 88 65        	ld	a0, 8(a1)
8020a0be: 75 76        	lui	a2, 1048573
8020a0c0: 1b 06 86 3b  	addiw	a2, a2, 952
8020a0c4: 22 96        	add	a2, a2, s0
8020a0c6: 08 e2        	sd	a0, 0(a2)
8020a0c8: 71 75        	lui	a0, 1048572
8020a0ca: 1b 05 05 5d  	addiw	a0, a0, 1488
8020a0ce: 22 95        	add	a0, a0, s0
8020a0d0: 97 a0 00 00  	auipc	ra, 10
8020a0d4: e7 80 40 25  	jalr	596(ra)
8020a0d8: 05 89        	andi	a0, a0, 1
8020a0da: f5 75        	lui	a1, 1048573
8020a0dc: 9b 85 75 3d  	addiw	a1, a1, 983
8020a0e0: a2 95        	add	a1, a1, s0
8020a0e2: 23 80 a5 00  	sb	a0, 0(a1)
8020a0e6: 81 45        	mv	a1, zero
;                                 if (string_eq(property_name, "interrupts")) {
8020a0e8: 63 19 b5 0e  	bne	a0, a1, 0x8020a1da <.LBB123_354+0x10>
8020a0ec: 09 a0        	j	0x8020a0ee <.LBB123_351+0x46>
;     return std.mem.eql(u8, a, b);
8020a0ee: 71 75        	lui	a0, 1048572
8020a0f0: 1b 05 85 5d  	addiw	a0, a0, 1496
8020a0f4: 22 95        	add	a0, a0, s0
8020a0f6: 08 61        	ld	a0, 0(a0)
8020a0f8: f5 75        	lui	a1, 1048573
8020a0fa: 9b 85 05 3a  	addiw	a1, a1, 928
8020a0fe: a2 95        	add	a1, a1, s0
8020a100: 88 e1        	sd	a0, 0(a1)
8020a102: 71 75        	lui	a0, 1048572
8020a104: 1b 05 05 5d  	addiw	a0, a0, 1488
8020a108: 22 95        	add	a0, a0, s0
8020a10a: 08 61        	ld	a0, 0(a0)
8020a10c: f5 75        	lui	a1, 1048573
8020a10e: 9b 85 85 39  	addiw	a1, a1, 920
8020a112: a2 95        	add	a1, a1, s0
8020a114: 88 e1        	sd	a0, 0(a1)

000000008020a116 <.LBB123_352>:
8020a116: 97 45 01 00  	auipc	a1, 20
8020a11a: 93 85 a5 fd  	addi	a1, a1, -38
;     return std.mem.eql(u8, a, b);
8020a11e: 88 61        	ld	a0, 0(a1)
8020a120: 75 76        	lui	a2, 1048573
8020a122: 1b 06 86 38  	addiw	a2, a2, 904
8020a126: 22 96        	add	a2, a2, s0
8020a128: 08 e2        	sd	a0, 0(a2)
8020a12a: 88 65        	ld	a0, 8(a1)
8020a12c: 75 76        	lui	a2, 1048573
8020a12e: 1b 06 06 39  	addiw	a2, a2, 912
8020a132: 22 96        	add	a2, a2, s0
8020a134: 08 e2        	sd	a0, 0(a2)
8020a136: 71 75        	lui	a0, 1048572
8020a138: 1b 05 05 5d  	addiw	a0, a0, 1488
8020a13c: 22 95        	add	a0, a0, s0
8020a13e: 97 a0 00 00  	auipc	ra, 10
8020a142: e7 80 60 1e  	jalr	486(ra)
8020a146: 05 89        	andi	a0, a0, 1
8020a148: f5 75        	lui	a1, 1048573
8020a14a: 9b 85 f5 3a  	addiw	a1, a1, 943
8020a14e: a2 95        	add	a1, a1, s0
8020a150: 23 80 a5 00  	sb	a0, 0(a1)
8020a154: 81 45        	mv	a1, zero
;                                 } else if (string_eq(property_name, "interrupt-parent")) {
8020a156: 63 16 b5 14  	bne	a0, a1, 0x8020a2a2 <.LBB123_354+0xd8>
8020a15a: 09 a0        	j	0x8020a15c <.LBB123_352+0x46>
;     return std.mem.eql(u8, a, b);
8020a15c: 71 75        	lui	a0, 1048572
8020a15e: 1b 05 85 5d  	addiw	a0, a0, 1496
8020a162: 22 95        	add	a0, a0, s0
8020a164: 08 61        	ld	a0, 0(a0)
8020a166: f5 75        	lui	a1, 1048573
8020a168: 9b 85 85 37  	addiw	a1, a1, 888
8020a16c: a2 95        	add	a1, a1, s0
8020a16e: 88 e1        	sd	a0, 0(a1)
8020a170: 71 75        	lui	a0, 1048572
8020a172: 1b 05 05 5d  	addiw	a0, a0, 1488
8020a176: 22 95        	add	a0, a0, s0
8020a178: 08 61        	ld	a0, 0(a0)
8020a17a: f5 75        	lui	a1, 1048573
8020a17c: 9b 85 05 37  	addiw	a1, a1, 880
8020a180: a2 95        	add	a1, a1, s0
8020a182: 88 e1        	sd	a0, 0(a1)

000000008020a184 <.LBB123_353>:
8020a184: 97 45 01 00  	auipc	a1, 20
8020a188: 93 85 c5 f7  	addi	a1, a1, -132
;     return std.mem.eql(u8, a, b);
8020a18c: 88 61        	ld	a0, 0(a1)
8020a18e: 75 76        	lui	a2, 1048573
8020a190: 1b 06 06 36  	addiw	a2, a2, 864
8020a194: 22 96        	add	a2, a2, s0
8020a196: 08 e2        	sd	a0, 0(a2)
8020a198: 88 65        	ld	a0, 8(a1)
8020a19a: 75 76        	lui	a2, 1048573
8020a19c: 1b 06 86 36  	addiw	a2, a2, 872
8020a1a0: 22 96        	add	a2, a2, s0
8020a1a2: 08 e2        	sd	a0, 0(a2)
8020a1a4: 71 75        	lui	a0, 1048572
8020a1a6: 1b 05 05 5d  	addiw	a0, a0, 1488
8020a1aa: 22 95        	add	a0, a0, s0
8020a1ac: 97 a0 00 00  	auipc	ra, 10
8020a1b0: e7 80 80 17  	jalr	376(ra)
8020a1b4: 05 89        	andi	a0, a0, 1
8020a1b6: f5 75        	lui	a1, 1048573
8020a1b8: 9b 85 75 38  	addiw	a1, a1, 903
8020a1bc: a2 95        	add	a1, a1, s0
8020a1be: 23 80 a5 00  	sb	a0, 0(a1)
8020a1c2: 81 45        	mv	a1, zero
;                                 } else if (string_eq(property_name, "clock-frequency")) {
8020a1c4: 63 12 b5 1a  	bne	a0, a1, 0x8020a368 <.LBB123_354+0x19e>
8020a1c8: 09 a0        	j	0x8020a1ca <.LBB123_354>

000000008020a1ca <.LBB123_354>:
;                                     TODO(@src());
8020a1ca: 17 45 01 00  	auipc	a0, 20
8020a1ce: 13 05 65 f4  	addi	a0, a0, -186
8020a1d2: 97 60 ff ff  	auipc	ra, 1048566
8020a1d6: e7 80 00 00  	jalr	ra
;                                     const value = self.parse_int(u32);
8020a1da: 71 75        	lui	a0, 1048572
8020a1dc: 1b 05 05 32  	addiw	a0, a0, 800
8020a1e0: 22 95        	add	a0, a0, s0
8020a1e2: 08 61        	ld	a0, 0(a0)
8020a1e4: 97 e0 ff ff  	auipc	ra, 1048574
8020a1e8: e7 80 c0 ce  	jalr	-788(ra)
8020a1ec: f1 75        	lui	a1, 1048572
8020a1ee: 9b 85 c5 43  	addiw	a1, a1, 1084
8020a1f2: a2 95        	add	a1, a1, s0
8020a1f4: 88 c1        	sw	a0, 0(a1)
;                                     print("{}", .{value});
8020a1f6: f1 75        	lui	a1, 1048572
8020a1f8: 9b 85 85 43  	addiw	a1, a1, 1080
8020a1fc: a2 95        	add	a1, a1, s0
8020a1fe: 88 c1        	sw	a0, 0(a1)
8020a200: 81 45        	mv	a1, zero
8020a202: 71 76        	lui	a2, 1048572
8020a204: 1b 06 06 19  	addiw	a2, a2, 400
8020a208: 22 96        	add	a2, a2, s0
8020a20a: 0c e2        	sd	a1, 0(a2)
8020a20c: 7d 76        	lui	a2, 1048575
8020a20e: 1b 06 86 89  	addiw	a2, a2, -1896
8020a212: 22 96        	add	a2, a2, s0
8020a214: 0c e2        	sd	a1, 0(a2)
8020a216: fd 75        	lui	a1, 1048575
8020a218: 9b 85 05 8b  	addiw	a1, a1, -1872
8020a21c: a2 95        	add	a1, a1, s0
8020a21e: 7d 76        	lui	a2, 1048575
8020a220: 1b 06 06 8a  	addiw	a2, a2, -1888
8020a224: 22 96        	add	a2, a2, s0
8020a226: 0c e2        	sd	a1, 0(a2)
8020a228: 93 05 00 02  	addi	a1, zero, 32
8020a22c: 7d 76        	lui	a2, 1048575
8020a22e: 1b 06 86 8a  	addiw	a2, a2, -1880
8020a232: 22 96        	add	a2, a2, s0
8020a234: 0c e2        	sd	a1, 0(a2)
;     writer.print(format, args) catch unreachable;
8020a236: fd 75        	lui	a1, 1048575
8020a238: 9b 85 05 89  	addiw	a1, a1, -1904
8020a23c: a2 95        	add	a1, a1, s0
8020a23e: 88 c1        	sw	a0, 0(a1)
8020a240: 7d 75        	lui	a0, 1048575
8020a242: 1b 05 85 89  	addiw	a0, a0, -1896
8020a246: 22 95        	add	a0, a0, s0
8020a248: f1 75        	lui	a1, 1048572
8020a24a: 9b 85 85 43  	addiw	a1, a1, 1080
8020a24e: a2 95        	add	a1, a1, s0
8020a250: 97 d0 00 00  	auipc	ra, 13
8020a254: e7 80 00 8a  	jalr	-1888(ra)
8020a258: f1 75        	lui	a1, 1048572
8020a25a: 9b 85 05 19  	addiw	a1, a1, 400
8020a25e: a2 95        	add	a1, a1, s0
8020a260: 8c 61        	ld	a1, 0(a1)
8020a262: 7d 76        	lui	a2, 1048575
8020a264: 1b 06 e6 88  	addiw	a2, a2, -1906
8020a268: 22 96        	add	a2, a2, s0
8020a26a: 23 10 a6 00  	sh	a0, 0(a2)
8020a26e: 41 66        	lui	a2, 16
8020a270: 7d 36        	addiw	a2, a2, -1
8020a272: 71 8d        	and	a0, a0, a2
8020a274: 71 76        	lui	a2, 1048572
8020a276: 1b 06 86 19  	addiw	a2, a2, 408
8020a27a: 22 96        	add	a2, a2, s0
8020a27c: 08 e2        	sd	a0, 0(a2)
8020a27e: 63 00 b5 02  	beq	a0, a1, 0x8020a29e <.LBB123_354+0xd4>
8020a282: 09 a0        	j	0x8020a284 <.LBB123_354+0xba>
8020a284: 71 75        	lui	a0, 1048572
8020a286: 1b 05 85 19  	addiw	a0, a0, 408
8020a28a: 22 95        	add	a0, a0, s0
8020a28c: 0c 61        	ld	a1, 0(a0)
8020a28e: 7d 75        	lui	a0, 1048575
8020a290: 1b 05 85 89  	addiw	a0, a0, -1896
8020a294: 22 95        	add	a0, a0, s0
8020a296: 97 60 ff ff  	auipc	ra, 1048566
8020a29a: e7 80 80 35  	jalr	856(ra)
;                                 if (string_eq(property_name, "interrupts")) {
8020a29e: 6f 10 50 13  	j	0x8020bbd2 <.LBB123_385+0x1e>
;                                     const value = self.parse_int(u32);
8020a2a2: 71 75        	lui	a0, 1048572
8020a2a4: 1b 05 05 32  	addiw	a0, a0, 800
8020a2a8: 22 95        	add	a0, a0, s0
8020a2aa: 08 61        	ld	a0, 0(a0)
8020a2ac: 97 e0 ff ff  	auipc	ra, 1048574
8020a2b0: e7 80 40 c2  	jalr	-988(ra)
8020a2b4: f1 75        	lui	a1, 1048572
8020a2b6: 9b 85 45 43  	addiw	a1, a1, 1076
8020a2ba: a2 95        	add	a1, a1, s0
8020a2bc: 88 c1        	sw	a0, 0(a1)
;                                     print("{}", .{value});
8020a2be: f1 75        	lui	a1, 1048572
8020a2c0: 9b 85 05 43  	addiw	a1, a1, 1072
8020a2c4: a2 95        	add	a1, a1, s0
8020a2c6: 88 c1        	sw	a0, 0(a1)
8020a2c8: 81 45        	mv	a1, zero
8020a2ca: 71 76        	lui	a2, 1048572
8020a2cc: 1b 06 06 18  	addiw	a2, a2, 384
8020a2d0: 22 96        	add	a2, a2, s0
8020a2d2: 0c e2        	sd	a1, 0(a2)
8020a2d4: 7d 76        	lui	a2, 1048575
8020a2d6: 1b 06 06 9c  	addiw	a2, a2, -1600
8020a2da: 22 96        	add	a2, a2, s0
8020a2dc: 0c e2        	sd	a1, 0(a2)
8020a2de: fd 75        	lui	a1, 1048575
8020a2e0: 9b 85 85 9d  	addiw	a1, a1, -1576
8020a2e4: a2 95        	add	a1, a1, s0
8020a2e6: 7d 76        	lui	a2, 1048575
8020a2e8: 1b 06 86 9c  	addiw	a2, a2, -1592
8020a2ec: 22 96        	add	a2, a2, s0
8020a2ee: 0c e2        	sd	a1, 0(a2)
8020a2f0: 93 05 00 02  	addi	a1, zero, 32
8020a2f4: 7d 76        	lui	a2, 1048575
8020a2f6: 1b 06 06 9d  	addiw	a2, a2, -1584
8020a2fa: 22 96        	add	a2, a2, s0
8020a2fc: 0c e2        	sd	a1, 0(a2)
;     writer.print(format, args) catch unreachable;
8020a2fe: fd 75        	lui	a1, 1048575
8020a300: 9b 85 85 9b  	addiw	a1, a1, -1608
8020a304: a2 95        	add	a1, a1, s0
8020a306: 88 c1        	sw	a0, 0(a1)
8020a308: 7d 75        	lui	a0, 1048575
8020a30a: 1b 05 05 9c  	addiw	a0, a0, -1600
8020a30e: 22 95        	add	a0, a0, s0
8020a310: f1 75        	lui	a1, 1048572
8020a312: 9b 85 05 43  	addiw	a1, a1, 1072
8020a316: a2 95        	add	a1, a1, s0
8020a318: 97 d0 00 00  	auipc	ra, 13
8020a31c: e7 80 20 82  	jalr	-2014(ra)
8020a320: f1 75        	lui	a1, 1048572
8020a322: 9b 85 05 18  	addiw	a1, a1, 384
8020a326: a2 95        	add	a1, a1, s0
8020a328: 8c 61        	ld	a1, 0(a1)
8020a32a: 7d 76        	lui	a2, 1048575
8020a32c: 1b 06 66 9b  	addiw	a2, a2, -1610
8020a330: 22 96        	add	a2, a2, s0
8020a332: 23 10 a6 00  	sh	a0, 0(a2)
8020a336: 41 66        	lui	a2, 16
8020a338: 7d 36        	addiw	a2, a2, -1
8020a33a: 71 8d        	and	a0, a0, a2
8020a33c: 71 76        	lui	a2, 1048572
8020a33e: 1b 06 86 18  	addiw	a2, a2, 392
8020a342: 22 96        	add	a2, a2, s0
8020a344: 08 e2        	sd	a0, 0(a2)
8020a346: 63 00 b5 02  	beq	a0, a1, 0x8020a366 <.LBB123_354+0x19c>
8020a34a: 09 a0        	j	0x8020a34c <.LBB123_354+0x182>
8020a34c: 71 75        	lui	a0, 1048572
8020a34e: 1b 05 85 18  	addiw	a0, a0, 392
8020a352: 22 95        	add	a0, a0, s0
8020a354: 0c 61        	ld	a1, 0(a0)
8020a356: 7d 75        	lui	a0, 1048575
8020a358: 1b 05 05 9c  	addiw	a0, a0, -1600
8020a35c: 22 95        	add	a0, a0, s0
8020a35e: 97 60 ff ff  	auipc	ra, 1048566
8020a362: e7 80 00 29  	jalr	656(ra)
;                                 } else if (string_eq(property_name, "interrupt-parent")) {
8020a366: 05 a0        	j	0x8020a386 <.LBB123_354+0x1bc>
;                                     self.parse_and_print_freq(property_value_descriptor);
8020a368: 71 75        	lui	a0, 1048572
8020a36a: 1b 05 05 32  	addiw	a0, a0, 800
8020a36e: 22 95        	add	a0, a0, s0
8020a370: 08 61        	ld	a0, 0(a0)
8020a372: f1 75        	lui	a1, 1048572
8020a374: 9b 85 05 5e  	addiw	a1, a1, 1504
8020a378: a2 95        	add	a1, a1, s0
8020a37a: 97 a0 00 00  	auipc	ra, 10
8020a37e: e7 80 e0 63  	jalr	1598(ra)
;                                 } else if (string_eq(property_name, "clock-frequency")) {
8020a382: 09 a0        	j	0x8020a384 <.LBB123_354+0x1ba>
;                                 } else if (string_eq(property_name, "interrupt-parent")) {
8020a384: 09 a0        	j	0x8020a386 <.LBB123_354+0x1bc>
;                                 if (string_eq(property_name, "interrupts")) {
8020a386: 6f 10 d0 04  	j	0x8020bbd2 <.LBB123_385+0x1e>
;     return std.mem.eql(u8, a, b);
8020a38a: 71 75        	lui	a0, 1048572
8020a38c: 1b 05 05 62  	addiw	a0, a0, 1568
8020a390: 22 95        	add	a0, a0, s0
8020a392: 08 61        	ld	a0, 0(a0)
8020a394: f5 75        	lui	a1, 1048573
8020a396: 9b 85 05 35  	addiw	a1, a1, 848
8020a39a: a2 95        	add	a1, a1, s0
8020a39c: 88 e1        	sd	a0, 0(a1)
8020a39e: 71 75        	lui	a0, 1048572
8020a3a0: 1b 05 85 61  	addiw	a0, a0, 1560
8020a3a4: 22 95        	add	a0, a0, s0
8020a3a6: 08 61        	ld	a0, 0(a0)
8020a3a8: f5 75        	lui	a1, 1048573
8020a3aa: 9b 85 85 34  	addiw	a1, a1, 840
8020a3ae: a2 95        	add	a1, a1, s0
8020a3b0: 88 e1        	sd	a0, 0(a1)

000000008020a3b2 <.LBB123_355>:
8020a3b2: 97 45 01 00  	auipc	a1, 20
8020a3b6: 93 85 65 d8  	addi	a1, a1, -634
;     return std.mem.eql(u8, a, b);
8020a3ba: 88 61        	ld	a0, 0(a1)
8020a3bc: 75 76        	lui	a2, 1048573
8020a3be: 1b 06 86 33  	addiw	a2, a2, 824
8020a3c2: 22 96        	add	a2, a2, s0
8020a3c4: 08 e2        	sd	a0, 0(a2)
8020a3c6: 88 65        	ld	a0, 8(a1)
8020a3c8: 75 76        	lui	a2, 1048573
8020a3ca: 1b 06 06 34  	addiw	a2, a2, 832
8020a3ce: 22 96        	add	a2, a2, s0
8020a3d0: 08 e2        	sd	a0, 0(a2)
8020a3d2: 71 75        	lui	a0, 1048572
8020a3d4: 1b 05 85 61  	addiw	a0, a0, 1560
8020a3d8: 22 95        	add	a0, a0, s0
8020a3da: 97 a0 00 00  	auipc	ra, 10
8020a3de: e7 80 a0 f4  	jalr	-182(ra)
8020a3e2: 2a 86        	mv	a2, a0
8020a3e4: 13 75 16 00  	andi	a0, a2, 1
8020a3e8: f5 75        	lui	a1, 1048573
8020a3ea: 9b 85 f5 35  	addiw	a1, a1, 863
8020a3ee: a2 95        	add	a1, a1, s0
8020a3f0: 23 80 a5 00  	sb	a0, 0(a1)
8020a3f4: 81 45        	mv	a1, zero
;                             } else if (string_eq(node_name, "poweroff") or string_eq(node_name, "reboot")) {
8020a3f6: f1 76        	lui	a3, 1048572
8020a3f8: 9b 86 86 17  	addiw	a3, a3, 376
8020a3fc: a2 96        	add	a3, a3, s0
8020a3fe: 90 e2        	sd	a2, 0(a3)
8020a400: 63 1d b5 06  	bne	a0, a1, 0x8020a47a <.LBB123_356+0x4c>
8020a404: 09 a0        	j	0x8020a406 <.LBB123_355+0x54>
;     return std.mem.eql(u8, a, b);
8020a406: 71 75        	lui	a0, 1048572
8020a408: 1b 05 05 62  	addiw	a0, a0, 1568
8020a40c: 22 95        	add	a0, a0, s0
8020a40e: 08 61        	ld	a0, 0(a0)
8020a410: f5 75        	lui	a1, 1048573
8020a412: 9b 85 85 32  	addiw	a1, a1, 808
8020a416: a2 95        	add	a1, a1, s0
8020a418: 88 e1        	sd	a0, 0(a1)
8020a41a: 71 75        	lui	a0, 1048572
8020a41c: 1b 05 85 61  	addiw	a0, a0, 1560
8020a420: 22 95        	add	a0, a0, s0
8020a422: 08 61        	ld	a0, 0(a0)
8020a424: f5 75        	lui	a1, 1048573
8020a426: 9b 85 05 32  	addiw	a1, a1, 800
8020a42a: a2 95        	add	a1, a1, s0
8020a42c: 88 e1        	sd	a0, 0(a1)

000000008020a42e <.LBB123_356>:
8020a42e: 97 45 01 00  	auipc	a1, 20
8020a432: 93 85 a5 d1  	addi	a1, a1, -742
;     return std.mem.eql(u8, a, b);
8020a436: 88 61        	ld	a0, 0(a1)
8020a438: 75 76        	lui	a2, 1048573
8020a43a: 1b 06 06 31  	addiw	a2, a2, 784
8020a43e: 22 96        	add	a2, a2, s0
8020a440: 08 e2        	sd	a0, 0(a2)
8020a442: 88 65        	ld	a0, 8(a1)
8020a444: 75 76        	lui	a2, 1048573
8020a446: 1b 06 86 31  	addiw	a2, a2, 792
8020a44a: 22 96        	add	a2, a2, s0
8020a44c: 08 e2        	sd	a0, 0(a2)
8020a44e: 71 75        	lui	a0, 1048572
8020a450: 1b 05 85 61  	addiw	a0, a0, 1560
8020a454: 22 95        	add	a0, a0, s0
8020a456: 97 a0 00 00  	auipc	ra, 10
8020a45a: e7 80 e0 ec  	jalr	-306(ra)
8020a45e: 93 75 15 00  	andi	a1, a0, 1
8020a462: 75 76        	lui	a2, 1048573
8020a464: 1b 06 76 33  	addiw	a2, a2, 823
8020a468: 22 96        	add	a2, a2, s0
8020a46a: 23 00 b6 00  	sb	a1, 0(a2)
;                             } else if (string_eq(node_name, "poweroff") or string_eq(node_name, "reboot")) {
8020a46e: f1 75        	lui	a1, 1048572
8020a470: 9b 85 85 17  	addiw	a1, a1, 376
8020a474: a2 95        	add	a1, a1, s0
8020a476: 88 e1        	sd	a0, 0(a1)
8020a478: 09 a0        	j	0x8020a47a <.LBB123_356+0x4c>
8020a47a: 71 75        	lui	a0, 1048572
8020a47c: 1b 05 85 17  	addiw	a0, a0, 376
8020a480: 22 95        	add	a0, a0, s0
8020a482: 08 61        	ld	a0, 0(a0)
8020a484: 05 89        	andi	a0, a0, 1
8020a486: 81 45        	mv	a1, zero
8020a488: 63 0d b5 3a  	beq	a0, a1, 0x8020a842 <.LBB123_360+0x26a>
8020a48c: 09 a0        	j	0x8020a48e <.LBB123_356+0x60>
;     return std.mem.eql(u8, a, b);
8020a48e: 71 75        	lui	a0, 1048572
8020a490: 1b 05 85 5d  	addiw	a0, a0, 1496
8020a494: 22 95        	add	a0, a0, s0
8020a496: 08 61        	ld	a0, 0(a0)
8020a498: f5 75        	lui	a1, 1048573
8020a49a: 9b 85 05 30  	addiw	a1, a1, 768
8020a49e: a2 95        	add	a1, a1, s0
8020a4a0: 88 e1        	sd	a0, 0(a1)
8020a4a2: 71 75        	lui	a0, 1048572
8020a4a4: 1b 05 05 5d  	addiw	a0, a0, 1488
8020a4a8: 22 95        	add	a0, a0, s0
8020a4aa: 08 61        	ld	a0, 0(a0)
8020a4ac: f5 75        	lui	a1, 1048573
8020a4ae: 9b 85 85 2f  	addiw	a1, a1, 760
8020a4b2: a2 95        	add	a1, a1, s0
8020a4b4: 88 e1        	sd	a0, 0(a1)

000000008020a4b6 <.LBB123_357>:
8020a4b6: 97 45 01 00  	auipc	a1, 20
8020a4ba: 93 85 25 ca  	addi	a1, a1, -862
;     return std.mem.eql(u8, a, b);
8020a4be: 88 61        	ld	a0, 0(a1)
8020a4c0: 75 76        	lui	a2, 1048573
8020a4c2: 1b 06 86 2e  	addiw	a2, a2, 744
8020a4c6: 22 96        	add	a2, a2, s0
8020a4c8: 08 e2        	sd	a0, 0(a2)
8020a4ca: 88 65        	ld	a0, 8(a1)
8020a4cc: 75 76        	lui	a2, 1048573
8020a4ce: 1b 06 06 2f  	addiw	a2, a2, 752
8020a4d2: 22 96        	add	a2, a2, s0
8020a4d4: 08 e2        	sd	a0, 0(a2)
8020a4d6: 71 75        	lui	a0, 1048572
8020a4d8: 1b 05 05 5d  	addiw	a0, a0, 1488
8020a4dc: 22 95        	add	a0, a0, s0
8020a4de: 97 a0 00 00  	auipc	ra, 10
8020a4e2: e7 80 60 e4  	jalr	-442(ra)
8020a4e6: 05 89        	andi	a0, a0, 1
8020a4e8: f5 75        	lui	a1, 1048573
8020a4ea: 9b 85 f5 30  	addiw	a1, a1, 783
8020a4ee: a2 95        	add	a1, a1, s0
8020a4f0: 23 80 a5 00  	sb	a0, 0(a1)
8020a4f4: 81 45        	mv	a1, zero
;                                 if (string_eq(property_name, "value")) {
8020a4f6: 63 19 b5 0e  	bne	a0, a1, 0x8020a5e8 <.LBB123_360+0x10>
8020a4fa: 09 a0        	j	0x8020a4fc <.LBB123_357+0x46>
;     return std.mem.eql(u8, a, b);
8020a4fc: 71 75        	lui	a0, 1048572
8020a4fe: 1b 05 85 5d  	addiw	a0, a0, 1496
8020a502: 22 95        	add	a0, a0, s0
8020a504: 08 61        	ld	a0, 0(a0)
8020a506: f5 75        	lui	a1, 1048573
8020a508: 9b 85 85 2d  	addiw	a1, a1, 728
8020a50c: a2 95        	add	a1, a1, s0
8020a50e: 88 e1        	sd	a0, 0(a1)
8020a510: 71 75        	lui	a0, 1048572
8020a512: 1b 05 05 5d  	addiw	a0, a0, 1488
8020a516: 22 95        	add	a0, a0, s0
8020a518: 08 61        	ld	a0, 0(a0)
8020a51a: f5 75        	lui	a1, 1048573
8020a51c: 9b 85 05 2d  	addiw	a1, a1, 720
8020a520: a2 95        	add	a1, a1, s0
8020a522: 88 e1        	sd	a0, 0(a1)

000000008020a524 <.LBB123_358>:
8020a524: 97 45 01 00  	auipc	a1, 20
8020a528: 93 85 45 c4  	addi	a1, a1, -956
;     return std.mem.eql(u8, a, b);
8020a52c: 88 61        	ld	a0, 0(a1)
8020a52e: 75 76        	lui	a2, 1048573
8020a530: 1b 06 06 2c  	addiw	a2, a2, 704
8020a534: 22 96        	add	a2, a2, s0
8020a536: 08 e2        	sd	a0, 0(a2)
8020a538: 88 65        	ld	a0, 8(a1)
8020a53a: 75 76        	lui	a2, 1048573
8020a53c: 1b 06 86 2c  	addiw	a2, a2, 712
8020a540: 22 96        	add	a2, a2, s0
8020a542: 08 e2        	sd	a0, 0(a2)
8020a544: 71 75        	lui	a0, 1048572
8020a546: 1b 05 05 5d  	addiw	a0, a0, 1488
8020a54a: 22 95        	add	a0, a0, s0
8020a54c: 97 a0 00 00  	auipc	ra, 10
8020a550: e7 80 80 dd  	jalr	-552(ra)
8020a554: 05 89        	andi	a0, a0, 1
8020a556: f5 75        	lui	a1, 1048573
8020a558: 9b 85 75 2e  	addiw	a1, a1, 743
8020a55c: a2 95        	add	a1, a1, s0
8020a55e: 23 80 a5 00  	sb	a0, 0(a1)
8020a562: 81 45        	mv	a1, zero
;                                 } else if (string_eq(property_name, "offset")) {
8020a564: 63 16 b5 14  	bne	a0, a1, 0x8020a6b0 <.LBB123_360+0xd8>
8020a568: 09 a0        	j	0x8020a56a <.LBB123_358+0x46>
;     return std.mem.eql(u8, a, b);
8020a56a: 71 75        	lui	a0, 1048572
8020a56c: 1b 05 85 5d  	addiw	a0, a0, 1496
8020a570: 22 95        	add	a0, a0, s0
8020a572: 08 61        	ld	a0, 0(a0)
8020a574: f5 75        	lui	a1, 1048573
8020a576: 9b 85 05 2b  	addiw	a1, a1, 688
8020a57a: a2 95        	add	a1, a1, s0
8020a57c: 88 e1        	sd	a0, 0(a1)
8020a57e: 71 75        	lui	a0, 1048572
8020a580: 1b 05 05 5d  	addiw	a0, a0, 1488
8020a584: 22 95        	add	a0, a0, s0
8020a586: 08 61        	ld	a0, 0(a0)
8020a588: f5 75        	lui	a1, 1048573
8020a58a: 9b 85 85 2a  	addiw	a1, a1, 680
8020a58e: a2 95        	add	a1, a1, s0
8020a590: 88 e1        	sd	a0, 0(a1)

000000008020a592 <.LBB123_359>:
8020a592: 97 45 01 00  	auipc	a1, 20
8020a596: 93 85 65 be  	addi	a1, a1, -1050
;     return std.mem.eql(u8, a, b);
8020a59a: 88 61        	ld	a0, 0(a1)
8020a59c: 75 76        	lui	a2, 1048573
8020a59e: 1b 06 86 29  	addiw	a2, a2, 664
8020a5a2: 22 96        	add	a2, a2, s0
8020a5a4: 08 e2        	sd	a0, 0(a2)
8020a5a6: 88 65        	ld	a0, 8(a1)
8020a5a8: 75 76        	lui	a2, 1048573
8020a5aa: 1b 06 06 2a  	addiw	a2, a2, 672
8020a5ae: 22 96        	add	a2, a2, s0
8020a5b0: 08 e2        	sd	a0, 0(a2)
8020a5b2: 71 75        	lui	a0, 1048572
8020a5b4: 1b 05 05 5d  	addiw	a0, a0, 1488
8020a5b8: 22 95        	add	a0, a0, s0
8020a5ba: 97 a0 00 00  	auipc	ra, 10
8020a5be: e7 80 a0 d6  	jalr	-662(ra)
8020a5c2: 05 89        	andi	a0, a0, 1
8020a5c4: f5 75        	lui	a1, 1048573
8020a5c6: 9b 85 f5 2b  	addiw	a1, a1, 703
8020a5ca: a2 95        	add	a1, a1, s0
8020a5cc: 23 80 a5 00  	sb	a0, 0(a1)
8020a5d0: 81 45        	mv	a1, zero
;                                 } else if (string_eq(property_name, "regmap")) {
8020a5d2: 63 12 b5 1a  	bne	a0, a1, 0x8020a776 <.LBB123_360+0x19e>
8020a5d6: 09 a0        	j	0x8020a5d8 <.LBB123_360>

000000008020a5d8 <.LBB123_360>:
;                                     TODO(@src());
8020a5d8: 17 45 01 00  	auipc	a0, 20
8020a5dc: 13 05 05 bb  	addi	a0, a0, -1104
8020a5e0: 97 60 ff ff  	auipc	ra, 1048566
8020a5e4: e7 80 20 bf  	jalr	-1038(ra)
;                                     const value = self.parse_int(u32);
8020a5e8: 71 75        	lui	a0, 1048572
8020a5ea: 1b 05 05 32  	addiw	a0, a0, 800
8020a5ee: 22 95        	add	a0, a0, s0
8020a5f0: 08 61        	ld	a0, 0(a0)
8020a5f2: 97 e0 ff ff  	auipc	ra, 1048574
8020a5f6: e7 80 e0 8d  	jalr	-1826(ra)
8020a5fa: f1 75        	lui	a1, 1048572
8020a5fc: 9b 85 c5 42  	addiw	a1, a1, 1068
8020a600: a2 95        	add	a1, a1, s0
8020a602: 88 c1        	sw	a0, 0(a1)
;                                     print("{}", .{value});
8020a604: f1 75        	lui	a1, 1048572
8020a606: 9b 85 85 42  	addiw	a1, a1, 1064
8020a60a: a2 95        	add	a1, a1, s0
8020a60c: 88 c1        	sw	a0, 0(a1)
8020a60e: 81 45        	mv	a1, zero
8020a610: 71 76        	lui	a2, 1048572
8020a612: 1b 06 86 16  	addiw	a2, a2, 360
8020a616: 22 96        	add	a2, a2, s0
8020a618: 0c e2        	sd	a1, 0(a2)
8020a61a: 7d 76        	lui	a2, 1048575
8020a61c: 1b 06 86 ae  	addiw	a2, a2, -1304
8020a620: 22 96        	add	a2, a2, s0
8020a622: 0c e2        	sd	a1, 0(a2)
8020a624: fd 75        	lui	a1, 1048575
8020a626: 9b 85 05 b0  	addiw	a1, a1, -1280
8020a62a: a2 95        	add	a1, a1, s0
8020a62c: 7d 76        	lui	a2, 1048575
8020a62e: 1b 06 06 af  	addiw	a2, a2, -1296
8020a632: 22 96        	add	a2, a2, s0
8020a634: 0c e2        	sd	a1, 0(a2)
8020a636: 93 05 00 02  	addi	a1, zero, 32
8020a63a: 7d 76        	lui	a2, 1048575
8020a63c: 1b 06 86 af  	addiw	a2, a2, -1288
8020a640: 22 96        	add	a2, a2, s0
8020a642: 0c e2        	sd	a1, 0(a2)
;     writer.print(format, args) catch unreachable;
8020a644: fd 75        	lui	a1, 1048575
8020a646: 9b 85 05 ae  	addiw	a1, a1, -1312
8020a64a: a2 95        	add	a1, a1, s0
8020a64c: 88 c1        	sw	a0, 0(a1)
8020a64e: 7d 75        	lui	a0, 1048575
8020a650: 1b 05 85 ae  	addiw	a0, a0, -1304
8020a654: 22 95        	add	a0, a0, s0
8020a656: f1 75        	lui	a1, 1048572
8020a658: 9b 85 85 42  	addiw	a1, a1, 1064
8020a65c: a2 95        	add	a1, a1, s0
8020a65e: 97 c0 00 00  	auipc	ra, 12
8020a662: e7 80 60 52  	jalr	1318(ra)
8020a666: f1 75        	lui	a1, 1048572
8020a668: 9b 85 85 16  	addiw	a1, a1, 360
8020a66c: a2 95        	add	a1, a1, s0
8020a66e: 8c 61        	ld	a1, 0(a1)
8020a670: 7d 76        	lui	a2, 1048575
8020a672: 1b 06 e6 ad  	addiw	a2, a2, -1314
8020a676: 22 96        	add	a2, a2, s0
8020a678: 23 10 a6 00  	sh	a0, 0(a2)
8020a67c: 41 66        	lui	a2, 16
8020a67e: 7d 36        	addiw	a2, a2, -1
8020a680: 71 8d        	and	a0, a0, a2
8020a682: 71 76        	lui	a2, 1048572
8020a684: 1b 06 06 17  	addiw	a2, a2, 368
8020a688: 22 96        	add	a2, a2, s0
8020a68a: 08 e2        	sd	a0, 0(a2)
8020a68c: 63 00 b5 02  	beq	a0, a1, 0x8020a6ac <.LBB123_360+0xd4>
8020a690: 09 a0        	j	0x8020a692 <.LBB123_360+0xba>
8020a692: 71 75        	lui	a0, 1048572
8020a694: 1b 05 05 17  	addiw	a0, a0, 368
8020a698: 22 95        	add	a0, a0, s0
8020a69a: 0c 61        	ld	a1, 0(a0)
8020a69c: 7d 75        	lui	a0, 1048575
8020a69e: 1b 05 85 ae  	addiw	a0, a0, -1304
8020a6a2: 22 95        	add	a0, a0, s0
8020a6a4: 97 60 ff ff  	auipc	ra, 1048566
8020a6a8: e7 80 a0 f4  	jalr	-182(ra)
;                                 if (string_eq(property_name, "value")) {
8020a6ac: 6f 10 80 52  	j	0x8020bbd4 <.LBB123_385+0x20>
;                                     const value = self.parse_int(u32);
8020a6b0: 71 75        	lui	a0, 1048572
8020a6b2: 1b 05 05 32  	addiw	a0, a0, 800
8020a6b6: 22 95        	add	a0, a0, s0
8020a6b8: 08 61        	ld	a0, 0(a0)
8020a6ba: 97 e0 ff ff  	auipc	ra, 1048574
8020a6be: e7 80 60 81  	jalr	-2026(ra)
8020a6c2: f1 75        	lui	a1, 1048572
8020a6c4: 9b 85 45 42  	addiw	a1, a1, 1060
8020a6c8: a2 95        	add	a1, a1, s0
8020a6ca: 88 c1        	sw	a0, 0(a1)
;                                     print("{}", .{value});
8020a6cc: f1 75        	lui	a1, 1048572
8020a6ce: 9b 85 05 42  	addiw	a1, a1, 1056
8020a6d2: a2 95        	add	a1, a1, s0
8020a6d4: 88 c1        	sw	a0, 0(a1)
8020a6d6: 81 45        	mv	a1, zero
8020a6d8: 71 76        	lui	a2, 1048572
8020a6da: 1b 06 86 15  	addiw	a2, a2, 344
8020a6de: 22 96        	add	a2, a2, s0
8020a6e0: 0c e2        	sd	a1, 0(a2)
8020a6e2: 7d 76        	lui	a2, 1048575
8020a6e4: 1b 06 06 c1  	addiw	a2, a2, -1008
8020a6e8: 22 96        	add	a2, a2, s0
8020a6ea: 0c e2        	sd	a1, 0(a2)
8020a6ec: fd 75        	lui	a1, 1048575
8020a6ee: 9b 85 85 c2  	addiw	a1, a1, -984
8020a6f2: a2 95        	add	a1, a1, s0
8020a6f4: 7d 76        	lui	a2, 1048575
8020a6f6: 1b 06 86 c1  	addiw	a2, a2, -1000
8020a6fa: 22 96        	add	a2, a2, s0
8020a6fc: 0c e2        	sd	a1, 0(a2)
8020a6fe: 93 05 00 02  	addi	a1, zero, 32
8020a702: 7d 76        	lui	a2, 1048575
8020a704: 1b 06 06 c2  	addiw	a2, a2, -992
8020a708: 22 96        	add	a2, a2, s0
8020a70a: 0c e2        	sd	a1, 0(a2)
;     writer.print(format, args) catch unreachable;
8020a70c: fd 75        	lui	a1, 1048575
8020a70e: 9b 85 85 c0  	addiw	a1, a1, -1016
8020a712: a2 95        	add	a1, a1, s0
8020a714: 88 c1        	sw	a0, 0(a1)
8020a716: 7d 75        	lui	a0, 1048575
8020a718: 1b 05 05 c1  	addiw	a0, a0, -1008
8020a71c: 22 95        	add	a0, a0, s0
8020a71e: f1 75        	lui	a1, 1048572
8020a720: 9b 85 05 42  	addiw	a1, a1, 1056
8020a724: a2 95        	add	a1, a1, s0
8020a726: 97 c0 00 00  	auipc	ra, 12
8020a72a: e7 80 80 4a  	jalr	1192(ra)
8020a72e: f1 75        	lui	a1, 1048572
8020a730: 9b 85 85 15  	addiw	a1, a1, 344
8020a734: a2 95        	add	a1, a1, s0
8020a736: 8c 61        	ld	a1, 0(a1)
8020a738: 7d 76        	lui	a2, 1048575
8020a73a: 1b 06 66 c0  	addiw	a2, a2, -1018
8020a73e: 22 96        	add	a2, a2, s0
8020a740: 23 10 a6 00  	sh	a0, 0(a2)
8020a744: 41 66        	lui	a2, 16
8020a746: 7d 36        	addiw	a2, a2, -1
8020a748: 71 8d        	and	a0, a0, a2
8020a74a: 71 76        	lui	a2, 1048572
8020a74c: 1b 06 06 16  	addiw	a2, a2, 352
8020a750: 22 96        	add	a2, a2, s0
8020a752: 08 e2        	sd	a0, 0(a2)
8020a754: 63 00 b5 02  	beq	a0, a1, 0x8020a774 <.LBB123_360+0x19c>
8020a758: 09 a0        	j	0x8020a75a <.LBB123_360+0x182>
8020a75a: 71 75        	lui	a0, 1048572
8020a75c: 1b 05 05 16  	addiw	a0, a0, 352
8020a760: 22 95        	add	a0, a0, s0
8020a762: 0c 61        	ld	a1, 0(a0)
8020a764: 7d 75        	lui	a0, 1048575
8020a766: 1b 05 05 c1  	addiw	a0, a0, -1008
8020a76a: 22 95        	add	a0, a0, s0
8020a76c: 97 60 ff ff  	auipc	ra, 1048566
8020a770: e7 80 20 e8  	jalr	-382(ra)
;                                 } else if (string_eq(property_name, "offset")) {
8020a774: e9 a0        	j	0x8020a83e <.LBB123_360+0x266>
;                                     const value = self.parse_int(u32);
8020a776: 71 75        	lui	a0, 1048572
8020a778: 1b 05 05 32  	addiw	a0, a0, 800
8020a77c: 22 95        	add	a0, a0, s0
8020a77e: 08 61        	ld	a0, 0(a0)
8020a780: 97 d0 ff ff  	auipc	ra, 1048573
8020a784: e7 80 00 75  	jalr	1872(ra)
8020a788: f1 75        	lui	a1, 1048572
8020a78a: 9b 85 c5 41  	addiw	a1, a1, 1052
8020a78e: a2 95        	add	a1, a1, s0
8020a790: 88 c1        	sw	a0, 0(a1)
;                                     print("{}", .{value});
8020a792: f1 75        	lui	a1, 1048572
8020a794: 9b 85 85 41  	addiw	a1, a1, 1048
8020a798: a2 95        	add	a1, a1, s0
8020a79a: 88 c1        	sw	a0, 0(a1)
8020a79c: 81 45        	mv	a1, zero
8020a79e: 71 76        	lui	a2, 1048572
8020a7a0: 1b 06 86 14  	addiw	a2, a2, 328
8020a7a4: 22 96        	add	a2, a2, s0
8020a7a6: 0c e2        	sd	a1, 0(a2)
8020a7a8: 7d 76        	lui	a2, 1048575
8020a7aa: 1b 06 86 d3  	addiw	a2, a2, -712
8020a7ae: 22 96        	add	a2, a2, s0
8020a7b0: 0c e2        	sd	a1, 0(a2)
8020a7b2: fd 75        	lui	a1, 1048575
8020a7b4: 9b 85 05 d5  	addiw	a1, a1, -688
8020a7b8: a2 95        	add	a1, a1, s0
8020a7ba: 7d 76        	lui	a2, 1048575
8020a7bc: 1b 06 06 d4  	addiw	a2, a2, -704
8020a7c0: 22 96        	add	a2, a2, s0
8020a7c2: 0c e2        	sd	a1, 0(a2)
8020a7c4: 93 05 00 02  	addi	a1, zero, 32
8020a7c8: 7d 76        	lui	a2, 1048575
8020a7ca: 1b 06 86 d4  	addiw	a2, a2, -696
8020a7ce: 22 96        	add	a2, a2, s0
8020a7d0: 0c e2        	sd	a1, 0(a2)
;     writer.print(format, args) catch unreachable;
8020a7d2: fd 75        	lui	a1, 1048575
8020a7d4: 9b 85 05 d3  	addiw	a1, a1, -720
8020a7d8: a2 95        	add	a1, a1, s0
8020a7da: 88 c1        	sw	a0, 0(a1)
8020a7dc: 7d 75        	lui	a0, 1048575
8020a7de: 1b 05 85 d3  	addiw	a0, a0, -712
8020a7e2: 22 95        	add	a0, a0, s0
8020a7e4: f1 75        	lui	a1, 1048572
8020a7e6: 9b 85 85 41  	addiw	a1, a1, 1048
8020a7ea: a2 95        	add	a1, a1, s0
8020a7ec: 97 c0 00 00  	auipc	ra, 12
8020a7f0: e7 80 c0 42  	jalr	1068(ra)
8020a7f4: f1 75        	lui	a1, 1048572
8020a7f6: 9b 85 85 14  	addiw	a1, a1, 328
8020a7fa: a2 95        	add	a1, a1, s0
8020a7fc: 8c 61        	ld	a1, 0(a1)
8020a7fe: 7d 76        	lui	a2, 1048575
8020a800: 1b 06 e6 d2  	addiw	a2, a2, -722
8020a804: 22 96        	add	a2, a2, s0
8020a806: 23 10 a6 00  	sh	a0, 0(a2)
8020a80a: 41 66        	lui	a2, 16
8020a80c: 7d 36        	addiw	a2, a2, -1
8020a80e: 71 8d        	and	a0, a0, a2
8020a810: 71 76        	lui	a2, 1048572
8020a812: 1b 06 06 15  	addiw	a2, a2, 336
8020a816: 22 96        	add	a2, a2, s0
8020a818: 08 e2        	sd	a0, 0(a2)
8020a81a: 63 00 b5 02  	beq	a0, a1, 0x8020a83a <.LBB123_360+0x262>
8020a81e: 09 a0        	j	0x8020a820 <.LBB123_360+0x248>
8020a820: 71 75        	lui	a0, 1048572
8020a822: 1b 05 05 15  	addiw	a0, a0, 336
8020a826: 22 95        	add	a0, a0, s0
8020a828: 0c 61        	ld	a1, 0(a0)
8020a82a: 7d 75        	lui	a0, 1048575
8020a82c: 1b 05 85 d3  	addiw	a0, a0, -712
8020a830: 22 95        	add	a0, a0, s0
8020a832: 97 60 ff ff  	auipc	ra, 1048566
8020a836: e7 80 c0 db  	jalr	-580(ra)
;                                 } else if (string_eq(property_name, "regmap")) {
8020a83a: 09 a0        	j	0x8020a83c <.LBB123_360+0x264>
;                                 } else if (string_eq(property_name, "offset")) {
8020a83c: 09 a0        	j	0x8020a83e <.LBB123_360+0x266>
;                                 if (string_eq(property_name, "value")) {
8020a83e: 6f 10 60 39  	j	0x8020bbd4 <.LBB123_385+0x20>
;     return std.mem.startsWith(u8, str, slice);
8020a842: 71 75        	lui	a0, 1048572
8020a844: 1b 05 05 62  	addiw	a0, a0, 1568
8020a848: 22 95        	add	a0, a0, s0
8020a84a: 08 61        	ld	a0, 0(a0)
8020a84c: f9 75        	lui	a1, 1048574
8020a84e: 9b 85 05 85  	addiw	a1, a1, -1968
8020a852: a2 95        	add	a1, a1, s0
8020a854: 88 e1        	sd	a0, 0(a1)
8020a856: 71 75        	lui	a0, 1048572
8020a858: 1b 05 85 61  	addiw	a0, a0, 1560
8020a85c: 22 95        	add	a0, a0, s0
8020a85e: 08 61        	ld	a0, 0(a0)
8020a860: f9 75        	lui	a1, 1048574
8020a862: 9b 85 85 84  	addiw	a1, a1, -1976
8020a866: a2 95        	add	a1, a1, s0
8020a868: 88 e1        	sd	a0, 0(a1)

000000008020a86a <.LBB123_361>:
8020a86a: 97 45 01 00  	auipc	a1, 20
8020a86e: 93 85 65 94  	addi	a1, a1, -1722
;     return std.mem.startsWith(u8, str, slice);
8020a872: 88 61        	ld	a0, 0(a1)
8020a874: 79 76        	lui	a2, 1048574
8020a876: 1b 06 86 83  	addiw	a2, a2, -1992
8020a87a: 22 96        	add	a2, a2, s0
8020a87c: 08 e2        	sd	a0, 0(a2)
8020a87e: 88 65        	ld	a0, 8(a1)
8020a880: 79 76        	lui	a2, 1048574
8020a882: 1b 06 06 84  	addiw	a2, a2, -1984
8020a886: 22 96        	add	a2, a2, s0
8020a888: 08 e2        	sd	a0, 0(a2)
8020a88a: 71 75        	lui	a0, 1048572
8020a88c: 1b 05 85 61  	addiw	a0, a0, 1560
8020a890: 22 95        	add	a0, a0, s0
8020a892: 97 c0 00 00  	auipc	ra, 12
8020a896: e7 80 c0 e9  	jalr	-356(ra)
8020a89a: 05 89        	andi	a0, a0, 1
8020a89c: f9 75        	lui	a1, 1048574
8020a89e: 9b 85 f5 85  	addiw	a1, a1, -1953
8020a8a2: a2 95        	add	a1, a1, s0
8020a8a4: 23 80 a5 00  	sb	a0, 0(a1)
8020a8a8: 81 45        	mv	a1, zero
;                             } else if (starts_with(node_name, "pci@")) {
8020a8aa: 63 06 b5 76  	beq	a0, a1, 0x8020b016 <.LBB123_368+0x4d2>
8020a8ae: 09 a0        	j	0x8020a8b0 <.LBB123_361+0x46>
;     return std.mem.eql(u8, a, b);
8020a8b0: 71 75        	lui	a0, 1048572
8020a8b2: 1b 05 85 5d  	addiw	a0, a0, 1496
8020a8b6: 22 95        	add	a0, a0, s0
8020a8b8: 08 61        	ld	a0, 0(a0)
8020a8ba: f5 75        	lui	a1, 1048573
8020a8bc: 9b 85 85 28  	addiw	a1, a1, 648
8020a8c0: a2 95        	add	a1, a1, s0
8020a8c2: 88 e1        	sd	a0, 0(a1)
8020a8c4: 71 75        	lui	a0, 1048572
8020a8c6: 1b 05 05 5d  	addiw	a0, a0, 1488
8020a8ca: 22 95        	add	a0, a0, s0
8020a8cc: 08 61        	ld	a0, 0(a0)
8020a8ce: f5 75        	lui	a1, 1048573
8020a8d0: 9b 85 05 28  	addiw	a1, a1, 640
8020a8d4: a2 95        	add	a1, a1, s0
8020a8d6: 88 e1        	sd	a0, 0(a1)

000000008020a8d8 <.LBB123_362>:
8020a8d8: 97 45 01 00  	auipc	a1, 20
8020a8dc: 93 85 85 8e  	addi	a1, a1, -1816
;     return std.mem.eql(u8, a, b);
8020a8e0: 88 61        	ld	a0, 0(a1)
8020a8e2: 75 76        	lui	a2, 1048573
8020a8e4: 1b 06 06 27  	addiw	a2, a2, 624
8020a8e8: 22 96        	add	a2, a2, s0
8020a8ea: 08 e2        	sd	a0, 0(a2)
8020a8ec: 88 65        	ld	a0, 8(a1)
8020a8ee: 75 76        	lui	a2, 1048573
8020a8f0: 1b 06 86 27  	addiw	a2, a2, 632
8020a8f4: 22 96        	add	a2, a2, s0
8020a8f6: 08 e2        	sd	a0, 0(a2)
8020a8f8: 71 75        	lui	a0, 1048572
8020a8fa: 1b 05 05 5d  	addiw	a0, a0, 1488
8020a8fe: 22 95        	add	a0, a0, s0
8020a900: 97 a0 00 00  	auipc	ra, 10
8020a904: e7 80 40 a2  	jalr	-1500(ra)
8020a908: 05 89        	andi	a0, a0, 1
8020a90a: f5 75        	lui	a1, 1048573
8020a90c: 9b 85 75 29  	addiw	a1, a1, 663
8020a910: a2 95        	add	a1, a1, s0
8020a912: 23 80 a5 00  	sb	a0, 0(a1)
8020a916: 81 45        	mv	a1, zero
;                                 if (string_eq(property_name, "interrupt-map-mask")) {
8020a918: 63 1e b5 22  	bne	a0, a1, 0x8020ab54 <.LBB123_368+0x10>
8020a91c: 09 a0        	j	0x8020a91e <.LBB123_362+0x46>
;     return std.mem.eql(u8, a, b);
8020a91e: 71 75        	lui	a0, 1048572
8020a920: 1b 05 85 5d  	addiw	a0, a0, 1496
8020a924: 22 95        	add	a0, a0, s0
8020a926: 08 61        	ld	a0, 0(a0)
8020a928: f5 75        	lui	a1, 1048573
8020a92a: 9b 85 05 26  	addiw	a1, a1, 608
8020a92e: a2 95        	add	a1, a1, s0
8020a930: 88 e1        	sd	a0, 0(a1)
8020a932: 71 75        	lui	a0, 1048572
8020a934: 1b 05 05 5d  	addiw	a0, a0, 1488
8020a938: 22 95        	add	a0, a0, s0
8020a93a: 08 61        	ld	a0, 0(a0)
8020a93c: f5 75        	lui	a1, 1048573
8020a93e: 9b 85 85 25  	addiw	a1, a1, 600
8020a942: a2 95        	add	a1, a1, s0
8020a944: 88 e1        	sd	a0, 0(a1)

000000008020a946 <.LBB123_363>:
8020a946: 97 45 01 00  	auipc	a1, 20
8020a94a: 93 85 a5 88  	addi	a1, a1, -1910
;     return std.mem.eql(u8, a, b);
8020a94e: 88 61        	ld	a0, 0(a1)
8020a950: 75 76        	lui	a2, 1048573
8020a952: 1b 06 86 24  	addiw	a2, a2, 584
8020a956: 22 96        	add	a2, a2, s0
8020a958: 08 e2        	sd	a0, 0(a2)
8020a95a: 88 65        	ld	a0, 8(a1)
8020a95c: 75 76        	lui	a2, 1048573
8020a95e: 1b 06 06 25  	addiw	a2, a2, 592
8020a962: 22 96        	add	a2, a2, s0
8020a964: 08 e2        	sd	a0, 0(a2)
8020a966: 71 75        	lui	a0, 1048572
8020a968: 1b 05 05 5d  	addiw	a0, a0, 1488
8020a96c: 22 95        	add	a0, a0, s0
8020a96e: 97 a0 00 00  	auipc	ra, 10
8020a972: e7 80 60 9b  	jalr	-1610(ra)
8020a976: 05 89        	andi	a0, a0, 1
8020a978: f5 75        	lui	a1, 1048573
8020a97a: 9b 85 f5 26  	addiw	a1, a1, 623
8020a97e: a2 95        	add	a1, a1, s0
8020a980: 23 80 a5 00  	sb	a0, 0(a1)
8020a984: 81 45        	mv	a1, zero
;                                 } else if (string_eq(property_name, "interrupt-map")) {
8020a986: 63 19 b5 2c  	bne	a0, a1, 0x8020ac58 <.LBB123_368+0x114>
8020a98a: 09 a0        	j	0x8020a98c <.LBB123_363+0x46>
;     return std.mem.eql(u8, a, b);
8020a98c: 71 75        	lui	a0, 1048572
8020a98e: 1b 05 85 5d  	addiw	a0, a0, 1496
8020a992: 22 95        	add	a0, a0, s0
8020a994: 08 61        	ld	a0, 0(a0)
8020a996: f5 75        	lui	a1, 1048573
8020a998: 9b 85 85 23  	addiw	a1, a1, 568
8020a99c: a2 95        	add	a1, a1, s0
8020a99e: 88 e1        	sd	a0, 0(a1)
8020a9a0: 71 75        	lui	a0, 1048572
8020a9a2: 1b 05 05 5d  	addiw	a0, a0, 1488
8020a9a6: 22 95        	add	a0, a0, s0
8020a9a8: 08 61        	ld	a0, 0(a0)
8020a9aa: f5 75        	lui	a1, 1048573
8020a9ac: 9b 85 05 23  	addiw	a1, a1, 560
8020a9b0: a2 95        	add	a1, a1, s0
8020a9b2: 88 e1        	sd	a0, 0(a1)

000000008020a9b4 <.LBB123_364>:
8020a9b4: 97 45 01 00  	auipc	a1, 20
8020a9b8: 93 85 c5 82  	addi	a1, a1, -2004
;     return std.mem.eql(u8, a, b);
8020a9bc: 88 61        	ld	a0, 0(a1)
8020a9be: 75 76        	lui	a2, 1048573
8020a9c0: 1b 06 06 22  	addiw	a2, a2, 544
8020a9c4: 22 96        	add	a2, a2, s0
8020a9c6: 08 e2        	sd	a0, 0(a2)
8020a9c8: 88 65        	ld	a0, 8(a1)
8020a9ca: 75 76        	lui	a2, 1048573
8020a9cc: 1b 06 86 22  	addiw	a2, a2, 552
8020a9d0: 22 96        	add	a2, a2, s0
8020a9d2: 08 e2        	sd	a0, 0(a2)
8020a9d4: 71 75        	lui	a0, 1048572
8020a9d6: 1b 05 05 5d  	addiw	a0, a0, 1488
8020a9da: 22 95        	add	a0, a0, s0
8020a9dc: 97 a0 00 00  	auipc	ra, 10
8020a9e0: e7 80 80 94  	jalr	-1720(ra)
8020a9e4: 05 89        	andi	a0, a0, 1
8020a9e6: f5 75        	lui	a1, 1048573
8020a9e8: 9b 85 75 24  	addiw	a1, a1, 583
8020a9ec: a2 95        	add	a1, a1, s0
8020a9ee: 23 80 a5 00  	sb	a0, 0(a1)
8020a9f2: 81 45        	mv	a1, zero
;                                 } else if (string_eq(property_name, "bus-range")) {
8020a9f4: 63 11 b5 2a  	bne	a0, a1, 0x8020ac96 <.LBB123_368+0x152>
8020a9f8: 09 a0        	j	0x8020a9fa <.LBB123_364+0x46>
;     return std.mem.eql(u8, a, b);
8020a9fa: 71 75        	lui	a0, 1048572
8020a9fc: 1b 05 85 5d  	addiw	a0, a0, 1496
8020aa00: 22 95        	add	a0, a0, s0
8020aa02: 08 61        	ld	a0, 0(a0)
8020aa04: f5 75        	lui	a1, 1048573
8020aa06: 9b 85 05 21  	addiw	a1, a1, 528
8020aa0a: a2 95        	add	a1, a1, s0
8020aa0c: 88 e1        	sd	a0, 0(a1)
8020aa0e: 71 75        	lui	a0, 1048572
8020aa10: 1b 05 05 5d  	addiw	a0, a0, 1488
8020aa14: 22 95        	add	a0, a0, s0
8020aa16: 08 61        	ld	a0, 0(a0)
8020aa18: f5 75        	lui	a1, 1048573
8020aa1a: 9b 85 85 20  	addiw	a1, a1, 520
8020aa1e: a2 95        	add	a1, a1, s0
8020aa20: 88 e1        	sd	a0, 0(a1)

000000008020aa22 <.LBB123_365>:
8020aa22: 97 35 01 00  	auipc	a1, 19
8020aa26: 93 85 e5 7c  	addi	a1, a1, 1998
;     return std.mem.eql(u8, a, b);
8020aa2a: 88 61        	ld	a0, 0(a1)
8020aa2c: 75 76        	lui	a2, 1048573
8020aa2e: 1b 06 86 1f  	addiw	a2, a2, 504
8020aa32: 22 96        	add	a2, a2, s0
8020aa34: 08 e2        	sd	a0, 0(a2)
8020aa36: 88 65        	ld	a0, 8(a1)
8020aa38: 75 76        	lui	a2, 1048573
8020aa3a: 1b 06 06 20  	addiw	a2, a2, 512
8020aa3e: 22 96        	add	a2, a2, s0
8020aa40: 08 e2        	sd	a0, 0(a2)
8020aa42: 71 75        	lui	a0, 1048572
8020aa44: 1b 05 05 5d  	addiw	a0, a0, 1488
8020aa48: 22 95        	add	a0, a0, s0
8020aa4a: 97 a0 00 00  	auipc	ra, 10
8020aa4e: e7 80 a0 8d  	jalr	-1830(ra)
8020aa52: 05 89        	andi	a0, a0, 1
8020aa54: f5 75        	lui	a1, 1048573
8020aa56: 9b 85 f5 21  	addiw	a1, a1, 543
8020aa5a: a2 95        	add	a1, a1, s0
8020aa5c: 23 80 a5 00  	sb	a0, 0(a1)
8020aa60: 81 45        	mv	a1, zero
;                                 } else if (string_eq(property_name, "linux,pci-domain")) {
8020aa62: 63 1d b5 2e  	bne	a0, a1, 0x8020ad5c <.LBB123_368+0x218>
8020aa66: 09 a0        	j	0x8020aa68 <.LBB123_365+0x46>
;     return std.mem.eql(u8, a, b);
8020aa68: 71 75        	lui	a0, 1048572
8020aa6a: 1b 05 85 5d  	addiw	a0, a0, 1496
8020aa6e: 22 95        	add	a0, a0, s0
8020aa70: 08 61        	ld	a0, 0(a0)
8020aa72: f5 75        	lui	a1, 1048573
8020aa74: 9b 85 85 1e  	addiw	a1, a1, 488
8020aa78: a2 95        	add	a1, a1, s0
8020aa7a: 88 e1        	sd	a0, 0(a1)
8020aa7c: 71 75        	lui	a0, 1048572
8020aa7e: 1b 05 05 5d  	addiw	a0, a0, 1488
8020aa82: 22 95        	add	a0, a0, s0
8020aa84: 08 61        	ld	a0, 0(a0)
8020aa86: f5 75        	lui	a1, 1048573
8020aa88: 9b 85 05 1e  	addiw	a1, a1, 480
8020aa8c: a2 95        	add	a1, a1, s0
8020aa8e: 88 e1        	sd	a0, 0(a1)

000000008020aa90 <.LBB123_366>:
8020aa90: 97 35 01 00  	auipc	a1, 19
8020aa94: 93 85 05 77  	addi	a1, a1, 1904
;     return std.mem.eql(u8, a, b);
8020aa98: 88 61        	ld	a0, 0(a1)
8020aa9a: 75 76        	lui	a2, 1048573
8020aa9c: 1b 06 06 1d  	addiw	a2, a2, 464
8020aaa0: 22 96        	add	a2, a2, s0
8020aaa2: 08 e2        	sd	a0, 0(a2)
8020aaa4: 88 65        	ld	a0, 8(a1)
8020aaa6: 75 76        	lui	a2, 1048573
8020aaa8: 1b 06 86 1d  	addiw	a2, a2, 472
8020aaac: 22 96        	add	a2, a2, s0
8020aaae: 08 e2        	sd	a0, 0(a2)
8020aab0: 71 75        	lui	a0, 1048572
8020aab2: 1b 05 05 5d  	addiw	a0, a0, 1488
8020aab6: 22 95        	add	a0, a0, s0
8020aab8: 97 a0 00 00  	auipc	ra, 10
8020aabc: e7 80 c0 86  	jalr	-1940(ra)
8020aac0: 05 89        	andi	a0, a0, 1
8020aac2: f5 75        	lui	a1, 1048573
8020aac4: 9b 85 75 1f  	addiw	a1, a1, 503
8020aac8: a2 95        	add	a1, a1, s0
8020aaca: 23 80 a5 00  	sb	a0, 0(a1)
8020aace: 81 45        	mv	a1, zero
;                                 } else if (string_eq(property_name, "device_type")) {
8020aad0: 63 19 b5 34  	bne	a0, a1, 0x8020ae22 <.LBB123_368+0x2de>
8020aad4: 09 a0        	j	0x8020aad6 <.LBB123_366+0x46>
;     return std.mem.eql(u8, a, b);
8020aad6: 71 75        	lui	a0, 1048572
8020aad8: 1b 05 85 5d  	addiw	a0, a0, 1496
8020aadc: 22 95        	add	a0, a0, s0
8020aade: 08 61        	ld	a0, 0(a0)
8020aae0: f5 75        	lui	a1, 1048573
8020aae2: 9b 85 05 1c  	addiw	a1, a1, 448
8020aae6: a2 95        	add	a1, a1, s0
8020aae8: 88 e1        	sd	a0, 0(a1)
8020aaea: 71 75        	lui	a0, 1048572
8020aaec: 1b 05 05 5d  	addiw	a0, a0, 1488
8020aaf0: 22 95        	add	a0, a0, s0
8020aaf2: 08 61        	ld	a0, 0(a0)
8020aaf4: f5 75        	lui	a1, 1048573
8020aaf6: 9b 85 85 1b  	addiw	a1, a1, 440
8020aafa: a2 95        	add	a1, a1, s0
8020aafc: 88 e1        	sd	a0, 0(a1)

000000008020aafe <.LBB123_367>:
8020aafe: 97 35 01 00  	auipc	a1, 19
8020ab02: 93 85 25 71  	addi	a1, a1, 1810
;     return std.mem.eql(u8, a, b);
8020ab06: 88 61        	ld	a0, 0(a1)
8020ab08: 75 76        	lui	a2, 1048573
8020ab0a: 1b 06 86 1a  	addiw	a2, a2, 424
8020ab0e: 22 96        	add	a2, a2, s0
8020ab10: 08 e2        	sd	a0, 0(a2)
8020ab12: 88 65        	ld	a0, 8(a1)
8020ab14: 75 76        	lui	a2, 1048573
8020ab16: 1b 06 06 1b  	addiw	a2, a2, 432
8020ab1a: 22 96        	add	a2, a2, s0
8020ab1c: 08 e2        	sd	a0, 0(a2)
8020ab1e: 71 75        	lui	a0, 1048572
8020ab20: 1b 05 05 5d  	addiw	a0, a0, 1488
8020ab24: 22 95        	add	a0, a0, s0
8020ab26: 97 90 00 00  	auipc	ra, 9
8020ab2a: e7 80 e0 7f  	jalr	2046(ra)
8020ab2e: 05 89        	andi	a0, a0, 1
8020ab30: f5 75        	lui	a1, 1048573
8020ab32: 9b 85 f5 1c  	addiw	a1, a1, 463
8020ab36: a2 95        	add	a1, a1, s0
8020ab38: 23 80 a5 00  	sb	a0, 0(a1)
8020ab3c: 81 45        	mv	a1, zero
;                                 } else if (string_eq(property_name, "#interrupt-cells")) {
8020ab3e: 63 1c b5 3c  	bne	a0, a1, 0x8020af16 <.LBB123_368+0x3d2>
8020ab42: 09 a0        	j	0x8020ab44 <.LBB123_368>

000000008020ab44 <.LBB123_368>:
;                                     TODO(@src());
8020ab44: 17 35 01 00  	auipc	a0, 19
8020ab48: 13 05 c5 6d  	addi	a0, a0, 1756
8020ab4c: 97 50 ff ff  	auipc	ra, 1048565
8020ab50: e7 80 60 68  	jalr	1670(ra)
;                                     const value = self.parse_int(u64);
8020ab54: 71 75        	lui	a0, 1048572
8020ab56: 1b 05 05 32  	addiw	a0, a0, 800
8020ab5a: 22 95        	add	a0, a0, s0
8020ab5c: 08 61        	ld	a0, 0(a0)
8020ab5e: 97 a0 00 00  	auipc	ra, 10
8020ab62: e7 80 60 d9  	jalr	-618(ra)
8020ab66: f1 75        	lui	a1, 1048572
8020ab68: 9b 85 05 41  	addiw	a1, a1, 1040
8020ab6c: a2 95        	add	a1, a1, s0
8020ab6e: 88 e1        	sd	a0, 0(a1)
;                                     const value2 = self.parse_int(u64);
8020ab70: 71 75        	lui	a0, 1048572
8020ab72: 1b 05 05 32  	addiw	a0, a0, 800
8020ab76: 22 95        	add	a0, a0, s0
8020ab78: 08 61        	ld	a0, 0(a0)
8020ab7a: 97 a0 00 00  	auipc	ra, 10
8020ab7e: e7 80 a0 d7  	jalr	-646(ra)
8020ab82: aa 85        	mv	a1, a0
8020ab84: 71 75        	lui	a0, 1048572
8020ab86: 1b 05 85 40  	addiw	a0, a0, 1032
8020ab8a: 22 95        	add	a0, a0, s0
8020ab8c: 0c e1        	sd	a1, 0(a0)
;                                     print("0x{x}, 0x{x}", .{ value, value2 });
8020ab8e: 71 75        	lui	a0, 1048572
8020ab90: 1b 05 05 41  	addiw	a0, a0, 1040
8020ab94: 22 95        	add	a0, a0, s0
8020ab96: 08 61        	ld	a0, 0(a0)
8020ab98: 71 76        	lui	a2, 1048572
8020ab9a: 1b 06 86 3f  	addiw	a2, a2, 1016
8020ab9e: 22 96        	add	a2, a2, s0
8020aba0: 08 e2        	sd	a0, 0(a2)
8020aba2: 71 76        	lui	a2, 1048572
8020aba4: 1b 06 06 40  	addiw	a2, a2, 1024
8020aba8: 22 96        	add	a2, a2, s0
8020abaa: 0c e2        	sd	a1, 0(a2)
8020abac: 01 46        	mv	a2, zero
8020abae: f1 76        	lui	a3, 1048572
8020abb0: 9b 86 86 13  	addiw	a3, a3, 312
8020abb4: a2 96        	add	a3, a3, s0
8020abb6: 90 e2        	sd	a2, 0(a3)
8020abb8: fd 76        	lui	a3, 1048575
8020abba: 9b 86 86 e6  	addiw	a3, a3, -408
8020abbe: a2 96        	add	a3, a3, s0
8020abc0: 90 e2        	sd	a2, 0(a3)
8020abc2: 7d 76        	lui	a2, 1048575
8020abc4: 1b 06 06 e8  	addiw	a2, a2, -384
8020abc8: 22 96        	add	a2, a2, s0
8020abca: fd 76        	lui	a3, 1048575
8020abcc: 9b 86 06 e7  	addiw	a3, a3, -400
8020abd0: a2 96        	add	a3, a3, s0
8020abd2: 90 e2        	sd	a2, 0(a3)
8020abd4: 13 06 00 02  	addi	a2, zero, 32
8020abd8: fd 76        	lui	a3, 1048575
8020abda: 9b 86 86 e7  	addiw	a3, a3, -392
8020abde: a2 96        	add	a3, a3, s0
8020abe0: 90 e2        	sd	a2, 0(a3)
;     writer.print(format, args) catch unreachable;
8020abe2: 7d 76        	lui	a2, 1048575
8020abe4: 1b 06 06 e6  	addiw	a2, a2, -416
8020abe8: 22 96        	add	a2, a2, s0
8020abea: 0c e2        	sd	a1, 0(a2)
8020abec: fd 75        	lui	a1, 1048575
8020abee: 9b 85 85 e5  	addiw	a1, a1, -424
8020abf2: a2 95        	add	a1, a1, s0
8020abf4: 88 e1        	sd	a0, 0(a1)
8020abf6: 7d 75        	lui	a0, 1048575
8020abf8: 1b 05 85 e6  	addiw	a0, a0, -408
8020abfc: 22 95        	add	a0, a0, s0
8020abfe: f1 75        	lui	a1, 1048572
8020ac00: 9b 85 85 3f  	addiw	a1, a1, 1016
8020ac04: a2 95        	add	a1, a1, s0
8020ac06: 97 c0 00 00  	auipc	ra, 12
8020ac0a: e7 80 c0 05  	jalr	92(ra)
8020ac0e: f1 75        	lui	a1, 1048572
8020ac10: 9b 85 85 13  	addiw	a1, a1, 312
8020ac14: a2 95        	add	a1, a1, s0
8020ac16: 8c 61        	ld	a1, 0(a1)
8020ac18: 7d 76        	lui	a2, 1048575
8020ac1a: 1b 06 66 e5  	addiw	a2, a2, -426
8020ac1e: 22 96        	add	a2, a2, s0
8020ac20: 23 10 a6 00  	sh	a0, 0(a2)
8020ac24: 41 66        	lui	a2, 16
8020ac26: 7d 36        	addiw	a2, a2, -1
8020ac28: 71 8d        	and	a0, a0, a2
8020ac2a: 71 76        	lui	a2, 1048572
8020ac2c: 1b 06 06 14  	addiw	a2, a2, 320
8020ac30: 22 96        	add	a2, a2, s0
8020ac32: 08 e2        	sd	a0, 0(a2)
8020ac34: 63 00 b5 02  	beq	a0, a1, 0x8020ac54 <.LBB123_368+0x110>
8020ac38: 09 a0        	j	0x8020ac3a <.LBB123_368+0xf6>
8020ac3a: 71 75        	lui	a0, 1048572
8020ac3c: 1b 05 05 14  	addiw	a0, a0, 320
8020ac40: 22 95        	add	a0, a0, s0
8020ac42: 0c 61        	ld	a1, 0(a0)
8020ac44: 7d 75        	lui	a0, 1048575
8020ac46: 1b 05 85 e6  	addiw	a0, a0, -408
8020ac4a: 22 95        	add	a0, a0, s0
8020ac4c: 97 60 ff ff  	auipc	ra, 1048566
8020ac50: e7 80 20 9a  	jalr	-1630(ra)
;                                 if (string_eq(property_name, "interrupt-map-mask")) {
8020ac54: 6f 00 30 78  	j	0x8020bbd6 <.LBB123_385+0x22>
;                                     self.i += property_value_descriptor.len;
8020ac58: 71 75        	lui	a0, 1048572
8020ac5a: 1b 05 05 32  	addiw	a0, a0, 800
8020ac5e: 22 95        	add	a0, a0, s0
8020ac60: 08 61        	ld	a0, 0(a0)
8020ac62: 93 05 05 01  	addi	a1, a0, 16
8020ac66: 71 76        	lui	a2, 1048572
8020ac68: 1b 06 86 12  	addiw	a2, a2, 296
8020ac6c: 22 96        	add	a2, a2, s0
8020ac6e: 0c e2        	sd	a1, 0(a2)
8020ac70: 0c 69        	ld	a1, 16(a0)
8020ac72: 71 75        	lui	a0, 1048572
8020ac74: 1b 05 05 5e  	addiw	a0, a0, 1504
8020ac78: 22 95        	add	a0, a0, s0
8020ac7a: 03 65 05 00  	lwu	a0, 0(a0)
8020ac7e: 2e 95        	add	a0, a0, a1
8020ac80: 71 76        	lui	a2, 1048572
8020ac82: 1b 06 06 13  	addiw	a2, a2, 304
8020ac86: 22 96        	add	a2, a2, s0
8020ac88: 08 e2        	sd	a0, 0(a2)
8020ac8a: 63 74 b5 00  	bgeu	a0, a1, 0x8020ac92 <.LBB123_368+0x14e>
8020ac8e: 6f 10 e0 61  	j	0x8020c2ac <.LBB123_399>
8020ac92: 6f 10 c0 62  	j	0x8020c2be <.LBB123_399+0x12>
;                                     const value = self.parse_int(u64);
8020ac96: 71 75        	lui	a0, 1048572
8020ac98: 1b 05 05 32  	addiw	a0, a0, 800
8020ac9c: 22 95        	add	a0, a0, s0
8020ac9e: 08 61        	ld	a0, 0(a0)
8020aca0: 97 a0 00 00  	auipc	ra, 10
8020aca4: e7 80 40 c5  	jalr	-940(ra)
8020aca8: f1 75        	lui	a1, 1048572
8020acaa: 9b 85 05 3f  	addiw	a1, a1, 1008
8020acae: a2 95        	add	a1, a1, s0
8020acb0: 88 e1        	sd	a0, 0(a1)
;                                     print("{}", .{value});
8020acb2: f1 75        	lui	a1, 1048572
8020acb4: 9b 85 85 3e  	addiw	a1, a1, 1000
8020acb8: a2 95        	add	a1, a1, s0
8020acba: 88 e1        	sd	a0, 0(a1)
8020acbc: 81 45        	mv	a1, zero
8020acbe: 71 76        	lui	a2, 1048572
8020acc0: 1b 06 86 11  	addiw	a2, a2, 280
8020acc4: 22 96        	add	a2, a2, s0
8020acc6: 0c e2        	sd	a1, 0(a2)
8020acc8: 7d 76        	lui	a2, 1048575
8020acca: 1b 06 06 f9  	addiw	a2, a2, -112
8020acce: 22 96        	add	a2, a2, s0
8020acd0: 0c e2        	sd	a1, 0(a2)
8020acd2: fd 75        	lui	a1, 1048575
8020acd4: 9b 85 85 fa  	addiw	a1, a1, -88
8020acd8: a2 95        	add	a1, a1, s0
8020acda: 7d 76        	lui	a2, 1048575
8020acdc: 1b 06 86 f9  	addiw	a2, a2, -104
8020ace0: 22 96        	add	a2, a2, s0
8020ace2: 0c e2        	sd	a1, 0(a2)
8020ace4: 93 05 00 02  	addi	a1, zero, 32
8020ace8: 7d 76        	lui	a2, 1048575
8020acea: 1b 06 06 fa  	addiw	a2, a2, -96
8020acee: 22 96        	add	a2, a2, s0
8020acf0: 0c e2        	sd	a1, 0(a2)
;     writer.print(format, args) catch unreachable;
8020acf2: fd 75        	lui	a1, 1048575
8020acf4: 9b 85 85 f8  	addiw	a1, a1, -120
8020acf8: a2 95        	add	a1, a1, s0
8020acfa: 88 e1        	sd	a0, 0(a1)
8020acfc: 7d 75        	lui	a0, 1048575
8020acfe: 1b 05 05 f9  	addiw	a0, a0, -112
8020ad02: 22 95        	add	a0, a0, s0
8020ad04: f1 75        	lui	a1, 1048572
8020ad06: 9b 85 85 3e  	addiw	a1, a1, 1000
8020ad0a: a2 95        	add	a1, a1, s0
8020ad0c: 97 c0 00 00  	auipc	ra, 12
8020ad10: e7 80 60 fa  	jalr	-90(ra)
8020ad14: f1 75        	lui	a1, 1048572
8020ad16: 9b 85 85 11  	addiw	a1, a1, 280
8020ad1a: a2 95        	add	a1, a1, s0
8020ad1c: 8c 61        	ld	a1, 0(a1)
8020ad1e: 7d 76        	lui	a2, 1048575
8020ad20: 1b 06 66 f8  	addiw	a2, a2, -122
8020ad24: 22 96        	add	a2, a2, s0
8020ad26: 23 10 a6 00  	sh	a0, 0(a2)
8020ad2a: 41 66        	lui	a2, 16
8020ad2c: 7d 36        	addiw	a2, a2, -1
8020ad2e: 71 8d        	and	a0, a0, a2
8020ad30: 71 76        	lui	a2, 1048572
8020ad32: 1b 06 06 12  	addiw	a2, a2, 288
8020ad36: 22 96        	add	a2, a2, s0
8020ad38: 08 e2        	sd	a0, 0(a2)
8020ad3a: 63 00 b5 02  	beq	a0, a1, 0x8020ad5a <.LBB123_368+0x216>
8020ad3e: 09 a0        	j	0x8020ad40 <.LBB123_368+0x1fc>
8020ad40: 71 75        	lui	a0, 1048572
8020ad42: 1b 05 05 12  	addiw	a0, a0, 288
8020ad46: 22 95        	add	a0, a0, s0
8020ad48: 0c 61        	ld	a1, 0(a0)
8020ad4a: 7d 75        	lui	a0, 1048575
8020ad4c: 1b 05 05 f9  	addiw	a0, a0, -112
8020ad50: 22 95        	add	a0, a0, s0
8020ad52: 97 60 ff ff  	auipc	ra, 1048566
8020ad56: e7 80 c0 89  	jalr	-1892(ra)
;                                 } else if (string_eq(property_name, "bus-range")) {
8020ad5a: 5d ac        	j	0x8020b010 <.LBB123_368+0x4cc>
;                                     const value = self.parse_int(u32);
8020ad5c: 71 75        	lui	a0, 1048572
8020ad5e: 1b 05 05 32  	addiw	a0, a0, 800
8020ad62: 22 95        	add	a0, a0, s0
8020ad64: 08 61        	ld	a0, 0(a0)
8020ad66: 97 d0 ff ff  	auipc	ra, 1048573
8020ad6a: e7 80 a0 16  	jalr	362(ra)
8020ad6e: f1 75        	lui	a1, 1048572
8020ad70: 9b 85 45 3e  	addiw	a1, a1, 996
8020ad74: a2 95        	add	a1, a1, s0
8020ad76: 88 c1        	sw	a0, 0(a1)
;                                     print("{}", .{value});
8020ad78: f1 75        	lui	a1, 1048572
8020ad7a: 9b 85 05 3e  	addiw	a1, a1, 992
8020ad7e: a2 95        	add	a1, a1, s0
8020ad80: 88 c1        	sw	a0, 0(a1)
8020ad82: 81 45        	mv	a1, zero
8020ad84: 71 76        	lui	a2, 1048572
8020ad86: 1b 06 86 10  	addiw	a2, a2, 264
8020ad8a: 22 96        	add	a2, a2, s0
8020ad8c: 0c e2        	sd	a1, 0(a2)
8020ad8e: 7d 76        	lui	a2, 1048575
8020ad90: 1b 06 86 0b  	addiw	a2, a2, 184
8020ad94: 22 96        	add	a2, a2, s0
8020ad96: 0c e2        	sd	a1, 0(a2)
8020ad98: fd 75        	lui	a1, 1048575
8020ad9a: 9b 85 05 0d  	addiw	a1, a1, 208
8020ad9e: a2 95        	add	a1, a1, s0
8020ada0: 7d 76        	lui	a2, 1048575
8020ada2: 1b 06 06 0c  	addiw	a2, a2, 192
8020ada6: 22 96        	add	a2, a2, s0
8020ada8: 0c e2        	sd	a1, 0(a2)
8020adaa: 93 05 00 02  	addi	a1, zero, 32
8020adae: 7d 76        	lui	a2, 1048575
8020adb0: 1b 06 86 0c  	addiw	a2, a2, 200
8020adb4: 22 96        	add	a2, a2, s0
8020adb6: 0c e2        	sd	a1, 0(a2)
;     writer.print(format, args) catch unreachable;
8020adb8: fd 75        	lui	a1, 1048575
8020adba: 9b 85 05 0b  	addiw	a1, a1, 176
8020adbe: a2 95        	add	a1, a1, s0
8020adc0: 88 c1        	sw	a0, 0(a1)
8020adc2: 7d 75        	lui	a0, 1048575
8020adc4: 1b 05 85 0b  	addiw	a0, a0, 184
8020adc8: 22 95        	add	a0, a0, s0
8020adca: f1 75        	lui	a1, 1048572
8020adcc: 9b 85 05 3e  	addiw	a1, a1, 992
8020add0: a2 95        	add	a1, a1, s0
8020add2: 97 c0 00 00  	auipc	ra, 12
8020add6: e7 80 a0 f2  	jalr	-214(ra)
8020adda: f1 75        	lui	a1, 1048572
8020addc: 9b 85 85 10  	addiw	a1, a1, 264
8020ade0: a2 95        	add	a1, a1, s0
8020ade2: 8c 61        	ld	a1, 0(a1)
8020ade4: 7d 76        	lui	a2, 1048575
8020ade6: 1b 06 e6 0a  	addiw	a2, a2, 174
8020adea: 22 96        	add	a2, a2, s0
8020adec: 23 10 a6 00  	sh	a0, 0(a2)
8020adf0: 41 66        	lui	a2, 16
8020adf2: 7d 36        	addiw	a2, a2, -1
8020adf4: 71 8d        	and	a0, a0, a2
8020adf6: 71 76        	lui	a2, 1048572
8020adf8: 1b 06 06 11  	addiw	a2, a2, 272
8020adfc: 22 96        	add	a2, a2, s0
8020adfe: 08 e2        	sd	a0, 0(a2)
8020ae00: 63 00 b5 02  	beq	a0, a1, 0x8020ae20 <.LBB123_368+0x2dc>
8020ae04: 09 a0        	j	0x8020ae06 <.LBB123_368+0x2c2>
8020ae06: 71 75        	lui	a0, 1048572
8020ae08: 1b 05 05 11  	addiw	a0, a0, 272
8020ae0c: 22 95        	add	a0, a0, s0
8020ae0e: 0c 61        	ld	a1, 0(a0)
8020ae10: 7d 75        	lui	a0, 1048575
8020ae12: 1b 05 85 0b  	addiw	a0, a0, 184
8020ae16: 22 95        	add	a0, a0, s0
8020ae18: 97 50 ff ff  	auipc	ra, 1048565
8020ae1c: e7 80 60 7d  	jalr	2006(ra)
;                                 } else if (string_eq(property_name, "linux,pci-domain")) {
8020ae20: fd a2        	j	0x8020b00e <.LBB123_368+0x4ca>
;                                     const value = self.parse_property_name(property_value_descriptor);
8020ae22: 71 75        	lui	a0, 1048572
8020ae24: 1b 05 05 32  	addiw	a0, a0, 800
8020ae28: 22 95        	add	a0, a0, s0
8020ae2a: 0c 61        	ld	a1, 0(a0)
8020ae2c: 71 75        	lui	a0, 1048572
8020ae2e: 1b 05 05 3d  	addiw	a0, a0, 976
8020ae32: 22 95        	add	a0, a0, s0
8020ae34: 71 76        	lui	a2, 1048572
8020ae36: 1b 06 06 5e  	addiw	a2, a2, 1504
8020ae3a: 22 96        	add	a2, a2, s0
8020ae3c: 97 d0 ff ff  	auipc	ra, 1048573
8020ae40: e7 80 80 15  	jalr	344(ra)
;                                     print("{s}", .{value});
8020ae44: 71 75        	lui	a0, 1048572
8020ae46: 1b 05 05 3d  	addiw	a0, a0, 976
8020ae4a: 22 95        	add	a0, a0, s0
8020ae4c: 0c 61        	ld	a1, 0(a0)
8020ae4e: 71 75        	lui	a0, 1048572
8020ae50: 1b 05 05 3c  	addiw	a0, a0, 960
8020ae54: 22 95        	add	a0, a0, s0
8020ae56: 0c e1        	sd	a1, 0(a0)
8020ae58: 71 75        	lui	a0, 1048572
8020ae5a: 1b 05 85 3d  	addiw	a0, a0, 984
8020ae5e: 22 95        	add	a0, a0, s0
8020ae60: 08 61        	ld	a0, 0(a0)
8020ae62: 71 76        	lui	a2, 1048572
8020ae64: 1b 06 86 3c  	addiw	a2, a2, 968
8020ae68: 22 96        	add	a2, a2, s0
8020ae6a: 08 e2        	sd	a0, 0(a2)
8020ae6c: 01 46        	mv	a2, zero
8020ae6e: f1 76        	lui	a3, 1048572
8020ae70: 9b 86 86 0f  	addiw	a3, a3, 248
8020ae74: a2 96        	add	a3, a3, s0
8020ae76: 90 e2        	sd	a2, 0(a3)
8020ae78: fd 76        	lui	a3, 1048575
8020ae7a: 9b 86 86 1e  	addiw	a3, a3, 488
8020ae7e: a2 96        	add	a3, a3, s0
8020ae80: 90 e2        	sd	a2, 0(a3)
8020ae82: 7d 76        	lui	a2, 1048575
8020ae84: 1b 06 06 20  	addiw	a2, a2, 512
8020ae88: 22 96        	add	a2, a2, s0
8020ae8a: fd 76        	lui	a3, 1048575
8020ae8c: 9b 86 06 1f  	addiw	a3, a3, 496
8020ae90: a2 96        	add	a3, a3, s0
8020ae92: 90 e2        	sd	a2, 0(a3)
8020ae94: 13 06 00 02  	addi	a2, zero, 32
8020ae98: fd 76        	lui	a3, 1048575
8020ae9a: 9b 86 86 1f  	addiw	a3, a3, 504
8020ae9e: a2 96        	add	a3, a3, s0
8020aea0: 90 e2        	sd	a2, 0(a3)
;     writer.print(format, args) catch unreachable;
8020aea2: 7d 76        	lui	a2, 1048575
8020aea4: 1b 06 86 1d  	addiw	a2, a2, 472
8020aea8: 22 96        	add	a2, a2, s0
8020aeaa: 0c e2        	sd	a1, 0(a2)
8020aeac: fd 75        	lui	a1, 1048575
8020aeae: 9b 85 05 1e  	addiw	a1, a1, 480
8020aeb2: a2 95        	add	a1, a1, s0
8020aeb4: 88 e1        	sd	a0, 0(a1)
8020aeb6: 7d 75        	lui	a0, 1048575
8020aeb8: 1b 05 85 1e  	addiw	a0, a0, 488
8020aebc: 22 95        	add	a0, a0, s0
8020aebe: f1 75        	lui	a1, 1048572
8020aec0: 9b 85 05 3c  	addiw	a1, a1, 960
8020aec4: a2 95        	add	a1, a1, s0
8020aec6: 97 c0 00 00  	auipc	ra, 12
8020aeca: e7 80 00 e8  	jalr	-384(ra)
8020aece: f1 75        	lui	a1, 1048572
8020aed0: 9b 85 85 0f  	addiw	a1, a1, 248
8020aed4: a2 95        	add	a1, a1, s0
8020aed6: 8c 61        	ld	a1, 0(a1)
8020aed8: 7d 76        	lui	a2, 1048575
8020aeda: 1b 06 66 1d  	addiw	a2, a2, 470
8020aede: 22 96        	add	a2, a2, s0
8020aee0: 23 10 a6 00  	sh	a0, 0(a2)
8020aee4: 41 66        	lui	a2, 16
8020aee6: 7d 36        	addiw	a2, a2, -1
8020aee8: 71 8d        	and	a0, a0, a2
8020aeea: 71 76        	lui	a2, 1048572
8020aeec: 1b 06 06 10  	addiw	a2, a2, 256
8020aef0: 22 96        	add	a2, a2, s0
8020aef2: 08 e2        	sd	a0, 0(a2)
8020aef4: 63 00 b5 02  	beq	a0, a1, 0x8020af14 <.LBB123_368+0x3d0>
8020aef8: 09 a0        	j	0x8020aefa <.LBB123_368+0x3b6>
8020aefa: 71 75        	lui	a0, 1048572
8020aefc: 1b 05 05 10  	addiw	a0, a0, 256
8020af00: 22 95        	add	a0, a0, s0
8020af02: 0c 61        	ld	a1, 0(a0)
8020af04: 7d 75        	lui	a0, 1048575
8020af06: 1b 05 85 1e  	addiw	a0, a0, 488
8020af0a: 22 95        	add	a0, a0, s0
8020af0c: 97 50 ff ff  	auipc	ra, 1048565
8020af10: e7 80 20 6e  	jalr	1762(ra)
;                                 } else if (string_eq(property_name, "device_type")) {
8020af14: e5 a8        	j	0x8020b00c <.LBB123_368+0x4c8>
;                                     const value = self.parse_property_name(property_value_descriptor);
8020af16: 71 75        	lui	a0, 1048572
8020af18: 1b 05 05 32  	addiw	a0, a0, 800
8020af1c: 22 95        	add	a0, a0, s0
8020af1e: 0c 61        	ld	a1, 0(a0)
8020af20: 71 75        	lui	a0, 1048572
8020af22: 1b 05 05 3b  	addiw	a0, a0, 944
8020af26: 22 95        	add	a0, a0, s0
8020af28: 71 76        	lui	a2, 1048572
8020af2a: 1b 06 06 5e  	addiw	a2, a2, 1504
8020af2e: 22 96        	add	a2, a2, s0
8020af30: 97 d0 ff ff  	auipc	ra, 1048573
8020af34: e7 80 40 06  	jalr	100(ra)
;                                     print("{s}", .{value});
8020af38: 71 75        	lui	a0, 1048572
8020af3a: 1b 05 05 3b  	addiw	a0, a0, 944
8020af3e: 22 95        	add	a0, a0, s0
8020af40: 0c 61        	ld	a1, 0(a0)
8020af42: 71 75        	lui	a0, 1048572
8020af44: 1b 05 05 3a  	addiw	a0, a0, 928
8020af48: 22 95        	add	a0, a0, s0
8020af4a: 0c e1        	sd	a1, 0(a0)
8020af4c: 71 75        	lui	a0, 1048572
8020af4e: 1b 05 85 3b  	addiw	a0, a0, 952
8020af52: 22 95        	add	a0, a0, s0
8020af54: 08 61        	ld	a0, 0(a0)
8020af56: 71 76        	lui	a2, 1048572
8020af58: 1b 06 86 3a  	addiw	a2, a2, 936
8020af5c: 22 96        	add	a2, a2, s0
8020af5e: 08 e2        	sd	a0, 0(a2)
8020af60: 01 46        	mv	a2, zero
8020af62: f1 76        	lui	a3, 1048572
8020af64: 9b 86 86 0e  	addiw	a3, a3, 232
8020af68: a2 96        	add	a3, a3, s0
8020af6a: 90 e2        	sd	a2, 0(a3)
8020af6c: fd 76        	lui	a3, 1048575
8020af6e: 9b 86 86 31  	addiw	a3, a3, 792
8020af72: a2 96        	add	a3, a3, s0
8020af74: 90 e2        	sd	a2, 0(a3)
8020af76: 7d 76        	lui	a2, 1048575
8020af78: 1b 06 06 33  	addiw	a2, a2, 816
8020af7c: 22 96        	add	a2, a2, s0
8020af7e: fd 76        	lui	a3, 1048575
8020af80: 9b 86 06 32  	addiw	a3, a3, 800
8020af84: a2 96        	add	a3, a3, s0
8020af86: 90 e2        	sd	a2, 0(a3)
8020af88: 13 06 00 02  	addi	a2, zero, 32
8020af8c: fd 76        	lui	a3, 1048575
8020af8e: 9b 86 86 32  	addiw	a3, a3, 808
8020af92: a2 96        	add	a3, a3, s0
8020af94: 90 e2        	sd	a2, 0(a3)
;     writer.print(format, args) catch unreachable;
8020af96: 7d 76        	lui	a2, 1048575
8020af98: 1b 06 86 30  	addiw	a2, a2, 776
8020af9c: 22 96        	add	a2, a2, s0
8020af9e: 0c e2        	sd	a1, 0(a2)
8020afa0: fd 75        	lui	a1, 1048575
8020afa2: 9b 85 05 31  	addiw	a1, a1, 784
8020afa6: a2 95        	add	a1, a1, s0
8020afa8: 88 e1        	sd	a0, 0(a1)
8020afaa: 7d 75        	lui	a0, 1048575
8020afac: 1b 05 85 31  	addiw	a0, a0, 792
8020afb0: 22 95        	add	a0, a0, s0
8020afb2: f1 75        	lui	a1, 1048572
8020afb4: 9b 85 05 3a  	addiw	a1, a1, 928
8020afb8: a2 95        	add	a1, a1, s0
8020afba: 97 c0 00 00  	auipc	ra, 12
8020afbe: e7 80 c0 dd  	jalr	-548(ra)
8020afc2: f1 75        	lui	a1, 1048572
8020afc4: 9b 85 85 0e  	addiw	a1, a1, 232
8020afc8: a2 95        	add	a1, a1, s0
8020afca: 8c 61        	ld	a1, 0(a1)
8020afcc: 7d 76        	lui	a2, 1048575
8020afce: 1b 06 66 30  	addiw	a2, a2, 774
8020afd2: 22 96        	add	a2, a2, s0
8020afd4: 23 10 a6 00  	sh	a0, 0(a2)
8020afd8: 41 66        	lui	a2, 16
8020afda: 7d 36        	addiw	a2, a2, -1
8020afdc: 71 8d        	and	a0, a0, a2
8020afde: 71 76        	lui	a2, 1048572
8020afe0: 1b 06 06 0f  	addiw	a2, a2, 240
8020afe4: 22 96        	add	a2, a2, s0
8020afe6: 08 e2        	sd	a0, 0(a2)
8020afe8: 63 00 b5 02  	beq	a0, a1, 0x8020b008 <.LBB123_368+0x4c4>
8020afec: 09 a0        	j	0x8020afee <.LBB123_368+0x4aa>
8020afee: 71 75        	lui	a0, 1048572
8020aff0: 1b 05 05 0f  	addiw	a0, a0, 240
8020aff4: 22 95        	add	a0, a0, s0
8020aff6: 0c 61        	ld	a1, 0(a0)
8020aff8: 7d 75        	lui	a0, 1048575
8020affa: 1b 05 85 31  	addiw	a0, a0, 792
8020affe: 22 95        	add	a0, a0, s0
8020b000: 97 50 ff ff  	auipc	ra, 1048565
8020b004: e7 80 e0 5e  	jalr	1518(ra)
;                                 } else if (string_eq(property_name, "#interrupt-cells")) {
8020b008: 09 a0        	j	0x8020b00a <.LBB123_368+0x4c6>
;                                 } else if (string_eq(property_name, "device_type")) {
8020b00a: 09 a0        	j	0x8020b00c <.LBB123_368+0x4c8>
;                                 } else if (string_eq(property_name, "linux,pci-domain")) {
8020b00c: 09 a0        	j	0x8020b00e <.LBB123_368+0x4ca>
;                                 } else if (string_eq(property_name, "bus-range")) {
8020b00e: 09 a0        	j	0x8020b010 <.LBB123_368+0x4cc>
;                                 } else if (string_eq(property_name, "interrupt-map")) {
8020b010: 09 a0        	j	0x8020b012 <.LBB123_368+0x4ce>
;                                 if (string_eq(property_name, "interrupt-map-mask")) {
8020b012: 6f 00 50 3c  	j	0x8020bbd6 <.LBB123_385+0x22>
;     return std.mem.startsWith(u8, str, slice);
8020b016: 71 75        	lui	a0, 1048572
8020b018: 1b 05 05 62  	addiw	a0, a0, 1568
8020b01c: 22 95        	add	a0, a0, s0
8020b01e: 08 61        	ld	a0, 0(a0)
8020b020: f9 75        	lui	a1, 1048574
8020b022: 9b 85 85 82  	addiw	a1, a1, -2008
8020b026: a2 95        	add	a1, a1, s0
8020b028: 88 e1        	sd	a0, 0(a1)
8020b02a: 71 75        	lui	a0, 1048572
8020b02c: 1b 05 85 61  	addiw	a0, a0, 1560
8020b030: 22 95        	add	a0, a0, s0
8020b032: 08 61        	ld	a0, 0(a0)
8020b034: f9 75        	lui	a1, 1048574
8020b036: 9b 85 05 82  	addiw	a1, a1, -2016
8020b03a: a2 95        	add	a1, a1, s0
8020b03c: 88 e1        	sd	a0, 0(a1)

000000008020b03e <.LBB123_369>:
8020b03e: 97 35 01 00  	auipc	a1, 19
8020b042: 93 85 a5 21  	addi	a1, a1, 538
;     return std.mem.startsWith(u8, str, slice);
8020b046: 88 61        	ld	a0, 0(a1)
8020b048: 79 76        	lui	a2, 1048574
8020b04a: 1b 06 06 81  	addiw	a2, a2, -2032
8020b04e: 22 96        	add	a2, a2, s0
8020b050: 08 e2        	sd	a0, 0(a2)
8020b052: 88 65        	ld	a0, 8(a1)
8020b054: 79 76        	lui	a2, 1048574
8020b056: 1b 06 86 81  	addiw	a2, a2, -2024
8020b05a: 22 96        	add	a2, a2, s0
8020b05c: 08 e2        	sd	a0, 0(a2)
8020b05e: 71 75        	lui	a0, 1048572
8020b060: 1b 05 85 61  	addiw	a0, a0, 1560
8020b064: 22 95        	add	a0, a0, s0
8020b066: 97 b0 00 00  	auipc	ra, 11
8020b06a: e7 80 80 6c  	jalr	1736(ra)
8020b06e: 05 89        	andi	a0, a0, 1
8020b070: f9 75        	lui	a1, 1048574
8020b072: 9b 85 75 83  	addiw	a1, a1, -1993
8020b076: a2 95        	add	a1, a1, s0
8020b078: 23 80 a5 00  	sb	a0, 0(a1)
8020b07c: 81 45        	mv	a1, zero
;                             } else if (starts_with(node_name, "virtio_mmio@")) {
8020b07e: 63 02 b5 28  	beq	a0, a1, 0x8020b302 <.LBB123_372+0x1a2>
8020b082: 09 a0        	j	0x8020b084 <.LBB123_369+0x46>
;     return std.mem.eql(u8, a, b);
8020b084: 71 75        	lui	a0, 1048572
8020b086: 1b 05 85 5d  	addiw	a0, a0, 1496
8020b08a: 22 95        	add	a0, a0, s0
8020b08c: 08 61        	ld	a0, 0(a0)
8020b08e: f5 75        	lui	a1, 1048573
8020b090: 9b 85 85 19  	addiw	a1, a1, 408
8020b094: a2 95        	add	a1, a1, s0
8020b096: 88 e1        	sd	a0, 0(a1)
8020b098: 71 75        	lui	a0, 1048572
8020b09a: 1b 05 05 5d  	addiw	a0, a0, 1488
8020b09e: 22 95        	add	a0, a0, s0
8020b0a0: 08 61        	ld	a0, 0(a0)
8020b0a2: f5 75        	lui	a1, 1048573
8020b0a4: 9b 85 05 19  	addiw	a1, a1, 400
8020b0a8: a2 95        	add	a1, a1, s0
8020b0aa: 88 e1        	sd	a0, 0(a1)

000000008020b0ac <.LBB123_370>:
8020b0ac: 97 35 01 00  	auipc	a1, 19
8020b0b0: 93 85 c5 1b  	addi	a1, a1, 444
;     return std.mem.eql(u8, a, b);
8020b0b4: 88 61        	ld	a0, 0(a1)
8020b0b6: 75 76        	lui	a2, 1048573
8020b0b8: 1b 06 06 18  	addiw	a2, a2, 384
8020b0bc: 22 96        	add	a2, a2, s0
8020b0be: 08 e2        	sd	a0, 0(a2)
8020b0c0: 88 65        	ld	a0, 8(a1)
8020b0c2: 75 76        	lui	a2, 1048573
8020b0c4: 1b 06 86 18  	addiw	a2, a2, 392
8020b0c8: 22 96        	add	a2, a2, s0
8020b0ca: 08 e2        	sd	a0, 0(a2)
8020b0cc: 71 75        	lui	a0, 1048572
8020b0ce: 1b 05 05 5d  	addiw	a0, a0, 1488
8020b0d2: 22 95        	add	a0, a0, s0
8020b0d4: 97 90 00 00  	auipc	ra, 9
8020b0d8: e7 80 00 25  	jalr	592(ra)
8020b0dc: 05 89        	andi	a0, a0, 1
8020b0de: f5 75        	lui	a1, 1048573
8020b0e0: 9b 85 75 1a  	addiw	a1, a1, 423
8020b0e4: a2 95        	add	a1, a1, s0
8020b0e6: 23 80 a5 00  	sb	a0, 0(a1)
8020b0ea: 81 45        	mv	a1, zero
;                                 if (string_eq(property_name, "interrupts")) {
8020b0ec: 63 12 b5 08  	bne	a0, a1, 0x8020b170 <.LBB123_372+0x10>
8020b0f0: 09 a0        	j	0x8020b0f2 <.LBB123_370+0x46>
;     return std.mem.eql(u8, a, b);
8020b0f2: 71 75        	lui	a0, 1048572
8020b0f4: 1b 05 85 5d  	addiw	a0, a0, 1496
8020b0f8: 22 95        	add	a0, a0, s0
8020b0fa: 08 61        	ld	a0, 0(a0)
8020b0fc: f5 75        	lui	a1, 1048573
8020b0fe: 9b 85 05 17  	addiw	a1, a1, 368
8020b102: a2 95        	add	a1, a1, s0
8020b104: 88 e1        	sd	a0, 0(a1)
8020b106: 71 75        	lui	a0, 1048572
8020b108: 1b 05 05 5d  	addiw	a0, a0, 1488
8020b10c: 22 95        	add	a0, a0, s0
8020b10e: 08 61        	ld	a0, 0(a0)
8020b110: f5 75        	lui	a1, 1048573
8020b112: 9b 85 85 16  	addiw	a1, a1, 360
8020b116: a2 95        	add	a1, a1, s0
8020b118: 88 e1        	sd	a0, 0(a1)

000000008020b11a <.LBB123_371>:
8020b11a: 97 35 01 00  	auipc	a1, 19
8020b11e: 93 85 e5 15  	addi	a1, a1, 350
;     return std.mem.eql(u8, a, b);
8020b122: 88 61        	ld	a0, 0(a1)
8020b124: 75 76        	lui	a2, 1048573
8020b126: 1b 06 86 15  	addiw	a2, a2, 344
8020b12a: 22 96        	add	a2, a2, s0
8020b12c: 08 e2        	sd	a0, 0(a2)
8020b12e: 88 65        	ld	a0, 8(a1)
8020b130: 75 76        	lui	a2, 1048573
8020b132: 1b 06 06 16  	addiw	a2, a2, 352
8020b136: 22 96        	add	a2, a2, s0
8020b138: 08 e2        	sd	a0, 0(a2)
8020b13a: 71 75        	lui	a0, 1048572
8020b13c: 1b 05 05 5d  	addiw	a0, a0, 1488
8020b140: 22 95        	add	a0, a0, s0
8020b142: 97 90 00 00  	auipc	ra, 9
8020b146: e7 80 20 1e  	jalr	482(ra)
8020b14a: 05 89        	andi	a0, a0, 1
8020b14c: f5 75        	lui	a1, 1048573
8020b14e: 9b 85 f5 17  	addiw	a1, a1, 383
8020b152: a2 95        	add	a1, a1, s0
8020b154: 23 80 a5 00  	sb	a0, 0(a1)
8020b158: 81 45        	mv	a1, zero
;                                 } else if (string_eq(property_name, "interrupt-parent")) {
8020b15a: 63 1f b5 0c  	bne	a0, a1, 0x8020b238 <.LBB123_372+0xd8>
8020b15e: 09 a0        	j	0x8020b160 <.LBB123_372>

000000008020b160 <.LBB123_372>:
;                                     TODO(@src());
8020b160: 17 35 01 00  	auipc	a0, 19
8020b164: 13 05 85 12  	addi	a0, a0, 296
8020b168: 97 50 ff ff  	auipc	ra, 1048565
8020b16c: e7 80 a0 06  	jalr	106(ra)
;                                     const value = self.parse_int(u32);
8020b170: 71 75        	lui	a0, 1048572
8020b172: 1b 05 05 32  	addiw	a0, a0, 800
8020b176: 22 95        	add	a0, a0, s0
8020b178: 08 61        	ld	a0, 0(a0)
8020b17a: 97 d0 ff ff  	auipc	ra, 1048573
8020b17e: e7 80 60 d5  	jalr	-682(ra)
8020b182: f1 75        	lui	a1, 1048572
8020b184: 9b 85 c5 39  	addiw	a1, a1, 924
8020b188: a2 95        	add	a1, a1, s0
8020b18a: 88 c1        	sw	a0, 0(a1)
;                                     print("{}", .{value});
8020b18c: f1 75        	lui	a1, 1048572
8020b18e: 9b 85 85 39  	addiw	a1, a1, 920
8020b192: a2 95        	add	a1, a1, s0
8020b194: 88 c1        	sw	a0, 0(a1)
8020b196: 81 45        	mv	a1, zero
8020b198: 71 76        	lui	a2, 1048572
8020b19a: 1b 06 86 0d  	addiw	a2, a2, 216
8020b19e: 22 96        	add	a2, a2, s0
8020b1a0: 0c e2        	sd	a1, 0(a2)
8020b1a2: 7d 76        	lui	a2, 1048575
8020b1a4: 1b 06 06 44  	addiw	a2, a2, 1088
8020b1a8: 22 96        	add	a2, a2, s0
8020b1aa: 0c e2        	sd	a1, 0(a2)
8020b1ac: fd 75        	lui	a1, 1048575
8020b1ae: 9b 85 85 45  	addiw	a1, a1, 1112
8020b1b2: a2 95        	add	a1, a1, s0
8020b1b4: 7d 76        	lui	a2, 1048575
8020b1b6: 1b 06 86 44  	addiw	a2, a2, 1096
8020b1ba: 22 96        	add	a2, a2, s0
8020b1bc: 0c e2        	sd	a1, 0(a2)
8020b1be: 93 05 00 02  	addi	a1, zero, 32
8020b1c2: 7d 76        	lui	a2, 1048575
8020b1c4: 1b 06 06 45  	addiw	a2, a2, 1104
8020b1c8: 22 96        	add	a2, a2, s0
8020b1ca: 0c e2        	sd	a1, 0(a2)
;     writer.print(format, args) catch unreachable;
8020b1cc: fd 75        	lui	a1, 1048575
8020b1ce: 9b 85 85 43  	addiw	a1, a1, 1080
8020b1d2: a2 95        	add	a1, a1, s0
8020b1d4: 88 c1        	sw	a0, 0(a1)
8020b1d6: 7d 75        	lui	a0, 1048575
8020b1d8: 1b 05 05 44  	addiw	a0, a0, 1088
8020b1dc: 22 95        	add	a0, a0, s0
8020b1de: f1 75        	lui	a1, 1048572
8020b1e0: 9b 85 85 39  	addiw	a1, a1, 920
8020b1e4: a2 95        	add	a1, a1, s0
8020b1e6: 97 c0 00 00  	auipc	ra, 12
8020b1ea: e7 80 00 c0  	jalr	-1024(ra)
8020b1ee: f1 75        	lui	a1, 1048572
8020b1f0: 9b 85 85 0d  	addiw	a1, a1, 216
8020b1f4: a2 95        	add	a1, a1, s0
8020b1f6: 8c 61        	ld	a1, 0(a1)
8020b1f8: 7d 76        	lui	a2, 1048575
8020b1fa: 1b 06 66 43  	addiw	a2, a2, 1078
8020b1fe: 22 96        	add	a2, a2, s0
8020b200: 23 10 a6 00  	sh	a0, 0(a2)
8020b204: 41 66        	lui	a2, 16
8020b206: 7d 36        	addiw	a2, a2, -1
8020b208: 71 8d        	and	a0, a0, a2
8020b20a: 71 76        	lui	a2, 1048572
8020b20c: 1b 06 06 0e  	addiw	a2, a2, 224
8020b210: 22 96        	add	a2, a2, s0
8020b212: 08 e2        	sd	a0, 0(a2)
8020b214: 63 00 b5 02  	beq	a0, a1, 0x8020b234 <.LBB123_372+0xd4>
8020b218: 09 a0        	j	0x8020b21a <.LBB123_372+0xba>
8020b21a: 71 75        	lui	a0, 1048572
8020b21c: 1b 05 05 0e  	addiw	a0, a0, 224
8020b220: 22 95        	add	a0, a0, s0
8020b222: 0c 61        	ld	a1, 0(a0)
8020b224: 7d 75        	lui	a0, 1048575
8020b226: 1b 05 05 44  	addiw	a0, a0, 1088
8020b22a: 22 95        	add	a0, a0, s0
8020b22c: 97 50 ff ff  	auipc	ra, 1048565
8020b230: e7 80 20 3c  	jalr	962(ra)
;                                 if (string_eq(property_name, "interrupts")) {
8020b234: 6f 00 50 1a  	j	0x8020bbd8 <.LBB123_385+0x24>
;                                     const value = self.parse_int(u32);
8020b238: 71 75        	lui	a0, 1048572
8020b23a: 1b 05 05 32  	addiw	a0, a0, 800
8020b23e: 22 95        	add	a0, a0, s0
8020b240: 08 61        	ld	a0, 0(a0)
8020b242: 97 d0 ff ff  	auipc	ra, 1048573
8020b246: e7 80 e0 c8  	jalr	-882(ra)
8020b24a: f1 75        	lui	a1, 1048572
8020b24c: 9b 85 45 39  	addiw	a1, a1, 916
8020b250: a2 95        	add	a1, a1, s0
8020b252: 88 c1        	sw	a0, 0(a1)
;                                     print("{}", .{value});
8020b254: f1 75        	lui	a1, 1048572
8020b256: 9b 85 05 39  	addiw	a1, a1, 912
8020b25a: a2 95        	add	a1, a1, s0
8020b25c: 88 c1        	sw	a0, 0(a1)
8020b25e: 81 45        	mv	a1, zero
8020b260: 71 76        	lui	a2, 1048572
8020b262: 1b 06 86 0c  	addiw	a2, a2, 200
8020b266: 22 96        	add	a2, a2, s0
8020b268: 0c e2        	sd	a1, 0(a2)
8020b26a: 7d 76        	lui	a2, 1048575
8020b26c: 1b 06 86 56  	addiw	a2, a2, 1384
8020b270: 22 96        	add	a2, a2, s0
8020b272: 0c e2        	sd	a1, 0(a2)
8020b274: fd 75        	lui	a1, 1048575
8020b276: 9b 85 05 58  	addiw	a1, a1, 1408
8020b27a: a2 95        	add	a1, a1, s0
8020b27c: 7d 76        	lui	a2, 1048575
8020b27e: 1b 06 06 57  	addiw	a2, a2, 1392
8020b282: 22 96        	add	a2, a2, s0
8020b284: 0c e2        	sd	a1, 0(a2)
8020b286: 93 05 00 02  	addi	a1, zero, 32
8020b28a: 7d 76        	lui	a2, 1048575
8020b28c: 1b 06 86 57  	addiw	a2, a2, 1400
8020b290: 22 96        	add	a2, a2, s0
8020b292: 0c e2        	sd	a1, 0(a2)
;     writer.print(format, args) catch unreachable;
8020b294: fd 75        	lui	a1, 1048575
8020b296: 9b 85 05 56  	addiw	a1, a1, 1376
8020b29a: a2 95        	add	a1, a1, s0
8020b29c: 88 c1        	sw	a0, 0(a1)
8020b29e: 7d 75        	lui	a0, 1048575
8020b2a0: 1b 05 85 56  	addiw	a0, a0, 1384
8020b2a4: 22 95        	add	a0, a0, s0
8020b2a6: f1 75        	lui	a1, 1048572
8020b2a8: 9b 85 05 39  	addiw	a1, a1, 912
8020b2ac: a2 95        	add	a1, a1, s0
8020b2ae: 97 c0 00 00  	auipc	ra, 12
8020b2b2: e7 80 20 b8  	jalr	-1150(ra)
8020b2b6: f1 75        	lui	a1, 1048572
8020b2b8: 9b 85 85 0c  	addiw	a1, a1, 200
8020b2bc: a2 95        	add	a1, a1, s0
8020b2be: 8c 61        	ld	a1, 0(a1)
8020b2c0: 7d 76        	lui	a2, 1048575
8020b2c2: 1b 06 e6 55  	addiw	a2, a2, 1374
8020b2c6: 22 96        	add	a2, a2, s0
8020b2c8: 23 10 a6 00  	sh	a0, 0(a2)
8020b2cc: 41 66        	lui	a2, 16
8020b2ce: 7d 36        	addiw	a2, a2, -1
8020b2d0: 71 8d        	and	a0, a0, a2
8020b2d2: 71 76        	lui	a2, 1048572
8020b2d4: 1b 06 06 0d  	addiw	a2, a2, 208
8020b2d8: 22 96        	add	a2, a2, s0
8020b2da: 08 e2        	sd	a0, 0(a2)
8020b2dc: 63 00 b5 02  	beq	a0, a1, 0x8020b2fc <.LBB123_372+0x19c>
8020b2e0: 09 a0        	j	0x8020b2e2 <.LBB123_372+0x182>
8020b2e2: 71 75        	lui	a0, 1048572
8020b2e4: 1b 05 05 0d  	addiw	a0, a0, 208
8020b2e8: 22 95        	add	a0, a0, s0
8020b2ea: 0c 61        	ld	a1, 0(a0)
8020b2ec: 7d 75        	lui	a0, 1048575
8020b2ee: 1b 05 85 56  	addiw	a0, a0, 1384
8020b2f2: 22 95        	add	a0, a0, s0
8020b2f4: 97 50 ff ff  	auipc	ra, 1048565
8020b2f8: e7 80 a0 2f  	jalr	762(ra)
;                                 } else if (string_eq(property_name, "interrupt-parent")) {
8020b2fc: 09 a0        	j	0x8020b2fe <.LBB123_372+0x19e>
;                                 if (string_eq(property_name, "interrupts")) {
8020b2fe: 6f 00 b0 0d  	j	0x8020bbd8 <.LBB123_385+0x24>
;     return std.mem.startsWith(u8, str, slice);
8020b302: 71 75        	lui	a0, 1048572
8020b304: 1b 05 05 62  	addiw	a0, a0, 1568
8020b308: 22 95        	add	a0, a0, s0
8020b30a: 08 61        	ld	a0, 0(a0)
8020b30c: f9 75        	lui	a1, 1048574
8020b30e: 9b 85 05 80  	addiw	a1, a1, -2048
8020b312: a2 95        	add	a1, a1, s0
8020b314: 88 e1        	sd	a0, 0(a1)
8020b316: 71 75        	lui	a0, 1048572
8020b318: 1b 05 85 61  	addiw	a0, a0, 1560
8020b31c: 22 95        	add	a0, a0, s0
8020b31e: 08 61        	ld	a0, 0(a0)
8020b320: f5 75        	lui	a1, 1048573
8020b322: 9b 85 85 7f  	addiw	a1, a1, 2040
8020b326: a2 95        	add	a1, a1, s0
8020b328: 88 e1        	sd	a0, 0(a1)

000000008020b32a <.LBB123_373>:
8020b32a: 97 35 01 00  	auipc	a1, 19
8020b32e: 93 85 65 f8  	addi	a1, a1, -122
;     return std.mem.startsWith(u8, str, slice);
8020b332: 88 61        	ld	a0, 0(a1)
8020b334: 75 76        	lui	a2, 1048573
8020b336: 1b 06 86 7e  	addiw	a2, a2, 2024
8020b33a: 22 96        	add	a2, a2, s0
8020b33c: 08 e2        	sd	a0, 0(a2)
8020b33e: 88 65        	ld	a0, 8(a1)
8020b340: 75 76        	lui	a2, 1048573
8020b342: 1b 06 06 7f  	addiw	a2, a2, 2032
8020b346: 22 96        	add	a2, a2, s0
8020b348: 08 e2        	sd	a0, 0(a2)
8020b34a: 71 75        	lui	a0, 1048572
8020b34c: 1b 05 85 61  	addiw	a0, a0, 1560
8020b350: 22 95        	add	a0, a0, s0
8020b352: 97 b0 00 00  	auipc	ra, 11
8020b356: e7 80 c0 3d  	jalr	988(ra)
8020b35a: 05 89        	andi	a0, a0, 1
8020b35c: f9 75        	lui	a1, 1048574
8020b35e: 9b 85 f5 80  	addiw	a1, a1, -2033
8020b362: a2 95        	add	a1, a1, s0
8020b364: 23 80 a5 00  	sb	a0, 0(a1)
8020b368: 81 45        	mv	a1, zero
;                             } else if (starts_with(node_name, "plic@")) {
8020b36a: 63 03 b5 58  	beq	a0, a1, 0x8020b8f0 <.LBB123_380+0xda>
8020b36e: 09 a0        	j	0x8020b370 <.LBB123_373+0x46>
;     return std.mem.eql(u8, a, b);
8020b370: 71 75        	lui	a0, 1048572
8020b372: 1b 05 85 5d  	addiw	a0, a0, 1496
8020b376: 22 95        	add	a0, a0, s0
8020b378: 08 61        	ld	a0, 0(a0)
8020b37a: f5 75        	lui	a1, 1048573
8020b37c: 9b 85 85 14  	addiw	a1, a1, 328
8020b380: a2 95        	add	a1, a1, s0
8020b382: 88 e1        	sd	a0, 0(a1)
8020b384: 71 75        	lui	a0, 1048572
8020b386: 1b 05 05 5d  	addiw	a0, a0, 1488
8020b38a: 22 95        	add	a0, a0, s0
8020b38c: 08 61        	ld	a0, 0(a0)
8020b38e: f5 75        	lui	a1, 1048573
8020b390: 9b 85 05 14  	addiw	a1, a1, 320
8020b394: a2 95        	add	a1, a1, s0
8020b396: 88 e1        	sd	a0, 0(a1)

000000008020b398 <.LBB123_374>:
8020b398: 97 35 01 00  	auipc	a1, 19
8020b39c: 93 85 85 f2  	addi	a1, a1, -216
;     return std.mem.eql(u8, a, b);
8020b3a0: 88 61        	ld	a0, 0(a1)
8020b3a2: 75 76        	lui	a2, 1048573
8020b3a4: 1b 06 06 13  	addiw	a2, a2, 304
8020b3a8: 22 96        	add	a2, a2, s0
8020b3aa: 08 e2        	sd	a0, 0(a2)
8020b3ac: 88 65        	ld	a0, 8(a1)
8020b3ae: 75 76        	lui	a2, 1048573
8020b3b0: 1b 06 86 13  	addiw	a2, a2, 312
8020b3b4: 22 96        	add	a2, a2, s0
8020b3b6: 08 e2        	sd	a0, 0(a2)
8020b3b8: 71 75        	lui	a0, 1048572
8020b3ba: 1b 05 05 5d  	addiw	a0, a0, 1488
8020b3be: 22 95        	add	a0, a0, s0
8020b3c0: 97 90 00 00  	auipc	ra, 9
8020b3c4: e7 80 40 f6  	jalr	-156(ra)
8020b3c8: 05 89        	andi	a0, a0, 1
8020b3ca: f5 75        	lui	a1, 1048573
8020b3cc: 9b 85 75 15  	addiw	a1, a1, 343
8020b3d0: a2 95        	add	a1, a1, s0
8020b3d2: 23 80 a5 00  	sb	a0, 0(a1)
8020b3d6: 81 45        	mv	a1, zero
;                                 if (string_eq(property_name, "riscv,ndev")) {
8020b3d8: 63 10 b5 16  	bne	a0, a1, 0x8020b538 <.LBB123_378+0x10>
8020b3dc: 09 a0        	j	0x8020b3de <.LBB123_374+0x46>
;     return std.mem.eql(u8, a, b);
8020b3de: 71 75        	lui	a0, 1048572
8020b3e0: 1b 05 85 5d  	addiw	a0, a0, 1496
8020b3e4: 22 95        	add	a0, a0, s0
8020b3e6: 08 61        	ld	a0, 0(a0)
8020b3e8: f5 75        	lui	a1, 1048573
8020b3ea: 9b 85 05 12  	addiw	a1, a1, 288
8020b3ee: a2 95        	add	a1, a1, s0
8020b3f0: 88 e1        	sd	a0, 0(a1)
8020b3f2: 71 75        	lui	a0, 1048572
8020b3f4: 1b 05 05 5d  	addiw	a0, a0, 1488
8020b3f8: 22 95        	add	a0, a0, s0
8020b3fa: 08 61        	ld	a0, 0(a0)
8020b3fc: f5 75        	lui	a1, 1048573
8020b3fe: 9b 85 85 11  	addiw	a1, a1, 280
8020b402: a2 95        	add	a1, a1, s0
8020b404: 88 e1        	sd	a0, 0(a1)

000000008020b406 <.LBB123_375>:
8020b406: 97 35 01 00  	auipc	a1, 19
8020b40a: 93 85 a5 ec  	addi	a1, a1, -310
;     return std.mem.eql(u8, a, b);
8020b40e: 88 61        	ld	a0, 0(a1)
8020b410: 75 76        	lui	a2, 1048573
8020b412: 1b 06 86 10  	addiw	a2, a2, 264
8020b416: 22 96        	add	a2, a2, s0
8020b418: 08 e2        	sd	a0, 0(a2)
8020b41a: 88 65        	ld	a0, 8(a1)
8020b41c: 75 76        	lui	a2, 1048573
8020b41e: 1b 06 06 11  	addiw	a2, a2, 272
8020b422: 22 96        	add	a2, a2, s0
8020b424: 08 e2        	sd	a0, 0(a2)
8020b426: 71 75        	lui	a0, 1048572
8020b428: 1b 05 05 5d  	addiw	a0, a0, 1488
8020b42c: 22 95        	add	a0, a0, s0
8020b42e: 97 90 00 00  	auipc	ra, 9
8020b432: e7 80 60 ef  	jalr	-266(ra)
8020b436: 05 89        	andi	a0, a0, 1
8020b438: f5 75        	lui	a1, 1048573
8020b43a: 9b 85 f5 12  	addiw	a1, a1, 303
8020b43e: a2 95        	add	a1, a1, s0
8020b440: 23 80 a5 00  	sb	a0, 0(a1)
8020b444: 81 45        	mv	a1, zero
;                                 } else if (string_eq(property_name, "interrupts-extended")) {
8020b446: 63 1c b5 1a  	bne	a0, a1, 0x8020b5fe <.LBB123_378+0xd6>
8020b44a: 09 a0        	j	0x8020b44c <.LBB123_375+0x46>
;     return std.mem.eql(u8, a, b);
8020b44c: 71 75        	lui	a0, 1048572
8020b44e: 1b 05 85 5d  	addiw	a0, a0, 1496
8020b452: 22 95        	add	a0, a0, s0
8020b454: 08 61        	ld	a0, 0(a0)
8020b456: f5 75        	lui	a1, 1048573
8020b458: 9b 85 85 0f  	addiw	a1, a1, 248
8020b45c: a2 95        	add	a1, a1, s0
8020b45e: 88 e1        	sd	a0, 0(a1)
8020b460: 71 75        	lui	a0, 1048572
8020b462: 1b 05 05 5d  	addiw	a0, a0, 1488
8020b466: 22 95        	add	a0, a0, s0
8020b468: 08 61        	ld	a0, 0(a0)
8020b46a: f5 75        	lui	a1, 1048573
8020b46c: 9b 85 05 0f  	addiw	a1, a1, 240
8020b470: a2 95        	add	a1, a1, s0
8020b472: 88 e1        	sd	a0, 0(a1)

000000008020b474 <.LBB123_376>:
8020b474: 97 35 01 00  	auipc	a1, 19
8020b478: 93 85 c5 e6  	addi	a1, a1, -404
;     return std.mem.eql(u8, a, b);
8020b47c: 88 61        	ld	a0, 0(a1)
8020b47e: 75 76        	lui	a2, 1048573
8020b480: 1b 06 06 0e  	addiw	a2, a2, 224
8020b484: 22 96        	add	a2, a2, s0
8020b486: 08 e2        	sd	a0, 0(a2)
8020b488: 88 65        	ld	a0, 8(a1)
8020b48a: 75 76        	lui	a2, 1048573
8020b48c: 1b 06 86 0e  	addiw	a2, a2, 232
8020b490: 22 96        	add	a2, a2, s0
8020b492: 08 e2        	sd	a0, 0(a2)
8020b494: 71 75        	lui	a0, 1048572
8020b496: 1b 05 05 5d  	addiw	a0, a0, 1488
8020b49a: 22 95        	add	a0, a0, s0
8020b49c: 97 90 00 00  	auipc	ra, 9
8020b4a0: e7 80 80 e8  	jalr	-376(ra)
8020b4a4: 05 89        	andi	a0, a0, 1
8020b4a6: f5 75        	lui	a1, 1048573
8020b4a8: 9b 85 75 10  	addiw	a1, a1, 263
8020b4ac: a2 95        	add	a1, a1, s0
8020b4ae: 23 80 a5 00  	sb	a0, 0(a1)
8020b4b2: 81 45        	mv	a1, zero
;                                 } else if (string_eq(property_name, "interrupt-controller")) {
8020b4b4: 63 1a b5 34  	bne	a0, a1, 0x8020b808 <.LBB123_379+0x62>
8020b4b8: 09 a0        	j	0x8020b4ba <.LBB123_376+0x46>
;     return std.mem.eql(u8, a, b);
8020b4ba: 71 75        	lui	a0, 1048572
8020b4bc: 1b 05 85 5d  	addiw	a0, a0, 1496
8020b4c0: 22 95        	add	a0, a0, s0
8020b4c2: 08 61        	ld	a0, 0(a0)
8020b4c4: f5 75        	lui	a1, 1048573
8020b4c6: 9b 85 05 0d  	addiw	a1, a1, 208
8020b4ca: a2 95        	add	a1, a1, s0
8020b4cc: 88 e1        	sd	a0, 0(a1)
8020b4ce: 71 75        	lui	a0, 1048572
8020b4d0: 1b 05 05 5d  	addiw	a0, a0, 1488
8020b4d4: 22 95        	add	a0, a0, s0
8020b4d6: 08 61        	ld	a0, 0(a0)
8020b4d8: f5 75        	lui	a1, 1048573
8020b4da: 9b 85 85 0c  	addiw	a1, a1, 200
8020b4de: a2 95        	add	a1, a1, s0
8020b4e0: 88 e1        	sd	a0, 0(a1)

000000008020b4e2 <.LBB123_377>:
8020b4e2: 97 35 01 00  	auipc	a1, 19
8020b4e6: 93 85 e5 e0  	addi	a1, a1, -498
;     return std.mem.eql(u8, a, b);
8020b4ea: 88 61        	ld	a0, 0(a1)
8020b4ec: 75 76        	lui	a2, 1048573
8020b4ee: 1b 06 86 0b  	addiw	a2, a2, 184
8020b4f2: 22 96        	add	a2, a2, s0
8020b4f4: 08 e2        	sd	a0, 0(a2)
8020b4f6: 88 65        	ld	a0, 8(a1)
8020b4f8: 75 76        	lui	a2, 1048573
8020b4fa: 1b 06 06 0c  	addiw	a2, a2, 192
8020b4fe: 22 96        	add	a2, a2, s0
8020b500: 08 e2        	sd	a0, 0(a2)
8020b502: 71 75        	lui	a0, 1048572
8020b504: 1b 05 05 5d  	addiw	a0, a0, 1488
8020b508: 22 95        	add	a0, a0, s0
8020b50a: 97 90 00 00  	auipc	ra, 9
8020b50e: e7 80 a0 e1  	jalr	-486(ra)
8020b512: 05 89        	andi	a0, a0, 1
8020b514: f5 75        	lui	a1, 1048573
8020b516: 9b 85 f5 0d  	addiw	a1, a1, 223
8020b51a: a2 95        	add	a1, a1, s0
8020b51c: 23 80 a5 00  	sb	a0, 0(a1)
8020b520: 81 45        	mv	a1, zero
;                                 } else if (string_eq(property_name, "#interrupt-cells")) {
8020b522: 63 13 b5 30  	bne	a0, a1, 0x8020b828 <.LBB123_380+0x12>
8020b526: 09 a0        	j	0x8020b528 <.LBB123_378>

000000008020b528 <.LBB123_378>:
;                                     TODO(@src());
8020b528: 17 35 01 00  	auipc	a0, 19
8020b52c: 13 05 85 dd  	addi	a0, a0, -552
8020b530: 97 50 ff ff  	auipc	ra, 1048565
8020b534: e7 80 20 ca  	jalr	-862(ra)
;                                     const value = self.parse_int(u32);
8020b538: 71 75        	lui	a0, 1048572
8020b53a: 1b 05 05 32  	addiw	a0, a0, 800
8020b53e: 22 95        	add	a0, a0, s0
8020b540: 08 61        	ld	a0, 0(a0)
8020b542: 97 d0 ff ff  	auipc	ra, 1048573
8020b546: e7 80 e0 98  	jalr	-1650(ra)
8020b54a: f1 75        	lui	a1, 1048572
8020b54c: 9b 85 c5 38  	addiw	a1, a1, 908
8020b550: a2 95        	add	a1, a1, s0
8020b552: 88 c1        	sw	a0, 0(a1)
;                                     print("{}", .{value});
8020b554: f1 75        	lui	a1, 1048572
8020b556: 9b 85 85 38  	addiw	a1, a1, 904
8020b55a: a2 95        	add	a1, a1, s0
8020b55c: 88 c1        	sw	a0, 0(a1)
8020b55e: 81 45        	mv	a1, zero
8020b560: 71 76        	lui	a2, 1048572
8020b562: 1b 06 86 0b  	addiw	a2, a2, 184
8020b566: 22 96        	add	a2, a2, s0
8020b568: 0c e2        	sd	a1, 0(a2)
8020b56a: 7d 76        	lui	a2, 1048575
8020b56c: 1b 06 06 69  	addiw	a2, a2, 1680
8020b570: 22 96        	add	a2, a2, s0
8020b572: 0c e2        	sd	a1, 0(a2)
8020b574: fd 75        	lui	a1, 1048575
8020b576: 9b 85 85 6a  	addiw	a1, a1, 1704
8020b57a: a2 95        	add	a1, a1, s0
8020b57c: 7d 76        	lui	a2, 1048575
8020b57e: 1b 06 86 69  	addiw	a2, a2, 1688
8020b582: 22 96        	add	a2, a2, s0
8020b584: 0c e2        	sd	a1, 0(a2)
8020b586: 93 05 00 02  	addi	a1, zero, 32
8020b58a: 7d 76        	lui	a2, 1048575
8020b58c: 1b 06 06 6a  	addiw	a2, a2, 1696
8020b590: 22 96        	add	a2, a2, s0
8020b592: 0c e2        	sd	a1, 0(a2)
;     writer.print(format, args) catch unreachable;
8020b594: fd 75        	lui	a1, 1048575
8020b596: 9b 85 85 68  	addiw	a1, a1, 1672
8020b59a: a2 95        	add	a1, a1, s0
8020b59c: 88 c1        	sw	a0, 0(a1)
8020b59e: 7d 75        	lui	a0, 1048575
8020b5a0: 1b 05 05 69  	addiw	a0, a0, 1680
8020b5a4: 22 95        	add	a0, a0, s0
8020b5a6: f1 75        	lui	a1, 1048572
8020b5a8: 9b 85 85 38  	addiw	a1, a1, 904
8020b5ac: a2 95        	add	a1, a1, s0
8020b5ae: 97 c0 00 00  	auipc	ra, 12
8020b5b2: e7 80 c0 8c  	jalr	-1844(ra)
8020b5b6: f1 75        	lui	a1, 1048572
8020b5b8: 9b 85 85 0b  	addiw	a1, a1, 184
8020b5bc: a2 95        	add	a1, a1, s0
8020b5be: 8c 61        	ld	a1, 0(a1)
8020b5c0: 7d 76        	lui	a2, 1048575
8020b5c2: 1b 06 66 68  	addiw	a2, a2, 1670
8020b5c6: 22 96        	add	a2, a2, s0
8020b5c8: 23 10 a6 00  	sh	a0, 0(a2)
8020b5cc: 41 66        	lui	a2, 16
8020b5ce: 7d 36        	addiw	a2, a2, -1
8020b5d0: 71 8d        	and	a0, a0, a2
8020b5d2: 71 76        	lui	a2, 1048572
8020b5d4: 1b 06 06 0c  	addiw	a2, a2, 192
8020b5d8: 22 96        	add	a2, a2, s0
8020b5da: 08 e2        	sd	a0, 0(a2)
8020b5dc: 63 00 b5 02  	beq	a0, a1, 0x8020b5fc <.LBB123_378+0xd4>
8020b5e0: 09 a0        	j	0x8020b5e2 <.LBB123_378+0xba>
8020b5e2: 71 75        	lui	a0, 1048572
8020b5e4: 1b 05 05 0c  	addiw	a0, a0, 192
8020b5e8: 22 95        	add	a0, a0, s0
8020b5ea: 0c 61        	ld	a1, 0(a0)
8020b5ec: 7d 75        	lui	a0, 1048575
8020b5ee: 1b 05 05 69  	addiw	a0, a0, 1680
8020b5f2: 22 95        	add	a0, a0, s0
8020b5f4: 97 50 ff ff  	auipc	ra, 1048565
8020b5f8: e7 80 a0 ff  	jalr	-6(ra)
;                                 if (string_eq(property_name, "riscv,ndev")) {
8020b5fc: f9 ab        	j	0x8020bbda <.LBB123_385+0x26>
;                                     const value1 = self.parse_int(u32);
8020b5fe: 71 75        	lui	a0, 1048572
8020b600: 1b 05 05 32  	addiw	a0, a0, 800
8020b604: 22 95        	add	a0, a0, s0
8020b606: 08 61        	ld	a0, 0(a0)
8020b608: 97 d0 ff ff  	auipc	ra, 1048573
8020b60c: e7 80 80 8c  	jalr	-1848(ra)
8020b610: f1 75        	lui	a1, 1048572
8020b612: 9b 85 45 38  	addiw	a1, a1, 900
8020b616: a2 95        	add	a1, a1, s0
8020b618: 88 c1        	sw	a0, 0(a1)
;                                     const value2 = self.parse_int(u32);
8020b61a: 71 75        	lui	a0, 1048572
8020b61c: 1b 05 05 32  	addiw	a0, a0, 800
8020b620: 22 95        	add	a0, a0, s0
8020b622: 08 61        	ld	a0, 0(a0)
8020b624: 97 d0 ff ff  	auipc	ra, 1048573
8020b628: e7 80 c0 8a  	jalr	-1876(ra)
8020b62c: f1 75        	lui	a1, 1048572
8020b62e: 9b 85 05 38  	addiw	a1, a1, 896
8020b632: a2 95        	add	a1, a1, s0
8020b634: 88 c1        	sw	a0, 0(a1)
;                                     const value3 = self.parse_int(u32);
8020b636: 71 75        	lui	a0, 1048572
8020b638: 1b 05 05 32  	addiw	a0, a0, 800
8020b63c: 22 95        	add	a0, a0, s0
8020b63e: 08 61        	ld	a0, 0(a0)
8020b640: 97 d0 ff ff  	auipc	ra, 1048573
8020b644: e7 80 00 89  	jalr	-1904(ra)
8020b648: f1 75        	lui	a1, 1048572
8020b64a: 9b 85 c5 37  	addiw	a1, a1, 892
8020b64e: a2 95        	add	a1, a1, s0
8020b650: 88 c1        	sw	a0, 0(a1)
;                                     const value4 = self.parse_int(u32);
8020b652: 71 75        	lui	a0, 1048572
8020b654: 1b 05 05 32  	addiw	a0, a0, 800
8020b658: 22 95        	add	a0, a0, s0
8020b65a: 08 61        	ld	a0, 0(a0)
8020b65c: 97 d0 ff ff  	auipc	ra, 1048573
8020b660: e7 80 40 87  	jalr	-1932(ra)
8020b664: f1 75        	lui	a1, 1048572
8020b666: 9b 85 85 37  	addiw	a1, a1, 888
8020b66a: a2 95        	add	a1, a1, s0
8020b66c: 88 c1        	sw	a0, 0(a1)
;                                     print("{}, {}, {}, {} ", .{ value1, value2, value3, value4 });
8020b66e: f1 75        	lui	a1, 1048572
8020b670: 9b 85 45 38  	addiw	a1, a1, 900
8020b674: a2 95        	add	a1, a1, s0
8020b676: 8c 41        	lw	a1, 0(a1)
8020b678: 71 76        	lui	a2, 1048572
8020b67a: 1b 06 86 36  	addiw	a2, a2, 872
8020b67e: 22 96        	add	a2, a2, s0
8020b680: 0c c2        	sw	a1, 0(a2)
8020b682: f1 75        	lui	a1, 1048572
8020b684: 9b 85 05 38  	addiw	a1, a1, 896
8020b688: a2 95        	add	a1, a1, s0
8020b68a: 8c 41        	lw	a1, 0(a1)
8020b68c: 71 76        	lui	a2, 1048572
8020b68e: 1b 06 c6 36  	addiw	a2, a2, 876
8020b692: 22 96        	add	a2, a2, s0
8020b694: 0c c2        	sw	a1, 0(a2)
8020b696: f1 75        	lui	a1, 1048572
8020b698: 9b 85 c5 37  	addiw	a1, a1, 892
8020b69c: a2 95        	add	a1, a1, s0
8020b69e: 8c 41        	lw	a1, 0(a1)
8020b6a0: 71 76        	lui	a2, 1048572
8020b6a2: 1b 06 06 37  	addiw	a2, a2, 880
8020b6a6: 22 96        	add	a2, a2, s0
8020b6a8: 0c c2        	sw	a1, 0(a2)
8020b6aa: f1 75        	lui	a1, 1048572
8020b6ac: 9b 85 45 37  	addiw	a1, a1, 884
8020b6b0: a2 95        	add	a1, a1, s0
8020b6b2: 88 c1        	sw	a0, 0(a1)
8020b6b4: 01 45        	mv	a0, zero
8020b6b6: f1 75        	lui	a1, 1048572
8020b6b8: 9b 85 85 0a  	addiw	a1, a1, 168
8020b6bc: a2 95        	add	a1, a1, s0
8020b6be: 88 e1        	sd	a0, 0(a1)
8020b6c0: fd 75        	lui	a1, 1048575
8020b6c2: 9b 85 05 7c  	addiw	a1, a1, 1984
8020b6c6: a2 95        	add	a1, a1, s0
8020b6c8: 88 e1        	sd	a0, 0(a1)
8020b6ca: 7d 75        	lui	a0, 1048575
8020b6cc: 1b 05 85 7d  	addiw	a0, a0, 2008
8020b6d0: 22 95        	add	a0, a0, s0
8020b6d2: fd 75        	lui	a1, 1048575
8020b6d4: 9b 85 85 7c  	addiw	a1, a1, 1992
8020b6d8: a2 95        	add	a1, a1, s0
8020b6da: 88 e1        	sd	a0, 0(a1)
8020b6dc: 13 05 00 02  	addi	a0, zero, 32
8020b6e0: fd 75        	lui	a1, 1048575
8020b6e2: 9b 85 05 7d  	addiw	a1, a1, 2000
8020b6e6: a2 95        	add	a1, a1, s0
8020b6e8: 88 e1        	sd	a0, 0(a1)
;     writer.print(format, args) catch unreachable;
8020b6ea: 71 75        	lui	a0, 1048572
8020b6ec: 1b 05 85 36  	addiw	a0, a0, 872
8020b6f0: 22 95        	add	a0, a0, s0
8020b6f2: 08 61        	ld	a0, 0(a0)
8020b6f4: fd 75        	lui	a1, 1048575
8020b6f6: 9b 85 05 7b  	addiw	a1, a1, 1968
8020b6fa: a2 95        	add	a1, a1, s0
8020b6fc: 88 e1        	sd	a0, 0(a1)
8020b6fe: 71 75        	lui	a0, 1048572
8020b700: 1b 05 05 37  	addiw	a0, a0, 880
8020b704: 22 95        	add	a0, a0, s0
8020b706: 08 61        	ld	a0, 0(a0)
8020b708: fd 75        	lui	a1, 1048575
8020b70a: 9b 85 85 7b  	addiw	a1, a1, 1976
8020b70e: a2 95        	add	a1, a1, s0
8020b710: 88 e1        	sd	a0, 0(a1)
8020b712: 7d 75        	lui	a0, 1048575
8020b714: 1b 05 05 7c  	addiw	a0, a0, 1984
8020b718: 22 95        	add	a0, a0, s0
8020b71a: f1 75        	lui	a1, 1048572
8020b71c: 9b 85 85 36  	addiw	a1, a1, 872
8020b720: a2 95        	add	a1, a1, s0
8020b722: 97 b0 00 00  	auipc	ra, 11
8020b726: e7 80 20 7a  	jalr	1954(ra)
8020b72a: f1 75        	lui	a1, 1048572
8020b72c: 9b 85 85 0a  	addiw	a1, a1, 168
8020b730: a2 95        	add	a1, a1, s0
8020b732: 8c 61        	ld	a1, 0(a1)
8020b734: 7d 76        	lui	a2, 1048575
8020b736: 1b 06 e6 7a  	addiw	a2, a2, 1966
8020b73a: 22 96        	add	a2, a2, s0
8020b73c: 23 10 a6 00  	sh	a0, 0(a2)
8020b740: 41 66        	lui	a2, 16
8020b742: 7d 36        	addiw	a2, a2, -1
8020b744: 71 8d        	and	a0, a0, a2
8020b746: 71 76        	lui	a2, 1048572
8020b748: 1b 06 06 0b  	addiw	a2, a2, 176
8020b74c: 22 96        	add	a2, a2, s0
8020b74e: 08 e2        	sd	a0, 0(a2)
8020b750: 63 00 b5 02  	beq	a0, a1, 0x8020b770 <.LBB123_378+0x248>
8020b754: 09 a0        	j	0x8020b756 <.LBB123_378+0x22e>
8020b756: 71 75        	lui	a0, 1048572
8020b758: 1b 05 05 0b  	addiw	a0, a0, 176
8020b75c: 22 95        	add	a0, a0, s0
8020b75e: 0c 61        	ld	a1, 0(a0)
8020b760: 7d 75        	lui	a0, 1048575
8020b762: 1b 05 05 7c  	addiw	a0, a0, 1984
8020b766: 22 95        	add	a0, a0, s0
8020b768: 97 50 ff ff  	auipc	ra, 1048565
8020b76c: e7 80 60 e8  	jalr	-378(ra)
8020b770: 01 45        	mv	a0, zero
8020b772: f1 75        	lui	a1, 1048572
8020b774: 9b 85 85 09  	addiw	a1, a1, 152
8020b778: a2 95        	add	a1, a1, s0
8020b77a: 88 e1        	sd	a0, 0(a1)
8020b77c: f5 75        	lui	a1, 1048573
8020b77e: 9b 85 85 88  	addiw	a1, a1, -1912
8020b782: a2 95        	add	a1, a1, s0
8020b784: 88 e1        	sd	a0, 0(a1)
8020b786: 75 75        	lui	a0, 1048573
8020b788: 1b 05 05 8a  	addiw	a0, a0, -1888
8020b78c: 22 95        	add	a0, a0, s0
8020b78e: f5 75        	lui	a1, 1048573
8020b790: 9b 85 05 89  	addiw	a1, a1, -1904
8020b794: a2 95        	add	a1, a1, s0
8020b796: 88 e1        	sd	a0, 0(a1)
8020b798: 13 05 00 02  	addi	a0, zero, 32
8020b79c: f5 75        	lui	a1, 1048573
8020b79e: 9b 85 85 89  	addiw	a1, a1, -1896
8020b7a2: a2 95        	add	a1, a1, s0
8020b7a4: 88 e1        	sd	a0, 0(a1)

000000008020b7a6 <.LBB123_379>:
;     _ = writer.write(bytes) catch unreachable;
8020b7a6: 17 36 01 00  	auipc	a2, 19
8020b7aa: 13 06 26 b8  	addi	a2, a2, -1150
8020b7ae: 75 75        	lui	a0, 1048573
8020b7b0: 1b 05 85 87  	addiw	a0, a0, -1928
8020b7b4: 22 95        	add	a0, a0, s0
8020b7b6: f5 75        	lui	a1, 1048573
8020b7b8: 9b 85 85 88  	addiw	a1, a1, -1912
8020b7bc: a2 95        	add	a1, a1, s0
8020b7be: 97 50 ff ff  	auipc	ra, 1048565
8020b7c2: e7 80 e0 47  	jalr	1150(ra)
8020b7c6: 71 75        	lui	a0, 1048572
8020b7c8: 1b 05 85 09  	addiw	a0, a0, 152
8020b7cc: 22 95        	add	a0, a0, s0
8020b7ce: 0c 61        	ld	a1, 0(a0)
8020b7d0: 75 75        	lui	a0, 1048573
8020b7d2: 1b 05 05 88  	addiw	a0, a0, -1920
8020b7d6: 22 95        	add	a0, a0, s0
8020b7d8: 03 55 05 00  	lhu	a0, 0(a0)
8020b7dc: 71 76        	lui	a2, 1048572
8020b7de: 1b 06 06 0a  	addiw	a2, a2, 160
8020b7e2: 22 96        	add	a2, a2, s0
8020b7e4: 08 e2        	sd	a0, 0(a2)
8020b7e6: 63 00 b5 02  	beq	a0, a1, 0x8020b806 <.LBB123_379+0x60>
8020b7ea: 09 a0        	j	0x8020b7ec <.LBB123_379+0x46>
8020b7ec: 71 75        	lui	a0, 1048572
8020b7ee: 1b 05 05 0a  	addiw	a0, a0, 160
8020b7f2: 22 95        	add	a0, a0, s0
8020b7f4: 0c 61        	ld	a1, 0(a0)
8020b7f6: 75 75        	lui	a0, 1048573
8020b7f8: 1b 05 85 88  	addiw	a0, a0, -1912
8020b7fc: 22 95        	add	a0, a0, s0
8020b7fe: 97 50 ff ff  	auipc	ra, 1048565
8020b802: e7 80 00 df  	jalr	-528(ra)
;                                 } else if (string_eq(property_name, "interrupts-extended")) {
8020b806: e5 a0        	j	0x8020b8ee <.LBB123_380+0xd8>
;                                     assert(@src(), property_value_descriptor.len == 0);
8020b808: 71 75        	lui	a0, 1048572
8020b80a: 1b 05 05 5e  	addiw	a0, a0, 1504
8020b80e: 22 95        	add	a0, a0, s0
8020b810: 08 41        	lw	a0, 0(a0)
8020b812: 93 35 15 00  	seqz	a1, a0

000000008020b816 <.LBB123_380>:
8020b816: 17 35 01 00  	auipc	a0, 19
8020b81a: 13 05 25 b2  	addi	a0, a0, -1246
8020b81e: 97 50 ff ff  	auipc	ra, 1048565
8020b822: e7 80 e0 9e  	jalr	-1554(ra)
;                                 } else if (string_eq(property_name, "interrupt-controller")) {
8020b826: d9 a0        	j	0x8020b8ec <.LBB123_380+0xd6>
;                                     const value = self.parse_property_name(property_value_descriptor);
8020b828: 71 75        	lui	a0, 1048572
8020b82a: 1b 05 05 32  	addiw	a0, a0, 800
8020b82e: 22 95        	add	a0, a0, s0
8020b830: 0c 61        	ld	a1, 0(a0)
8020b832: 71 75        	lui	a0, 1048572
8020b834: 1b 05 85 35  	addiw	a0, a0, 856
8020b838: 22 95        	add	a0, a0, s0
8020b83a: 71 76        	lui	a2, 1048572
8020b83c: 1b 06 06 5e  	addiw	a2, a2, 1504
8020b840: 22 96        	add	a2, a2, s0
8020b842: 97 c0 ff ff  	auipc	ra, 1048572
8020b846: e7 80 20 75  	jalr	1874(ra)
;                                     print("{s}", .{value});
8020b84a: 71 75        	lui	a0, 1048572
8020b84c: 1b 05 85 35  	addiw	a0, a0, 856
8020b850: 22 95        	add	a0, a0, s0
8020b852: 0c 61        	ld	a1, 0(a0)
8020b854: 71 75        	lui	a0, 1048572
8020b856: 1b 05 85 34  	addiw	a0, a0, 840
8020b85a: 22 95        	add	a0, a0, s0
8020b85c: 0c e1        	sd	a1, 0(a0)
8020b85e: 71 75        	lui	a0, 1048572
8020b860: 1b 05 05 36  	addiw	a0, a0, 864
8020b864: 22 95        	add	a0, a0, s0
8020b866: 08 61        	ld	a0, 0(a0)
8020b868: 71 76        	lui	a2, 1048572
8020b86a: 1b 06 06 35  	addiw	a2, a2, 848
8020b86e: 22 96        	add	a2, a2, s0
8020b870: 08 e2        	sd	a0, 0(a2)
8020b872: 01 46        	mv	a2, zero
8020b874: f1 76        	lui	a3, 1048572
8020b876: 9b 86 86 08  	addiw	a3, a3, 136
8020b87a: a2 96        	add	a3, a3, s0
8020b87c: 90 e2        	sd	a2, 0(a3)
8020b87e: 23 38 c4 8e  	sd	a2, -1808(s0)
8020b882: 13 06 84 90  	addi	a2, s0, -1784
8020b886: 23 3c c4 8e  	sd	a2, -1800(s0)
8020b88a: 13 06 00 02  	addi	a2, zero, 32
8020b88e: 23 30 c4 90  	sd	a2, -1792(s0)
;     writer.print(format, args) catch unreachable;
8020b892: 23 30 b4 8e  	sd	a1, -1824(s0)
8020b896: 23 34 a4 8e  	sd	a0, -1816(s0)
8020b89a: 13 05 04 8f  	addi	a0, s0, -1808
8020b89e: f1 75        	lui	a1, 1048572
8020b8a0: 9b 85 85 34  	addiw	a1, a1, 840
8020b8a4: a2 95        	add	a1, a1, s0
8020b8a6: 97 b0 00 00  	auipc	ra, 11
8020b8aa: e7 80 20 68  	jalr	1666(ra)
8020b8ae: f1 75        	lui	a1, 1048572
8020b8b0: 9b 85 85 08  	addiw	a1, a1, 136
8020b8b4: a2 95        	add	a1, a1, s0
8020b8b6: 8c 61        	ld	a1, 0(a1)
8020b8b8: 23 1f a4 8c  	sh	a0, -1826(s0)
8020b8bc: 41 66        	lui	a2, 16
8020b8be: 7d 36        	addiw	a2, a2, -1
8020b8c0: 71 8d        	and	a0, a0, a2
8020b8c2: 71 76        	lui	a2, 1048572
8020b8c4: 1b 06 06 09  	addiw	a2, a2, 144
8020b8c8: 22 96        	add	a2, a2, s0
8020b8ca: 08 e2        	sd	a0, 0(a2)
8020b8cc: 63 0e b5 00  	beq	a0, a1, 0x8020b8e8 <.LBB123_380+0xd2>
8020b8d0: 09 a0        	j	0x8020b8d2 <.LBB123_380+0xbc>
8020b8d2: 71 75        	lui	a0, 1048572
8020b8d4: 1b 05 05 09  	addiw	a0, a0, 144
8020b8d8: 22 95        	add	a0, a0, s0
8020b8da: 0c 61        	ld	a1, 0(a0)
8020b8dc: 13 05 04 8f  	addi	a0, s0, -1808
8020b8e0: 97 50 ff ff  	auipc	ra, 1048565
8020b8e4: e7 80 e0 d0  	jalr	-754(ra)
;                                 } else if (string_eq(property_name, "#interrupt-cells")) {
8020b8e8: 09 a0        	j	0x8020b8ea <.LBB123_380+0xd4>
;                                 } else if (string_eq(property_name, "interrupt-controller")) {
8020b8ea: 09 a0        	j	0x8020b8ec <.LBB123_380+0xd6>
;                                 } else if (string_eq(property_name, "interrupts-extended")) {
8020b8ec: 09 a0        	j	0x8020b8ee <.LBB123_380+0xd8>
;                                 if (string_eq(property_name, "riscv,ndev")) {
8020b8ee: f5 a4        	j	0x8020bbda <.LBB123_385+0x26>
;     return std.mem.startsWith(u8, str, slice);
8020b8f0: 71 75        	lui	a0, 1048572
8020b8f2: 1b 05 05 62  	addiw	a0, a0, 1568
8020b8f6: 22 95        	add	a0, a0, s0
8020b8f8: 08 61        	ld	a0, 0(a0)
8020b8fa: f5 75        	lui	a1, 1048573
8020b8fc: 9b 85 85 7d  	addiw	a1, a1, 2008
8020b900: a2 95        	add	a1, a1, s0
8020b902: 88 e1        	sd	a0, 0(a1)
8020b904: 71 75        	lui	a0, 1048572
8020b906: 1b 05 85 61  	addiw	a0, a0, 1560
8020b90a: 22 95        	add	a0, a0, s0
8020b90c: 08 61        	ld	a0, 0(a0)
8020b90e: f5 75        	lui	a1, 1048573
8020b910: 9b 85 05 7d  	addiw	a1, a1, 2000
8020b914: a2 95        	add	a1, a1, s0
8020b916: 88 e1        	sd	a0, 0(a1)

000000008020b918 <.LBB123_381>:
8020b918: 97 35 01 00  	auipc	a1, 19
8020b91c: 93 85 85 a4  	addi	a1, a1, -1464
;     return std.mem.startsWith(u8, str, slice);
8020b920: 88 61        	ld	a0, 0(a1)
8020b922: 75 76        	lui	a2, 1048573
8020b924: 1b 06 06 7c  	addiw	a2, a2, 1984
8020b928: 22 96        	add	a2, a2, s0
8020b92a: 08 e2        	sd	a0, 0(a2)
8020b92c: 88 65        	ld	a0, 8(a1)
8020b92e: 75 76        	lui	a2, 1048573
8020b930: 1b 06 86 7c  	addiw	a2, a2, 1992
8020b934: 22 96        	add	a2, a2, s0
8020b936: 08 e2        	sd	a0, 0(a2)
8020b938: 71 75        	lui	a0, 1048572
8020b93a: 1b 05 85 61  	addiw	a0, a0, 1560
8020b93e: 22 95        	add	a0, a0, s0
8020b940: 97 b0 00 00  	auipc	ra, 11
8020b944: e7 80 e0 de  	jalr	-530(ra)
8020b948: 05 89        	andi	a0, a0, 1
8020b94a: f5 75        	lui	a1, 1048573
8020b94c: 9b 85 75 7e  	addiw	a1, a1, 2023
8020b950: a2 95        	add	a1, a1, s0
8020b952: 23 80 a5 00  	sb	a0, 0(a1)
8020b956: 81 45        	mv	a1, zero
;                             } else if (starts_with(node_name, "clint@")) {
8020b958: 63 0e b5 24  	beq	a0, a1, 0x8020bbb4 <.LBB123_385>
8020b95c: 09 a0        	j	0x8020b95e <.LBB123_381+0x46>
;     return std.mem.eql(u8, a, b);
8020b95e: 71 75        	lui	a0, 1048572
8020b960: 1b 05 85 5d  	addiw	a0, a0, 1496
8020b964: 22 95        	add	a0, a0, s0
8020b966: 08 61        	ld	a0, 0(a0)
8020b968: f5 75        	lui	a1, 1048573
8020b96a: 9b 85 85 0a  	addiw	a1, a1, 168
8020b96e: a2 95        	add	a1, a1, s0
8020b970: 88 e1        	sd	a0, 0(a1)
8020b972: 71 75        	lui	a0, 1048572
8020b974: 1b 05 05 5d  	addiw	a0, a0, 1488
8020b978: 22 95        	add	a0, a0, s0
8020b97a: 08 61        	ld	a0, 0(a0)
8020b97c: f5 75        	lui	a1, 1048573
8020b97e: 9b 85 05 0a  	addiw	a1, a1, 160
8020b982: a2 95        	add	a1, a1, s0
8020b984: 88 e1        	sd	a0, 0(a1)

000000008020b986 <.LBB123_382>:
8020b986: 97 35 01 00  	auipc	a1, 19
8020b98a: 93 85 a5 9e  	addi	a1, a1, -1558
;     return std.mem.eql(u8, a, b);
8020b98e: 88 61        	ld	a0, 0(a1)
8020b990: 75 76        	lui	a2, 1048573
8020b992: 1b 06 06 09  	addiw	a2, a2, 144
8020b996: 22 96        	add	a2, a2, s0
8020b998: 08 e2        	sd	a0, 0(a2)
8020b99a: 88 65        	ld	a0, 8(a1)
8020b99c: 75 76        	lui	a2, 1048573
8020b99e: 1b 06 86 09  	addiw	a2, a2, 152
8020b9a2: 22 96        	add	a2, a2, s0
8020b9a4: 08 e2        	sd	a0, 0(a2)
8020b9a6: 71 75        	lui	a0, 1048572
8020b9a8: 1b 05 05 5d  	addiw	a0, a0, 1488
8020b9ac: 22 95        	add	a0, a0, s0
8020b9ae: 97 90 00 00  	auipc	ra, 9
8020b9b2: e7 80 60 97  	jalr	-1674(ra)
8020b9b6: 05 89        	andi	a0, a0, 1
8020b9b8: f5 75        	lui	a1, 1048573
8020b9ba: 9b 85 75 0b  	addiw	a1, a1, 183
8020b9be: a2 95        	add	a1, a1, s0
8020b9c0: 23 80 a5 00  	sb	a0, 0(a1)
8020b9c4: 81 45        	mv	a1, zero
;                                 if (string_eq(property_name, "interrupts-extended")) {
8020b9c6: 63 1b b5 00  	bne	a0, a1, 0x8020b9dc <.LBB123_383+0x10>
8020b9ca: 09 a0        	j	0x8020b9cc <.LBB123_383>

000000008020b9cc <.LBB123_383>:
;                                     TODO(@src());
8020b9cc: 17 35 01 00  	auipc	a0, 19
8020b9d0: 13 05 45 9b  	addi	a0, a0, -1612
8020b9d4: 97 40 ff ff  	auipc	ra, 1048564
8020b9d8: e7 80 e0 7f  	jalr	2046(ra)
;                                     const value1 = self.parse_int(u32);
8020b9dc: 71 75        	lui	a0, 1048572
8020b9de: 1b 05 05 32  	addiw	a0, a0, 800
8020b9e2: 22 95        	add	a0, a0, s0
8020b9e4: 08 61        	ld	a0, 0(a0)
8020b9e6: 97 c0 ff ff  	auipc	ra, 1048572
8020b9ea: e7 80 a0 4e  	jalr	1258(ra)
8020b9ee: f1 75        	lui	a1, 1048572
8020b9f0: 9b 85 45 34  	addiw	a1, a1, 836
8020b9f4: a2 95        	add	a1, a1, s0
8020b9f6: 88 c1        	sw	a0, 0(a1)
;                                     const value2 = self.parse_int(u32);
8020b9f8: 71 75        	lui	a0, 1048572
8020b9fa: 1b 05 05 32  	addiw	a0, a0, 800
8020b9fe: 22 95        	add	a0, a0, s0
8020ba00: 08 61        	ld	a0, 0(a0)
8020ba02: 97 c0 ff ff  	auipc	ra, 1048572
8020ba06: e7 80 e0 4c  	jalr	1230(ra)
8020ba0a: f1 75        	lui	a1, 1048572
8020ba0c: 9b 85 05 34  	addiw	a1, a1, 832
8020ba10: a2 95        	add	a1, a1, s0
8020ba12: 88 c1        	sw	a0, 0(a1)
;                                     const value3 = self.parse_int(u32);
8020ba14: 71 75        	lui	a0, 1048572
8020ba16: 1b 05 05 32  	addiw	a0, a0, 800
8020ba1a: 22 95        	add	a0, a0, s0
8020ba1c: 08 61        	ld	a0, 0(a0)
8020ba1e: 97 c0 ff ff  	auipc	ra, 1048572
8020ba22: e7 80 20 4b  	jalr	1202(ra)
8020ba26: f1 75        	lui	a1, 1048572
8020ba28: 9b 85 c5 33  	addiw	a1, a1, 828
8020ba2c: a2 95        	add	a1, a1, s0
8020ba2e: 88 c1        	sw	a0, 0(a1)
;                                     const value4 = self.parse_int(u32);
8020ba30: 71 75        	lui	a0, 1048572
8020ba32: 1b 05 05 32  	addiw	a0, a0, 800
8020ba36: 22 95        	add	a0, a0, s0
8020ba38: 08 61        	ld	a0, 0(a0)
8020ba3a: 97 c0 ff ff  	auipc	ra, 1048572
8020ba3e: e7 80 60 49  	jalr	1174(ra)
8020ba42: f1 75        	lui	a1, 1048572
8020ba44: 9b 85 85 33  	addiw	a1, a1, 824
8020ba48: a2 95        	add	a1, a1, s0
8020ba4a: 88 c1        	sw	a0, 0(a1)
;                                     print("{}, {}, {}, {} ", .{ value1, value2, value3, value4 });
8020ba4c: f1 75        	lui	a1, 1048572
8020ba4e: 9b 85 45 34  	addiw	a1, a1, 836
8020ba52: a2 95        	add	a1, a1, s0
8020ba54: 8c 41        	lw	a1, 0(a1)
8020ba56: 71 76        	lui	a2, 1048572
8020ba58: 1b 06 86 32  	addiw	a2, a2, 808
8020ba5c: 22 96        	add	a2, a2, s0
8020ba5e: 0c c2        	sw	a1, 0(a2)
8020ba60: f1 75        	lui	a1, 1048572
8020ba62: 9b 85 05 34  	addiw	a1, a1, 832
8020ba66: a2 95        	add	a1, a1, s0
8020ba68: 8c 41        	lw	a1, 0(a1)
8020ba6a: 71 76        	lui	a2, 1048572
8020ba6c: 1b 06 c6 32  	addiw	a2, a2, 812
8020ba70: 22 96        	add	a2, a2, s0
8020ba72: 0c c2        	sw	a1, 0(a2)
8020ba74: f1 75        	lui	a1, 1048572
8020ba76: 9b 85 c5 33  	addiw	a1, a1, 828
8020ba7a: a2 95        	add	a1, a1, s0
8020ba7c: 8c 41        	lw	a1, 0(a1)
8020ba7e: 71 76        	lui	a2, 1048572
8020ba80: 1b 06 06 33  	addiw	a2, a2, 816
8020ba84: 22 96        	add	a2, a2, s0
8020ba86: 0c c2        	sw	a1, 0(a2)
8020ba88: f1 75        	lui	a1, 1048572
8020ba8a: 9b 85 45 33  	addiw	a1, a1, 820
8020ba8e: a2 95        	add	a1, a1, s0
8020ba90: 88 c1        	sw	a0, 0(a1)
8020ba92: 01 45        	mv	a0, zero
8020ba94: f1 75        	lui	a1, 1048572
8020ba96: 9b 85 85 07  	addiw	a1, a1, 120
8020ba9a: a2 95        	add	a1, a1, s0
8020ba9c: 88 e1        	sd	a0, 0(a1)
8020ba9e: 23 30 a4 a2  	sd	a0, -1504(s0)
8020baa2: 13 05 84 a3  	addi	a0, s0, -1480
8020baa6: 23 34 a4 a2  	sd	a0, -1496(s0)
8020baaa: 13 05 00 02  	addi	a0, zero, 32
8020baae: 23 38 a4 a2  	sd	a0, -1488(s0)
;     writer.print(format, args) catch unreachable;
8020bab2: 71 75        	lui	a0, 1048572
8020bab4: 1b 05 85 32  	addiw	a0, a0, 808
8020bab8: 22 95        	add	a0, a0, s0
8020baba: 08 61        	ld	a0, 0(a0)
8020babc: 23 38 a4 a0  	sd	a0, -1520(s0)
8020bac0: 71 75        	lui	a0, 1048572
8020bac2: 1b 05 05 33  	addiw	a0, a0, 816
8020bac6: 22 95        	add	a0, a0, s0
8020bac8: 08 61        	ld	a0, 0(a0)
8020baca: 23 3c a4 a0  	sd	a0, -1512(s0)
8020bace: 13 05 04 a2  	addi	a0, s0, -1504
8020bad2: f1 75        	lui	a1, 1048572
8020bad4: 9b 85 85 32  	addiw	a1, a1, 808
8020bad8: a2 95        	add	a1, a1, s0
8020bada: 97 b0 00 00  	auipc	ra, 11
8020bade: e7 80 e0 49  	jalr	1182(ra)
8020bae2: f1 75        	lui	a1, 1048572
8020bae4: 9b 85 85 07  	addiw	a1, a1, 120
8020bae8: a2 95        	add	a1, a1, s0
8020baea: 8c 61        	ld	a1, 0(a1)
8020baec: 23 17 a4 a0  	sh	a0, -1522(s0)
8020baf0: 41 66        	lui	a2, 16
8020baf2: 7d 36        	addiw	a2, a2, -1
8020baf4: 71 8d        	and	a0, a0, a2
8020baf6: 71 76        	lui	a2, 1048572
8020baf8: 1b 06 06 08  	addiw	a2, a2, 128
8020bafc: 22 96        	add	a2, a2, s0
8020bafe: 08 e2        	sd	a0, 0(a2)
8020bb00: 63 0e b5 00  	beq	a0, a1, 0x8020bb1c <.LBB123_383+0x150>
8020bb04: 09 a0        	j	0x8020bb06 <.LBB123_383+0x13a>
8020bb06: 71 75        	lui	a0, 1048572
8020bb08: 1b 05 05 08  	addiw	a0, a0, 128
8020bb0c: 22 95        	add	a0, a0, s0
8020bb0e: 0c 61        	ld	a1, 0(a0)
8020bb10: 13 05 04 a2  	addi	a0, s0, -1504
8020bb14: 97 50 ff ff  	auipc	ra, 1048565
8020bb18: e7 80 a0 ad  	jalr	-1318(ra)
8020bb1c: 01 45        	mv	a0, zero
8020bb1e: f1 75        	lui	a1, 1048572
8020bb20: 9b 85 85 06  	addiw	a1, a1, 104
8020bb24: a2 95        	add	a1, a1, s0
8020bb26: 88 e1        	sd	a0, 0(a1)
8020bb28: f1 75        	lui	a1, 1048572
8020bb2a: 9b 85 05 76  	addiw	a1, a1, 1888
8020bb2e: a2 95        	add	a1, a1, s0
8020bb30: 88 e1        	sd	a0, 0(a1)
8020bb32: 71 75        	lui	a0, 1048572
8020bb34: 1b 05 85 77  	addiw	a0, a0, 1912
8020bb38: 22 95        	add	a0, a0, s0
8020bb3a: f1 75        	lui	a1, 1048572
8020bb3c: 9b 85 85 76  	addiw	a1, a1, 1896
8020bb40: a2 95        	add	a1, a1, s0
8020bb42: 88 e1        	sd	a0, 0(a1)
8020bb44: 13 05 00 02  	addi	a0, zero, 32
8020bb48: f1 75        	lui	a1, 1048572
8020bb4a: 9b 85 05 77  	addiw	a1, a1, 1904
8020bb4e: a2 95        	add	a1, a1, s0
8020bb50: 88 e1        	sd	a0, 0(a1)

000000008020bb52 <.LBB123_384>:
;     _ = writer.write(bytes) catch unreachable;
8020bb52: 17 36 01 00  	auipc	a2, 19
8020bb56: 13 06 66 85  	addi	a2, a2, -1962
8020bb5a: 71 75        	lui	a0, 1048572
8020bb5c: 1b 05 05 75  	addiw	a0, a0, 1872
8020bb60: 22 95        	add	a0, a0, s0
8020bb62: f1 75        	lui	a1, 1048572
8020bb64: 9b 85 05 76  	addiw	a1, a1, 1888
8020bb68: a2 95        	add	a1, a1, s0
8020bb6a: 97 50 ff ff  	auipc	ra, 1048565
8020bb6e: e7 80 20 0d  	jalr	210(ra)
8020bb72: 71 75        	lui	a0, 1048572
8020bb74: 1b 05 85 06  	addiw	a0, a0, 104
8020bb78: 22 95        	add	a0, a0, s0
8020bb7a: 0c 61        	ld	a1, 0(a0)
8020bb7c: 71 75        	lui	a0, 1048572
8020bb7e: 1b 05 85 75  	addiw	a0, a0, 1880
8020bb82: 22 95        	add	a0, a0, s0
8020bb84: 03 55 05 00  	lhu	a0, 0(a0)
8020bb88: 71 76        	lui	a2, 1048572
8020bb8a: 1b 06 06 07  	addiw	a2, a2, 112
8020bb8e: 22 96        	add	a2, a2, s0
8020bb90: 08 e2        	sd	a0, 0(a2)
8020bb92: 63 00 b5 02  	beq	a0, a1, 0x8020bbb2 <.LBB123_384+0x60>
8020bb96: 09 a0        	j	0x8020bb98 <.LBB123_384+0x46>
8020bb98: 71 75        	lui	a0, 1048572
8020bb9a: 1b 05 05 07  	addiw	a0, a0, 112
8020bb9e: 22 95        	add	a0, a0, s0
8020bba0: 0c 61        	ld	a1, 0(a0)
8020bba2: 71 75        	lui	a0, 1048572
8020bba4: 1b 05 05 76  	addiw	a0, a0, 1888
8020bba8: 22 95        	add	a0, a0, s0
8020bbaa: 97 50 ff ff  	auipc	ra, 1048565
8020bbae: e7 80 40 a4  	jalr	-1468(ra)
;                                 if (string_eq(property_name, "interrupts-extended")) {
8020bbb2: 2d a0        	j	0x8020bbdc <.LBB123_385+0x28>

000000008020bbb4 <.LBB123_385>:
;                                 TODO(@src());
8020bbb4: 17 35 01 00  	auipc	a0, 19
8020bbb8: 13 05 45 80  	addi	a0, a0, -2044
8020bbbc: 97 40 ff ff  	auipc	ra, 1048564
8020bbc0: e7 80 60 61  	jalr	1558(ra)
;                             if (starts_with(node_name, "flash")) {
8020bbc4: 45 ae        	j	0x8020bf74 <.LBB123_389+0x12>
;                             } else if (string_eq(node_name, "chosen")) {
8020bbc6: 3d a0        	j	0x8020bbf4 <.LBB123_385+0x40>
;                             } else if (starts_with(node_name, "memory")) {
8020bbc8: 2d a0        	j	0x8020bbf2 <.LBB123_385+0x3e>
;                             } else if (string_eq(node_name, "cpus")) {
8020bbca: 1d a0        	j	0x8020bbf0 <.LBB123_385+0x3c>
;                             } else if (starts_with(node_name, "cpu@")) {
8020bbcc: 0d a0        	j	0x8020bbee <.LBB123_385+0x3a>
;                             } else if (string_eq(node_name, "interrupt-controller")) {
8020bbce: 39 a8        	j	0x8020bbec <.LBB123_385+0x38>
;                             } else if (starts_with(node_name, "core")) {
8020bbd0: 29 a8        	j	0x8020bbea <.LBB123_385+0x36>
;                             } else if (starts_with(node_name, "rtc@") or starts_with(node_name, "uart@")) {
8020bbd2: 19 a8        	j	0x8020bbe8 <.LBB123_385+0x34>
;                             } else if (string_eq(node_name, "poweroff") or string_eq(node_name, "reboot")) {
8020bbd4: 09 a8        	j	0x8020bbe6 <.LBB123_385+0x32>
;                             } else if (starts_with(node_name, "pci@")) {
8020bbd6: 39 a0        	j	0x8020bbe4 <.LBB123_385+0x30>
;                             } else if (starts_with(node_name, "virtio_mmio@")) {
8020bbd8: 29 a0        	j	0x8020bbe2 <.LBB123_385+0x2e>
;                             } else if (starts_with(node_name, "plic@")) {
8020bbda: 19 a0        	j	0x8020bbe0 <.LBB123_385+0x2c>
;                             } else if (starts_with(node_name, "clint@")) {
8020bbdc: 09 a0        	j	0x8020bbde <.LBB123_385+0x2a>
;                             } else if (starts_with(node_name, "plic@")) {
8020bbde: 09 a0        	j	0x8020bbe0 <.LBB123_385+0x2c>
;                             } else if (starts_with(node_name, "virtio_mmio@")) {
8020bbe0: 09 a0        	j	0x8020bbe2 <.LBB123_385+0x2e>
;                             } else if (starts_with(node_name, "pci@")) {
8020bbe2: 09 a0        	j	0x8020bbe4 <.LBB123_385+0x30>
;                             } else if (string_eq(node_name, "poweroff") or string_eq(node_name, "reboot")) {
8020bbe4: 09 a0        	j	0x8020bbe6 <.LBB123_385+0x32>
;                             } else if (starts_with(node_name, "rtc@") or starts_with(node_name, "uart@")) {
8020bbe6: 09 a0        	j	0x8020bbe8 <.LBB123_385+0x34>
;                             } else if (starts_with(node_name, "core")) {
8020bbe8: 09 a0        	j	0x8020bbea <.LBB123_385+0x36>
;                             } else if (string_eq(node_name, "interrupt-controller")) {
8020bbea: 09 a0        	j	0x8020bbec <.LBB123_385+0x38>
;                             } else if (starts_with(node_name, "cpu@")) {
8020bbec: 09 a0        	j	0x8020bbee <.LBB123_385+0x3a>
;                             } else if (string_eq(node_name, "cpus")) {
8020bbee: 09 a0        	j	0x8020bbf0 <.LBB123_385+0x3c>
;                             } else if (starts_with(node_name, "memory")) {
8020bbf0: 09 a0        	j	0x8020bbf2 <.LBB123_385+0x3e>
;                             } else if (string_eq(node_name, "chosen")) {
8020bbf2: 09 a0        	j	0x8020bbf4 <.LBB123_385+0x40>
;                             if (starts_with(node_name, "flash")) {
8020bbf4: 41 a6        	j	0x8020bf74 <.LBB123_389+0x12>
;                             const value = self.parse_property_name(property_value_descriptor);
8020bbf6: 71 75        	lui	a0, 1048572
8020bbf8: 1b 05 05 32  	addiw	a0, a0, 800
8020bbfc: 22 95        	add	a0, a0, s0
8020bbfe: 0c 61        	ld	a1, 0(a0)
8020bc00: 71 75        	lui	a0, 1048572
8020bc02: 1b 05 05 5b  	addiw	a0, a0, 1456
8020bc06: 22 95        	add	a0, a0, s0
8020bc08: 71 76        	lui	a2, 1048572
8020bc0a: 1b 06 06 5e  	addiw	a2, a2, 1504
8020bc0e: 22 96        	add	a2, a2, s0
8020bc10: 97 c0 ff ff  	auipc	ra, 1048572
8020bc14: e7 80 40 38  	jalr	900(ra)
;                             print("{s}", .{value});
8020bc18: 71 75        	lui	a0, 1048572
8020bc1a: 1b 05 05 5b  	addiw	a0, a0, 1456
8020bc1e: 22 95        	add	a0, a0, s0
8020bc20: 0c 61        	ld	a1, 0(a0)
8020bc22: 71 75        	lui	a0, 1048572
8020bc24: 1b 05 05 5a  	addiw	a0, a0, 1440
8020bc28: 22 95        	add	a0, a0, s0
8020bc2a: 0c e1        	sd	a1, 0(a0)
8020bc2c: 71 75        	lui	a0, 1048572
8020bc2e: 1b 05 85 5b  	addiw	a0, a0, 1464
8020bc32: 22 95        	add	a0, a0, s0
8020bc34: 08 61        	ld	a0, 0(a0)
8020bc36: 71 76        	lui	a2, 1048572
8020bc38: 1b 06 86 5a  	addiw	a2, a2, 1448
8020bc3c: 22 96        	add	a2, a2, s0
8020bc3e: 08 e2        	sd	a0, 0(a2)
8020bc40: 01 46        	mv	a2, zero
8020bc42: f1 76        	lui	a3, 1048572
8020bc44: 9b 86 86 05  	addiw	a3, a3, 88
8020bc48: a2 96        	add	a3, a3, s0
8020bc4a: 90 e2        	sd	a2, 0(a3)
8020bc4c: 23 38 c4 b4  	sd	a2, -1200(s0)
8020bc50: 13 06 84 b6  	addi	a2, s0, -1176
8020bc54: 23 3c c4 b4  	sd	a2, -1192(s0)
8020bc58: 13 06 00 02  	addi	a2, zero, 32
8020bc5c: 23 30 c4 b6  	sd	a2, -1184(s0)
;     writer.print(format, args) catch unreachable;
8020bc60: 23 30 b4 b4  	sd	a1, -1216(s0)
8020bc64: 23 34 a4 b4  	sd	a0, -1208(s0)
8020bc68: 13 05 04 b5  	addi	a0, s0, -1200
8020bc6c: f1 75        	lui	a1, 1048572
8020bc6e: 9b 85 05 5a  	addiw	a1, a1, 1440
8020bc72: a2 95        	add	a1, a1, s0
8020bc74: 97 b0 00 00  	auipc	ra, 11
8020bc78: e7 80 80 8a  	jalr	-1880(ra)
8020bc7c: f1 75        	lui	a1, 1048572
8020bc7e: 9b 85 85 05  	addiw	a1, a1, 88
8020bc82: a2 95        	add	a1, a1, s0
8020bc84: 8c 61        	ld	a1, 0(a1)
8020bc86: 23 1f a4 b2  	sh	a0, -1218(s0)
8020bc8a: 41 66        	lui	a2, 16
8020bc8c: 7d 36        	addiw	a2, a2, -1
8020bc8e: 71 8d        	and	a0, a0, a2
8020bc90: 71 76        	lui	a2, 1048572
8020bc92: 1b 06 06 06  	addiw	a2, a2, 96
8020bc96: 22 96        	add	a2, a2, s0
8020bc98: 08 e2        	sd	a0, 0(a2)
8020bc9a: 63 0e b5 00  	beq	a0, a1, 0x8020bcb6 <.LBB123_385+0x102>
8020bc9e: 09 a0        	j	0x8020bca0 <.LBB123_385+0xec>
8020bca0: 71 75        	lui	a0, 1048572
8020bca2: 1b 05 05 06  	addiw	a0, a0, 96
8020bca6: 22 95        	add	a0, a0, s0
8020bca8: 0c 61        	ld	a1, 0(a0)
8020bcaa: 13 05 04 b5  	addi	a0, s0, -1200
8020bcae: 97 50 ff ff  	auipc	ra, 1048565
8020bcb2: e7 80 00 94  	jalr	-1728(ra)
;                         if (string_eq(property_name, "compatible")) {
8020bcb6: d9 ac        	j	0x8020bf8c <.LBB123_389+0x2a>
;                             assert(@src(), property_value_descriptor.len == @sizeOf(u32));
8020bcb8: 71 75        	lui	a0, 1048572
8020bcba: 1b 05 05 5e  	addiw	a0, a0, 1504
8020bcbe: 22 95        	add	a0, a0, s0
8020bcc0: 08 41        	lw	a0, 0(a0)
8020bcc2: 71 15        	addi	a0, a0, -4
8020bcc4: 93 35 15 00  	seqz	a1, a0

000000008020bcc8 <.LBB123_386>:
8020bcc8: 17 25 01 00  	auipc	a0, 18
8020bccc: 13 05 85 71  	addi	a0, a0, 1816
8020bcd0: 97 40 ff ff  	auipc	ra, 1048564
8020bcd4: e7 80 c0 53  	jalr	1340(ra)
;                             const value = self.parse_int(u32);
8020bcd8: 71 75        	lui	a0, 1048572
8020bcda: 1b 05 05 32  	addiw	a0, a0, 800
8020bcde: 22 95        	add	a0, a0, s0
8020bce0: 08 61        	ld	a0, 0(a0)
8020bce2: 97 c0 ff ff  	auipc	ra, 1048572
8020bce6: e7 80 e0 1e  	jalr	494(ra)
8020bcea: f1 75        	lui	a1, 1048572
8020bcec: 9b 85 c5 59  	addiw	a1, a1, 1436
8020bcf0: a2 95        	add	a1, a1, s0
8020bcf2: 88 c1        	sw	a0, 0(a1)
;                             print("{}", .{value});
8020bcf4: f1 75        	lui	a1, 1048572
8020bcf6: 9b 85 85 59  	addiw	a1, a1, 1432
8020bcfa: a2 95        	add	a1, a1, s0
8020bcfc: 88 c1        	sw	a0, 0(a1)
8020bcfe: 81 45        	mv	a1, zero
8020bd00: 71 76        	lui	a2, 1048572
8020bd02: 1b 06 86 04  	addiw	a2, a2, 72
8020bd06: 22 96        	add	a2, a2, s0
8020bd08: 0c e2        	sd	a1, 0(a2)
8020bd0a: 23 3c b4 c6  	sd	a1, -904(s0)
8020bd0e: 93 05 04 c9  	addi	a1, s0, -880
8020bd12: 23 30 b4 c8  	sd	a1, -896(s0)
8020bd16: 93 05 00 02  	addi	a1, zero, 32
8020bd1a: 23 34 b4 c8  	sd	a1, -888(s0)
;     writer.print(format, args) catch unreachable;
8020bd1e: 23 28 a4 c6  	sw	a0, -912(s0)
8020bd22: 13 05 84 c7  	addi	a0, s0, -904
8020bd26: f1 75        	lui	a1, 1048572
8020bd28: 9b 85 85 59  	addiw	a1, a1, 1432
8020bd2c: a2 95        	add	a1, a1, s0
8020bd2e: 97 b0 00 00  	auipc	ra, 11
8020bd32: e7 80 e0 83  	jalr	-1986(ra)
8020bd36: f1 75        	lui	a1, 1048572
8020bd38: 9b 85 85 04  	addiw	a1, a1, 72
8020bd3c: a2 95        	add	a1, a1, s0
8020bd3e: 8c 61        	ld	a1, 0(a1)
8020bd40: 23 17 a4 c6  	sh	a0, -914(s0)
8020bd44: 41 66        	lui	a2, 16
8020bd46: 7d 36        	addiw	a2, a2, -1
8020bd48: 71 8d        	and	a0, a0, a2
8020bd4a: 71 76        	lui	a2, 1048572
8020bd4c: 1b 06 06 05  	addiw	a2, a2, 80
8020bd50: 22 96        	add	a2, a2, s0
8020bd52: 08 e2        	sd	a0, 0(a2)
8020bd54: 63 0e b5 00  	beq	a0, a1, 0x8020bd70 <.LBB123_386+0xa8>
8020bd58: 09 a0        	j	0x8020bd5a <.LBB123_386+0x92>
8020bd5a: 71 75        	lui	a0, 1048572
8020bd5c: 1b 05 05 05  	addiw	a0, a0, 80
8020bd60: 22 95        	add	a0, a0, s0
8020bd62: 0c 61        	ld	a1, 0(a0)
8020bd64: 13 05 84 c7  	addi	a0, s0, -904
8020bd68: 97 50 ff ff  	auipc	ra, 1048565
8020bd6c: e7 80 60 88  	jalr	-1914(ra)
;                         } else if (string_eq(property_name, "phandle")) {
8020bd70: 19 ac        	j	0x8020bf86 <.LBB123_389+0x24>
;                             const value = self.parse_property_name(property_value_descriptor);
8020bd72: 71 75        	lui	a0, 1048572
8020bd74: 1b 05 05 32  	addiw	a0, a0, 800
8020bd78: 22 95        	add	a0, a0, s0
8020bd7a: 0c 61        	ld	a1, 0(a0)
8020bd7c: 71 75        	lui	a0, 1048572
8020bd7e: 1b 05 85 58  	addiw	a0, a0, 1416
8020bd82: 22 95        	add	a0, a0, s0
8020bd84: 71 76        	lui	a2, 1048572
8020bd86: 1b 06 06 5e  	addiw	a2, a2, 1504
8020bd8a: 22 96        	add	a2, a2, s0
8020bd8c: 97 c0 ff ff  	auipc	ra, 1048572
8020bd90: e7 80 80 20  	jalr	520(ra)
;                             print("{s}", .{value});
8020bd94: 71 75        	lui	a0, 1048572
8020bd96: 1b 05 85 58  	addiw	a0, a0, 1416
8020bd9a: 22 95        	add	a0, a0, s0
8020bd9c: 0c 61        	ld	a1, 0(a0)
8020bd9e: 71 75        	lui	a0, 1048572
8020bda0: 1b 05 85 57  	addiw	a0, a0, 1400
8020bda4: 22 95        	add	a0, a0, s0
8020bda6: 0c e1        	sd	a1, 0(a0)
8020bda8: 71 75        	lui	a0, 1048572
8020bdaa: 1b 05 05 59  	addiw	a0, a0, 1424
8020bdae: 22 95        	add	a0, a0, s0
8020bdb0: 08 61        	ld	a0, 0(a0)
8020bdb2: 71 76        	lui	a2, 1048572
8020bdb4: 1b 06 06 58  	addiw	a2, a2, 1408
8020bdb8: 22 96        	add	a2, a2, s0
8020bdba: 08 e2        	sd	a0, 0(a2)
8020bdbc: 01 46        	mv	a2, zero
8020bdbe: f1 76        	lui	a3, 1048572
8020bdc0: 9b 86 86 03  	addiw	a3, a3, 56
8020bdc4: a2 96        	add	a3, a3, s0
8020bdc6: 90 e2        	sd	a2, 0(a3)
8020bdc8: 23 34 c4 da  	sd	a2, -600(s0)
8020bdcc: 13 06 04 dc  	addi	a2, s0, -576
8020bdd0: 23 38 c4 da  	sd	a2, -592(s0)
8020bdd4: 13 06 00 02  	addi	a2, zero, 32
8020bdd8: 23 3c c4 da  	sd	a2, -584(s0)
;     writer.print(format, args) catch unreachable;
8020bddc: 23 3c b4 d8  	sd	a1, -616(s0)
8020bde0: 23 30 a4 da  	sd	a0, -608(s0)
8020bde4: 13 05 84 da  	addi	a0, s0, -600
8020bde8: f1 75        	lui	a1, 1048572
8020bdea: 9b 85 85 57  	addiw	a1, a1, 1400
8020bdee: a2 95        	add	a1, a1, s0
8020bdf0: 97 a0 00 00  	auipc	ra, 10
8020bdf4: e7 80 60 7c  	jalr	1990(ra)
8020bdf8: f1 75        	lui	a1, 1048572
8020bdfa: 9b 85 85 03  	addiw	a1, a1, 56
8020bdfe: a2 95        	add	a1, a1, s0
8020be00: 8c 61        	ld	a1, 0(a1)
8020be02: 23 1b a4 d8  	sh	a0, -618(s0)
8020be06: 41 66        	lui	a2, 16
8020be08: 7d 36        	addiw	a2, a2, -1
8020be0a: 71 8d        	and	a0, a0, a2
8020be0c: 71 76        	lui	a2, 1048572
8020be0e: 1b 06 06 04  	addiw	a2, a2, 64
8020be12: 22 96        	add	a2, a2, s0
8020be14: 08 e2        	sd	a0, 0(a2)
8020be16: 63 0e b5 00  	beq	a0, a1, 0x8020be32 <.LBB123_386+0x16a>
8020be1a: 09 a0        	j	0x8020be1c <.LBB123_386+0x154>
8020be1c: 71 75        	lui	a0, 1048572
8020be1e: 1b 05 05 04  	addiw	a0, a0, 64
8020be22: 22 95        	add	a0, a0, s0
8020be24: 0c 61        	ld	a1, 0(a0)
8020be26: 13 05 84 da  	addi	a0, s0, -600
8020be2a: 97 40 ff ff  	auipc	ra, 1048564
8020be2e: e7 80 40 7c  	jalr	1988(ra)
;                         } else if (string_eq(property_name, "status")) {
8020be32: 89 aa        	j	0x8020bf84 <.LBB123_389+0x22>
;                             assert(@src(), property_value_descriptor.len == @sizeOf(u32));
8020be34: 71 75        	lui	a0, 1048572
8020be36: 1b 05 05 5e  	addiw	a0, a0, 1504
8020be3a: 22 95        	add	a0, a0, s0
8020be3c: 08 41        	lw	a0, 0(a0)
8020be3e: 71 15        	addi	a0, a0, -4
8020be40: 93 35 15 00  	seqz	a1, a0

000000008020be44 <.LBB123_387>:
8020be44: 17 25 01 00  	auipc	a0, 18
8020be48: 13 05 45 5c  	addi	a0, a0, 1476
8020be4c: 97 40 ff ff  	auipc	ra, 1048564
8020be50: e7 80 00 3c  	jalr	960(ra)
;                             address_cells = self.parse_int(u32);
8020be54: 71 75        	lui	a0, 1048572
8020be56: 1b 05 05 32  	addiw	a0, a0, 800
8020be5a: 22 95        	add	a0, a0, s0
8020be5c: 08 61        	ld	a0, 0(a0)
8020be5e: 97 c0 ff ff  	auipc	ra, 1048572
8020be62: e7 80 20 07  	jalr	114(ra)
8020be66: f1 75        	lui	a1, 1048572
8020be68: 9b 85 05 60  	addiw	a1, a1, 1536
8020be6c: a2 95        	add	a1, a1, s0
8020be6e: 88 c1        	sw	a0, 0(a1)
;                             print("{}", .{address_cells});
8020be70: f1 75        	lui	a1, 1048572
8020be72: 9b 85 05 57  	addiw	a1, a1, 1392
8020be76: a2 95        	add	a1, a1, s0
8020be78: 88 c1        	sw	a0, 0(a1)
8020be7a: 81 45        	mv	a1, zero
8020be7c: 71 76        	lui	a2, 1048572
8020be7e: 1b 06 86 02  	addiw	a2, a2, 40
8020be82: 22 96        	add	a2, a2, s0
8020be84: 0c e2        	sd	a1, 0(a2)
8020be86: 23 38 b4 ec  	sd	a1, -304(s0)
8020be8a: 93 05 84 ee  	addi	a1, s0, -280
8020be8e: 23 3c b4 ec  	sd	a1, -296(s0)
8020be92: 93 05 00 02  	addi	a1, zero, 32
8020be96: 23 30 b4 ee  	sd	a1, -288(s0)
;     writer.print(format, args) catch unreachable;
8020be9a: 23 24 a4 ec  	sw	a0, -312(s0)
8020be9e: 13 05 04 ed  	addi	a0, s0, -304
8020bea2: f1 75        	lui	a1, 1048572
8020bea4: 9b 85 05 57  	addiw	a1, a1, 1392
8020bea8: a2 95        	add	a1, a1, s0
8020beaa: 97 a0 00 00  	auipc	ra, 10
8020beae: e7 80 c0 75  	jalr	1884(ra)
8020beb2: f1 75        	lui	a1, 1048572
8020beb4: 9b 85 85 02  	addiw	a1, a1, 40
8020beb8: a2 95        	add	a1, a1, s0
8020beba: 8c 61        	ld	a1, 0(a1)
8020bebc: 23 13 a4 ec  	sh	a0, -314(s0)
8020bec0: 41 66        	lui	a2, 16
8020bec2: 7d 36        	addiw	a2, a2, -1
8020bec4: 71 8d        	and	a0, a0, a2
8020bec6: 71 76        	lui	a2, 1048572
8020bec8: 1b 06 06 03  	addiw	a2, a2, 48
8020becc: 22 96        	add	a2, a2, s0
8020bece: 08 e2        	sd	a0, 0(a2)
8020bed0: 63 0e b5 00  	beq	a0, a1, 0x8020beec <.LBB123_387+0xa8>
8020bed4: 09 a0        	j	0x8020bed6 <.LBB123_387+0x92>
8020bed6: 71 75        	lui	a0, 1048572
8020bed8: 1b 05 05 03  	addiw	a0, a0, 48
8020bedc: 22 95        	add	a0, a0, s0
8020bede: 0c 61        	ld	a1, 0(a0)
8020bee0: 13 05 04 ed  	addi	a0, s0, -304
8020bee4: 97 40 ff ff  	auipc	ra, 1048564
8020bee8: e7 80 a0 70  	jalr	1802(ra)
;                         } else if (string_eq(property_name, "#address-cells")) {
8020beec: 59 a8        	j	0x8020bf82 <.LBB123_389+0x20>
;                             assert(@src(), property_value_descriptor.len == @sizeOf(u32));
8020beee: 71 75        	lui	a0, 1048572
8020bef0: 1b 05 05 5e  	addiw	a0, a0, 1504
8020bef4: 22 95        	add	a0, a0, s0
8020bef6: 08 41        	lw	a0, 0(a0)
8020bef8: 71 15        	addi	a0, a0, -4
8020befa: 93 35 15 00  	seqz	a1, a0

000000008020befe <.LBB123_388>:
8020befe: 17 25 01 00  	auipc	a0, 18
8020bf02: 13 05 25 53  	addi	a0, a0, 1330
8020bf06: 97 40 ff ff  	auipc	ra, 1048564
8020bf0a: e7 80 60 30  	jalr	774(ra)
;                             size_cells = self.parse_int(u32);
8020bf0e: 71 75        	lui	a0, 1048572
8020bf10: 1b 05 05 32  	addiw	a0, a0, 800
8020bf14: 22 95        	add	a0, a0, s0
8020bf16: 08 61        	ld	a0, 0(a0)
8020bf18: 97 c0 ff ff  	auipc	ra, 1048572
8020bf1c: e7 80 80 fb  	jalr	-72(ra)
8020bf20: f1 75        	lui	a1, 1048572
8020bf22: 9b 85 c5 5f  	addiw	a1, a1, 1532
8020bf26: a2 95        	add	a1, a1, s0
8020bf28: 88 c1        	sw	a0, 0(a1)
;                             print_ident(attribute_identation, "{}", .{size_cells});
8020bf2a: f1 75        	lui	a1, 1048572
8020bf2c: 9b 85 85 56  	addiw	a1, a1, 1384
8020bf30: a2 95        	add	a1, a1, s0
8020bf32: 88 c1        	sw	a0, 0(a1)
8020bf34: 71 75        	lui	a0, 1048572
8020bf36: 1b 05 45 60  	addiw	a0, a0, 1540
8020bf3a: 22 95        	add	a0, a0, s0
8020bf3c: 08 41        	lw	a0, 0(a0)
8020bf3e: f1 75        	lui	a1, 1048572
8020bf40: 9b 85 85 56  	addiw	a1, a1, 1384
8020bf44: a2 95        	add	a1, a1, s0
8020bf46: 97 90 00 00  	auipc	ra, 9
8020bf4a: e7 80 20 b3  	jalr	-1230(ra)
;                         } else if (string_eq(property_name, "#size-cells")) {
8020bf4e: 0d a8        	j	0x8020bf80 <.LBB123_389+0x1e>
;                         } else if (string_eq(property_name, "reg")) {
8020bf50: 3d a0        	j	0x8020bf7e <.LBB123_389+0x1c>
;                         } else if (string_eq(property_name, "ranges")) {
8020bf52: 25 a0        	j	0x8020bf7a <.LBB123_389+0x18>
;                             assert(@src(), property_value_descriptor.len == 0);
8020bf54: 71 75        	lui	a0, 1048572
8020bf56: 1b 05 05 5e  	addiw	a0, a0, 1504
8020bf5a: 22 95        	add	a0, a0, s0
8020bf5c: 08 41        	lw	a0, 0(a0)
8020bf5e: 93 35 15 00  	seqz	a1, a0

000000008020bf62 <.LBB123_389>:
8020bf62: 17 25 01 00  	auipc	a0, 18
8020bf66: 13 05 65 4f  	addi	a0, a0, 1270
8020bf6a: 97 40 ff ff  	auipc	ra, 1048564
8020bf6e: e7 80 20 2a  	jalr	674(ra)
;                         } else if (string_eq(property_name, "dma-coherent")) {
8020bf72: 11 a0        	j	0x8020bf76 <.LBB123_389+0x14>
8020bf74: 09 a0        	j	0x8020bf76 <.LBB123_389+0x14>
;                         } else if (string_eq(property_name, "dma-ranges")) {
8020bf76: 09 a0        	j	0x8020bf78 <.LBB123_389+0x16>
;                         } else if (string_eq(property_name, "ranges")) {
8020bf78: 09 a0        	j	0x8020bf7a <.LBB123_389+0x18>
;                         } else if (string_eq(property_name, "virtual-reg")) {
8020bf7a: 09 a0        	j	0x8020bf7c <.LBB123_389+0x1a>
;                         } else if (string_eq(property_name, "reg")) {
8020bf7c: 09 a0        	j	0x8020bf7e <.LBB123_389+0x1c>
;                         } else if (string_eq(property_name, "#size-cells")) {
8020bf7e: 09 a0        	j	0x8020bf80 <.LBB123_389+0x1e>
;                         } else if (string_eq(property_name, "#address-cells")) {
8020bf80: 09 a0        	j	0x8020bf82 <.LBB123_389+0x20>
;                         } else if (string_eq(property_name, "status")) {
8020bf82: 09 a0        	j	0x8020bf84 <.LBB123_389+0x22>
;                         } else if (string_eq(property_name, "phandle")) {
8020bf84: 09 a0        	j	0x8020bf86 <.LBB123_389+0x24>
;                         } else if (string_eq(property_name, "model")) {
8020bf86: 09 a0        	j	0x8020bf88 <.LBB123_389+0x26>
;                         if (string_eq(property_name, "compatible")) {
8020bf88: 11 a0        	j	0x8020bf8c <.LBB123_389+0x2a>
;                     .end_node => break,
8020bf8a: e1 a0        	j	0x8020c052 <.LBB123_390+0x92>
8020bf8c: 01 45        	mv	a0, zero
8020bf8e: f1 75        	lui	a1, 1048572
8020bf90: e1 25        	addiw	a1, a1, 24
8020bf92: a2 95        	add	a1, a1, s0
8020bf94: 88 e1        	sd	a0, 0(a1)
8020bf96: f1 75        	lui	a1, 1048572
8020bf98: 9b 85 85 63  	addiw	a1, a1, 1592
8020bf9c: a2 95        	add	a1, a1, s0
8020bf9e: 88 e1        	sd	a0, 0(a1)
8020bfa0: 71 75        	lui	a0, 1048572
8020bfa2: 1b 05 05 65  	addiw	a0, a0, 1616
8020bfa6: 22 95        	add	a0, a0, s0
8020bfa8: f1 75        	lui	a1, 1048572
8020bfaa: 9b 85 05 64  	addiw	a1, a1, 1600
8020bfae: a2 95        	add	a1, a1, s0
8020bfb0: 88 e1        	sd	a0, 0(a1)
8020bfb2: 13 05 00 02  	addi	a0, zero, 32
8020bfb6: f1 75        	lui	a1, 1048572
8020bfb8: 9b 85 85 64  	addiw	a1, a1, 1608
8020bfbc: a2 95        	add	a1, a1, s0
8020bfbe: 88 e1        	sd	a0, 0(a1)

000000008020bfc0 <.LBB123_390>:
;     _ = writer.write(bytes) catch unreachable;
8020bfc0: 17 26 01 00  	auipc	a2, 18
8020bfc4: 13 06 06 4c  	addi	a2, a2, 1216
8020bfc8: 71 75        	lui	a0, 1048572
8020bfca: 1b 05 85 62  	addiw	a0, a0, 1576
8020bfce: 22 95        	add	a0, a0, s0
8020bfd0: f1 75        	lui	a1, 1048572
8020bfd2: 9b 85 85 63  	addiw	a1, a1, 1592
8020bfd6: a2 95        	add	a1, a1, s0
8020bfd8: 97 50 ff ff  	auipc	ra, 1048565
8020bfdc: e7 80 40 c6  	jalr	-924(ra)
8020bfe0: 71 75        	lui	a0, 1048572
8020bfe2: 61 25        	addiw	a0, a0, 24
8020bfe4: 22 95        	add	a0, a0, s0
8020bfe6: 0c 61        	ld	a1, 0(a0)
8020bfe8: 71 75        	lui	a0, 1048572
8020bfea: 1b 05 05 63  	addiw	a0, a0, 1584
8020bfee: 22 95        	add	a0, a0, s0
8020bff0: 03 55 05 00  	lhu	a0, 0(a0)
8020bff4: 71 76        	lui	a2, 1048572
8020bff6: 1b 06 06 02  	addiw	a2, a2, 32
8020bffa: 22 96        	add	a2, a2, s0
8020bffc: 08 e2        	sd	a0, 0(a2)
8020bffe: 63 00 b5 02  	beq	a0, a1, 0x8020c01e <.LBB123_390+0x5e>
8020c002: 09 a0        	j	0x8020c004 <.LBB123_390+0x44>
8020c004: 71 75        	lui	a0, 1048572
8020c006: 1b 05 05 02  	addiw	a0, a0, 32
8020c00a: 22 95        	add	a0, a0, s0
8020c00c: 0c 61        	ld	a1, 0(a0)
8020c00e: 71 75        	lui	a0, 1048572
8020c010: 1b 05 85 63  	addiw	a0, a0, 1592
8020c014: 22 95        	add	a0, a0, s0
8020c016: 97 40 ff ff  	auipc	ra, 1048564
8020c01a: e7 80 80 5d  	jalr	1496(ra)
;                 switch (token) {
8020c01e: 05 a8        	j	0x8020c04e <.LBB123_390+0x8e>
;                     .begin_node => self.parse_node(attribute_identation + 1, address_cells, size_cells),
8020c020: 71 75        	lui	a0, 1048572
8020c022: 1b 05 05 32  	addiw	a0, a0, 800
8020c026: 22 95        	add	a0, a0, s0
8020c028: 08 61        	ld	a0, 0(a0)
8020c02a: f1 75        	lui	a1, 1048572
8020c02c: a1 25        	addiw	a1, a1, 8
8020c02e: a2 95        	add	a1, a1, s0
8020c030: 88 e1        	sd	a0, 0(a1)
8020c032: 71 75        	lui	a0, 1048572
8020c034: 1b 05 45 60  	addiw	a0, a0, 1540
8020c038: 22 95        	add	a0, a0, s0
8020c03a: 0c 41        	lw	a1, 0(a0)
8020c03c: 1b 85 15 00  	addiw	a0, a1, 1
8020c040: 71 76        	lui	a2, 1048572
8020c042: 41 26        	addiw	a2, a2, 16
8020c044: 22 96        	add	a2, a2, s0
8020c046: 08 e2        	sd	a0, 0(a2)
8020c048: 63 63 b5 32  	bltu	a0, a1, 0x8020c36e <.LBB123_401>
8020c04c: 15 ae        	j	0x8020c380 <.LBB123_401+0x12>
;             while (true) {
8020c04e: 6f c0 2f 98  	j	0x802081d0 <arch.riscv64.device_tree.Parser.parse_node+0xce>
;         fn parse_node(self: *@This(), identation: u32, parent_address_cells: u32, parent_size_cells: u32) void {
8020c052: 11 65        	lui	a0, 4
8020c054: 1b 05 05 85  	addiw	a0, a0, -1968
8020c058: 2a 91        	add	sp, sp, a0
8020c05a: 03 34 01 7e  	ld	s0, 2016(sp)
8020c05e: 83 30 81 7e  	ld	ra, 2024(sp)
8020c062: 13 01 01 7f  	addi	sp, sp, 2032
8020c066: 82 80        	ret

000000008020c068 <.LBB123_391>:
;             const attribute_identation = identation + 1;
8020c068: 17 15 01 00  	auipc	a0, 17
8020c06c: 13 05 85 41  	addi	a0, a0, 1048
8020c070: 81 45        	mv	a1, zero
8020c072: 97 40 ff ff  	auipc	ra, 1048564
8020c076: e7 80 e0 02  	jalr	46(ra)
8020c07a: 71 75        	lui	a0, 1048572
8020c07c: 1b 05 85 30  	addiw	a0, a0, 776
8020c080: 22 95        	add	a0, a0, s0
8020c082: 08 61        	ld	a0, 0(a0)
8020c084: f1 75        	lui	a1, 1048572
8020c086: 9b 85 45 60  	addiw	a1, a1, 1540
8020c08a: a2 95        	add	a1, a1, s0
8020c08c: 88 c1        	sw	a0, 0(a1)
;             var address_cells: u32 = parent_address_cells;
8020c08e: 71 75        	lui	a0, 1048572
8020c090: 1b 05 85 31  	addiw	a0, a0, 792
8020c094: 22 95        	add	a0, a0, s0
8020c096: 08 41        	lw	a0, 0(a0)
8020c098: f1 75        	lui	a1, 1048572
8020c09a: 9b 85 05 60  	addiw	a1, a1, 1536
8020c09e: a2 95        	add	a1, a1, s0
8020c0a0: 88 c1        	sw	a0, 0(a1)
;             var size_cells: u32 = parent_size_cells;
8020c0a2: 71 75        	lui	a0, 1048572
8020c0a4: 1b 05 45 31  	addiw	a0, a0, 788
8020c0a8: 22 95        	add	a0, a0, s0
8020c0aa: 08 41        	lw	a0, 0(a0)
8020c0ac: f1 75        	lui	a1, 1048572
8020c0ae: 9b 85 c5 5f  	addiw	a1, a1, 1532
8020c0b2: a2 95        	add	a1, a1, s0
8020c0b4: 88 c1        	sw	a0, 0(a1)
;             while (true) {
8020c0b6: 6f c0 af 91  	j	0x802081d0 <arch.riscv64.device_tree.Parser.parse_node+0xce>

000000008020c0ba <.LBB123_392>:
;                             const address_byte_count = address_cells * @sizeOf(u32);
8020c0ba: 17 15 01 00  	auipc	a0, 17
8020c0be: 13 05 65 3c  	addi	a0, a0, 966
8020c0c2: 81 45        	mv	a1, zero
8020c0c4: 97 40 ff ff  	auipc	ra, 1048564
8020c0c8: e7 80 c0 fd  	jalr	-36(ra)
8020c0cc: 71 75        	lui	a0, 1048572
8020c0ce: 1b 05 05 2e  	addiw	a0, a0, 736
8020c0d2: 22 95        	add	a0, a0, s0
8020c0d4: 08 61        	ld	a0, 0(a0)
8020c0d6: f1 75        	lui	a1, 1048572
8020c0d8: 9b 85 45 56  	addiw	a1, a1, 1380
8020c0dc: a2 95        	add	a1, a1, s0
8020c0de: 88 c1        	sw	a0, 0(a1)
;                             const size_byte_count = size_cells * @sizeOf(u32);
8020c0e0: 71 75        	lui	a0, 1048572
8020c0e2: 1b 05 c5 5f  	addiw	a0, a0, 1532
8020c0e6: 22 95        	add	a0, a0, s0
8020c0e8: 03 65 05 00  	lwu	a0, 0(a0)
8020c0ec: 0a 05        	slli	a0, a0, 2
8020c0ee: f1 75        	lui	a1, 1048572
8020c0f0: a2 95        	add	a1, a1, s0
8020c0f2: 88 e1        	sd	a0, 0(a1)
8020c0f4: 01 91        	srli	a0, a0, 32
8020c0f6: 81 45        	mv	a1, zero
8020c0f8: 63 0c b5 00  	beq	a0, a1, 0x8020c110 <.LBB123_393+0x12>
8020c0fc: 09 a0        	j	0x8020c0fe <.LBB123_393>

000000008020c0fe <.LBB123_393>:
8020c0fe: 17 15 01 00  	auipc	a0, 17
8020c102: 13 05 25 38  	addi	a0, a0, 898
8020c106: 81 45        	mv	a1, zero
8020c108: 97 40 ff ff  	auipc	ra, 1048564
8020c10c: e7 80 80 f9  	jalr	-104(ra)
8020c110: 71 75        	lui	a0, 1048572
8020c112: 22 95        	add	a0, a0, s0
8020c114: 08 61        	ld	a0, 0(a0)
8020c116: f1 75        	lui	a1, 1048572
8020c118: 9b 85 05 56  	addiw	a1, a1, 1376
8020c11c: a2 95        	add	a1, a1, s0
8020c11e: 88 c1        	sw	a0, 0(a1)
;                             const pair_byte_count = address_byte_count + size_byte_count;
8020c120: f1 75        	lui	a1, 1048572
8020c122: 9b 85 45 56  	addiw	a1, a1, 1380
8020c126: a2 95        	add	a1, a1, s0
8020c128: 8c 41        	lw	a1, 0(a1)
8020c12a: 2d 9d        	addw	a0, a0, a1
8020c12c: 71 76        	lui	a2, 1048572
8020c12e: 61 36        	addiw	a2, a2, -8
8020c130: 22 96        	add	a2, a2, s0
8020c132: 08 e2        	sd	a0, 0(a2)
8020c134: 63 7c b5 00  	bgeu	a0, a1, 0x8020c14c <.LBB123_394+0x12>
8020c138: 09 a0        	j	0x8020c13a <.LBB123_394>

000000008020c13a <.LBB123_394>:
8020c13a: 17 15 01 00  	auipc	a0, 17
8020c13e: 13 05 65 34  	addi	a0, a0, 838
8020c142: 81 45        	mv	a1, zero
8020c144: 97 40 ff ff  	auipc	ra, 1048564
8020c148: e7 80 c0 f5  	jalr	-164(ra)
8020c14c: 71 75        	lui	a0, 1048572
8020c14e: 61 35        	addiw	a0, a0, -8
8020c150: 22 95        	add	a0, a0, s0
8020c152: 08 61        	ld	a0, 0(a0)
8020c154: f1 75        	lui	a1, 1048572
8020c156: 9b 85 c5 55  	addiw	a1, a1, 1372
8020c15a: a2 95        	add	a1, a1, s0
8020c15c: 88 c1        	sw	a0, 0(a1)
;                             const pair_count = property_value_descriptor.len / pair_byte_count;
8020c15e: f1 75        	lui	a1, 1048572
8020c160: 9b 85 05 5e  	addiw	a1, a1, 1504
8020c164: a2 95        	add	a1, a1, s0
8020c166: 83 e5 05 00  	lwu	a1, 0(a1)
8020c16a: 71 76        	lui	a2, 1048572
8020c16c: 21 36        	addiw	a2, a2, -24
8020c16e: 22 96        	add	a2, a2, s0
8020c170: 0c e2        	sd	a1, 0(a2)
8020c172: 02 15        	slli	a0, a0, 32
8020c174: 01 91        	srli	a0, a0, 32
8020c176: f1 75        	lui	a1, 1048572
8020c178: c1 35        	addiw	a1, a1, -16
8020c17a: a2 95        	add	a1, a1, s0
8020c17c: 88 e1        	sd	a0, 0(a1)
8020c17e: 81 45        	mv	a1, zero
8020c180: 63 1c b5 00  	bne	a0, a1, 0x8020c198 <.LBB123_395+0x12>
8020c184: 09 a0        	j	0x8020c186 <.LBB123_395>

000000008020c186 <.LBB123_395>:
8020c186: 17 15 01 00  	auipc	a0, 17
8020c18a: 13 05 a5 14  	addi	a0, a0, 330
8020c18e: 81 45        	mv	a1, zero
8020c190: 97 40 ff ff  	auipc	ra, 1048564
8020c194: e7 80 00 f1  	jalr	-240(ra)
8020c198: 71 75        	lui	a0, 1048572
8020c19a: 21 35        	addiw	a0, a0, -24
8020c19c: 22 95        	add	a0, a0, s0
8020c19e: 08 61        	ld	a0, 0(a0)
8020c1a0: f1 75        	lui	a1, 1048572
8020c1a2: c1 35        	addiw	a1, a1, -16
8020c1a4: a2 95        	add	a1, a1, s0
8020c1a6: 8c 61        	ld	a1, 0(a1)
8020c1a8: 3b 55 b5 02  	divuw	a0, a0, a1
8020c1ac: f1 75        	lui	a1, 1048572
8020c1ae: 9b 85 85 55  	addiw	a1, a1, 1368
8020c1b2: a2 95        	add	a1, a1, s0
8020c1b4: 88 c1        	sw	a0, 0(a1)
8020c1b6: 01 45        	mv	a0, zero
;                             var pair_i: u64 = 0;
8020c1b8: f1 75        	lui	a1, 1048572
8020c1ba: 9b 85 05 55  	addiw	a1, a1, 1360
8020c1be: a2 95        	add	a1, a1, s0
8020c1c0: 88 e1        	sd	a0, 0(a1)
;                             while (pair_i < pair_count) : (pair_i += 1) {
8020c1c2: 6f c0 2f c8  	j	0x80208644 <.LBB123_309+0x6e>

000000008020c1c6 <.LBB123_396>:
8020c1c6: 17 15 01 00  	auipc	a0, 17
8020c1ca: 13 05 a5 2b  	addi	a0, a0, 698
8020c1ce: 81 45        	mv	a1, zero
8020c1d0: 97 40 ff ff  	auipc	ra, 1048564
8020c1d4: e7 80 00 ed  	jalr	-304(ra)
8020c1d8: 71 75        	lui	a0, 1048572
8020c1da: 1b 05 85 26  	addiw	a0, a0, 616
8020c1de: 22 95        	add	a0, a0, s0
8020c1e0: 08 61        	ld	a0, 0(a0)
8020c1e2: f1 75        	lui	a1, 1048572
8020c1e4: 9b 85 05 55  	addiw	a1, a1, 1360
8020c1e8: a2 95        	add	a1, a1, s0
8020c1ea: 88 e1        	sd	a0, 0(a1)
8020c1ec: 6f c0 8f c5  	j	0x80208644 <.LBB123_309+0x6e>

000000008020c1f0 <.LBB123_397>:
;                                 self.i += property_value_descriptor.len;
8020c1f0: 17 15 01 00  	auipc	a0, 17
8020c1f4: 13 05 05 29  	addi	a0, a0, 656
8020c1f8: 81 45        	mv	a1, zero
8020c1fa: 97 40 ff ff  	auipc	ra, 1048564
8020c1fe: e7 80 60 ea  	jalr	-346(ra)
8020c202: 71 75        	lui	a0, 1048572
8020c204: 1b 05 05 26  	addiw	a0, a0, 608
8020c208: 22 95        	add	a0, a0, s0
8020c20a: 08 61        	ld	a0, 0(a0)
8020c20c: f1 75        	lui	a1, 1048572
8020c20e: 9b 85 85 25  	addiw	a1, a1, 600
8020c212: a2 95        	add	a1, a1, s0
8020c214: 8c 61        	ld	a1, 0(a1)
8020c216: 88 e1        	sd	a0, 0(a1)
8020c218: 01 45        	mv	a0, zero
8020c21a: f1 75        	lui	a1, 1048572
8020c21c: 9b 85 85 fd  	addiw	a1, a1, -40
8020c220: a2 95        	add	a1, a1, s0
8020c222: 88 e1        	sd	a0, 0(a1)
8020c224: f5 75        	lui	a1, 1048573
8020c226: 9b 85 05 c0  	addiw	a1, a1, -1024
8020c22a: a2 95        	add	a1, a1, s0
8020c22c: 88 e1        	sd	a0, 0(a1)
8020c22e: 75 75        	lui	a0, 1048573
8020c230: 1b 05 85 c1  	addiw	a0, a0, -1000
8020c234: 22 95        	add	a0, a0, s0
8020c236: f5 75        	lui	a1, 1048573
8020c238: 9b 85 85 c0  	addiw	a1, a1, -1016
8020c23c: a2 95        	add	a1, a1, s0
8020c23e: 88 e1        	sd	a0, 0(a1)
8020c240: 13 05 00 02  	addi	a0, zero, 32
8020c244: f5 75        	lui	a1, 1048573
8020c246: 9b 85 05 c1  	addiw	a1, a1, -1008
8020c24a: a2 95        	add	a1, a1, s0
8020c24c: 88 e1        	sd	a0, 0(a1)

000000008020c24e <.LBB123_398>:
;     _ = writer.write(bytes) catch unreachable;
8020c24e: 17 26 01 00  	auipc	a2, 18
8020c252: 13 06 26 b8  	addi	a2, a2, -1150
8020c256: 75 75        	lui	a0, 1048573
8020c258: 1b 05 05 bf  	addiw	a0, a0, -1040
8020c25c: 22 95        	add	a0, a0, s0
8020c25e: f5 75        	lui	a1, 1048573
8020c260: 9b 85 05 c0  	addiw	a1, a1, -1024
8020c264: a2 95        	add	a1, a1, s0
8020c266: 97 50 ff ff  	auipc	ra, 1048565
8020c26a: e7 80 60 9d  	jalr	-1578(ra)
8020c26e: 71 75        	lui	a0, 1048572
8020c270: 1b 05 85 fd  	addiw	a0, a0, -40
8020c274: 22 95        	add	a0, a0, s0
8020c276: 0c 61        	ld	a1, 0(a0)
8020c278: 75 75        	lui	a0, 1048573
8020c27a: 1b 05 85 bf  	addiw	a0, a0, -1032
8020c27e: 22 95        	add	a0, a0, s0
8020c280: 03 55 05 00  	lhu	a0, 0(a0)
8020c284: 71 76        	lui	a2, 1048572
8020c286: 01 36        	addiw	a2, a2, -32
8020c288: 22 96        	add	a2, a2, s0
8020c28a: 08 e2        	sd	a0, 0(a2)
8020c28c: 63 0f b5 00  	beq	a0, a1, 0x8020c2aa <.LBB123_398+0x5c>
8020c290: 09 a0        	j	0x8020c292 <.LBB123_398+0x44>
8020c292: 71 75        	lui	a0, 1048572
8020c294: 01 35        	addiw	a0, a0, -32
8020c296: 22 95        	add	a0, a0, s0
8020c298: 0c 61        	ld	a1, 0(a0)
8020c29a: 75 75        	lui	a0, 1048573
8020c29c: 1b 05 05 c0  	addiw	a0, a0, -1024
8020c2a0: 22 95        	add	a0, a0, s0
8020c2a2: 97 40 ff ff  	auipc	ra, 1048564
8020c2a6: e7 80 c0 34  	jalr	844(ra)
;                             if (property_value_descriptor.len != 0) {
8020c2aa: 65 b1        	j	0x8020bf52 <.LBB123_388+0x54>

000000008020c2ac <.LBB123_399>:
;                                     self.i += property_value_descriptor.len;
8020c2ac: 17 15 01 00  	auipc	a0, 17
8020c2b0: 13 05 45 1d  	addi	a0, a0, 468
8020c2b4: 81 45        	mv	a1, zero
8020c2b6: 97 40 ff ff  	auipc	ra, 1048564
8020c2ba: e7 80 a0 de  	jalr	-534(ra)
8020c2be: 71 75        	lui	a0, 1048572
8020c2c0: 1b 05 05 13  	addiw	a0, a0, 304
8020c2c4: 22 95        	add	a0, a0, s0
8020c2c6: 08 61        	ld	a0, 0(a0)
8020c2c8: f1 75        	lui	a1, 1048572
8020c2ca: 9b 85 85 12  	addiw	a1, a1, 296
8020c2ce: a2 95        	add	a1, a1, s0
8020c2d0: 8c 61        	ld	a1, 0(a1)
8020c2d2: 88 e1        	sd	a0, 0(a1)
8020c2d4: 01 45        	mv	a0, zero
8020c2d6: f1 75        	lui	a1, 1048572
8020c2d8: 9b 85 85 fc  	addiw	a1, a1, -56
8020c2dc: a2 95        	add	a1, a1, s0
8020c2de: 88 e1        	sd	a0, 0(a1)
8020c2e0: f5 75        	lui	a1, 1048573
8020c2e2: 9b 85 05 9b  	addiw	a1, a1, -1616
8020c2e6: a2 95        	add	a1, a1, s0
8020c2e8: 88 e1        	sd	a0, 0(a1)
8020c2ea: 75 75        	lui	a0, 1048573
8020c2ec: 1b 05 85 9c  	addiw	a0, a0, -1592
8020c2f0: 22 95        	add	a0, a0, s0
8020c2f2: f5 75        	lui	a1, 1048573
8020c2f4: 9b 85 85 9b  	addiw	a1, a1, -1608
8020c2f8: a2 95        	add	a1, a1, s0
8020c2fa: 88 e1        	sd	a0, 0(a1)
8020c2fc: 13 05 00 02  	addi	a0, zero, 32
8020c300: f5 75        	lui	a1, 1048573
8020c302: 9b 85 05 9c  	addiw	a1, a1, -1600
8020c306: a2 95        	add	a1, a1, s0
8020c308: 88 e1        	sd	a0, 0(a1)

000000008020c30a <.LBB123_400>:
;     _ = writer.write(bytes) catch unreachable;
8020c30a: 17 26 01 00  	auipc	a2, 18
8020c30e: 13 06 e6 f3  	addi	a2, a2, -194
8020c312: 75 75        	lui	a0, 1048573
8020c314: 1b 05 05 9a  	addiw	a0, a0, -1632
8020c318: 22 95        	add	a0, a0, s0
8020c31a: f5 75        	lui	a1, 1048573
8020c31c: 9b 85 05 9b  	addiw	a1, a1, -1616
8020c320: a2 95        	add	a1, a1, s0
8020c322: 97 50 ff ff  	auipc	ra, 1048565
8020c326: e7 80 a0 91  	jalr	-1766(ra)
8020c32a: 71 75        	lui	a0, 1048572
8020c32c: 1b 05 85 fc  	addiw	a0, a0, -56
8020c330: 22 95        	add	a0, a0, s0
8020c332: 0c 61        	ld	a1, 0(a0)
8020c334: 75 75        	lui	a0, 1048573
8020c336: 1b 05 85 9a  	addiw	a0, a0, -1624
8020c33a: 22 95        	add	a0, a0, s0
8020c33c: 03 55 05 00  	lhu	a0, 0(a0)
8020c340: 71 76        	lui	a2, 1048572
8020c342: 1b 06 06 fd  	addiw	a2, a2, -48
8020c346: 22 96        	add	a2, a2, s0
8020c348: 08 e2        	sd	a0, 0(a2)
8020c34a: 63 00 b5 02  	beq	a0, a1, 0x8020c36a <.LBB123_400+0x60>
8020c34e: 09 a0        	j	0x8020c350 <.LBB123_400+0x46>
8020c350: 71 75        	lui	a0, 1048572
8020c352: 1b 05 05 fd  	addiw	a0, a0, -48
8020c356: 22 95        	add	a0, a0, s0
8020c358: 0c 61        	ld	a1, 0(a0)
8020c35a: 75 75        	lui	a0, 1048573
8020c35c: 1b 05 05 9b  	addiw	a0, a0, -1616
8020c360: 22 95        	add	a0, a0, s0
8020c362: 97 40 ff ff  	auipc	ra, 1048564
8020c366: e7 80 c0 28  	jalr	652(ra)
;                                 } else if (string_eq(property_name, "interrupt-map")) {
8020c36a: 6f e0 9f ca  	j	0x8020b012 <.LBB123_368+0x4ce>

000000008020c36e <.LBB123_401>:
;                     .begin_node => self.parse_node(attribute_identation + 1, address_cells, size_cells),
8020c36e: 17 15 01 00  	auipc	a0, 17
8020c372: 13 05 25 11  	addi	a0, a0, 274
8020c376: 81 45        	mv	a1, zero
8020c378: 97 40 ff ff  	auipc	ra, 1048564
8020c37c: e7 80 80 d2  	jalr	-728(ra)
8020c380: 71 75        	lui	a0, 1048572
8020c382: 41 25        	addiw	a0, a0, 16
8020c384: 22 95        	add	a0, a0, s0
8020c386: 0c 61        	ld	a1, 0(a0)
8020c388: 71 75        	lui	a0, 1048572
8020c38a: 21 25        	addiw	a0, a0, 8
8020c38c: 22 95        	add	a0, a0, s0
8020c38e: 08 61        	ld	a0, 0(a0)
8020c390: 71 76        	lui	a2, 1048572
8020c392: 1b 06 c6 5f  	addiw	a2, a2, 1532
8020c396: 22 96        	add	a2, a2, s0
8020c398: 14 42        	lw	a3, 0(a2)
8020c39a: 71 76        	lui	a2, 1048572
8020c39c: 1b 06 06 60  	addiw	a2, a2, 1536
8020c3a0: 22 96        	add	a2, a2, s0
8020c3a2: 10 42        	lw	a2, 0(a2)
8020c3a4: 97 c0 ff ff  	auipc	ra, 1048572
8020c3a8: e7 80 e0 d5  	jalr	-674(ra)
;                 switch (token) {
8020c3ac: 4d b1        	j	0x8020c04e <.LBB123_390+0x8e>

000000008020c3ae <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.47>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8020c3ae: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
8020c3b0: 06 ec        	sd	ra, 24(sp)
8020c3b2: 22 e8        	sd	s0, 16(sp)
8020c3b4: 00 10        	addi	s0, sp, 32
8020c3b6: 23 30 a4 fe  	sd	a0, -32(s0)
8020c3ba: 97 80 00 00  	auipc	ra, 8
8020c3be: e7 80 80 7d  	jalr	2008(ra)
8020c3c2: aa 85        	mv	a1, a0
8020c3c4: 41 65        	lui	a0, 16
8020c3c6: 7d 35        	addiw	a0, a0, -1
8020c3c8: 6d 8d        	and	a0, a0, a1
8020c3ca: 23 17 b4 fe  	sh	a1, -18(s0)
8020c3ce: 81 45        	mv	a1, zero
8020c3d0: 63 0a b5 00  	beq	a0, a1, 0x8020c3e4 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.47+0x36>
8020c3d4: 09 a0        	j	0x8020c3d6 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.47+0x28>
8020c3d6: 03 35 04 fe  	ld	a0, -32(s0)
8020c3da: 97 40 ff ff  	auipc	ra, 1048564
8020c3de: e7 80 80 4c  	jalr	1224(ra)
8020c3e2: 11 a0        	j	0x8020c3e6 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.47+0x38>
8020c3e4: 09 a0        	j	0x8020c3e6 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.47+0x38>
8020c3e6: 03 15 e4 fe  	lh	a0, -18(s0)
8020c3ea: 42 64        	ld	s0, 16(sp)
8020c3ec: e2 60        	ld	ra, 24(sp)
8020c3ee: 05 61        	addi	sp, sp, 32
8020c3f0: 82 80        	ret

000000008020c3f2 <std.log.log.48>:
; fn log(
8020c3f2: 01 11        	addi	sp, sp, -32
8020c3f4: 06 ec        	sd	ra, 24(sp)
8020c3f6: 22 e8        	sd	s0, 16(sp)
8020c3f8: 00 10        	addi	s0, sp, 32
8020c3fa: 0d 45        	addi	a0, zero, 3
;         break :blk level;
8020c3fc: a3 07 a4 fe  	sb	a0, -17(s0)
8020c400: 09 a0        	j	0x8020c402 <std.log.log.48+0x10>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
8020c402: 03 45 f4 fe  	lbu	a0, -17(s0)
8020c406: 8d 45        	addi	a1, zero, 3
8020c408: 63 18 b5 00  	bne	a0, a1, 0x8020c418 <std.log.log.48+0x26>
8020c40c: 09 a0        	j	0x8020c40e <std.log.log.48+0x1c>
;             root.log(message_level, scope, format, args);
8020c40e: 97 80 00 00  	auipc	ra, 8
8020c412: e7 80 e0 7a  	jalr	1966(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
8020c416: 11 a0        	j	0x8020c41a <std.log.log.48+0x28>
8020c418: 09 a0        	j	0x8020c41a <std.log.log.48+0x28>
; ) void {
8020c41a: 42 64        	ld	s0, 16(sp)
8020c41c: e2 60        	ld	ra, 24(sp)
8020c41e: 05 61        	addi	sp, sp, 32
8020c420: 82 80        	ret

000000008020c422 <arch.riscv64.device_tree.get_node_finding_parser>:
; pub fn get_node_finding_parser(self: *@This()) StructureBlock.Parser {
8020c422: 1d 71        	addi	sp, sp, -96
8020c424: 86 ec        	sd	ra, 88(sp)
8020c426: a2 e8        	sd	s0, 80(sp)
8020c428: 80 10        	addi	s0, sp, 96
8020c42a: 23 34 a4 fc  	sd	a0, -56(s0)
8020c42e: 23 3c b4 fc  	sd	a1, -40(s0)
;     const slice_size = self.header.device_tree_struct_size - self.main_nodes_start;
8020c432: 03 e5 45 02  	lwu	a0, 36(a1)
8020c436: 8c 79        	ld	a1, 48(a1)
8020c438: b3 05 b5 40  	sub	a1, a0, a1
8020c43c: 23 38 b4 fc  	sd	a1, -48(s0)
8020c440: 63 7c b5 00  	bgeu	a0, a1, 0x8020c458 <.LBB126_11+0x12>
8020c444: 09 a0        	j	0x8020c446 <.LBB126_11>

000000008020c446 <.LBB126_11>:
8020c446: 17 15 01 00  	auipc	a0, 17
8020c44a: 13 05 a5 03  	addi	a0, a0, 58
8020c44e: 81 45        	mv	a1, zero
8020c450: 97 40 ff ff  	auipc	ra, 1048564
8020c454: e7 80 00 c5  	jalr	-944(ra)
8020c458: 03 35 84 fc  	ld	a0, -56(s0)
8020c45c: 83 35 04 fd  	ld	a1, -48(s0)
8020c460: 23 34 b4 fe  	sd	a1, -24(s0)
;         .slice = @intToPtr([*]u8, self.base_address + self.header.device_tree_struct_offset + self.main_nodes_start)[0..slice_size],
8020c464: 23 3c a4 fa  	sd	a0, -72(s0)
8020c468: 03 35 84 fd  	ld	a0, -40(s0)
8020c46c: 0c 75        	ld	a1, 40(a0)
8020c46e: 03 65 85 00  	lwu	a0, 8(a0)
8020c472: 2e 95        	add	a0, a0, a1
8020c474: 23 30 a4 fc  	sd	a0, -64(s0)
8020c478: 63 7c b5 00  	bgeu	a0, a1, 0x8020c490 <.LBB126_12+0x12>
8020c47c: 09 a0        	j	0x8020c47e <.LBB126_12>

000000008020c47e <.LBB126_12>:
8020c47e: 17 15 01 00  	auipc	a0, 17
8020c482: 13 05 25 00  	addi	a0, a0, 2
8020c486: 81 45        	mv	a1, zero
8020c488: 97 40 ff ff  	auipc	ra, 1048564
8020c48c: e7 80 80 c1  	jalr	-1000(ra)
8020c490: 83 35 04 fc  	ld	a1, -64(s0)
8020c494: 03 35 84 fd  	ld	a0, -40(s0)
8020c498: 08 79        	ld	a0, 48(a0)
8020c49a: 2e 95        	add	a0, a0, a1
8020c49c: 23 38 a4 fa  	sd	a0, -80(s0)
8020c4a0: 63 7c b5 00  	bgeu	a0, a1, 0x8020c4b8 <.LBB126_13+0x12>
8020c4a4: 09 a0        	j	0x8020c4a6 <.LBB126_13>

000000008020c4a6 <.LBB126_13>:
8020c4a6: 17 15 01 00  	auipc	a0, 17
8020c4aa: 13 05 a5 fd  	addi	a0, a0, -38
8020c4ae: 81 45        	mv	a1, zero
8020c4b0: 97 40 ff ff  	auipc	ra, 1048564
8020c4b4: e7 80 00 bf  	jalr	-1040(ra)
8020c4b8: 03 35 04 fb  	ld	a0, -80(s0)
8020c4bc: 81 45        	mv	a1, zero
;         .slice = @intToPtr([*]u8, self.base_address + self.header.device_tree_struct_offset + self.main_nodes_start)[0..slice_size],
8020c4be: 63 1c b5 00  	bne	a0, a1, 0x8020c4d6 <.LBB126_14+0x12>
8020c4c2: 09 a0        	j	0x8020c4c4 <.LBB126_14>

000000008020c4c4 <.LBB126_14>:
8020c4c4: 17 15 01 00  	auipc	a0, 17
8020c4c8: 13 05 45 03  	addi	a0, a0, 52
8020c4cc: 81 45        	mv	a1, zero
8020c4ce: 97 40 ff ff  	auipc	ra, 1048564
8020c4d2: e7 80 20 bd  	jalr	-1070(ra)
8020c4d6: 03 35 04 fb  	ld	a0, -80(s0)
8020c4da: 23 30 a4 fe  	sd	a0, -32(s0)
8020c4de: 83 35 84 fe  	ld	a1, -24(s0)
8020c4e2: 23 30 b4 fa  	sd	a1, -96(s0)
8020c4e6: 23 34 a4 fa  	sd	a0, -88(s0)
8020c4ea: 81 45        	mv	a1, zero
8020c4ec: 05 45        	addi	a0, zero, 1
8020c4ee: 63 1c b5 00  	bne	a0, a1, 0x8020c506 <.LBB126_15+0x12>
8020c4f2: 09 a0        	j	0x8020c4f4 <.LBB126_15>

000000008020c4f4 <.LBB126_15>:
8020c4f4: 17 15 01 00  	auipc	a0, 17
8020c4f8: 13 05 c5 e0  	addi	a0, a0, -500
8020c4fc: 81 45        	mv	a1, zero
8020c4fe: 97 40 ff ff  	auipc	ra, 1048564
8020c502: e7 80 20 ba  	jalr	-1118(ra)
8020c506: 83 35 84 fc  	ld	a1, -56(s0)
8020c50a: 03 35 04 fa  	ld	a0, -96(s0)
8020c50e: 03 36 84 fb  	ld	a2, -72(s0)
8020c512: 83 36 84 fa  	ld	a3, -88(s0)
8020c516: 14 e2        	sd	a3, 0(a2)
8020c518: 08 e6        	sd	a0, 8(a2)
8020c51a: 01 45        	mv	a0, zero
;         .i = 0,
8020c51c: 88 e9        	sd	a0, 16(a1)
;         .device_tree = self,
8020c51e: 03 35 84 fd  	ld	a0, -40(s0)
8020c522: 88 ed        	sd	a0, 24(a1)
;     return StructureBlock.Parser{
8020c524: 46 64        	ld	s0, 80(sp)
8020c526: e6 60        	ld	ra, 88(sp)
8020c528: 25 61        	addi	sp, sp, 96
8020c52a: 82 80        	ret

000000008020c52c <arch.riscv64.device_tree.Parser.find_node_from_current_offset>:
;         fn find_node_from_current_offset(self: *@This(), wanted_node_name: []const u8, search_type: SearchType) ?[]const u8 {
8020c52c: 15 71        	addi	sp, sp, -224
8020c52e: 86 ed        	sd	ra, 216(sp)
8020c530: a2 e9        	sd	s0, 208(sp)
8020c532: 80 11        	addi	s0, sp, 224
8020c534: 23 3c c4 f2  	sd	a2, -200(s0)
8020c538: 23 30 a4 f4  	sd	a0, -192(s0)
8020c53c: 23 38 b4 f4  	sd	a1, -176(s0)
8020c540: 13 f5 36 00  	andi	a0, a3, 3
8020c544: a3 07 a4 f4  	sb	a0, -177(s0)
;             while (true) {
8020c548: 09 a0        	j	0x8020c54a <arch.riscv64.device_tree.Parser.find_node_from_current_offset+0x1e>
8020c54a: 09 a0        	j	0x8020c54c <arch.riscv64.device_tree.Parser.find_node_from_current_offset+0x20>
;                 const token = self.parse_token();
8020c54c: 03 35 04 f5  	ld	a0, -176(s0)
8020c550: 97 b0 ff ff  	auipc	ra, 1048571
8020c554: e7 80 20 6e  	jalr	1762(ra)
8020c558: 23 2a a4 f6  	sw	a0, -140(s0)
;                 switch (token) {
8020c55c: 02 15        	slli	a0, a0, 32
8020c55e: 01 91        	srli	a0, a0, 32
8020c560: 23 38 a4 f2  	sd	a0, -208(s0)
8020c564: 85 45        	addi	a1, zero, 1
8020c566: 63 0b b5 02  	beq	a0, a1, 0x8020c59c <arch.riscv64.device_tree.Parser.find_node_from_current_offset+0x70>
8020c56a: 09 a0        	j	0x8020c56c <arch.riscv64.device_tree.Parser.find_node_from_current_offset+0x40>
8020c56c: 03 35 04 f3  	ld	a0, -208(s0)
8020c570: 01 25        	sext.w	a0, a0
8020c572: 89 45        	addi	a1, zero, 2
;                 switch (token) {
8020c574: 63 03 b5 14  	beq	a0, a1, 0x8020c6ba <.LBB127_21+0xe6>
8020c578: 09 a0        	j	0x8020c57a <arch.riscv64.device_tree.Parser.find_node_from_current_offset+0x4e>
8020c57a: 03 35 04 f3  	ld	a0, -208(s0)
8020c57e: 01 25        	sext.w	a0, a0
8020c580: 8d 45        	addi	a1, zero, 3
;                 switch (token) {
8020c582: 63 04 b5 14  	beq	a0, a1, 0x8020c6ca <.LBB127_21+0xf6>
8020c586: 09 a0        	j	0x8020c588 <arch.riscv64.device_tree.Parser.find_node_from_current_offset+0x5c>
;                     else => kernel.panic("NI: {}\n", .{token}),
8020c588: 03 25 44 f7  	lw	a0, -140(s0)
8020c58c: 23 28 a4 f6  	sw	a0, -144(s0)
8020c590: 13 05 04 f7  	addi	a0, s0, -144
8020c594: 97 80 00 00  	auipc	ra, 8
8020c598: e7 80 60 68  	jalr	1670(ra)
;                         const node_name = self.parse_begin_node();
8020c59c: 83 35 04 f5  	ld	a1, -176(s0)
8020c5a0: 13 05 04 f6  	addi	a0, s0, -160
8020c5a4: 97 b0 ff ff  	auipc	ra, 1048571
8020c5a8: e7 80 a0 70  	jalr	1802(ra)
;                         const found = switch (search_type) {
8020c5ac: 03 45 f4 f4  	lbu	a0, -177(s0)
8020c5b0: 23 34 a4 f2  	sd	a0, -216(s0)
8020c5b4: 89 45        	addi	a1, zero, 2
8020c5b6: 63 00 b5 0a  	beq	a0, a1, 0x8020c656 <.LBB127_21+0x82>
8020c5ba: 09 a0        	j	0x8020c5bc <arch.riscv64.device_tree.Parser.find_node_from_current_offset+0x90>
8020c5bc: 03 35 84 f2  	ld	a0, -216(s0)
8020c5c0: 81 45        	mv	a1, zero
;                         const found = switch (search_type) {
8020c5c2: 63 02 b5 02  	beq	a0, a1, 0x8020c5e6 <.LBB127_21+0x12>
8020c5c6: 09 a0        	j	0x8020c5c8 <arch.riscv64.device_tree.Parser.find_node_from_current_offset+0x9c>
8020c5c8: 03 35 84 f2  	ld	a0, -216(s0)
8020c5cc: 85 45        	addi	a1, zero, 1
;                         const found = switch (search_type) {
8020c5ce: 63 08 b5 04  	beq	a0, a1, 0x8020c61e <.LBB127_21+0x4a>
8020c5d2: 09 a0        	j	0x8020c5d4 <.LBB127_21>

000000008020c5d4 <.LBB127_21>:
8020c5d4: 17 15 01 00  	auipc	a0, 17
8020c5d8: 13 05 c5 eb  	addi	a0, a0, -324
8020c5dc: 81 45        	mv	a1, zero
8020c5de: 97 40 ff ff  	auipc	ra, 1048564
8020c5e2: e7 80 20 ac  	jalr	-1342(ra)
;     return std.mem.eql(u8, a, b);
8020c5e6: 83 35 84 f3  	ld	a1, -200(s0)
8020c5ea: 03 35 84 f6  	ld	a0, -152(s0)
8020c5ee: 23 38 a4 f8  	sd	a0, -112(s0)
8020c5f2: 03 35 04 f6  	ld	a0, -160(s0)
8020c5f6: 23 34 a4 f8  	sd	a0, -120(s0)
8020c5fa: 88 61        	ld	a0, 0(a1)
8020c5fc: 23 3c a4 f6  	sd	a0, -136(s0)
8020c600: 88 65        	ld	a0, 8(a1)
8020c602: 23 30 a4 f8  	sd	a0, -128(s0)
8020c606: 13 05 04 f6  	addi	a0, s0, -160
8020c60a: 97 80 00 00  	auipc	ra, 8
8020c60e: e7 80 a0 d1  	jalr	-742(ra)
8020c612: 05 89        	andi	a0, a0, 1
8020c614: a3 0f a4 f8  	sb	a0, -97(s0)
;                             .exact => string_eq(node_name, wanted_node_name),
8020c618: a3 0f a4 f4  	sb	a0, -161(s0)
;                         const found = switch (search_type) {
8020c61c: 8d a8        	j	0x8020c68e <.LBB127_21+0xba>
;     return std.mem.startsWith(u8, str, slice);
8020c61e: 83 35 84 f3  	ld	a1, -200(s0)
8020c622: 03 35 84 f6  	ld	a0, -152(s0)
8020c626: 23 3c a4 fa  	sd	a0, -72(s0)
8020c62a: 03 35 04 f6  	ld	a0, -160(s0)
8020c62e: 23 38 a4 fa  	sd	a0, -80(s0)
8020c632: 88 61        	ld	a0, 0(a1)
8020c634: 23 30 a4 fa  	sd	a0, -96(s0)
8020c638: 88 65        	ld	a0, 8(a1)
8020c63a: 23 34 a4 fa  	sd	a0, -88(s0)
8020c63e: 13 05 04 f6  	addi	a0, s0, -160
8020c642: 97 a0 00 00  	auipc	ra, 10
8020c646: e7 80 c0 0e  	jalr	236(ra)
8020c64a: 05 89        	andi	a0, a0, 1
8020c64c: a3 03 a4 fc  	sb	a0, -57(s0)
;                             .start => starts_with(node_name, wanted_node_name),
8020c650: a3 0f a4 f4  	sb	a0, -161(s0)
;                         const found = switch (search_type) {
8020c654: 2d a8        	j	0x8020c68e <.LBB127_21+0xba>
;     return std.mem.endsWith(u8, str, slice);
8020c656: 83 35 84 f3  	ld	a1, -200(s0)
8020c65a: 03 35 84 f6  	ld	a0, -152(s0)
8020c65e: 23 30 a4 fe  	sd	a0, -32(s0)
8020c662: 03 35 04 f6  	ld	a0, -160(s0)
8020c666: 23 3c a4 fc  	sd	a0, -40(s0)
8020c66a: 88 61        	ld	a0, 0(a1)
8020c66c: 23 34 a4 fc  	sd	a0, -56(s0)
8020c670: 88 65        	ld	a0, 8(a1)
8020c672: 23 38 a4 fc  	sd	a0, -48(s0)
8020c676: 13 05 04 f6  	addi	a0, s0, -160
8020c67a: 97 b0 00 00  	auipc	ra, 11
8020c67e: e7 80 40 9c  	jalr	-1596(ra)
8020c682: 05 89        	andi	a0, a0, 1
8020c684: a3 07 a4 fe  	sb	a0, -17(s0)
;                             .end => ends_with(node_name, wanted_node_name),
8020c688: a3 0f a4 f4  	sb	a0, -161(s0)
;                         const found = switch (search_type) {
8020c68c: 09 a0        	j	0x8020c68e <.LBB127_21+0xba>
;                         if (found) {
8020c68e: 03 45 f4 f5  	lbu	a0, -161(s0)
8020c692: 81 45        	mv	a1, zero
8020c694: 63 02 b5 02  	beq	a0, a1, 0x8020c6b8 <.LBB127_21+0xe4>
8020c698: 09 a0        	j	0x8020c69a <.LBB127_21+0xc6>
8020c69a: 83 35 04 f4  	ld	a1, -192(s0)
8020c69e: 05 45        	addi	a0, zero, 1
;                             return node_name;
8020c6a0: 23 88 a5 00  	sb	a0, 16(a1)
8020c6a4: 03 35 04 f6  	ld	a0, -160(s0)
8020c6a8: 88 e1        	sd	a0, 0(a1)
8020c6aa: 03 35 84 f6  	ld	a0, -152(s0)
8020c6ae: 88 e5        	sd	a0, 8(a1)
8020c6b0: 4e 64        	ld	s0, 208(sp)
8020c6b2: ee 60        	ld	ra, 216(sp)
8020c6b4: 2d 61        	addi	sp, sp, 224
8020c6b6: 82 80        	ret
;                         if (found) {
8020c6b8: 11 a0        	j	0x8020c6bc <.LBB127_21+0xe8>
;                     .end_node => break,
8020c6ba: 05 a0        	j	0x8020c6da <.LBB127_21+0x106>
;                         self.skip_node();
8020c6bc: 03 35 04 f5  	ld	a0, -176(s0)
8020c6c0: 97 80 00 00  	auipc	ra, 8
8020c6c4: e7 80 20 59  	jalr	1426(ra)
;                 switch (token) {
8020c6c8: 01 a8        	j	0x8020c6d8 <.LBB127_21+0x104>
;                     .property => self.skip_property(),
8020c6ca: 03 35 04 f5  	ld	a0, -176(s0)
8020c6ce: 97 80 00 00  	auipc	ra, 8
8020c6d2: e7 80 80 61  	jalr	1560(ra)
;                 switch (token) {
8020c6d6: 09 a0        	j	0x8020c6d8 <.LBB127_21+0x104>
;             while (true) {
8020c6d8: 8d bd        	j	0x8020c54a <arch.riscv64.device_tree.Parser.find_node_from_current_offset+0x1e>
8020c6da: 83 35 04 f4  	ld	a1, -192(s0)

000000008020c6de <.LBB127_22>:
8020c6de: 17 25 01 00  	auipc	a0, 18
8020c6e2: 13 05 25 db  	addi	a0, a0, -590
;             return null;
8020c6e6: 10 69        	ld	a2, 16(a0)
8020c6e8: 90 e9        	sd	a2, 16(a1)
8020c6ea: 10 65        	ld	a2, 8(a0)
8020c6ec: 90 e5        	sd	a2, 8(a1)
8020c6ee: 08 61        	ld	a0, 0(a0)
8020c6f0: 88 e1        	sd	a0, 0(a1)
8020c6f2: 4e 64        	ld	s0, 208(sp)
8020c6f4: ee 60        	ld	ra, 216(sp)
8020c6f6: 2d 61        	addi	sp, sp, 224
8020c6f8: 82 80        	ret

000000008020c6fa <arch.riscv64.device_tree.Parser.find_property_in_current_node>:
;         pub fn find_property_in_current_node(self: *@This(), wanted_property_name: []const u8) ?Property {
8020c6fa: 11 71        	addi	sp, sp, -256
8020c6fc: 86 fd        	sd	ra, 248(sp)
8020c6fe: a2 f9        	sd	s0, 240(sp)
8020c700: 00 02        	addi	s0, sp, 256
8020c702: 23 34 c4 f4  	sd	a2, -184(s0)
8020c706: 23 38 a4 f4  	sd	a0, -176(s0)
8020c70a: 23 3c b4 f4  	sd	a1, -168(s0)
;             while (true) {
8020c70e: 09 a0        	j	0x8020c710 <arch.riscv64.device_tree.Parser.find_property_in_current_node+0x16>
8020c710: 09 a0        	j	0x8020c712 <arch.riscv64.device_tree.Parser.find_property_in_current_node+0x18>
;                 const token = self.parse_token();
8020c712: 03 35 84 f5  	ld	a0, -168(s0)
8020c716: 97 b0 ff ff  	auipc	ra, 1048571
8020c71a: e7 80 c0 51  	jalr	1308(ra)
8020c71e: aa 85        	mv	a1, a0
8020c720: 1b 85 05 00  	sext.w	a0, a1
8020c724: 23 26 b4 f8  	sw	a1, -116(s0)
8020c728: 8d 45        	addi	a1, zero, 3
;                 switch (token) {
8020c72a: 63 0d b5 00  	beq	a0, a1, 0x8020c744 <arch.riscv64.device_tree.Parser.find_property_in_current_node+0x4a>
8020c72e: 09 a0        	j	0x8020c730 <arch.riscv64.device_tree.Parser.find_property_in_current_node+0x36>
;                     else => kernel.panic("NI find: {}\n", .{token}),
8020c730: 03 25 c4 f8  	lw	a0, -116(s0)
8020c734: 23 24 a4 f8  	sw	a0, -120(s0)
8020c738: 13 05 84 f8  	addi	a0, s0, -120
8020c73c: 97 80 00 00  	auipc	ra, 8
8020c740: e7 80 00 5e  	jalr	1504(ra)
;                         const property_value_descriptor = self.parse_property_value_descriptor();
8020c744: 83 35 84 f5  	ld	a1, -168(s0)
8020c748: 13 05 04 f8  	addi	a0, s0, -128
8020c74c: 23 34 a4 f2  	sd	a0, -216(s0)
8020c750: 97 b0 ff ff  	auipc	ra, 1048571
8020c754: e7 80 00 65  	jalr	1616(ra)
8020c758: 03 36 84 f2  	ld	a2, -216(s0)
;                         const property_name = self.parse_string_in_string_table(property_value_descriptor);
8020c75c: 83 35 84 f5  	ld	a1, -168(s0)
8020c760: 13 05 04 f7  	addi	a0, s0, -144
8020c764: 97 b0 ff ff  	auipc	ra, 1048571
8020c768: e7 80 e0 67  	jalr	1662(ra)
;                         const property_value = self.slice.ptr[self.i .. self.i + property_value_descriptor.len];
8020c76c: 03 35 84 f5  	ld	a0, -168(s0)
8020c770: 23 38 a4 f2  	sd	a0, -208(s0)
8020c774: 0c 69        	ld	a1, 16(a0)
8020c776: 23 3c b4 f2  	sd	a1, -200(s0)
8020c77a: 03 65 04 f8  	lwu	a0, -128(s0)
8020c77e: 2e 95        	add	a0, a0, a1
8020c780: 23 30 a4 f4  	sd	a0, -192(s0)
8020c784: 63 61 b5 04  	bltu	a0, a1, 0x8020c7c6 <.LBB128_19>
8020c788: 81 a8        	j	0x8020c7d8 <.LBB128_19+0x12>
8020c78a: 83 35 04 f5  	ld	a1, -176(s0)
8020c78e: 85 47        	addi	a5, zero, 1
;                             return Property{
8020c790: 23 80 f5 02  	sb	a5, 32(a1)
;                                 .name = property_name,
8020c794: 03 37 04 f7  	ld	a4, -144(s0)
8020c798: 98 e1        	sd	a4, 0(a1)
8020c79a: 83 36 84 f7  	ld	a3, -136(s0)
8020c79e: 94 e5        	sd	a3, 8(a1)
;                                 .value = property_value,
8020c7a0: 03 36 84 f6  	ld	a2, -152(s0)
8020c7a4: 90 ed        	sd	a2, 24(a1)
8020c7a6: 03 35 04 f6  	ld	a0, -160(s0)
8020c7aa: 88 e9        	sd	a0, 16(a1)
;                             return Property{
8020c7ac: 23 80 f5 02  	sb	a5, 32(a1)
8020c7b0: 98 e1        	sd	a4, 0(a1)
8020c7b2: 94 e5        	sd	a3, 8(a1)
8020c7b4: 90 ed        	sd	a2, 24(a1)
8020c7b6: 88 e9        	sd	a0, 16(a1)
8020c7b8: 4e 74        	ld	s0, 240(sp)
8020c7ba: ee 70        	ld	ra, 248(sp)
8020c7bc: 11 61        	addi	sp, sp, 256
8020c7be: 82 80        	ret
;                         if (string_eq(property_name, wanted_property_name)) {
8020c7c0: 09 a0        	j	0x8020c7c2 <arch.riscv64.device_tree.Parser.find_property_in_current_node+0xc8>
;                 switch (token) {
8020c7c2: 09 a0        	j	0x8020c7c4 <arch.riscv64.device_tree.Parser.find_property_in_current_node+0xca>
;             while (true) {
8020c7c4: b1 b7        	j	0x8020c710 <arch.riscv64.device_tree.Parser.find_property_in_current_node+0x16>

000000008020c7c6 <.LBB128_19>:
;                         const property_value = self.slice.ptr[self.i .. self.i + property_value_descriptor.len];
8020c7c6: 17 15 01 00  	auipc	a0, 17
8020c7ca: 13 05 a5 cb  	addi	a0, a0, -838
8020c7ce: 81 45        	mv	a1, zero
8020c7d0: 97 40 ff ff  	auipc	ra, 1048564
8020c7d4: e7 80 00 8d  	jalr	-1840(ra)
8020c7d8: 03 35 04 f4  	ld	a0, -192(s0)
8020c7dc: 83 35 84 f3  	ld	a1, -200(s0)
8020c7e0: 03 36 04 f3  	ld	a2, -208(s0)
8020c7e4: 10 62        	ld	a2, 0(a2)
8020c7e6: 23 30 c4 f2  	sd	a2, -224(s0)
8020c7ea: 63 7c b5 00  	bgeu	a0, a1, 0x8020c802 <.LBB128_20+0x12>
8020c7ee: 09 a0        	j	0x8020c7f0 <.LBB128_20>

000000008020c7f0 <.LBB128_20>:
8020c7f0: 17 15 01 00  	auipc	a0, 17
8020c7f4: 13 05 05 b1  	addi	a0, a0, -1264
8020c7f8: 81 45        	mv	a1, zero
8020c7fa: 97 40 ff ff  	auipc	ra, 1048564
8020c7fe: e7 80 60 8a  	jalr	-1882(ra)
8020c802: 03 35 04 f4  	ld	a0, -192(s0)
8020c806: 03 36 84 f3  	ld	a2, -200(s0)
8020c80a: 83 35 04 f2  	ld	a1, -224(s0)
8020c80e: b2 95        	add	a1, a1, a2
8020c810: 11 8d        	sub	a0, a0, a2
8020c812: 23 30 b4 f6  	sd	a1, -160(s0)
8020c816: 23 34 a4 f6  	sd	a0, -152(s0)
;                         self.i = align_to_u32(self.i + property_value_descriptor.len);
8020c81a: 03 35 84 f5  	ld	a0, -168(s0)
8020c81e: 93 05 05 01  	addi	a1, a0, 16
8020c822: 23 38 b4 f0  	sd	a1, -240(s0)
8020c826: 0c 69        	ld	a1, 16(a0)
8020c828: 03 65 04 f8  	lwu	a0, -128(s0)
8020c82c: 2e 95        	add	a0, a0, a1
8020c82e: 23 3c a4 f0  	sd	a0, -232(s0)
8020c832: 63 7c b5 00  	bgeu	a0, a1, 0x8020c84a <.LBB128_21+0x12>
8020c836: 09 a0        	j	0x8020c838 <.LBB128_21>

000000008020c838 <.LBB128_21>:
8020c838: 17 15 01 00  	auipc	a0, 17
8020c83c: 13 05 85 c4  	addi	a0, a0, -952
8020c840: 81 45        	mv	a1, zero
8020c842: 97 40 ff ff  	auipc	ra, 1048564
8020c846: e7 80 e0 85  	jalr	-1954(ra)
8020c84a: 03 35 84 f1  	ld	a0, -232(s0)
8020c84e: 23 3c a4 fa  	sd	a0, -72(s0)
8020c852: 23 38 a4 fc  	sd	a0, -48(s0)
8020c856: 11 45        	addi	a0, zero, 4
8020c858: 23 34 a4 fc  	sd	a0, -56(s0)
8020c85c: 0d 45        	addi	a0, zero, 3
8020c85e: 23 34 a4 f0  	sd	a0, -248(s0)
8020c862: 01 45        	mv	a0, zero
;     const mask: u64 = alignment - 1;
8020c864: 63 0c a5 00  	beq	a0, a0, 0x8020c87c <.LBB128_22+0x12>
8020c868: 09 a0        	j	0x8020c86a <.LBB128_22>

000000008020c86a <.LBB128_22>:
8020c86a: 17 15 01 00  	auipc	a0, 17
8020c86e: 13 05 65 c1  	addi	a0, a0, -1002
8020c872: 81 45        	mv	a1, zero
8020c874: 97 40 ff ff  	auipc	ra, 1048564
8020c878: e7 80 c0 82  	jalr	-2004(ra)
8020c87c: 03 35 84 f0  	ld	a0, -248(s0)
8020c880: 23 30 a4 fe  	sd	a0, -32(s0)
;     const result = (n + mask) & ~mask;
8020c884: 83 35 04 fd  	ld	a1, -48(s0)
8020c888: 2e 95        	add	a0, a0, a1
8020c88a: 23 30 a4 f0  	sd	a0, -256(s0)
8020c88e: 63 7c b5 00  	bgeu	a0, a1, 0x8020c8a6 <.LBB128_23+0x12>
8020c892: 09 a0        	j	0x8020c894 <.LBB128_23>

000000008020c894 <.LBB128_23>:
8020c894: 17 15 01 00  	auipc	a0, 17
8020c898: 13 05 c5 be  	addi	a0, a0, -1044
8020c89c: 81 45        	mv	a1, zero
8020c89e: 97 40 ff ff  	auipc	ra, 1048564
8020c8a2: e7 80 20 80  	jalr	-2046(ra)
8020c8a6: 83 35 84 f4  	ld	a1, -184(s0)
8020c8aa: 03 36 04 f1  	ld	a2, -240(s0)
8020c8ae: 03 35 04 f0  	ld	a0, -256(s0)
8020c8b2: 83 36 04 fe  	ld	a3, -32(s0)
8020c8b6: 93 c6 f6 ff  	not	a3, a3
8020c8ba: 75 8d        	and	a0, a0, a3
8020c8bc: 23 3c a4 fc  	sd	a0, -40(s0)
;     return result;
8020c8c0: 23 34 a4 fe  	sd	a0, -24(s0)
;             return align_forward(i, @sizeOf(u32));
8020c8c4: 23 30 a4 fc  	sd	a0, -64(s0)
;                         self.i = align_to_u32(self.i + property_value_descriptor.len);
8020c8c8: 08 e2        	sd	a0, 0(a2)
;     return std.mem.eql(u8, a, b);
8020c8ca: 03 35 84 f7  	ld	a0, -136(s0)
8020c8ce: 23 34 a4 fa  	sd	a0, -88(s0)
8020c8d2: 03 35 04 f7  	ld	a0, -144(s0)
8020c8d6: 23 30 a4 fa  	sd	a0, -96(s0)
8020c8da: 88 61        	ld	a0, 0(a1)
8020c8dc: 23 38 a4 f8  	sd	a0, -112(s0)
8020c8e0: 88 65        	ld	a0, 8(a1)
8020c8e2: 23 3c a4 f8  	sd	a0, -104(s0)
8020c8e6: 13 05 04 f7  	addi	a0, s0, -144
8020c8ea: 97 80 00 00  	auipc	ra, 8
8020c8ee: e7 80 a0 a3  	jalr	-1478(ra)
8020c8f2: 05 89        	andi	a0, a0, 1
8020c8f4: a3 0b a4 fa  	sb	a0, -73(s0)
8020c8f8: 81 45        	mv	a1, zero
;                         if (string_eq(property_name, wanted_property_name)) {
8020c8fa: e3 18 b5 e8  	bne	a0, a1, 0x8020c78a <arch.riscv64.device_tree.Parser.find_property_in_current_node+0x90>
8020c8fe: c9 b5        	j	0x8020c7c0 <arch.riscv64.device_tree.Parser.find_property_in_current_node+0xc6>

000000008020c900 <std.mem.readIntForeign>:
; pub fn readIntForeign(comptime T: type, bytes: *const [@divExact(@typeInfo(T).Int.bits, 8)]u8) T {
8020c900: 79 71        	addi	sp, sp, -48
8020c902: 06 f4        	sd	ra, 40(sp)
8020c904: 22 f0        	sd	s0, 32(sp)
8020c906: 00 18        	addi	s0, sp, 48
8020c908: 23 3c a4 fc  	sd	a0, -40(s0)
;     return @byteSwap(T, readIntNative(T, bytes));
8020c90c: 23 30 a4 fe  	sd	a0, -32(s0)
8020c910: 97 80 00 00  	auipc	ra, 8
8020c914: e7 80 40 44  	jalr	1092(ra)
8020c918: 9b 55 85 00  	srliw	a1, a0, 8
8020c91c: 41 66        	lui	a2, 16
8020c91e: 1b 06 06 f0  	addiw	a2, a2, -256
8020c922: f1 8d        	and	a1, a1, a2
8020c924: 1b 56 85 01  	srliw	a2, a0, 24
8020c928: d1 8d        	or	a1, a1, a2
8020c92a: 13 16 85 00  	slli	a2, a0, 8
8020c92e: b7 06 ff 00  	lui	a3, 4080
8020c932: 75 8e        	and	a2, a2, a3
8020c934: 62 05        	slli	a0, a0, 24
8020c936: 51 8d        	or	a0, a0, a2
8020c938: 4d 8d        	or	a0, a0, a1
8020c93a: 23 26 a4 fe  	sw	a0, -20(s0)
8020c93e: 02 74        	ld	s0, 32(sp)
8020c940: a2 70        	ld	ra, 40(sp)
8020c942: 45 61        	addi	sp, sp, 48
8020c944: 82 80        	ret

000000008020c946 <arch.riscv64.memory_map.get>:
; pub fn get() MemoryMap {
8020c946: 13 01 01 c4  	addi	sp, sp, -960
;     const memory_properties = kernel.arch.device_tree.find_property("memory", "reg", .start, null, null) orelse @panic("not found");
8020c94a: 23 3c 11 3a  	sd	ra, 952(sp)
8020c94e: 23 38 81 3a  	sd	s0, 944(sp)
8020c952: 80 07        	addi	s0, sp, 960
8020c954: 23 38 a4 d6  	sd	a0, -656(s0)

000000008020c958 <.LBB130_77>:
8020c958: 97 85 01 00  	auipc	a1, 24
8020c95c: 93 85 85 6e  	addi	a1, a1, 1768

000000008020c960 <.LBB130_78>:
8020c960: 17 26 01 00  	auipc	a2, 18
8020c964: 13 06 86 b4  	addi	a2, a2, -1208

000000008020c968 <.LBB130_79>:
8020c968: 97 26 01 00  	auipc	a3, 18
8020c96c: 93 86 06 b5  	addi	a3, a3, -1200

000000008020c970 <.LBB130_80>:
8020c970: 17 27 01 00  	auipc	a4, 18
8020c974: 13 07 87 b5  	addi	a4, a4, -1192
8020c978: 13 05 84 f8  	addi	a0, s0, -120
8020c97c: 97 80 00 00  	auipc	ra, 8
8020c980: e7 80 00 43  	jalr	1072(ra)
8020c984: 03 45 84 fa  	lbu	a0, -88(s0)
8020c988: 81 45        	mv	a1, zero
8020c98a: 63 1c b5 00  	bne	a0, a1, 0x8020c9a2 <.LBB130_81+0x12>
8020c98e: 09 a0        	j	0x8020c990 <.LBB130_81>

000000008020c990 <.LBB130_81>:
8020c990: 17 25 01 00  	auipc	a0, 18
8020c994: 13 05 05 b5  	addi	a0, a0, -1200
8020c998: 81 45        	mv	a1, zero
8020c99a: 97 30 ff ff  	auipc	ra, 1048563
8020c99e: e7 80 60 70  	jalr	1798(ra)
8020c9a2: 03 35 04 fa  	ld	a0, -96(s0)
8020c9a6: 23 30 a4 f8  	sd	a0, -128(s0)
8020c9aa: 03 35 84 f9  	ld	a0, -104(s0)
8020c9ae: 23 3c a4 f6  	sd	a0, -136(s0)
8020c9b2: 03 35 04 f9  	ld	a0, -112(s0)
8020c9b6: 23 38 a4 f6  	sd	a0, -144(s0)
8020c9ba: 03 35 84 f8  	ld	a0, -120(s0)
8020c9be: 23 34 a4 f6  	sd	a0, -152(s0)
8020c9c2: 09 a0        	j	0x8020c9c4 <.LBB130_81+0x34>
8020c9c4: 01 45        	mv	a0, zero
;     var bytes_processed: u64 = 0;
8020c9c6: 23 30 a4 f6  	sd	a0, -160(s0)

000000008020c9ca <.LBB130_82>:
;     memory_map.available.ptr = &available.array;
8020c9ca: 97 65 46 00  	auipc	a1, 1126
8020c9ce: 93 85 65 6b  	addi	a1, a1, 1718
8020c9d2: 23 30 b4 f4  	sd	a1, -192(s0)
;     memory_map.available.len = 0;
8020c9d6: 23 34 a4 f4  	sd	a0, -184(s0)

000000008020c9da <.LBB130_83>:
;     memory_map.reserved.ptr = &reserved.array;
8020c9da: 97 75 46 00  	auipc	a1, 1127
8020c9de: 93 85 e5 aa  	addi	a1, a1, -1362
8020c9e2: 23 38 b4 f4  	sd	a1, -176(s0)
;     memory_map.reserved.len = 0;
8020c9e6: 23 3c a4 f4  	sd	a0, -168(s0)
;     while (bytes_processed < memory_properties.value.len) {
8020c9ea: 09 a0        	j	0x8020c9ec <.LBB130_83+0x12>
8020c9ec: 03 35 04 f6  	ld	a0, -160(s0)
8020c9f0: 83 35 04 f8  	ld	a1, -128(s0)
8020c9f4: 63 70 b5 02  	bgeu	a0, a1, 0x8020ca14 <.LBB130_84>
8020c9f8: 09 a0        	j	0x8020c9fa <.LBB130_83+0x20>
;         memory_map.available.len += 1;
8020c9fa: 13 05 84 f4  	addi	a0, s0, -184
8020c9fe: 23 30 a4 d6  	sd	a0, -672(s0)
8020ca02: 83 35 84 f4  	ld	a1, -184(s0)
8020ca06: 13 85 15 00  	addi	a0, a1, 1
8020ca0a: 23 34 a4 d6  	sd	a0, -664(s0)
8020ca0e: 63 60 b5 24  	bltu	a0, a1, 0x8020cc4e <.LBB130_87>
8020ca12: b9 a4        	j	0x8020cc60 <.LBB130_87+0x12>

000000008020ca14 <.LBB130_84>:
;     if (kernel.arch.device_tree.find_node("reserved-memory", .exact)) |find_result| {
8020ca14: 97 85 01 00  	auipc	a1, 24
8020ca18: 93 85 c5 62  	addi	a1, a1, 1580

000000008020ca1c <.LBB130_85>:
8020ca1c: 17 26 01 00  	auipc	a2, 18
8020ca20: 13 06 c6 af  	addi	a2, a2, -1284
8020ca24: 13 05 84 ed  	addi	a0, s0, -296
8020ca28: 97 80 00 00  	auipc	ra, 8
8020ca2c: e7 80 c0 44  	jalr	1100(ra)
8020ca30: 03 45 84 f0  	lbu	a0, -248(s0)
8020ca34: 81 45        	mv	a1, zero
8020ca36: 63 02 b5 10  	beq	a0, a1, 0x8020cb3a <.LBB130_86+0x7c>
8020ca3a: 09 a0        	j	0x8020ca3c <.LBB130_85+0x20>
8020ca3c: 03 35 04 f0  	ld	a0, -256(s0)
8020ca40: 23 38 a4 ec  	sd	a0, -304(s0)
8020ca44: 03 35 84 ef  	ld	a0, -264(s0)
8020ca48: 23 34 a4 ec  	sd	a0, -312(s0)
8020ca4c: 03 35 04 ef  	ld	a0, -272(s0)
8020ca50: 23 30 a4 ec  	sd	a0, -320(s0)
8020ca54: 83 35 84 ee  	ld	a1, -280(s0)
8020ca58: 23 3c b4 ea  	sd	a1, -328(s0)
8020ca5c: 03 36 04 ee  	ld	a2, -288(s0)
8020ca60: 23 38 c4 ea  	sd	a2, -336(s0)
8020ca64: 83 36 84 ed  	ld	a3, -296(s0)
8020ca68: 23 34 d4 ea  	sd	a3, -344(s0)
;         var parser = find_result.parser;
8020ca6c: 23 34 d4 e8  	sd	a3, -376(s0)
8020ca70: 23 38 c4 e8  	sd	a2, -368(s0)
8020ca74: 23 3c b4 e8  	sd	a1, -360(s0)
8020ca78: 23 30 a4 ea  	sd	a0, -352(s0)
;         while (parser.get_subnode()) |subnode_name| {
8020ca7c: 09 a0        	j	0x8020ca7e <.LBB130_85+0x62>
8020ca7e: 13 05 04 e7  	addi	a0, s0, -400
8020ca82: 93 05 84 e8  	addi	a1, s0, -376
;         while (parser.get_subnode()) |subnode_name| {
8020ca86: 97 80 00 00  	auipc	ra, 8
8020ca8a: e7 80 60 4c  	jalr	1222(ra)
8020ca8e: 03 45 04 e8  	lbu	a0, -384(s0)
8020ca92: 81 45        	mv	a1, zero
8020ca94: 63 02 b5 0a  	beq	a0, a1, 0x8020cb38 <.LBB130_86+0x7a>
8020ca98: 09 a0        	j	0x8020ca9a <.LBB130_85+0x7e>
8020ca9a: 03 35 84 e7  	ld	a0, -392(s0)
8020ca9e: 23 34 a4 e6  	sd	a0, -408(s0)
8020caa2: 83 35 04 e7  	ld	a1, -400(s0)
8020caa6: 23 30 b4 e6  	sd	a1, -416(s0)
;             log.debug("Getting subnode: {s}", .{subnode_name});
8020caaa: 23 38 b4 e4  	sd	a1, -432(s0)
8020caae: 23 3c a4 e4  	sd	a0, -424(s0)
8020cab2: 13 05 04 e5  	addi	a0, s0, -432
8020cab6: 97 80 00 00  	auipc	ra, 8
8020caba: e7 80 80 55  	jalr	1368(ra)

000000008020cabe <.LBB130_86>:
;             if (parser.find_property_in_current_node("reg")) |reserved_memory_prop| {
8020cabe: 17 26 01 00  	auipc	a2, 18
8020cac2: 13 06 a6 a6  	addi	a2, a2, -1430
8020cac6: 13 05 84 e2  	addi	a0, s0, -472
8020caca: 93 05 84 e8  	addi	a1, s0, -376
8020cace: 97 00 00 00  	auipc	ra, 0
8020cad2: e7 80 c0 c2  	jalr	-980(ra)
8020cad6: 03 45 84 e4  	lbu	a0, -440(s0)
8020cada: 81 45        	mv	a1, zero
8020cadc: 63 0c b5 04  	beq	a0, a1, 0x8020cb34 <.LBB130_86+0x76>
8020cae0: 09 a0        	j	0x8020cae2 <.LBB130_86+0x24>
8020cae2: 03 35 04 e4  	ld	a0, -448(s0)
8020cae6: 23 30 a4 e2  	sd	a0, -480(s0)
8020caea: 03 35 84 e3  	ld	a0, -456(s0)
8020caee: 23 3c a4 e0  	sd	a0, -488(s0)
8020caf2: 03 35 04 e3  	ld	a0, -464(s0)
8020caf6: 23 38 a4 e0  	sd	a0, -496(s0)
8020cafa: 03 35 84 e2  	ld	a0, -472(s0)
8020cafe: 23 34 a4 e0  	sd	a0, -504(s0)
8020cb02: 01 45        	mv	a0, zero
;                 bytes_processed = 0;
8020cb04: 23 30 a4 f6  	sd	a0, -160(s0)
;                 while (bytes_processed < reserved_memory_prop.value.len) {
8020cb08: 09 a0        	j	0x8020cb0a <.LBB130_86+0x4c>
8020cb0a: 03 35 04 f6  	ld	a0, -160(s0)
8020cb0e: 83 35 04 e2  	ld	a1, -480(s0)
8020cb12: 63 70 b5 02  	bgeu	a0, a1, 0x8020cb32 <.LBB130_86+0x74>
8020cb16: 09 a0        	j	0x8020cb18 <.LBB130_86+0x5a>
;                     memory_map.reserved.len += 1;
8020cb18: 13 05 84 f5  	addi	a0, s0, -168
8020cb1c: 23 38 a4 d4  	sd	a0, -688(s0)
8020cb20: 83 35 84 f5  	ld	a1, -168(s0)
8020cb24: 13 85 15 00  	addi	a0, a1, 1
8020cb28: 23 3c a4 d4  	sd	a0, -680(s0)
8020cb2c: 63 60 b5 3a  	bltu	a0, a1, 0x8020cecc <.LBB130_101>
8020cb30: 7d a6        	j	0x8020cede <.LBB130_101+0x12>
;             if (parser.find_property_in_current_node("reg")) |reserved_memory_prop| {
8020cb32: 11 a0        	j	0x8020cb36 <.LBB130_86+0x78>
8020cb34: 09 a0        	j	0x8020cb36 <.LBB130_86+0x78>
;         while (parser.get_subnode()) |subnode_name| {
8020cb36: a1 b7        	j	0x8020ca7e <.LBB130_85+0x62>
;     if (kernel.arch.device_tree.find_node("reserved-memory", .exact)) |find_result| {
8020cb38: 11 a0        	j	0x8020cb3c <.LBB130_86+0x7e>
8020cb3a: 09 a0        	j	0x8020cb3c <.LBB130_86+0x7e>
;     log.debug("Regions:", .{});
8020cb3c: 97 80 00 00  	auipc	ra, 8
8020cb40: e7 80 60 4f  	jalr	1270(ra)
8020cb44: 13 05 04 f4  	addi	a0, s0, -192
8020cb48: 23 30 a4 d4  	sd	a0, -704(s0)
8020cb4c: 01 45        	mv	a0, zero
;     for (memory_map.available) |region, i| {
8020cb4e: 23 38 a4 dc  	sd	a0, -560(s0)
8020cb52: 03 35 84 f4  	ld	a0, -184(s0)
8020cb56: 23 34 a4 d4  	sd	a0, -696(s0)
8020cb5a: 09 a0        	j	0x8020cb5c <.LBB130_86+0x9e>
8020cb5c: 83 35 84 d4  	ld	a1, -696(s0)
8020cb60: 03 35 04 dd  	ld	a0, -560(s0)
8020cb64: 23 3c a4 d2  	sd	a0, -712(s0)
8020cb68: 63 74 b5 04  	bgeu	a0, a1, 0x8020cbb0 <.LBB130_86+0xf2>
8020cb6c: 09 a0        	j	0x8020cb6e <.LBB130_86+0xb0>
8020cb6e: 83 35 84 d3  	ld	a1, -712(s0)
8020cb72: 03 35 04 d4  	ld	a0, -704(s0)
8020cb76: 08 61        	ld	a0, 0(a0)
8020cb78: 92 05        	slli	a1, a1, 4
8020cb7a: aa 95        	add	a1, a1, a0
8020cb7c: 88 65        	ld	a0, 8(a1)
8020cb7e: 23 34 a4 dc  	sd	a0, -568(s0)
8020cb82: 8c 61        	ld	a1, 0(a1)
8020cb84: 23 30 b4 dc  	sd	a1, -576(s0)
;         log.debug("[{}] (0x{x}, {})", .{ i, region.address, region.page_count });
8020cb88: 03 36 04 dd  	ld	a2, -560(s0)
8020cb8c: 23 34 c4 da  	sd	a2, -600(s0)
8020cb90: 23 38 b4 da  	sd	a1, -592(s0)
8020cb94: 23 3c a4 da  	sd	a0, -584(s0)
8020cb98: 13 05 84 da  	addi	a0, s0, -600
8020cb9c: 97 80 00 00  	auipc	ra, 8
8020cba0: e7 80 e0 4a  	jalr	1198(ra)
8020cba4: 03 35 84 d3  	ld	a0, -712(s0)
;     for (memory_map.available) |region, i| {
8020cba8: 05 05        	addi	a0, a0, 1
8020cbaa: 23 38 a4 dc  	sd	a0, -560(s0)
8020cbae: 7d b7        	j	0x8020cb5c <.LBB130_86+0x9e>
;     log.debug("Reserved regions:", .{});
8020cbb0: 97 80 00 00  	auipc	ra, 8
8020cbb4: e7 80 40 4c  	jalr	1220(ra)
;     for (memory_map.reserved) |region, i| {
8020cbb8: 13 05 04 f5  	addi	a0, s0, -176
8020cbbc: 23 34 a4 d2  	sd	a0, -728(s0)
8020cbc0: 01 45        	mv	a0, zero
8020cbc2: 23 30 a4 da  	sd	a0, -608(s0)
8020cbc6: 03 35 84 f5  	ld	a0, -168(s0)
8020cbca: 23 38 a4 d2  	sd	a0, -720(s0)
8020cbce: 09 a0        	j	0x8020cbd0 <.LBB130_86+0x112>
8020cbd0: 83 35 04 d3  	ld	a1, -720(s0)
8020cbd4: 03 35 04 da  	ld	a0, -608(s0)
8020cbd8: 23 30 a4 d2  	sd	a0, -736(s0)
8020cbdc: 63 74 b5 04  	bgeu	a0, a1, 0x8020cc24 <.LBB130_86+0x166>
8020cbe0: 09 a0        	j	0x8020cbe2 <.LBB130_86+0x124>
8020cbe2: 83 35 04 d2  	ld	a1, -736(s0)
8020cbe6: 03 35 84 d2  	ld	a0, -728(s0)
8020cbea: 08 61        	ld	a0, 0(a0)
8020cbec: 92 05        	slli	a1, a1, 4
8020cbee: aa 95        	add	a1, a1, a0
8020cbf0: 88 65        	ld	a0, 8(a1)
8020cbf2: 23 3c a4 d8  	sd	a0, -616(s0)
8020cbf6: 8c 61        	ld	a1, 0(a1)
8020cbf8: 23 38 b4 d8  	sd	a1, -624(s0)
;         log.debug("[{}] (0x{x}, {})", .{ i, region.address, region.page_count });
8020cbfc: 03 36 04 da  	ld	a2, -608(s0)
8020cc00: 23 3c c4 d6  	sd	a2, -648(s0)
8020cc04: 23 30 b4 d8  	sd	a1, -640(s0)
8020cc08: 23 34 a4 d8  	sd	a0, -632(s0)
8020cc0c: 13 05 84 d7  	addi	a0, s0, -648
8020cc10: 97 80 00 00  	auipc	ra, 8
8020cc14: e7 80 c0 47  	jalr	1148(ra)
8020cc18: 03 35 04 d2  	ld	a0, -736(s0)
;     for (memory_map.reserved) |region, i| {
8020cc1c: 05 05        	addi	a0, a0, 1
8020cc1e: 23 30 a4 da  	sd	a0, -608(s0)
8020cc22: 7d b7        	j	0x8020cbd0 <.LBB130_86+0x112>
;     return memory_map;
8020cc24: 83 35 04 d7  	ld	a1, -656(s0)
8020cc28: 03 35 84 f5  	ld	a0, -168(s0)
8020cc2c: 88 ed        	sd	a0, 24(a1)
8020cc2e: 03 35 04 f5  	ld	a0, -176(s0)
8020cc32: 88 e9        	sd	a0, 16(a1)
8020cc34: 03 35 84 f4  	ld	a0, -184(s0)
8020cc38: 88 e5        	sd	a0, 8(a1)
8020cc3a: 03 35 04 f4  	ld	a0, -192(s0)
8020cc3e: 88 e1        	sd	a0, 0(a1)
8020cc40: 03 34 01 3b  	ld	s0, 944(sp)
8020cc44: 83 30 81 3b  	ld	ra, 952(sp)
8020cc48: 13 01 01 3c  	addi	sp, sp, 960
8020cc4c: 82 80        	ret

000000008020cc4e <.LBB130_87>:
;         memory_map.available.len += 1;
8020cc4e: 17 15 01 00  	auipc	a0, 17
8020cc52: 13 05 25 83  	addi	a0, a0, -1998
8020cc56: 81 45        	mv	a1, zero
8020cc58: 97 30 ff ff  	auipc	ra, 1048563
8020cc5c: e7 80 80 44  	jalr	1096(ra)
8020cc60: 03 35 84 d6  	ld	a0, -664(s0)
8020cc64: 83 35 04 d6  	ld	a1, -672(s0)
8020cc68: 88 e1        	sd	a0, 0(a1)
8020cc6a: 13 05 04 f4  	addi	a0, s0, -192
;         var region = &memory_map.available[memory_map.available.len - 1];
8020cc6e: 23 38 a4 d0  	sd	a0, -752(s0)
8020cc72: 03 35 84 f4  	ld	a0, -184(s0)
8020cc76: 93 05 f5 ff  	addi	a1, a0, -1
8020cc7a: 23 3c b4 d0  	sd	a1, -744(s0)
8020cc7e: 63 7c b5 00  	bgeu	a0, a1, 0x8020cc96 <.LBB130_88+0x12>
8020cc82: 09 a0        	j	0x8020cc84 <.LBB130_88>

000000008020cc84 <.LBB130_88>:
8020cc84: 17 05 01 00  	auipc	a0, 16
8020cc88: 13 05 c5 7f  	addi	a0, a0, 2044
8020cc8c: 81 45        	mv	a1, zero
8020cc8e: 97 30 ff ff  	auipc	ra, 1048563
8020cc92: e7 80 20 41  	jalr	1042(ra)
8020cc96: 03 35 84 d1  	ld	a0, -744(s0)
8020cc9a: 83 35 04 d1  	ld	a1, -752(s0)
8020cc9e: 8c 65        	ld	a1, 8(a1)
8020cca0: 63 6c b5 00  	bltu	a0, a1, 0x8020ccb8 <.LBB130_89+0x12>
8020cca4: 09 a0        	j	0x8020cca6 <.LBB130_89>

000000008020cca6 <.LBB130_89>:
8020cca6: 17 05 01 00  	auipc	a0, 16
8020ccaa: 13 05 a5 65  	addi	a0, a0, 1626
8020ccae: 81 45        	mv	a1, zero
8020ccb0: 97 30 ff ff  	auipc	ra, 1048563
8020ccb4: e7 80 00 3f  	jalr	1008(ra)
8020ccb8: 83 35 84 d1  	ld	a1, -744(s0)
8020ccbc: 03 35 04 d1  	ld	a0, -752(s0)
8020ccc0: 08 61        	ld	a0, 0(a0)
8020ccc2: 92 05        	slli	a1, a1, 4
8020ccc4: 2e 95        	add	a0, a0, a1
8020ccc6: 23 38 a4 ce  	sd	a0, -784(s0)
8020ccca: 23 3c a4 f2  	sd	a0, -200(s0)
;         region.address = kernel.arch.dt_read_int(u64, memory_properties.value[bytes_processed..]);
8020ccce: 13 05 84 f7  	addi	a0, s0, -136
8020ccd2: 23 3c a4 ce  	sd	a0, -776(s0)
8020ccd6: 83 35 04 f6  	ld	a1, -160(s0)
8020ccda: 23 30 b4 d0  	sd	a1, -768(s0)
8020ccde: 03 35 04 f8  	ld	a0, -128(s0)
8020cce2: 23 34 a4 d0  	sd	a0, -760(s0)
8020cce6: 63 7c b5 00  	bgeu	a0, a1, 0x8020ccfe <.LBB130_90+0x12>
8020ccea: 09 a0        	j	0x8020ccec <.LBB130_90>

000000008020ccec <.LBB130_90>:
8020ccec: 17 05 01 00  	auipc	a0, 16
8020ccf0: 13 05 45 61  	addi	a0, a0, 1556
8020ccf4: 81 45        	mv	a1, zero
8020ccf6: 97 30 ff ff  	auipc	ra, 1048563
8020ccfa: e7 80 a0 3a  	jalr	938(ra)
8020ccfe: 81 45        	mv	a1, zero
8020cd00: 05 45        	addi	a0, zero, 1
;         region.address = kernel.arch.dt_read_int(u64, memory_properties.value[bytes_processed..]);
8020cd02: 63 1c b5 00  	bne	a0, a1, 0x8020cd1a <.LBB130_91+0x12>
8020cd06: 09 a0        	j	0x8020cd08 <.LBB130_91>

000000008020cd08 <.LBB130_91>:
8020cd08: 17 05 01 00  	auipc	a0, 16
8020cd0c: 13 05 85 5f  	addi	a0, a0, 1528
8020cd10: 81 45        	mv	a1, zero
8020cd12: 97 30 ff ff  	auipc	ra, 1048563
8020cd16: e7 80 e0 38  	jalr	910(ra)
8020cd1a: 83 35 84 d0  	ld	a1, -760(s0)
8020cd1e: 03 36 04 d0  	ld	a2, -768(s0)
8020cd22: 03 35 84 cf  	ld	a0, -776(s0)
8020cd26: 08 61        	ld	a0, 0(a0)
8020cd28: 32 95        	add	a0, a0, a2
8020cd2a: 91 8d        	sub	a1, a1, a2
8020cd2c: 23 34 a4 f2  	sd	a0, -216(s0)
8020cd30: 23 38 b4 f2  	sd	a1, -208(s0)
8020cd34: 1d 45        	addi	a0, zero, 7
;     return std.mem.readIntBig(T, slice[0..@sizeOf(T)]);
8020cd36: 63 6c b5 00  	bltu	a0, a1, 0x8020cd4e <.LBB130_92+0x12>
8020cd3a: 09 a0        	j	0x8020cd3c <.LBB130_92>

000000008020cd3c <.LBB130_92>:
8020cd3c: 17 05 01 00  	auipc	a0, 16
8020cd40: 13 05 45 5c  	addi	a0, a0, 1476
8020cd44: 81 45        	mv	a1, zero
8020cd46: 97 30 ff ff  	auipc	ra, 1048563
8020cd4a: e7 80 a0 35  	jalr	858(ra)
8020cd4e: 03 35 84 f2  	ld	a0, -216(s0)
8020cd52: 23 30 a4 fe  	sd	a0, -32(s0)
8020cd56: 97 60 00 00  	auipc	ra, 6
8020cd5a: e7 80 a0 3e  	jalr	1002(ra)
8020cd5e: 83 35 04 cf  	ld	a1, -784(s0)
8020cd62: 23 34 a4 fe  	sd	a0, -24(s0)
;         region.address = kernel.arch.dt_read_int(u64, memory_properties.value[bytes_processed..]);
8020cd66: 88 e1        	sd	a0, 0(a1)
;         bytes_processed += @sizeOf(u64);
8020cd68: 83 35 04 f6  	ld	a1, -160(s0)
8020cd6c: 13 85 85 00  	addi	a0, a1, 8
8020cd70: 23 34 a4 ce  	sd	a0, -792(s0)
8020cd74: 63 7c b5 00  	bgeu	a0, a1, 0x8020cd8c <.LBB130_93+0x12>
8020cd78: 09 a0        	j	0x8020cd7a <.LBB130_93>

000000008020cd7a <.LBB130_93>:
8020cd7a: 17 05 01 00  	auipc	a0, 16
8020cd7e: 13 05 65 70  	addi	a0, a0, 1798
8020cd82: 81 45        	mv	a1, zero
8020cd84: 97 30 ff ff  	auipc	ra, 1048563
8020cd88: e7 80 c0 31  	jalr	796(ra)
8020cd8c: 83 35 84 ce  	ld	a1, -792(s0)
8020cd90: 23 30 b4 f6  	sd	a1, -160(s0)
;         const region_size = kernel.arch.dt_read_int(u64, memory_properties.value[bytes_processed..]);
8020cd94: 13 05 84 f7  	addi	a0, s0, -136
8020cd98: 23 38 a4 cc  	sd	a0, -816(s0)
8020cd9c: 2e 85        	mv	a0, a1
8020cd9e: 23 3c a4 cc  	sd	a0, -808(s0)
8020cda2: 03 35 04 f8  	ld	a0, -128(s0)
8020cda6: 23 30 a4 ce  	sd	a0, -800(s0)
8020cdaa: 63 7c b5 00  	bgeu	a0, a1, 0x8020cdc2 <.LBB130_94+0x12>
8020cdae: 09 a0        	j	0x8020cdb0 <.LBB130_94>

000000008020cdb0 <.LBB130_94>:
8020cdb0: 17 05 01 00  	auipc	a0, 16
8020cdb4: 13 05 05 55  	addi	a0, a0, 1360
8020cdb8: 81 45        	mv	a1, zero
8020cdba: 97 30 ff ff  	auipc	ra, 1048563
8020cdbe: e7 80 60 2e  	jalr	742(ra)
8020cdc2: 81 45        	mv	a1, zero
8020cdc4: 05 45        	addi	a0, zero, 1
;         const region_size = kernel.arch.dt_read_int(u64, memory_properties.value[bytes_processed..]);
8020cdc6: 63 1c b5 00  	bne	a0, a1, 0x8020cdde <.LBB130_95+0x12>
8020cdca: 09 a0        	j	0x8020cdcc <.LBB130_95>

000000008020cdcc <.LBB130_95>:
8020cdcc: 17 05 01 00  	auipc	a0, 16
8020cdd0: 13 05 45 53  	addi	a0, a0, 1332
8020cdd4: 81 45        	mv	a1, zero
8020cdd6: 97 30 ff ff  	auipc	ra, 1048563
8020cdda: e7 80 a0 2c  	jalr	714(ra)
8020cdde: 83 35 04 ce  	ld	a1, -800(s0)
8020cde2: 03 36 84 cd  	ld	a2, -808(s0)
8020cde6: 03 35 04 cd  	ld	a0, -816(s0)
8020cdea: 08 61        	ld	a0, 0(a0)
8020cdec: 32 95        	add	a0, a0, a2
8020cdee: 91 8d        	sub	a1, a1, a2
8020cdf0: 23 3c a4 f0  	sd	a0, -232(s0)
8020cdf4: 23 30 b4 f2  	sd	a1, -224(s0)
8020cdf8: 1d 45        	addi	a0, zero, 7
;     return std.mem.readIntBig(T, slice[0..@sizeOf(T)]);
8020cdfa: 63 6c b5 00  	bltu	a0, a1, 0x8020ce12 <.LBB130_96+0x12>
8020cdfe: 09 a0        	j	0x8020ce00 <.LBB130_96>

000000008020ce00 <.LBB130_96>:
8020ce00: 17 05 01 00  	auipc	a0, 16
8020ce04: 13 05 05 50  	addi	a0, a0, 1280
8020ce08: 81 45        	mv	a1, zero
8020ce0a: 97 30 ff ff  	auipc	ra, 1048563
8020ce0e: e7 80 60 29  	jalr	662(ra)
8020ce12: 03 35 84 f1  	ld	a0, -232(s0)
8020ce16: 23 38 a4 fc  	sd	a0, -48(s0)
8020ce1a: 97 60 00 00  	auipc	ra, 6
8020ce1e: e7 80 60 32  	jalr	806(ra)
8020ce22: 23 3c a4 fc  	sd	a0, -40(s0)
;         const region_size = kernel.arch.dt_read_int(u64, memory_properties.value[bytes_processed..]);
8020ce26: 23 38 a4 f0  	sd	a0, -240(s0)
8020ce2a: 23 34 a4 cc  	sd	a0, -824(s0)
8020ce2e: 01 45        	mv	a0, zero
;         kernel.assert(@src(), region_size % kernel.arch.page_size == 0);
8020ce30: 63 1f a5 02  	bne	a0, a0, 0x8020ce6e <.LBB130_98>
8020ce34: 09 a0        	j	0x8020ce36 <.LBB130_96+0x36>
8020ce36: 03 35 84 cc  	ld	a0, -824(s0)
8020ce3a: 85 65        	lui	a1, 1
8020ce3c: fd 35        	addiw	a1, a1, -1
;         kernel.assert(@src(), region_size % kernel.arch.page_size == 0);
8020ce3e: 6d 8d        	and	a0, a0, a1
8020ce40: 93 35 15 00  	seqz	a1, a0

000000008020ce44 <.LBB130_97>:
8020ce44: 17 15 01 00  	auipc	a0, 17
8020ce48: 13 05 c5 6a  	addi	a0, a0, 1708
8020ce4c: 97 30 ff ff  	auipc	ra, 1048563
8020ce50: e7 80 00 3c  	jalr	960(ra)
;         region.page_count = region_size / kernel.arch.page_size;
8020ce54: 03 35 84 f3  	ld	a0, -200(s0)
8020ce58: 21 05        	addi	a0, a0, 8
8020ce5a: 23 3c a4 ca  	sd	a0, -840(s0)
8020ce5e: 03 35 04 f1  	ld	a0, -240(s0)
8020ce62: 23 30 a4 cc  	sd	a0, -832(s0)
8020ce66: 01 45        	mv	a0, zero
8020ce68: 63 1c a5 00  	bne	a0, a0, 0x8020ce80 <.LBB130_99>
8020ce6c: 1d a0        	j	0x8020ce92 <.LBB130_99+0x12>

000000008020ce6e <.LBB130_98>:
;         kernel.assert(@src(), region_size % kernel.arch.page_size == 0);
8020ce6e: 17 05 01 00  	auipc	a0, 16
8020ce72: 13 05 25 47  	addi	a0, a0, 1138
8020ce76: 81 45        	mv	a1, zero
8020ce78: 97 30 ff ff  	auipc	ra, 1048563
8020ce7c: e7 80 80 22  	jalr	552(ra)

000000008020ce80 <.LBB130_99>:
;         region.page_count = region_size / kernel.arch.page_size;
8020ce80: 17 05 01 00  	auipc	a0, 16
8020ce84: 13 05 05 45  	addi	a0, a0, 1104
8020ce88: 81 45        	mv	a1, zero
8020ce8a: 97 30 ff ff  	auipc	ra, 1048563
8020ce8e: e7 80 60 21  	jalr	534(ra)
8020ce92: 83 35 84 cb  	ld	a1, -840(s0)
8020ce96: 03 35 04 cc  	ld	a0, -832(s0)
8020ce9a: 31 81        	srli	a0, a0, 12
8020ce9c: 88 e1        	sd	a0, 0(a1)
;         bytes_processed += @sizeOf(u64);
8020ce9e: 83 35 04 f6  	ld	a1, -160(s0)
8020cea2: 13 85 85 00  	addi	a0, a1, 8
8020cea6: 23 38 a4 ca  	sd	a0, -848(s0)
8020ceaa: 63 7c b5 00  	bgeu	a0, a1, 0x8020cec2 <.LBB130_100+0x12>
8020ceae: 09 a0        	j	0x8020ceb0 <.LBB130_100>

000000008020ceb0 <.LBB130_100>:
8020ceb0: 17 05 01 00  	auipc	a0, 16
8020ceb4: 13 05 05 5d  	addi	a0, a0, 1488
8020ceb8: 81 45        	mv	a1, zero
8020ceba: 97 30 ff ff  	auipc	ra, 1048563
8020cebe: e7 80 60 1e  	jalr	486(ra)
8020cec2: 03 35 04 cb  	ld	a0, -848(s0)
8020cec6: 23 30 a4 f6  	sd	a0, -160(s0)
;     while (bytes_processed < memory_properties.value.len) {
8020ceca: 0d b6        	j	0x8020c9ec <.LBB130_83+0x12>

000000008020cecc <.LBB130_101>:
;                     memory_map.reserved.len += 1;
8020cecc: 17 05 01 00  	auipc	a0, 16
8020ced0: 13 05 45 5b  	addi	a0, a0, 1460
8020ced4: 81 45        	mv	a1, zero
8020ced6: 97 30 ff ff  	auipc	ra, 1048563
8020ceda: e7 80 a0 1c  	jalr	458(ra)
8020cede: 03 35 84 d5  	ld	a0, -680(s0)
8020cee2: 83 35 04 d5  	ld	a1, -688(s0)
8020cee6: 88 e1        	sd	a0, 0(a1)
;                     var region = &memory_map.reserved[memory_map.reserved.len - 1];
8020cee8: 13 05 04 f5  	addi	a0, s0, -176
8020ceec: 23 30 a4 ca  	sd	a0, -864(s0)
8020cef0: 03 35 84 f5  	ld	a0, -168(s0)
8020cef4: 93 05 f5 ff  	addi	a1, a0, -1
8020cef8: 23 34 b4 ca  	sd	a1, -856(s0)
8020cefc: 63 7c b5 00  	bgeu	a0, a1, 0x8020cf14 <.LBB130_102+0x12>
8020cf00: 09 a0        	j	0x8020cf02 <.LBB130_102>

000000008020cf02 <.LBB130_102>:
8020cf02: 17 05 01 00  	auipc	a0, 16
8020cf06: 13 05 e5 57  	addi	a0, a0, 1406
8020cf0a: 81 45        	mv	a1, zero
8020cf0c: 97 30 ff ff  	auipc	ra, 1048563
8020cf10: e7 80 40 19  	jalr	404(ra)
8020cf14: 03 35 84 ca  	ld	a0, -856(s0)
8020cf18: 83 35 04 ca  	ld	a1, -864(s0)
8020cf1c: 8c 65        	ld	a1, 8(a1)
8020cf1e: 63 6c b5 00  	bltu	a0, a1, 0x8020cf36 <.LBB130_103+0x12>
8020cf22: 09 a0        	j	0x8020cf24 <.LBB130_103>

000000008020cf24 <.LBB130_103>:
8020cf24: 17 05 01 00  	auipc	a0, 16
8020cf28: 13 05 c5 3d  	addi	a0, a0, 988
8020cf2c: 81 45        	mv	a1, zero
8020cf2e: 97 30 ff ff  	auipc	ra, 1048563
8020cf32: e7 80 20 17  	jalr	370(ra)
8020cf36: 83 35 84 ca  	ld	a1, -856(s0)
8020cf3a: 03 35 04 ca  	ld	a0, -864(s0)
8020cf3e: 08 61        	ld	a0, 0(a0)
8020cf40: 92 05        	slli	a1, a1, 4
8020cf42: 2e 95        	add	a0, a0, a1
8020cf44: 23 30 a4 c8  	sd	a0, -896(s0)
8020cf48: 23 30 a4 e0  	sd	a0, -512(s0)
;                     region.address = kernel.arch.dt_read_int(u64, reserved_memory_prop.value[bytes_processed..]);
8020cf4c: 13 05 84 e1  	addi	a0, s0, -488
8020cf50: 23 34 a4 c8  	sd	a0, -888(s0)
8020cf54: 83 35 04 f6  	ld	a1, -160(s0)
8020cf58: 23 38 b4 c8  	sd	a1, -880(s0)
8020cf5c: 03 35 04 e2  	ld	a0, -480(s0)
8020cf60: 23 3c a4 c8  	sd	a0, -872(s0)
8020cf64: 63 7c b5 00  	bgeu	a0, a1, 0x8020cf7c <.LBB130_104+0x12>
8020cf68: 09 a0        	j	0x8020cf6a <.LBB130_104>

000000008020cf6a <.LBB130_104>:
8020cf6a: 17 05 01 00  	auipc	a0, 16
8020cf6e: 13 05 65 39  	addi	a0, a0, 918
8020cf72: 81 45        	mv	a1, zero
8020cf74: 97 30 ff ff  	auipc	ra, 1048563
8020cf78: e7 80 c0 12  	jalr	300(ra)
8020cf7c: 81 45        	mv	a1, zero
8020cf7e: 05 45        	addi	a0, zero, 1
;                     region.address = kernel.arch.dt_read_int(u64, reserved_memory_prop.value[bytes_processed..]);
8020cf80: 63 1c b5 00  	bne	a0, a1, 0x8020cf98 <.LBB130_105+0x12>
8020cf84: 09 a0        	j	0x8020cf86 <.LBB130_105>

000000008020cf86 <.LBB130_105>:
8020cf86: 17 05 01 00  	auipc	a0, 16
8020cf8a: 13 05 a5 37  	addi	a0, a0, 890
8020cf8e: 81 45        	mv	a1, zero
8020cf90: 97 30 ff ff  	auipc	ra, 1048563
8020cf94: e7 80 00 11  	jalr	272(ra)
8020cf98: 83 35 84 c9  	ld	a1, -872(s0)
8020cf9c: 03 36 04 c9  	ld	a2, -880(s0)
8020cfa0: 03 35 84 c8  	ld	a0, -888(s0)
8020cfa4: 08 61        	ld	a0, 0(a0)
8020cfa6: 32 95        	add	a0, a0, a2
8020cfa8: 91 8d        	sub	a1, a1, a2
8020cfaa: 23 38 a4 de  	sd	a0, -528(s0)
8020cfae: 23 3c b4 de  	sd	a1, -520(s0)
8020cfb2: 1d 45        	addi	a0, zero, 7
;     return std.mem.readIntBig(T, slice[0..@sizeOf(T)]);
8020cfb4: 63 6c b5 00  	bltu	a0, a1, 0x8020cfcc <.LBB130_106+0x12>
8020cfb8: 09 a0        	j	0x8020cfba <.LBB130_106>

000000008020cfba <.LBB130_106>:
8020cfba: 17 05 01 00  	auipc	a0, 16
8020cfbe: 13 05 65 34  	addi	a0, a0, 838
8020cfc2: 81 45        	mv	a1, zero
8020cfc4: 97 30 ff ff  	auipc	ra, 1048563
8020cfc8: e7 80 c0 0d  	jalr	220(ra)
8020cfcc: 03 35 04 df  	ld	a0, -528(s0)
8020cfd0: 23 30 a4 fc  	sd	a0, -64(s0)
8020cfd4: 97 60 00 00  	auipc	ra, 6
8020cfd8: e7 80 c0 16  	jalr	364(ra)
8020cfdc: 83 35 04 c8  	ld	a1, -896(s0)
8020cfe0: 23 34 a4 fc  	sd	a0, -56(s0)
;                     region.address = kernel.arch.dt_read_int(u64, reserved_memory_prop.value[bytes_processed..]);
8020cfe4: 88 e1        	sd	a0, 0(a1)
;                     bytes_processed += @sizeOf(u64);
8020cfe6: 83 35 04 f6  	ld	a1, -160(s0)
8020cfea: 13 85 85 00  	addi	a0, a1, 8
8020cfee: 23 3c a4 c6  	sd	a0, -904(s0)
8020cff2: 63 7c b5 00  	bgeu	a0, a1, 0x8020d00a <.LBB130_107+0x12>
8020cff6: 09 a0        	j	0x8020cff8 <.LBB130_107>

000000008020cff8 <.LBB130_107>:
8020cff8: 17 05 01 00  	auipc	a0, 16
8020cffc: 13 05 85 48  	addi	a0, a0, 1160
8020d000: 81 45        	mv	a1, zero
8020d002: 97 30 ff ff  	auipc	ra, 1048563
8020d006: e7 80 e0 09  	jalr	158(ra)
8020d00a: 83 35 84 c7  	ld	a1, -904(s0)
8020d00e: 23 30 b4 f6  	sd	a1, -160(s0)
;                     const region_size = kernel.arch.dt_read_int(u64, reserved_memory_prop.value[bytes_processed..]);
8020d012: 13 05 84 e1  	addi	a0, s0, -488
8020d016: 23 30 a4 c6  	sd	a0, -928(s0)
8020d01a: 2e 85        	mv	a0, a1
8020d01c: 23 34 a4 c6  	sd	a0, -920(s0)
8020d020: 03 35 04 e2  	ld	a0, -480(s0)
8020d024: 23 38 a4 c6  	sd	a0, -912(s0)
8020d028: 63 7c b5 00  	bgeu	a0, a1, 0x8020d040 <.LBB130_108+0x12>
8020d02c: 09 a0        	j	0x8020d02e <.LBB130_108>

000000008020d02e <.LBB130_108>:
8020d02e: 17 05 01 00  	auipc	a0, 16
8020d032: 13 05 25 2d  	addi	a0, a0, 722
8020d036: 81 45        	mv	a1, zero
8020d038: 97 30 ff ff  	auipc	ra, 1048563
8020d03c: e7 80 80 06  	jalr	104(ra)
8020d040: 81 45        	mv	a1, zero
8020d042: 05 45        	addi	a0, zero, 1
;                     const region_size = kernel.arch.dt_read_int(u64, reserved_memory_prop.value[bytes_processed..]);
8020d044: 63 1c b5 00  	bne	a0, a1, 0x8020d05c <.LBB130_109+0x12>
8020d048: 09 a0        	j	0x8020d04a <.LBB130_109>

000000008020d04a <.LBB130_109>:
8020d04a: 17 05 01 00  	auipc	a0, 16
8020d04e: 13 05 65 2b  	addi	a0, a0, 694
8020d052: 81 45        	mv	a1, zero
8020d054: 97 30 ff ff  	auipc	ra, 1048563
8020d058: e7 80 c0 04  	jalr	76(ra)
8020d05c: 83 35 04 c7  	ld	a1, -912(s0)
8020d060: 03 36 84 c6  	ld	a2, -920(s0)
8020d064: 03 35 04 c6  	ld	a0, -928(s0)
8020d068: 08 61        	ld	a0, 0(a0)
8020d06a: 32 95        	add	a0, a0, a2
8020d06c: 91 8d        	sub	a1, a1, a2
8020d06e: 23 30 a4 de  	sd	a0, -544(s0)
8020d072: 23 34 b4 de  	sd	a1, -536(s0)
8020d076: 1d 45        	addi	a0, zero, 7
;     return std.mem.readIntBig(T, slice[0..@sizeOf(T)]);
8020d078: 63 6c b5 00  	bltu	a0, a1, 0x8020d090 <.LBB130_110+0x12>
8020d07c: 09 a0        	j	0x8020d07e <.LBB130_110>

000000008020d07e <.LBB130_110>:
8020d07e: 17 05 01 00  	auipc	a0, 16
8020d082: 13 05 25 28  	addi	a0, a0, 642
8020d086: 81 45        	mv	a1, zero
8020d088: 97 30 ff ff  	auipc	ra, 1048563
8020d08c: e7 80 80 01  	jalr	24(ra)
8020d090: 03 35 04 de  	ld	a0, -544(s0)
8020d094: 23 38 a4 fa  	sd	a0, -80(s0)
8020d098: 97 60 00 00  	auipc	ra, 6
8020d09c: e7 80 80 0a  	jalr	168(ra)
8020d0a0: 23 3c a4 fa  	sd	a0, -72(s0)
;                     const region_size = kernel.arch.dt_read_int(u64, reserved_memory_prop.value[bytes_processed..]);
8020d0a4: 23 3c a4 dc  	sd	a0, -552(s0)
8020d0a8: 23 3c a4 c4  	sd	a0, -936(s0)
8020d0ac: 01 45        	mv	a0, zero
;                     kernel.assert(@src(), region_size % kernel.arch.page_size == 0);
8020d0ae: 63 1f a5 02  	bne	a0, a0, 0x8020d0ec <.LBB130_112>
8020d0b2: 09 a0        	j	0x8020d0b4 <.LBB130_110+0x36>
8020d0b4: 03 35 84 c5  	ld	a0, -936(s0)
8020d0b8: 85 65        	lui	a1, 1
8020d0ba: fd 35        	addiw	a1, a1, -1
;                     kernel.assert(@src(), region_size % kernel.arch.page_size == 0);
8020d0bc: 6d 8d        	and	a0, a0, a1
8020d0be: 93 35 15 00  	seqz	a1, a0

000000008020d0c2 <.LBB130_111>:
8020d0c2: 17 15 01 00  	auipc	a0, 17
8020d0c6: 13 05 65 47  	addi	a0, a0, 1142
8020d0ca: 97 30 ff ff  	auipc	ra, 1048563
8020d0ce: e7 80 20 14  	jalr	322(ra)
;                     region.page_count = region_size / kernel.arch.page_size;
8020d0d2: 03 35 04 e0  	ld	a0, -512(s0)
8020d0d6: 21 05        	addi	a0, a0, 8
8020d0d8: 23 34 a4 c4  	sd	a0, -952(s0)
8020d0dc: 03 35 84 dd  	ld	a0, -552(s0)
8020d0e0: 23 38 a4 c4  	sd	a0, -944(s0)
8020d0e4: 01 45        	mv	a0, zero
8020d0e6: 63 1c a5 00  	bne	a0, a0, 0x8020d0fe <.LBB130_113>
8020d0ea: 1d a0        	j	0x8020d110 <.LBB130_113+0x12>

000000008020d0ec <.LBB130_112>:
;                     kernel.assert(@src(), region_size % kernel.arch.page_size == 0);
8020d0ec: 17 05 01 00  	auipc	a0, 16
8020d0f0: 13 05 45 1f  	addi	a0, a0, 500
8020d0f4: 81 45        	mv	a1, zero
8020d0f6: 97 30 ff ff  	auipc	ra, 1048563
8020d0fa: e7 80 a0 fa  	jalr	-86(ra)

000000008020d0fe <.LBB130_113>:
;                     region.page_count = region_size / kernel.arch.page_size;
8020d0fe: 17 05 01 00  	auipc	a0, 16
8020d102: 13 05 25 1d  	addi	a0, a0, 466
8020d106: 81 45        	mv	a1, zero
8020d108: 97 30 ff ff  	auipc	ra, 1048563
8020d10c: e7 80 80 f9  	jalr	-104(ra)
8020d110: 83 35 84 c4  	ld	a1, -952(s0)
8020d114: 03 35 04 c5  	ld	a0, -944(s0)
8020d118: 31 81        	srli	a0, a0, 12
8020d11a: 88 e1        	sd	a0, 0(a1)
;                     bytes_processed += @sizeOf(u64);
8020d11c: 83 35 04 f6  	ld	a1, -160(s0)
8020d120: 13 85 85 00  	addi	a0, a1, 8
8020d124: 23 30 a4 c4  	sd	a0, -960(s0)
8020d128: 63 7c b5 00  	bgeu	a0, a1, 0x8020d140 <.LBB130_114+0x12>
8020d12c: 09 a0        	j	0x8020d12e <.LBB130_114>

000000008020d12e <.LBB130_114>:
8020d12e: 17 05 01 00  	auipc	a0, 16
8020d132: 13 05 25 35  	addi	a0, a0, 850
8020d136: 81 45        	mv	a1, zero
8020d138: 97 30 ff ff  	auipc	ra, 1048563
8020d13c: e7 80 80 f6  	jalr	-152(ra)
8020d140: 03 35 04 c4  	ld	a0, -960(s0)
8020d144: 23 30 a4 f6  	sd	a0, -160(s0)
;                 while (bytes_processed < reserved_memory_prop.value.len) {
8020d148: c9 b2        	j	0x8020cb0a <.LBB130_86+0x4c>

000000008020d14a <std.mem.copy>:
; pub fn copy(comptime T: type, dest: []T, source: []const T) void {
8020d14a: 5d 71        	addi	sp, sp, -80
8020d14c: 86 e4        	sd	ra, 72(sp)
8020d14e: a2 e0        	sd	s0, 64(sp)
8020d150: 80 08        	addi	s0, sp, 80
8020d152: 23 34 b4 fc  	sd	a1, -56(s0)
8020d156: 23 30 a4 fc  	sd	a0, -64(s0)
;     assert(dest.len >= source.len);
8020d15a: 08 65        	ld	a0, 8(a0)
8020d15c: 8c 65        	ld	a1, 8(a1)
8020d15e: 33 35 b5 00  	sltu	a0, a0, a1
8020d162: 13 45 15 00  	xori	a0, a0, 1
8020d166: 97 30 ff ff  	auipc	ra, 1048563
8020d16a: e7 80 40 ff  	jalr	-12(ra)
8020d16e: 83 35 84 fc  	ld	a1, -56(s0)
8020d172: 01 45        	mv	a0, zero
;     for (source) |s, i|
8020d174: 23 34 a4 fe  	sd	a0, -24(s0)
8020d178: 88 65        	ld	a0, 8(a1)
8020d17a: 23 38 a4 fc  	sd	a0, -48(s0)
8020d17e: 09 a0        	j	0x8020d180 <std.mem.copy+0x36>
8020d180: 83 35 04 fd  	ld	a1, -48(s0)
8020d184: 03 35 84 fe  	ld	a0, -24(s0)
8020d188: 23 3c a4 fa  	sd	a0, -72(s0)
8020d18c: 63 7e b5 02  	bgeu	a0, a1, 0x8020d1c8 <std.mem.copy+0x7e>
8020d190: 09 a0        	j	0x8020d192 <std.mem.copy+0x48>
8020d192: 03 35 84 fb  	ld	a0, -72(s0)
8020d196: 03 36 04 fc  	ld	a2, -64(s0)
8020d19a: 83 35 84 fc  	ld	a1, -56(s0)
8020d19e: 8c 61        	ld	a1, 0(a1)
8020d1a0: 93 16 45 00  	slli	a3, a0, 4
8020d1a4: b6 95        	add	a1, a1, a3
8020d1a6: 94 65        	ld	a3, 8(a1)
8020d1a8: 23 30 d4 fe  	sd	a3, -32(s0)
8020d1ac: 8c 61        	ld	a1, 0(a1)
8020d1ae: 23 3c b4 fc  	sd	a1, -40(s0)
;         dest[i] = s;
8020d1b2: 03 37 84 fe  	ld	a4, -24(s0)
8020d1b6: 10 62        	ld	a2, 0(a2)
8020d1b8: 12 07        	slli	a4, a4, 4
8020d1ba: 3a 96        	add	a2, a2, a4
8020d1bc: 14 e6        	sd	a3, 8(a2)
8020d1be: 0c e2        	sd	a1, 0(a2)
;     for (source) |s, i|
8020d1c0: 05 05        	addi	a0, a0, 1
8020d1c2: 23 34 a4 fe  	sd	a0, -24(s0)
8020d1c6: 6d bf        	j	0x8020d180 <std.mem.copy+0x36>
; pub fn copy(comptime T: type, dest: []T, source: []const T) void {
8020d1c8: 06 64        	ld	s0, 64(sp)
8020d1ca: a6 60        	ld	ra, 72(sp)
8020d1cc: 61 61        	addi	sp, sp, 80
8020d1ce: 82 80        	ret

000000008020d1d0 <std.log.scoped(Physical).debug>:
;         pub fn debug(
8020d1d0: 41 11        	addi	sp, sp, -16
;             log(.debug, scope, format, args);
8020d1d2: 06 e4        	sd	ra, 8(sp)
8020d1d4: 22 e0        	sd	s0, 0(sp)
8020d1d6: 00 08        	addi	s0, sp, 16
8020d1d8: 97 80 00 00  	auipc	ra, 8
8020d1dc: e7 80 e0 ed  	jalr	-290(ra)
;         ) void {
8020d1e0: 02 64        	ld	s0, 0(sp)
8020d1e2: a2 60        	ld	ra, 8(sp)
8020d1e4: 41 01        	addi	sp, sp, 16
8020d1e6: 82 80        	ret

000000008020d1e8 <std.log.scoped(Physical).debug.49>:
;         pub fn debug(
8020d1e8: 79 71        	addi	sp, sp, -48
;             log(.debug, scope, format, args);
8020d1ea: 06 f4        	sd	ra, 40(sp)
8020d1ec: 22 f0        	sd	s0, 32(sp)
8020d1ee: 00 18        	addi	s0, sp, 48
8020d1f0: 0c 69        	ld	a1, 16(a0)
8020d1f2: 23 34 b4 fe  	sd	a1, -24(s0)
8020d1f6: 0c 65        	ld	a1, 8(a0)
8020d1f8: 23 30 b4 fe  	sd	a1, -32(s0)
8020d1fc: 0c 61        	ld	a1, 0(a0)
8020d1fe: 23 3c b4 fc  	sd	a1, -40(s0)
8020d202: 97 80 00 00  	auipc	ra, 8
8020d206: e7 80 40 ee  	jalr	-284(ra)
;         ) void {
8020d20a: 02 74        	ld	s0, 32(sp)
8020d20c: a2 70        	ld	ra, 40(sp)
8020d20e: 45 61        	addi	sp, sp, 48
8020d210: 82 80        	ret

000000008020d212 <std.log.scoped(Physical).debug.50>:
;         pub fn debug(
8020d212: 41 11        	addi	sp, sp, -16
;             log(.debug, scope, format, args);
8020d214: 06 e4        	sd	ra, 8(sp)
8020d216: 22 e0        	sd	s0, 0(sp)
8020d218: 00 08        	addi	s0, sp, 16
8020d21a: 97 80 00 00  	auipc	ra, 8
8020d21e: e7 80 60 f1  	jalr	-234(ra)
;         ) void {
8020d222: 02 64        	ld	s0, 0(sp)
8020d224: a2 60        	ld	ra, 8(sp)
8020d226: 41 01        	addi	sp, sp, 16
8020d228: 82 80        	ret

000000008020d22a <std.log.scoped(Physical).debug.51>:
;         pub fn debug(
8020d22a: 79 71        	addi	sp, sp, -48
;             log(.debug, scope, format, args);
8020d22c: 06 f4        	sd	ra, 40(sp)
8020d22e: 22 f0        	sd	s0, 32(sp)
8020d230: 00 18        	addi	s0, sp, 48
8020d232: 0c 6d        	ld	a1, 24(a0)
8020d234: 23 34 b4 fe  	sd	a1, -24(s0)
8020d238: 0c 69        	ld	a1, 16(a0)
8020d23a: 23 30 b4 fe  	sd	a1, -32(s0)
8020d23e: 0c 65        	ld	a1, 8(a0)
8020d240: 23 3c b4 fc  	sd	a1, -40(s0)
8020d244: 0c 61        	ld	a1, 0(a0)
8020d246: 23 38 b4 fc  	sd	a1, -48(s0)
8020d24a: 97 80 00 00  	auipc	ra, 8
8020d24e: e7 80 60 f1  	jalr	-234(ra)
;         ) void {
8020d252: 02 74        	ld	s0, 32(sp)
8020d254: a2 70        	ld	ra, 40(sp)
8020d256: 45 61        	addi	sp, sp, 48
8020d258: 82 80        	ret

000000008020d25a <arch.riscv64.physical.allocate1>:
; pub fn allocate1(page_count: u64) ?u64 {
8020d25a: 13 01 01 81  	addi	sp, sp, -2032
8020d25e: 23 34 11 7e  	sd	ra, 2024(sp)
8020d262: 23 30 81 7e  	sd	s0, 2016(sp)
8020d266: 13 04 01 7f  	addi	s0, sp, 2032
8020d26a: 13 01 01 88  	addi	sp, sp, -1920
8020d26e: 23 30 a4 b4  	sd	a0, -1216(s0)
8020d272: 23 38 b4 b4  	sd	a1, -1200(s0)
8020d276: 01 45        	mv	a0, zero
;     for (available_regions) |*region| {
8020d278: 23 30 a4 fe  	sd	a0, -32(s0)

000000008020d27c <.LBB136_1403>:
8020d27c: 17 b5 05 00  	auipc	a0, 91
8020d280: 13 05 45 b5  	addi	a0, a0, -1196
;     for (available_regions) |*region| {
8020d284: 08 65        	ld	a0, 8(a0)
8020d286: 23 34 a4 b4  	sd	a0, -1208(s0)
8020d28a: 09 a0        	j	0x8020d28c <.LBB136_1403+0x10>
8020d28c: 83 35 84 b4  	ld	a1, -1208(s0)
8020d290: 03 35 04 fe  	ld	a0, -32(s0)
8020d294: 23 3c a4 b2  	sd	a0, -1224(s0)
8020d298: 63 64 b5 00  	bltu	a0, a1, 0x8020d2a0 <.LBB136_1403+0x24>
8020d29c: 6f 20 00 2a  	j	0x8020f53c <.LBB136_1407>
8020d2a0: 83 35 84 b3  	ld	a1, -1224(s0)

000000008020d2a4 <.LBB136_1404>:
8020d2a4: 17 b5 05 00  	auipc	a0, 91
8020d2a8: 13 05 c5 b2  	addi	a0, a0, -1236
8020d2ac: 08 61        	ld	a0, 0(a0)
8020d2ae: 13 06 80 02  	addi	a2, zero, 40
8020d2b2: b3 85 c5 02  	mul	a1, a1, a2
8020d2b6: aa 95        	add	a1, a1, a0
8020d2b8: 23 3c b4 fc  	sd	a1, -40(s0)
;         if (region.descriptor.page_count - region.allocated_page_count >= page_count) {
8020d2bc: 88 65        	ld	a0, 8(a1)
8020d2be: 8c 69        	ld	a1, 16(a1)
8020d2c0: b3 05 b5 40  	sub	a1, a0, a1
8020d2c4: 23 38 b4 b2  	sd	a1, -1232(s0)
8020d2c8: 63 74 b5 00  	bgeu	a0, a1, 0x8020d2d0 <.LBB136_1404+0x2c>
8020d2cc: 6f 20 20 28  	j	0x8020f54e <.LBB136_1408>
8020d2d0: 6f 20 00 29  	j	0x8020f560 <.LBB136_1408+0x12>
;             const supposed_bitset_size = region.descriptor.page_count / @bitSizeOf(u64);
8020d2d4: 03 35 84 fd  	ld	a0, -40(s0)
8020d2d8: 08 65        	ld	a0, 8(a0)
8020d2da: 23 34 a4 b2  	sd	a0, -1240(s0)
8020d2de: 01 45        	mv	a0, zero
8020d2e0: 63 04 a5 00  	beq	a0, a0, 0x8020d2e8 <.LBB136_1404+0x44>
8020d2e4: 6f 20 c0 28  	j	0x8020f570 <.LBB136_1409>
8020d2e8: 6f 20 a0 29  	j	0x8020f582 <.LBB136_1409+0x12>
;             bitset_loop: for (region.bitset[start_index..]) |*bitset_elem| {
8020d2ec: 83 35 84 b1  	ld	a1, -1256(s0)
8020d2f0: 03 35 04 fa  	ld	a0, -96(s0)
8020d2f4: 23 30 a4 b2  	sd	a0, -1248(s0)
8020d2f8: 63 64 b5 00  	bltu	a0, a1, 0x8020d300 <.LBB136_1404+0x5c>
8020d2fc: 6f 20 e0 10  	j	0x8020f40a <.LBB136_1404+0x2166>
8020d300: 83 35 04 b2  	ld	a1, -1248(s0)
8020d304: 03 35 84 fa  	ld	a0, -88(s0)
8020d308: 8e 05        	slli	a1, a1, 3
8020d30a: 2e 95        	add	a0, a0, a1
8020d30c: 23 3c a4 f8  	sd	a0, -104(s0)
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020d310: 08 61        	ld	a0, 0(a0)
8020d312: 05 89        	andi	a0, a0, 1
8020d314: a3 0b a4 f8  	sb	a0, -105(s0)
;                     if (region_allocated_page_count == page_count) {
8020d318: 03 35 84 fc  	ld	a0, -56(s0)
8020d31c: 83 35 04 b5  	ld	a1, -1200(s0)
8020d320: 63 15 b5 00  	bne	a0, a1, 0x8020d32a <.LBB136_1404+0x86>
8020d324: 09 a0        	j	0x8020d326 <.LBB136_1404+0x82>
;                         break :bitset_loop;
8020d326: 6f 20 40 0e  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020d32a: 03 45 74 f9  	lbu	a0, -105(s0)
8020d32e: 81 45        	mv	a1, zero
8020d330: 63 1b b5 04  	bne	a0, a1, 0x8020d386 <.LBB136_1404+0xe2>
8020d334: 09 a0        	j	0x8020d336 <.LBB136_1404+0x92>
;                             if (first_address == 0) {
8020d336: 03 35 84 fb  	ld	a0, -72(s0)
8020d33a: 81 45        	mv	a1, zero
8020d33c: 63 12 b5 02  	bne	a0, a1, 0x8020d360 <.LBB136_1404+0xbc>
8020d340: 09 a0        	j	0x8020d342 <.LBB136_1404+0x9e>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020d342: 83 35 04 fc  	ld	a1, -64(s0)
8020d346: 7d 55        	addi	a0, zero, -1
8020d348: 19 81        	srli	a0, a0, 6
8020d34a: 6d 8d        	and	a0, a0, a1
8020d34c: 13 96 65 00  	slli	a2, a1, 6
8020d350: 23 38 c4 b0  	sd	a2, -1264(s0)
8020d354: 63 04 b5 00  	beq	a0, a1, 0x8020d35c <.LBB136_1404+0xb8>
8020d358: 6f 20 60 33  	j	0x8020f68e <.LBB136_1414>
8020d35c: 6f 20 40 34  	j	0x8020f6a0 <.LBB136_1414+0x12>
;                             if (first_address == 0) {
8020d360: 09 a0        	j	0x8020d362 <.LBB136_1404+0xbe>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020d362: 83 35 84 f9  	ld	a1, -104(s0)
8020d366: 88 61        	ld	a0, 0(a1)
8020d368: 13 65 15 00  	ori	a0, a0, 1
8020d36c: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020d36e: 83 35 84 fc  	ld	a1, -56(s0)
8020d372: 13 85 15 00  	addi	a0, a1, 1
8020d376: 23 34 a4 b0  	sd	a0, -1272(s0)
8020d37a: 63 74 b5 00  	bgeu	a0, a1, 0x8020d382 <.LBB136_1404+0xde>
8020d37e: 6f 20 c0 3c  	j	0x8020f74a <.LBB136_1418>
8020d382: 6f 20 a0 3d  	j	0x8020f75c <.LBB136_1418+0x12>
;                         if (!bit_set) {
8020d386: 09 a0        	j	0x8020d388 <.LBB136_1404+0xe4>
;                     if (region_allocated_page_count == page_count) {
8020d388: 09 a0        	j	0x8020d38a <.LBB136_1404+0xe6>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020d38a: 03 35 84 f9  	ld	a0, -104(s0)
8020d38e: 08 61        	ld	a0, 0(a0)
8020d390: 05 81        	srli	a0, a0, 1
8020d392: 05 89        	andi	a0, a0, 1
8020d394: a3 03 a4 f8  	sb	a0, -121(s0)
;                     if (region_allocated_page_count == page_count) {
8020d398: 03 35 84 fc  	ld	a0, -56(s0)
8020d39c: 83 35 04 b5  	ld	a1, -1200(s0)
8020d3a0: 63 15 b5 00  	bne	a0, a1, 0x8020d3aa <.LBB136_1404+0x106>
8020d3a4: 09 a0        	j	0x8020d3a6 <.LBB136_1404+0x102>
;                         break :bitset_loop;
8020d3a6: 6f 20 40 06  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020d3aa: 03 45 74 f8  	lbu	a0, -121(s0)
8020d3ae: 81 45        	mv	a1, zero
8020d3b0: 63 1b b5 04  	bne	a0, a1, 0x8020d406 <.LBB136_1404+0x162>
8020d3b4: 09 a0        	j	0x8020d3b6 <.LBB136_1404+0x112>
;                             if (first_address == 0) {
8020d3b6: 03 35 84 fb  	ld	a0, -72(s0)
8020d3ba: 81 45        	mv	a1, zero
8020d3bc: 63 12 b5 02  	bne	a0, a1, 0x8020d3e0 <.LBB136_1404+0x13c>
8020d3c0: 09 a0        	j	0x8020d3c2 <.LBB136_1404+0x11e>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020d3c2: 83 35 04 fc  	ld	a1, -64(s0)
8020d3c6: 7d 55        	addi	a0, zero, -1
8020d3c8: 19 81        	srli	a0, a0, 6
8020d3ca: 6d 8d        	and	a0, a0, a1
8020d3cc: 13 96 65 00  	slli	a2, a1, 6
8020d3d0: 23 30 c4 b0  	sd	a2, -1280(s0)
8020d3d4: 63 04 b5 00  	beq	a0, a1, 0x8020d3dc <.LBB136_1404+0x138>
8020d3d8: 6f 20 00 39  	j	0x8020f768 <.LBB136_1419>
8020d3dc: 6f 20 e0 39  	j	0x8020f77a <.LBB136_1419+0x12>
;                             if (first_address == 0) {
8020d3e0: 09 a0        	j	0x8020d3e2 <.LBB136_1404+0x13e>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020d3e2: 83 35 84 f9  	ld	a1, -104(s0)
8020d3e6: 88 61        	ld	a0, 0(a1)
8020d3e8: 13 65 25 00  	ori	a0, a0, 2
8020d3ec: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020d3ee: 83 35 84 fc  	ld	a1, -56(s0)
8020d3f2: 13 85 15 00  	addi	a0, a1, 1
8020d3f6: 23 3c a4 ae  	sd	a0, -1288(s0)
8020d3fa: 63 74 b5 00  	bgeu	a0, a1, 0x8020d402 <.LBB136_1404+0x15e>
8020d3fe: 6f 20 60 42  	j	0x8020f824 <.LBB136_1423>
8020d402: 6f 20 40 43  	j	0x8020f836 <.LBB136_1423+0x12>
;                         if (!bit_set) {
8020d406: 09 a0        	j	0x8020d408 <.LBB136_1404+0x164>
;                     if (region_allocated_page_count == page_count) {
8020d408: 09 a0        	j	0x8020d40a <.LBB136_1404+0x166>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020d40a: 03 35 84 f9  	ld	a0, -104(s0)
8020d40e: 08 61        	ld	a0, 0(a0)
8020d410: 09 81        	srli	a0, a0, 2
8020d412: 05 89        	andi	a0, a0, 1
8020d414: a3 0b a4 f6  	sb	a0, -137(s0)
;                     if (region_allocated_page_count == page_count) {
8020d418: 03 35 84 fc  	ld	a0, -56(s0)
8020d41c: 83 35 04 b5  	ld	a1, -1200(s0)
8020d420: 63 15 b5 00  	bne	a0, a1, 0x8020d42a <.LBB136_1404+0x186>
8020d424: 09 a0        	j	0x8020d426 <.LBB136_1404+0x182>
;                         break :bitset_loop;
8020d426: 6f 10 50 7e  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020d42a: 03 45 74 f7  	lbu	a0, -137(s0)
8020d42e: 81 45        	mv	a1, zero
8020d430: 63 1b b5 04  	bne	a0, a1, 0x8020d486 <.LBB136_1404+0x1e2>
8020d434: 09 a0        	j	0x8020d436 <.LBB136_1404+0x192>
;                             if (first_address == 0) {
8020d436: 03 35 84 fb  	ld	a0, -72(s0)
8020d43a: 81 45        	mv	a1, zero
8020d43c: 63 12 b5 02  	bne	a0, a1, 0x8020d460 <.LBB136_1404+0x1bc>
8020d440: 09 a0        	j	0x8020d442 <.LBB136_1404+0x19e>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020d442: 83 35 04 fc  	ld	a1, -64(s0)
8020d446: 7d 55        	addi	a0, zero, -1
8020d448: 19 81        	srli	a0, a0, 6
8020d44a: 6d 8d        	and	a0, a0, a1
8020d44c: 13 96 65 00  	slli	a2, a1, 6
8020d450: 23 38 c4 ae  	sd	a2, -1296(s0)
8020d454: 63 04 b5 00  	beq	a0, a1, 0x8020d45c <.LBB136_1404+0x1b8>
8020d458: 6f 20 a0 3e  	j	0x8020f842 <.LBB136_1424>
8020d45c: 6f 20 80 3f  	j	0x8020f854 <.LBB136_1424+0x12>
;                             if (first_address == 0) {
8020d460: 09 a0        	j	0x8020d462 <.LBB136_1404+0x1be>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020d462: 83 35 84 f9  	ld	a1, -104(s0)
8020d466: 88 61        	ld	a0, 0(a1)
8020d468: 13 65 45 00  	ori	a0, a0, 4
8020d46c: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020d46e: 83 35 84 fc  	ld	a1, -56(s0)
8020d472: 13 85 15 00  	addi	a0, a1, 1
8020d476: 23 34 a4 ae  	sd	a0, -1304(s0)
8020d47a: 63 74 b5 00  	bgeu	a0, a1, 0x8020d482 <.LBB136_1404+0x1de>
8020d47e: 6f 20 00 48  	j	0x8020f8fe <.LBB136_1428>
8020d482: 6f 20 e0 48  	j	0x8020f910 <.LBB136_1428+0x12>
;                         if (!bit_set) {
8020d486: 09 a0        	j	0x8020d488 <.LBB136_1404+0x1e4>
;                     if (region_allocated_page_count == page_count) {
8020d488: 09 a0        	j	0x8020d48a <.LBB136_1404+0x1e6>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020d48a: 03 35 84 f9  	ld	a0, -104(s0)
8020d48e: 08 61        	ld	a0, 0(a0)
8020d490: 0d 81        	srli	a0, a0, 3
8020d492: 05 89        	andi	a0, a0, 1
8020d494: a3 03 a4 f6  	sb	a0, -153(s0)
;                     if (region_allocated_page_count == page_count) {
8020d498: 03 35 84 fc  	ld	a0, -56(s0)
8020d49c: 83 35 04 b5  	ld	a1, -1200(s0)
8020d4a0: 63 15 b5 00  	bne	a0, a1, 0x8020d4aa <.LBB136_1404+0x206>
8020d4a4: 09 a0        	j	0x8020d4a6 <.LBB136_1404+0x202>
;                         break :bitset_loop;
8020d4a6: 6f 10 50 76  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020d4aa: 03 45 74 f6  	lbu	a0, -153(s0)
8020d4ae: 81 45        	mv	a1, zero
8020d4b0: 63 1b b5 04  	bne	a0, a1, 0x8020d506 <.LBB136_1404+0x262>
8020d4b4: 09 a0        	j	0x8020d4b6 <.LBB136_1404+0x212>
;                             if (first_address == 0) {
8020d4b6: 03 35 84 fb  	ld	a0, -72(s0)
8020d4ba: 81 45        	mv	a1, zero
8020d4bc: 63 12 b5 02  	bne	a0, a1, 0x8020d4e0 <.LBB136_1404+0x23c>
8020d4c0: 09 a0        	j	0x8020d4c2 <.LBB136_1404+0x21e>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020d4c2: 83 35 04 fc  	ld	a1, -64(s0)
8020d4c6: 7d 55        	addi	a0, zero, -1
8020d4c8: 19 81        	srli	a0, a0, 6
8020d4ca: 6d 8d        	and	a0, a0, a1
8020d4cc: 13 96 65 00  	slli	a2, a1, 6
8020d4d0: 23 30 c4 ae  	sd	a2, -1312(s0)
8020d4d4: 63 04 b5 00  	beq	a0, a1, 0x8020d4dc <.LBB136_1404+0x238>
8020d4d8: 6f 20 40 44  	j	0x8020f91c <.LBB136_1429>
8020d4dc: 6f 20 20 45  	j	0x8020f92e <.LBB136_1429+0x12>
;                             if (first_address == 0) {
8020d4e0: 09 a0        	j	0x8020d4e2 <.LBB136_1404+0x23e>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020d4e2: 83 35 84 f9  	ld	a1, -104(s0)
8020d4e6: 88 61        	ld	a0, 0(a1)
8020d4e8: 13 65 85 00  	ori	a0, a0, 8
8020d4ec: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020d4ee: 83 35 84 fc  	ld	a1, -56(s0)
8020d4f2: 13 85 15 00  	addi	a0, a1, 1
8020d4f6: 23 3c a4 ac  	sd	a0, -1320(s0)
8020d4fa: 63 74 b5 00  	bgeu	a0, a1, 0x8020d502 <.LBB136_1404+0x25e>
8020d4fe: 6f 20 a0 4d  	j	0x8020f9d8 <.LBB136_1433>
8020d502: 6f 20 80 4e  	j	0x8020f9ea <.LBB136_1433+0x12>
;                         if (!bit_set) {
8020d506: 09 a0        	j	0x8020d508 <.LBB136_1404+0x264>
;                     if (region_allocated_page_count == page_count) {
8020d508: 09 a0        	j	0x8020d50a <.LBB136_1404+0x266>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020d50a: 03 35 84 f9  	ld	a0, -104(s0)
8020d50e: 08 61        	ld	a0, 0(a0)
8020d510: 11 81        	srli	a0, a0, 4
8020d512: 05 89        	andi	a0, a0, 1
8020d514: a3 0b a4 f4  	sb	a0, -169(s0)
;                     if (region_allocated_page_count == page_count) {
8020d518: 03 35 84 fc  	ld	a0, -56(s0)
8020d51c: 83 35 04 b5  	ld	a1, -1200(s0)
8020d520: 63 15 b5 00  	bne	a0, a1, 0x8020d52a <.LBB136_1404+0x286>
8020d524: 09 a0        	j	0x8020d526 <.LBB136_1404+0x282>
;                         break :bitset_loop;
8020d526: 6f 10 50 6e  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020d52a: 03 45 74 f5  	lbu	a0, -169(s0)
8020d52e: 81 45        	mv	a1, zero
8020d530: 63 1b b5 04  	bne	a0, a1, 0x8020d586 <.LBB136_1404+0x2e2>
8020d534: 09 a0        	j	0x8020d536 <.LBB136_1404+0x292>
;                             if (first_address == 0) {
8020d536: 03 35 84 fb  	ld	a0, -72(s0)
8020d53a: 81 45        	mv	a1, zero
8020d53c: 63 12 b5 02  	bne	a0, a1, 0x8020d560 <.LBB136_1404+0x2bc>
8020d540: 09 a0        	j	0x8020d542 <.LBB136_1404+0x29e>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020d542: 83 35 04 fc  	ld	a1, -64(s0)
8020d546: 7d 55        	addi	a0, zero, -1
8020d548: 19 81        	srli	a0, a0, 6
8020d54a: 6d 8d        	and	a0, a0, a1
8020d54c: 13 96 65 00  	slli	a2, a1, 6
8020d550: 23 38 c4 ac  	sd	a2, -1328(s0)
8020d554: 63 04 b5 00  	beq	a0, a1, 0x8020d55c <.LBB136_1404+0x2b8>
8020d558: 6f 20 e0 49  	j	0x8020f9f6 <.LBB136_1434>
8020d55c: 6f 20 c0 4a  	j	0x8020fa08 <.LBB136_1434+0x12>
;                             if (first_address == 0) {
8020d560: 09 a0        	j	0x8020d562 <.LBB136_1404+0x2be>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020d562: 83 35 84 f9  	ld	a1, -104(s0)
8020d566: 88 61        	ld	a0, 0(a1)
8020d568: 13 65 05 01  	ori	a0, a0, 16
8020d56c: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020d56e: 83 35 84 fc  	ld	a1, -56(s0)
8020d572: 13 85 15 00  	addi	a0, a1, 1
8020d576: 23 34 a4 ac  	sd	a0, -1336(s0)
8020d57a: 63 74 b5 00  	bgeu	a0, a1, 0x8020d582 <.LBB136_1404+0x2de>
8020d57e: 6f 20 40 53  	j	0x8020fab2 <.LBB136_1438>
8020d582: 6f 20 20 54  	j	0x8020fac4 <.LBB136_1438+0x12>
;                         if (!bit_set) {
8020d586: 09 a0        	j	0x8020d588 <.LBB136_1404+0x2e4>
;                     if (region_allocated_page_count == page_count) {
8020d588: 09 a0        	j	0x8020d58a <.LBB136_1404+0x2e6>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020d58a: 03 35 84 f9  	ld	a0, -104(s0)
8020d58e: 08 61        	ld	a0, 0(a0)
8020d590: 15 81        	srli	a0, a0, 5
8020d592: 05 89        	andi	a0, a0, 1
8020d594: a3 03 a4 f4  	sb	a0, -185(s0)
;                     if (region_allocated_page_count == page_count) {
8020d598: 03 35 84 fc  	ld	a0, -56(s0)
8020d59c: 83 35 04 b5  	ld	a1, -1200(s0)
8020d5a0: 63 15 b5 00  	bne	a0, a1, 0x8020d5aa <.LBB136_1404+0x306>
8020d5a4: 09 a0        	j	0x8020d5a6 <.LBB136_1404+0x302>
;                         break :bitset_loop;
8020d5a6: 6f 10 50 66  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020d5aa: 03 45 74 f4  	lbu	a0, -185(s0)
8020d5ae: 81 45        	mv	a1, zero
8020d5b0: 63 1b b5 04  	bne	a0, a1, 0x8020d606 <.LBB136_1404+0x362>
8020d5b4: 09 a0        	j	0x8020d5b6 <.LBB136_1404+0x312>
;                             if (first_address == 0) {
8020d5b6: 03 35 84 fb  	ld	a0, -72(s0)
8020d5ba: 81 45        	mv	a1, zero
8020d5bc: 63 12 b5 02  	bne	a0, a1, 0x8020d5e0 <.LBB136_1404+0x33c>
8020d5c0: 09 a0        	j	0x8020d5c2 <.LBB136_1404+0x31e>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020d5c2: 83 35 04 fc  	ld	a1, -64(s0)
8020d5c6: 7d 55        	addi	a0, zero, -1
8020d5c8: 19 81        	srli	a0, a0, 6
8020d5ca: 6d 8d        	and	a0, a0, a1
8020d5cc: 13 96 65 00  	slli	a2, a1, 6
8020d5d0: 23 30 c4 ac  	sd	a2, -1344(s0)
8020d5d4: 63 04 b5 00  	beq	a0, a1, 0x8020d5dc <.LBB136_1404+0x338>
8020d5d8: 6f 20 80 4f  	j	0x8020fad0 <.LBB136_1439>
8020d5dc: 6f 20 60 50  	j	0x8020fae2 <.LBB136_1439+0x12>
;                             if (first_address == 0) {
8020d5e0: 09 a0        	j	0x8020d5e2 <.LBB136_1404+0x33e>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020d5e2: 83 35 84 f9  	ld	a1, -104(s0)
8020d5e6: 88 61        	ld	a0, 0(a1)
8020d5e8: 13 65 05 02  	ori	a0, a0, 32
8020d5ec: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020d5ee: 83 35 84 fc  	ld	a1, -56(s0)
8020d5f2: 13 85 15 00  	addi	a0, a1, 1
8020d5f6: 23 3c a4 aa  	sd	a0, -1352(s0)
8020d5fa: 63 74 b5 00  	bgeu	a0, a1, 0x8020d602 <.LBB136_1404+0x35e>
8020d5fe: 6f 20 e0 58  	j	0x8020fb8c <.LBB136_1443>
8020d602: 6f 20 c0 59  	j	0x8020fb9e <.LBB136_1443+0x12>
;                         if (!bit_set) {
8020d606: 09 a0        	j	0x8020d608 <.LBB136_1404+0x364>
;                     if (region_allocated_page_count == page_count) {
8020d608: 09 a0        	j	0x8020d60a <.LBB136_1404+0x366>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020d60a: 03 35 84 f9  	ld	a0, -104(s0)
8020d60e: 08 61        	ld	a0, 0(a0)
8020d610: 19 81        	srli	a0, a0, 6
8020d612: 05 89        	andi	a0, a0, 1
8020d614: a3 0b a4 f2  	sb	a0, -201(s0)
;                     if (region_allocated_page_count == page_count) {
8020d618: 03 35 84 fc  	ld	a0, -56(s0)
8020d61c: 83 35 04 b5  	ld	a1, -1200(s0)
8020d620: 63 15 b5 00  	bne	a0, a1, 0x8020d62a <.LBB136_1404+0x386>
8020d624: 09 a0        	j	0x8020d626 <.LBB136_1404+0x382>
;                         break :bitset_loop;
8020d626: 6f 10 50 5e  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020d62a: 03 45 74 f3  	lbu	a0, -201(s0)
8020d62e: 81 45        	mv	a1, zero
8020d630: 63 1b b5 04  	bne	a0, a1, 0x8020d686 <.LBB136_1404+0x3e2>
8020d634: 09 a0        	j	0x8020d636 <.LBB136_1404+0x392>
;                             if (first_address == 0) {
8020d636: 03 35 84 fb  	ld	a0, -72(s0)
8020d63a: 81 45        	mv	a1, zero
8020d63c: 63 12 b5 02  	bne	a0, a1, 0x8020d660 <.LBB136_1404+0x3bc>
8020d640: 09 a0        	j	0x8020d642 <.LBB136_1404+0x39e>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020d642: 83 35 04 fc  	ld	a1, -64(s0)
8020d646: 7d 55        	addi	a0, zero, -1
8020d648: 19 81        	srli	a0, a0, 6
8020d64a: 6d 8d        	and	a0, a0, a1
8020d64c: 13 96 65 00  	slli	a2, a1, 6
8020d650: 23 38 c4 aa  	sd	a2, -1360(s0)
8020d654: 63 04 b5 00  	beq	a0, a1, 0x8020d65c <.LBB136_1404+0x3b8>
8020d658: 6f 20 20 55  	j	0x8020fbaa <.LBB136_1444>
8020d65c: 6f 20 00 56  	j	0x8020fbbc <.LBB136_1444+0x12>
;                             if (first_address == 0) {
8020d660: 09 a0        	j	0x8020d662 <.LBB136_1404+0x3be>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020d662: 83 35 84 f9  	ld	a1, -104(s0)
8020d666: 88 61        	ld	a0, 0(a1)
8020d668: 13 65 05 04  	ori	a0, a0, 64
8020d66c: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020d66e: 83 35 84 fc  	ld	a1, -56(s0)
8020d672: 13 85 15 00  	addi	a0, a1, 1
8020d676: 23 34 a4 aa  	sd	a0, -1368(s0)
8020d67a: 63 74 b5 00  	bgeu	a0, a1, 0x8020d682 <.LBB136_1404+0x3de>
8020d67e: 6f 20 80 5e  	j	0x8020fc66 <.LBB136_1448>
8020d682: 6f 20 60 5f  	j	0x8020fc78 <.LBB136_1448+0x12>
;                         if (!bit_set) {
8020d686: 09 a0        	j	0x8020d688 <.LBB136_1404+0x3e4>
;                     if (region_allocated_page_count == page_count) {
8020d688: 09 a0        	j	0x8020d68a <.LBB136_1404+0x3e6>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020d68a: 03 35 84 f9  	ld	a0, -104(s0)
8020d68e: 08 61        	ld	a0, 0(a0)
8020d690: 1d 81        	srli	a0, a0, 7
8020d692: 05 89        	andi	a0, a0, 1
8020d694: a3 03 a4 f2  	sb	a0, -217(s0)
;                     if (region_allocated_page_count == page_count) {
8020d698: 03 35 84 fc  	ld	a0, -56(s0)
8020d69c: 83 35 04 b5  	ld	a1, -1200(s0)
8020d6a0: 63 15 b5 00  	bne	a0, a1, 0x8020d6aa <.LBB136_1404+0x406>
8020d6a4: 09 a0        	j	0x8020d6a6 <.LBB136_1404+0x402>
;                         break :bitset_loop;
8020d6a6: 6f 10 50 56  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020d6aa: 03 45 74 f2  	lbu	a0, -217(s0)
8020d6ae: 81 45        	mv	a1, zero
8020d6b0: 63 1b b5 04  	bne	a0, a1, 0x8020d706 <.LBB136_1404+0x462>
8020d6b4: 09 a0        	j	0x8020d6b6 <.LBB136_1404+0x412>
;                             if (first_address == 0) {
8020d6b6: 03 35 84 fb  	ld	a0, -72(s0)
8020d6ba: 81 45        	mv	a1, zero
8020d6bc: 63 12 b5 02  	bne	a0, a1, 0x8020d6e0 <.LBB136_1404+0x43c>
8020d6c0: 09 a0        	j	0x8020d6c2 <.LBB136_1404+0x41e>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020d6c2: 83 35 04 fc  	ld	a1, -64(s0)
8020d6c6: 7d 55        	addi	a0, zero, -1
8020d6c8: 19 81        	srli	a0, a0, 6
8020d6ca: 6d 8d        	and	a0, a0, a1
8020d6cc: 13 96 65 00  	slli	a2, a1, 6
8020d6d0: 23 30 c4 aa  	sd	a2, -1376(s0)
8020d6d4: 63 04 b5 00  	beq	a0, a1, 0x8020d6dc <.LBB136_1404+0x438>
8020d6d8: 6f 20 c0 5a  	j	0x8020fc84 <.LBB136_1449>
8020d6dc: 6f 20 a0 5b  	j	0x8020fc96 <.LBB136_1449+0x12>
;                             if (first_address == 0) {
8020d6e0: 09 a0        	j	0x8020d6e2 <.LBB136_1404+0x43e>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020d6e2: 83 35 84 f9  	ld	a1, -104(s0)
8020d6e6: 88 61        	ld	a0, 0(a1)
8020d6e8: 13 65 05 08  	ori	a0, a0, 128
8020d6ec: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020d6ee: 83 35 84 fc  	ld	a1, -56(s0)
8020d6f2: 13 85 15 00  	addi	a0, a1, 1
8020d6f6: 23 3c a4 a8  	sd	a0, -1384(s0)
8020d6fa: 63 74 b5 00  	bgeu	a0, a1, 0x8020d702 <.LBB136_1404+0x45e>
8020d6fe: 6f 20 20 64  	j	0x8020fd40 <.LBB136_1453>
8020d702: 6f 20 00 65  	j	0x8020fd52 <.LBB136_1453+0x12>
;                         if (!bit_set) {
8020d706: 09 a0        	j	0x8020d708 <.LBB136_1404+0x464>
;                     if (region_allocated_page_count == page_count) {
8020d708: 09 a0        	j	0x8020d70a <.LBB136_1404+0x466>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020d70a: 03 35 84 f9  	ld	a0, -104(s0)
8020d70e: 08 61        	ld	a0, 0(a0)
8020d710: 21 81        	srli	a0, a0, 8
8020d712: 05 89        	andi	a0, a0, 1
8020d714: a3 0b a4 f0  	sb	a0, -233(s0)
;                     if (region_allocated_page_count == page_count) {
8020d718: 03 35 84 fc  	ld	a0, -56(s0)
8020d71c: 83 35 04 b5  	ld	a1, -1200(s0)
8020d720: 63 15 b5 00  	bne	a0, a1, 0x8020d72a <.LBB136_1404+0x486>
8020d724: 09 a0        	j	0x8020d726 <.LBB136_1404+0x482>
;                         break :bitset_loop;
8020d726: 6f 10 50 4e  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020d72a: 03 45 74 f1  	lbu	a0, -233(s0)
8020d72e: 81 45        	mv	a1, zero
8020d730: 63 1b b5 04  	bne	a0, a1, 0x8020d786 <.LBB136_1404+0x4e2>
8020d734: 09 a0        	j	0x8020d736 <.LBB136_1404+0x492>
;                             if (first_address == 0) {
8020d736: 03 35 84 fb  	ld	a0, -72(s0)
8020d73a: 81 45        	mv	a1, zero
8020d73c: 63 12 b5 02  	bne	a0, a1, 0x8020d760 <.LBB136_1404+0x4bc>
8020d740: 09 a0        	j	0x8020d742 <.LBB136_1404+0x49e>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020d742: 83 35 04 fc  	ld	a1, -64(s0)
8020d746: 7d 55        	addi	a0, zero, -1
8020d748: 19 81        	srli	a0, a0, 6
8020d74a: 6d 8d        	and	a0, a0, a1
8020d74c: 13 96 65 00  	slli	a2, a1, 6
8020d750: 23 38 c4 a8  	sd	a2, -1392(s0)
8020d754: 63 04 b5 00  	beq	a0, a1, 0x8020d75c <.LBB136_1404+0x4b8>
8020d758: 6f 20 60 60  	j	0x8020fd5e <.LBB136_1454>
8020d75c: 6f 20 40 61  	j	0x8020fd70 <.LBB136_1454+0x12>
;                             if (first_address == 0) {
8020d760: 09 a0        	j	0x8020d762 <.LBB136_1404+0x4be>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020d762: 83 35 84 f9  	ld	a1, -104(s0)
8020d766: 88 61        	ld	a0, 0(a1)
8020d768: 13 65 05 10  	ori	a0, a0, 256
8020d76c: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020d76e: 83 35 84 fc  	ld	a1, -56(s0)
8020d772: 13 85 15 00  	addi	a0, a1, 1
8020d776: 23 34 a4 a8  	sd	a0, -1400(s0)
8020d77a: 63 74 b5 00  	bgeu	a0, a1, 0x8020d782 <.LBB136_1404+0x4de>
8020d77e: 6f 20 c0 69  	j	0x8020fe1a <.LBB136_1458>
8020d782: 6f 20 a0 6a  	j	0x8020fe2c <.LBB136_1458+0x12>
;                         if (!bit_set) {
8020d786: 09 a0        	j	0x8020d788 <.LBB136_1404+0x4e4>
;                     if (region_allocated_page_count == page_count) {
8020d788: 09 a0        	j	0x8020d78a <.LBB136_1404+0x4e6>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020d78a: 03 35 84 f9  	ld	a0, -104(s0)
8020d78e: 08 61        	ld	a0, 0(a0)
8020d790: 25 81        	srli	a0, a0, 9
8020d792: 05 89        	andi	a0, a0, 1
8020d794: a3 03 a4 f0  	sb	a0, -249(s0)
;                     if (region_allocated_page_count == page_count) {
8020d798: 03 35 84 fc  	ld	a0, -56(s0)
8020d79c: 83 35 04 b5  	ld	a1, -1200(s0)
8020d7a0: 63 15 b5 00  	bne	a0, a1, 0x8020d7aa <.LBB136_1404+0x506>
8020d7a4: 09 a0        	j	0x8020d7a6 <.LBB136_1404+0x502>
;                         break :bitset_loop;
8020d7a6: 6f 10 50 46  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020d7aa: 03 45 74 f0  	lbu	a0, -249(s0)
8020d7ae: 81 45        	mv	a1, zero
8020d7b0: 63 1b b5 04  	bne	a0, a1, 0x8020d806 <.LBB136_1404+0x562>
8020d7b4: 09 a0        	j	0x8020d7b6 <.LBB136_1404+0x512>
;                             if (first_address == 0) {
8020d7b6: 03 35 84 fb  	ld	a0, -72(s0)
8020d7ba: 81 45        	mv	a1, zero
8020d7bc: 63 12 b5 02  	bne	a0, a1, 0x8020d7e0 <.LBB136_1404+0x53c>
8020d7c0: 09 a0        	j	0x8020d7c2 <.LBB136_1404+0x51e>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020d7c2: 83 35 04 fc  	ld	a1, -64(s0)
8020d7c6: 7d 55        	addi	a0, zero, -1
8020d7c8: 19 81        	srli	a0, a0, 6
8020d7ca: 6d 8d        	and	a0, a0, a1
8020d7cc: 13 96 65 00  	slli	a2, a1, 6
8020d7d0: 23 30 c4 a8  	sd	a2, -1408(s0)
8020d7d4: 63 04 b5 00  	beq	a0, a1, 0x8020d7dc <.LBB136_1404+0x538>
8020d7d8: 6f 20 00 66  	j	0x8020fe38 <.LBB136_1459>
8020d7dc: 6f 20 e0 66  	j	0x8020fe4a <.LBB136_1459+0x12>
;                             if (first_address == 0) {
8020d7e0: 09 a0        	j	0x8020d7e2 <.LBB136_1404+0x53e>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020d7e2: 83 35 84 f9  	ld	a1, -104(s0)
8020d7e6: 88 61        	ld	a0, 0(a1)
8020d7e8: 13 65 05 20  	ori	a0, a0, 512
8020d7ec: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020d7ee: 83 35 84 fc  	ld	a1, -56(s0)
8020d7f2: 13 85 15 00  	addi	a0, a1, 1
8020d7f6: 23 3c a4 a6  	sd	a0, -1416(s0)
8020d7fa: 63 74 b5 00  	bgeu	a0, a1, 0x8020d802 <.LBB136_1404+0x55e>
8020d7fe: 6f 20 60 6f  	j	0x8020fef4 <.LBB136_1463>
8020d802: 6f 20 40 70  	j	0x8020ff06 <.LBB136_1463+0x12>
;                         if (!bit_set) {
8020d806: 09 a0        	j	0x8020d808 <.LBB136_1404+0x564>
;                     if (region_allocated_page_count == page_count) {
8020d808: 09 a0        	j	0x8020d80a <.LBB136_1404+0x566>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020d80a: 03 35 84 f9  	ld	a0, -104(s0)
8020d80e: 08 61        	ld	a0, 0(a0)
8020d810: 29 81        	srli	a0, a0, 10
8020d812: 05 89        	andi	a0, a0, 1
8020d814: a3 0b a4 ee  	sb	a0, -265(s0)
;                     if (region_allocated_page_count == page_count) {
8020d818: 03 35 84 fc  	ld	a0, -56(s0)
8020d81c: 83 35 04 b5  	ld	a1, -1200(s0)
8020d820: 63 15 b5 00  	bne	a0, a1, 0x8020d82a <.LBB136_1404+0x586>
8020d824: 09 a0        	j	0x8020d826 <.LBB136_1404+0x582>
;                         break :bitset_loop;
8020d826: 6f 10 50 3e  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020d82a: 03 45 74 ef  	lbu	a0, -265(s0)
8020d82e: 81 45        	mv	a1, zero
8020d830: 63 1b b5 04  	bne	a0, a1, 0x8020d886 <.LBB136_1404+0x5e2>
8020d834: 09 a0        	j	0x8020d836 <.LBB136_1404+0x592>
;                             if (first_address == 0) {
8020d836: 03 35 84 fb  	ld	a0, -72(s0)
8020d83a: 81 45        	mv	a1, zero
8020d83c: 63 12 b5 02  	bne	a0, a1, 0x8020d860 <.LBB136_1404+0x5bc>
8020d840: 09 a0        	j	0x8020d842 <.LBB136_1404+0x59e>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020d842: 83 35 04 fc  	ld	a1, -64(s0)
8020d846: 7d 55        	addi	a0, zero, -1
8020d848: 19 81        	srli	a0, a0, 6
8020d84a: 6d 8d        	and	a0, a0, a1
8020d84c: 13 96 65 00  	slli	a2, a1, 6
8020d850: 23 38 c4 a6  	sd	a2, -1424(s0)
8020d854: 63 04 b5 00  	beq	a0, a1, 0x8020d85c <.LBB136_1404+0x5b8>
8020d858: 6f 20 a0 6b  	j	0x8020ff12 <.LBB136_1464>
8020d85c: 6f 20 80 6c  	j	0x8020ff24 <.LBB136_1464+0x12>
;                             if (first_address == 0) {
8020d860: 09 a0        	j	0x8020d862 <.LBB136_1404+0x5be>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020d862: 83 35 84 f9  	ld	a1, -104(s0)
8020d866: 88 61        	ld	a0, 0(a1)
8020d868: 13 65 05 40  	ori	a0, a0, 1024
8020d86c: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020d86e: 83 35 84 fc  	ld	a1, -56(s0)
8020d872: 13 85 15 00  	addi	a0, a1, 1
8020d876: 23 34 a4 a6  	sd	a0, -1432(s0)
8020d87a: 63 74 b5 00  	bgeu	a0, a1, 0x8020d882 <.LBB136_1404+0x5de>
8020d87e: 6f 20 00 75  	j	0x8020ffce <.LBB136_1468>
8020d882: 6f 20 e0 75  	j	0x8020ffe0 <.LBB136_1468+0x12>
;                         if (!bit_set) {
8020d886: 09 a0        	j	0x8020d888 <.LBB136_1404+0x5e4>
;                     if (region_allocated_page_count == page_count) {
8020d888: 09 a0        	j	0x8020d88a <.LBB136_1404+0x5e6>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020d88a: 03 35 84 f9  	ld	a0, -104(s0)
8020d88e: 08 61        	ld	a0, 0(a0)
8020d890: 2d 81        	srli	a0, a0, 11
8020d892: 05 89        	andi	a0, a0, 1
8020d894: a3 03 a4 ee  	sb	a0, -281(s0)
;                     if (region_allocated_page_count == page_count) {
8020d898: 03 35 84 fc  	ld	a0, -56(s0)
8020d89c: 83 35 04 b5  	ld	a1, -1200(s0)
8020d8a0: 63 15 b5 00  	bne	a0, a1, 0x8020d8aa <.LBB136_1404+0x606>
8020d8a4: 09 a0        	j	0x8020d8a6 <.LBB136_1404+0x602>
;                         break :bitset_loop;
8020d8a6: 6f 10 50 36  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020d8aa: 03 45 74 ee  	lbu	a0, -281(s0)
8020d8ae: 81 45        	mv	a1, zero
8020d8b0: 63 1d b5 04  	bne	a0, a1, 0x8020d90a <.LBB136_1404+0x666>
8020d8b4: 09 a0        	j	0x8020d8b6 <.LBB136_1404+0x612>
;                             if (first_address == 0) {
8020d8b6: 03 35 84 fb  	ld	a0, -72(s0)
8020d8ba: 81 45        	mv	a1, zero
8020d8bc: 63 12 b5 02  	bne	a0, a1, 0x8020d8e0 <.LBB136_1404+0x63c>
8020d8c0: 09 a0        	j	0x8020d8c2 <.LBB136_1404+0x61e>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020d8c2: 83 35 04 fc  	ld	a1, -64(s0)
8020d8c6: 7d 55        	addi	a0, zero, -1
8020d8c8: 19 81        	srli	a0, a0, 6
8020d8ca: 6d 8d        	and	a0, a0, a1
8020d8cc: 13 96 65 00  	slli	a2, a1, 6
8020d8d0: 23 30 c4 a6  	sd	a2, -1440(s0)
8020d8d4: 63 04 b5 00  	beq	a0, a1, 0x8020d8dc <.LBB136_1404+0x638>
8020d8d8: 6f 20 40 71  	j	0x8020ffec <.LBB136_1469>
8020d8dc: 6f 20 20 72  	j	0x8020fffe <.LBB136_1469+0x12>
;                             if (first_address == 0) {
8020d8e0: 09 a0        	j	0x8020d8e2 <.LBB136_1404+0x63e>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020d8e2: 83 35 84 f9  	ld	a1, -104(s0)
8020d8e6: 88 61        	ld	a0, 0(a1)
8020d8e8: 05 66        	lui	a2, 1
8020d8ea: 1b 06 06 80  	addiw	a2, a2, -2048
8020d8ee: 51 8d        	or	a0, a0, a2
8020d8f0: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020d8f2: 83 35 84 fc  	ld	a1, -56(s0)
8020d8f6: 13 85 15 00  	addi	a0, a1, 1
8020d8fa: 23 3c a4 a4  	sd	a0, -1448(s0)
8020d8fe: 63 74 b5 00  	bgeu	a0, a1, 0x8020d906 <.LBB136_1404+0x662>
8020d902: 6f 20 60 7a  	j	0x802100a8 <.LBB136_1473>
8020d906: 6f 20 40 7b  	j	0x802100ba <.LBB136_1473+0x12>
;                         if (!bit_set) {
8020d90a: 09 a0        	j	0x8020d90c <.LBB136_1404+0x668>
;                     if (region_allocated_page_count == page_count) {
8020d90c: 09 a0        	j	0x8020d90e <.LBB136_1404+0x66a>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020d90e: 03 35 84 f9  	ld	a0, -104(s0)
8020d912: 08 61        	ld	a0, 0(a0)
8020d914: 31 81        	srli	a0, a0, 12
8020d916: 05 89        	andi	a0, a0, 1
8020d918: a3 0b a4 ec  	sb	a0, -297(s0)
;                     if (region_allocated_page_count == page_count) {
8020d91c: 03 35 84 fc  	ld	a0, -56(s0)
8020d920: 83 35 04 b5  	ld	a1, -1200(s0)
8020d924: 63 15 b5 00  	bne	a0, a1, 0x8020d92e <.LBB136_1404+0x68a>
8020d928: 09 a0        	j	0x8020d92a <.LBB136_1404+0x686>
;                         break :bitset_loop;
8020d92a: 6f 10 10 2e  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020d92e: 03 45 74 ed  	lbu	a0, -297(s0)
8020d932: 81 45        	mv	a1, zero
8020d934: 63 1b b5 04  	bne	a0, a1, 0x8020d98a <.LBB136_1404+0x6e6>
8020d938: 09 a0        	j	0x8020d93a <.LBB136_1404+0x696>
;                             if (first_address == 0) {
8020d93a: 03 35 84 fb  	ld	a0, -72(s0)
8020d93e: 81 45        	mv	a1, zero
8020d940: 63 12 b5 02  	bne	a0, a1, 0x8020d964 <.LBB136_1404+0x6c0>
8020d944: 09 a0        	j	0x8020d946 <.LBB136_1404+0x6a2>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020d946: 83 35 04 fc  	ld	a1, -64(s0)
8020d94a: 7d 55        	addi	a0, zero, -1
8020d94c: 19 81        	srli	a0, a0, 6
8020d94e: 6d 8d        	and	a0, a0, a1
8020d950: 13 96 65 00  	slli	a2, a1, 6
8020d954: 23 38 c4 a4  	sd	a2, -1456(s0)
8020d958: 63 04 b5 00  	beq	a0, a1, 0x8020d960 <.LBB136_1404+0x6bc>
8020d95c: 6f 20 a0 76  	j	0x802100c6 <.LBB136_1474>
8020d960: 6f 20 80 77  	j	0x802100d8 <.LBB136_1474+0x12>
;                             if (first_address == 0) {
8020d964: 09 a0        	j	0x8020d966 <.LBB136_1404+0x6c2>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020d966: 83 35 84 f9  	ld	a1, -104(s0)
8020d96a: 88 61        	ld	a0, 0(a1)
8020d96c: 05 66        	lui	a2, 1
8020d96e: 51 8d        	or	a0, a0, a2
8020d970: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020d972: 83 35 84 fc  	ld	a1, -56(s0)
8020d976: 13 85 15 00  	addi	a0, a1, 1
8020d97a: 23 34 a4 a4  	sd	a0, -1464(s0)
8020d97e: 63 74 b5 00  	bgeu	a0, a1, 0x8020d986 <.LBB136_1404+0x6e2>
8020d982: 6f 20 10 00  	j	0x80210182 <.LBB136_1478>
8020d986: 6f 20 f0 00  	j	0x80210194 <.LBB136_1478+0x12>
;                         if (!bit_set) {
8020d98a: 09 a0        	j	0x8020d98c <.LBB136_1404+0x6e8>
;                     if (region_allocated_page_count == page_count) {
8020d98c: 09 a0        	j	0x8020d98e <.LBB136_1404+0x6ea>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020d98e: 03 35 84 f9  	ld	a0, -104(s0)
8020d992: 08 61        	ld	a0, 0(a0)
8020d994: 35 81        	srli	a0, a0, 13
8020d996: 05 89        	andi	a0, a0, 1
8020d998: a3 03 a4 ec  	sb	a0, -313(s0)
;                     if (region_allocated_page_count == page_count) {
8020d99c: 03 35 84 fc  	ld	a0, -56(s0)
8020d9a0: 83 35 04 b5  	ld	a1, -1200(s0)
8020d9a4: 63 15 b5 00  	bne	a0, a1, 0x8020d9ae <.LBB136_1404+0x70a>
8020d9a8: 09 a0        	j	0x8020d9aa <.LBB136_1404+0x706>
;                         break :bitset_loop;
8020d9aa: 6f 10 10 26  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020d9ae: 03 45 74 ec  	lbu	a0, -313(s0)
8020d9b2: 81 45        	mv	a1, zero
8020d9b4: 63 1b b5 04  	bne	a0, a1, 0x8020da0a <.LBB136_1404+0x766>
8020d9b8: 09 a0        	j	0x8020d9ba <.LBB136_1404+0x716>
;                             if (first_address == 0) {
8020d9ba: 03 35 84 fb  	ld	a0, -72(s0)
8020d9be: 81 45        	mv	a1, zero
8020d9c0: 63 12 b5 02  	bne	a0, a1, 0x8020d9e4 <.LBB136_1404+0x740>
8020d9c4: 09 a0        	j	0x8020d9c6 <.LBB136_1404+0x722>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020d9c6: 83 35 04 fc  	ld	a1, -64(s0)
8020d9ca: 7d 55        	addi	a0, zero, -1
8020d9cc: 19 81        	srli	a0, a0, 6
8020d9ce: 6d 8d        	and	a0, a0, a1
8020d9d0: 13 96 65 00  	slli	a2, a1, 6
8020d9d4: 23 30 c4 a4  	sd	a2, -1472(s0)
8020d9d8: 63 04 b5 00  	beq	a0, a1, 0x8020d9e0 <.LBB136_1404+0x73c>
8020d9dc: 6f 20 40 7c  	j	0x802101a0 <.LBB136_1479>
8020d9e0: 6f 20 20 7d  	j	0x802101b2 <.LBB136_1479+0x12>
;                             if (first_address == 0) {
8020d9e4: 09 a0        	j	0x8020d9e6 <.LBB136_1404+0x742>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020d9e6: 83 35 84 f9  	ld	a1, -104(s0)
8020d9ea: 88 61        	ld	a0, 0(a1)
8020d9ec: 09 66        	lui	a2, 2
8020d9ee: 51 8d        	or	a0, a0, a2
8020d9f0: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020d9f2: 83 35 84 fc  	ld	a1, -56(s0)
8020d9f6: 13 85 15 00  	addi	a0, a1, 1
8020d9fa: 23 3c a4 a2  	sd	a0, -1480(s0)
8020d9fe: 63 74 b5 00  	bgeu	a0, a1, 0x8020da06 <.LBB136_1404+0x762>
8020da02: 6f 20 b0 05  	j	0x8021025c <.LBB136_1483>
8020da06: 6f 20 90 06  	j	0x8021026e <.LBB136_1483+0x12>
;                         if (!bit_set) {
8020da0a: 09 a0        	j	0x8020da0c <.LBB136_1404+0x768>
;                     if (region_allocated_page_count == page_count) {
8020da0c: 09 a0        	j	0x8020da0e <.LBB136_1404+0x76a>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020da0e: 03 35 84 f9  	ld	a0, -104(s0)
8020da12: 08 61        	ld	a0, 0(a0)
8020da14: 39 81        	srli	a0, a0, 14
8020da16: 05 89        	andi	a0, a0, 1
8020da18: a3 0b a4 ea  	sb	a0, -329(s0)
;                     if (region_allocated_page_count == page_count) {
8020da1c: 03 35 84 fc  	ld	a0, -56(s0)
8020da20: 83 35 04 b5  	ld	a1, -1200(s0)
8020da24: 63 15 b5 00  	bne	a0, a1, 0x8020da2e <.LBB136_1404+0x78a>
8020da28: 09 a0        	j	0x8020da2a <.LBB136_1404+0x786>
;                         break :bitset_loop;
8020da2a: 6f 10 10 1e  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020da2e: 03 45 74 eb  	lbu	a0, -329(s0)
8020da32: 81 45        	mv	a1, zero
8020da34: 63 1b b5 04  	bne	a0, a1, 0x8020da8a <.LBB136_1404+0x7e6>
8020da38: 09 a0        	j	0x8020da3a <.LBB136_1404+0x796>
;                             if (first_address == 0) {
8020da3a: 03 35 84 fb  	ld	a0, -72(s0)
8020da3e: 81 45        	mv	a1, zero
8020da40: 63 12 b5 02  	bne	a0, a1, 0x8020da64 <.LBB136_1404+0x7c0>
8020da44: 09 a0        	j	0x8020da46 <.LBB136_1404+0x7a2>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020da46: 83 35 04 fc  	ld	a1, -64(s0)
8020da4a: 7d 55        	addi	a0, zero, -1
8020da4c: 19 81        	srli	a0, a0, 6
8020da4e: 6d 8d        	and	a0, a0, a1
8020da50: 13 96 65 00  	slli	a2, a1, 6
8020da54: 23 38 c4 a2  	sd	a2, -1488(s0)
8020da58: 63 04 b5 00  	beq	a0, a1, 0x8020da60 <.LBB136_1404+0x7bc>
8020da5c: 6f 20 f0 01  	j	0x8021027a <.LBB136_1484>
8020da60: 6f 20 d0 02  	j	0x8021028c <.LBB136_1484+0x12>
;                             if (first_address == 0) {
8020da64: 09 a0        	j	0x8020da66 <.LBB136_1404+0x7c2>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020da66: 83 35 84 f9  	ld	a1, -104(s0)
8020da6a: 88 61        	ld	a0, 0(a1)
8020da6c: 11 66        	lui	a2, 4
8020da6e: 51 8d        	or	a0, a0, a2
8020da70: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020da72: 83 35 84 fc  	ld	a1, -56(s0)
8020da76: 13 85 15 00  	addi	a0, a1, 1
8020da7a: 23 34 a4 a2  	sd	a0, -1496(s0)
8020da7e: 63 74 b5 00  	bgeu	a0, a1, 0x8020da86 <.LBB136_1404+0x7e2>
8020da82: 6f 20 50 0b  	j	0x80210336 <.LBB136_1488>
8020da86: 6f 20 30 0c  	j	0x80210348 <.LBB136_1488+0x12>
;                         if (!bit_set) {
8020da8a: 09 a0        	j	0x8020da8c <.LBB136_1404+0x7e8>
;                     if (region_allocated_page_count == page_count) {
8020da8c: 09 a0        	j	0x8020da8e <.LBB136_1404+0x7ea>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020da8e: 03 35 84 f9  	ld	a0, -104(s0)
8020da92: 08 61        	ld	a0, 0(a0)
8020da94: 3d 81        	srli	a0, a0, 15
8020da96: 05 89        	andi	a0, a0, 1
8020da98: a3 03 a4 ea  	sb	a0, -345(s0)
;                     if (region_allocated_page_count == page_count) {
8020da9c: 03 35 84 fc  	ld	a0, -56(s0)
8020daa0: 83 35 04 b5  	ld	a1, -1200(s0)
8020daa4: 63 15 b5 00  	bne	a0, a1, 0x8020daae <.LBB136_1404+0x80a>
8020daa8: 09 a0        	j	0x8020daaa <.LBB136_1404+0x806>
;                         break :bitset_loop;
8020daaa: 6f 10 10 16  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020daae: 03 45 74 ea  	lbu	a0, -345(s0)
8020dab2: 81 45        	mv	a1, zero
8020dab4: 63 1b b5 04  	bne	a0, a1, 0x8020db0a <.LBB136_1404+0x866>
8020dab8: 09 a0        	j	0x8020daba <.LBB136_1404+0x816>
;                             if (first_address == 0) {
8020daba: 03 35 84 fb  	ld	a0, -72(s0)
8020dabe: 81 45        	mv	a1, zero
8020dac0: 63 12 b5 02  	bne	a0, a1, 0x8020dae4 <.LBB136_1404+0x840>
8020dac4: 09 a0        	j	0x8020dac6 <.LBB136_1404+0x822>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020dac6: 83 35 04 fc  	ld	a1, -64(s0)
8020daca: 7d 55        	addi	a0, zero, -1
8020dacc: 19 81        	srli	a0, a0, 6
8020dace: 6d 8d        	and	a0, a0, a1
8020dad0: 13 96 65 00  	slli	a2, a1, 6
8020dad4: 23 30 c4 a2  	sd	a2, -1504(s0)
8020dad8: 63 04 b5 00  	beq	a0, a1, 0x8020dae0 <.LBB136_1404+0x83c>
8020dadc: 6f 20 90 07  	j	0x80210354 <.LBB136_1489>
8020dae0: 6f 20 70 08  	j	0x80210366 <.LBB136_1489+0x12>
;                             if (first_address == 0) {
8020dae4: 09 a0        	j	0x8020dae6 <.LBB136_1404+0x842>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020dae6: 83 35 84 f9  	ld	a1, -104(s0)
8020daea: 88 61        	ld	a0, 0(a1)
8020daec: 21 66        	lui	a2, 8
8020daee: 51 8d        	or	a0, a0, a2
8020daf0: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020daf2: 83 35 84 fc  	ld	a1, -56(s0)
8020daf6: 13 85 15 00  	addi	a0, a1, 1
8020dafa: 23 3c a4 a0  	sd	a0, -1512(s0)
8020dafe: 63 74 b5 00  	bgeu	a0, a1, 0x8020db06 <.LBB136_1404+0x862>
8020db02: 6f 20 f0 10  	j	0x80210410 <.LBB136_1493>
8020db06: 6f 20 d0 11  	j	0x80210422 <.LBB136_1493+0x12>
;                         if (!bit_set) {
8020db0a: 09 a0        	j	0x8020db0c <.LBB136_1404+0x868>
;                     if (region_allocated_page_count == page_count) {
8020db0c: 09 a0        	j	0x8020db0e <.LBB136_1404+0x86a>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020db0e: 03 35 84 f9  	ld	a0, -104(s0)
8020db12: 08 61        	ld	a0, 0(a0)
8020db14: 41 81        	srli	a0, a0, 16
8020db16: 05 89        	andi	a0, a0, 1
8020db18: a3 0b a4 e8  	sb	a0, -361(s0)
;                     if (region_allocated_page_count == page_count) {
8020db1c: 03 35 84 fc  	ld	a0, -56(s0)
8020db20: 83 35 04 b5  	ld	a1, -1200(s0)
8020db24: 63 15 b5 00  	bne	a0, a1, 0x8020db2e <.LBB136_1404+0x88a>
8020db28: 09 a0        	j	0x8020db2a <.LBB136_1404+0x886>
;                         break :bitset_loop;
8020db2a: 6f 10 10 0e  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020db2e: 03 45 74 e9  	lbu	a0, -361(s0)
8020db32: 81 45        	mv	a1, zero
8020db34: 63 1b b5 04  	bne	a0, a1, 0x8020db8a <.LBB136_1404+0x8e6>
8020db38: 09 a0        	j	0x8020db3a <.LBB136_1404+0x896>
;                             if (first_address == 0) {
8020db3a: 03 35 84 fb  	ld	a0, -72(s0)
8020db3e: 81 45        	mv	a1, zero
8020db40: 63 12 b5 02  	bne	a0, a1, 0x8020db64 <.LBB136_1404+0x8c0>
8020db44: 09 a0        	j	0x8020db46 <.LBB136_1404+0x8a2>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020db46: 83 35 04 fc  	ld	a1, -64(s0)
8020db4a: 7d 55        	addi	a0, zero, -1
8020db4c: 19 81        	srli	a0, a0, 6
8020db4e: 6d 8d        	and	a0, a0, a1
8020db50: 13 96 65 00  	slli	a2, a1, 6
8020db54: 23 38 c4 a0  	sd	a2, -1520(s0)
8020db58: 63 04 b5 00  	beq	a0, a1, 0x8020db60 <.LBB136_1404+0x8bc>
8020db5c: 6f 20 30 0d  	j	0x8021042e <.LBB136_1494>
8020db60: 6f 20 10 0e  	j	0x80210440 <.LBB136_1494+0x12>
;                             if (first_address == 0) {
8020db64: 09 a0        	j	0x8020db66 <.LBB136_1404+0x8c2>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020db66: 83 35 84 f9  	ld	a1, -104(s0)
8020db6a: 88 61        	ld	a0, 0(a1)
8020db6c: 41 66        	lui	a2, 16
8020db6e: 51 8d        	or	a0, a0, a2
8020db70: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020db72: 83 35 84 fc  	ld	a1, -56(s0)
8020db76: 13 85 15 00  	addi	a0, a1, 1
8020db7a: 23 34 a4 a0  	sd	a0, -1528(s0)
8020db7e: 63 74 b5 00  	bgeu	a0, a1, 0x8020db86 <.LBB136_1404+0x8e2>
8020db82: 6f 20 90 16  	j	0x802104ea <.LBB136_1498>
8020db86: 6f 20 70 17  	j	0x802104fc <.LBB136_1498+0x12>
;                         if (!bit_set) {
8020db8a: 09 a0        	j	0x8020db8c <.LBB136_1404+0x8e8>
;                     if (region_allocated_page_count == page_count) {
8020db8c: 09 a0        	j	0x8020db8e <.LBB136_1404+0x8ea>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020db8e: 03 35 84 f9  	ld	a0, -104(s0)
8020db92: 08 61        	ld	a0, 0(a0)
8020db94: 45 81        	srli	a0, a0, 17
8020db96: 05 89        	andi	a0, a0, 1
8020db98: a3 03 a4 e8  	sb	a0, -377(s0)
;                     if (region_allocated_page_count == page_count) {
8020db9c: 03 35 84 fc  	ld	a0, -56(s0)
8020dba0: 83 35 04 b5  	ld	a1, -1200(s0)
8020dba4: 63 15 b5 00  	bne	a0, a1, 0x8020dbae <.LBB136_1404+0x90a>
8020dba8: 09 a0        	j	0x8020dbaa <.LBB136_1404+0x906>
;                         break :bitset_loop;
8020dbaa: 6f 10 10 06  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020dbae: 03 45 74 e8  	lbu	a0, -377(s0)
8020dbb2: 81 45        	mv	a1, zero
8020dbb4: 63 1c b5 04  	bne	a0, a1, 0x8020dc0c <.LBB136_1404+0x968>
8020dbb8: 09 a0        	j	0x8020dbba <.LBB136_1404+0x916>
;                             if (first_address == 0) {
8020dbba: 03 35 84 fb  	ld	a0, -72(s0)
8020dbbe: 81 45        	mv	a1, zero
8020dbc0: 63 12 b5 02  	bne	a0, a1, 0x8020dbe4 <.LBB136_1404+0x940>
8020dbc4: 09 a0        	j	0x8020dbc6 <.LBB136_1404+0x922>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020dbc6: 83 35 04 fc  	ld	a1, -64(s0)
8020dbca: 7d 55        	addi	a0, zero, -1
8020dbcc: 19 81        	srli	a0, a0, 6
8020dbce: 6d 8d        	and	a0, a0, a1
8020dbd0: 13 96 65 00  	slli	a2, a1, 6
8020dbd4: 23 30 c4 a0  	sd	a2, -1536(s0)
8020dbd8: 63 04 b5 00  	beq	a0, a1, 0x8020dbe0 <.LBB136_1404+0x93c>
8020dbdc: 6f 20 d0 12  	j	0x80210508 <.LBB136_1499>
8020dbe0: 6f 20 b0 13  	j	0x8021051a <.LBB136_1499+0x12>
;                             if (first_address == 0) {
8020dbe4: 09 a0        	j	0x8020dbe6 <.LBB136_1404+0x942>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020dbe6: 83 35 84 f9  	ld	a1, -104(s0)
8020dbea: 88 61        	ld	a0, 0(a1)
8020dbec: 37 06 02 00  	lui	a2, 32
8020dbf0: 51 8d        	or	a0, a0, a2
8020dbf2: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020dbf4: 83 35 84 fc  	ld	a1, -56(s0)
8020dbf8: 13 85 15 00  	addi	a0, a1, 1
8020dbfc: 23 3c a4 9e  	sd	a0, -1544(s0)
8020dc00: 63 74 b5 00  	bgeu	a0, a1, 0x8020dc08 <.LBB136_1404+0x964>
8020dc04: 6f 20 10 1c  	j	0x802105c4 <.LBB136_1503>
8020dc08: 6f 20 f0 1c  	j	0x802105d6 <.LBB136_1503+0x12>
;                         if (!bit_set) {
8020dc0c: 09 a0        	j	0x8020dc0e <.LBB136_1404+0x96a>
;                     if (region_allocated_page_count == page_count) {
8020dc0e: 09 a0        	j	0x8020dc10 <.LBB136_1404+0x96c>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020dc10: 03 35 84 f9  	ld	a0, -104(s0)
8020dc14: 08 61        	ld	a0, 0(a0)
8020dc16: 49 81        	srli	a0, a0, 18
8020dc18: 05 89        	andi	a0, a0, 1
8020dc1a: a3 0b a4 e6  	sb	a0, -393(s0)
;                     if (region_allocated_page_count == page_count) {
8020dc1e: 03 35 84 fc  	ld	a0, -56(s0)
8020dc22: 83 35 04 b5  	ld	a1, -1200(s0)
8020dc26: 63 15 b5 00  	bne	a0, a1, 0x8020dc30 <.LBB136_1404+0x98c>
8020dc2a: 09 a0        	j	0x8020dc2c <.LBB136_1404+0x988>
;                         break :bitset_loop;
8020dc2c: 6f 10 e0 7d  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020dc30: 03 45 74 e7  	lbu	a0, -393(s0)
8020dc34: 81 45        	mv	a1, zero
8020dc36: 63 1c b5 04  	bne	a0, a1, 0x8020dc8e <.LBB136_1404+0x9ea>
8020dc3a: 09 a0        	j	0x8020dc3c <.LBB136_1404+0x998>
;                             if (first_address == 0) {
8020dc3c: 03 35 84 fb  	ld	a0, -72(s0)
8020dc40: 81 45        	mv	a1, zero
8020dc42: 63 12 b5 02  	bne	a0, a1, 0x8020dc66 <.LBB136_1404+0x9c2>
8020dc46: 09 a0        	j	0x8020dc48 <.LBB136_1404+0x9a4>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020dc48: 83 35 04 fc  	ld	a1, -64(s0)
8020dc4c: 7d 55        	addi	a0, zero, -1
8020dc4e: 19 81        	srli	a0, a0, 6
8020dc50: 6d 8d        	and	a0, a0, a1
8020dc52: 13 96 65 00  	slli	a2, a1, 6
8020dc56: 23 38 c4 9e  	sd	a2, -1552(s0)
8020dc5a: 63 04 b5 00  	beq	a0, a1, 0x8020dc62 <.LBB136_1404+0x9be>
8020dc5e: 6f 20 50 18  	j	0x802105e2 <.LBB136_1504>
8020dc62: 6f 20 30 19  	j	0x802105f4 <.LBB136_1504+0x12>
;                             if (first_address == 0) {
8020dc66: 09 a0        	j	0x8020dc68 <.LBB136_1404+0x9c4>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020dc68: 83 35 84 f9  	ld	a1, -104(s0)
8020dc6c: 88 61        	ld	a0, 0(a1)
8020dc6e: 37 06 04 00  	lui	a2, 64
8020dc72: 51 8d        	or	a0, a0, a2
8020dc74: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020dc76: 83 35 84 fc  	ld	a1, -56(s0)
8020dc7a: 13 85 15 00  	addi	a0, a1, 1
8020dc7e: 23 34 a4 9e  	sd	a0, -1560(s0)
8020dc82: 63 74 b5 00  	bgeu	a0, a1, 0x8020dc8a <.LBB136_1404+0x9e6>
8020dc86: 6f 20 90 21  	j	0x8021069e <.LBB136_1508>
8020dc8a: 6f 20 70 22  	j	0x802106b0 <.LBB136_1508+0x12>
;                         if (!bit_set) {
8020dc8e: 09 a0        	j	0x8020dc90 <.LBB136_1404+0x9ec>
;                     if (region_allocated_page_count == page_count) {
8020dc90: 09 a0        	j	0x8020dc92 <.LBB136_1404+0x9ee>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020dc92: 03 35 84 f9  	ld	a0, -104(s0)
8020dc96: 08 61        	ld	a0, 0(a0)
8020dc98: 4d 81        	srli	a0, a0, 19
8020dc9a: 05 89        	andi	a0, a0, 1
8020dc9c: a3 03 a4 e6  	sb	a0, -409(s0)
;                     if (region_allocated_page_count == page_count) {
8020dca0: 03 35 84 fc  	ld	a0, -56(s0)
8020dca4: 83 35 04 b5  	ld	a1, -1200(s0)
8020dca8: 63 15 b5 00  	bne	a0, a1, 0x8020dcb2 <.LBB136_1404+0xa0e>
8020dcac: 09 a0        	j	0x8020dcae <.LBB136_1404+0xa0a>
;                         break :bitset_loop;
8020dcae: 6f 10 c0 75  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020dcb2: 03 45 74 e6  	lbu	a0, -409(s0)
8020dcb6: 81 45        	mv	a1, zero
8020dcb8: 63 1c b5 04  	bne	a0, a1, 0x8020dd10 <.LBB136_1404+0xa6c>
8020dcbc: 09 a0        	j	0x8020dcbe <.LBB136_1404+0xa1a>
;                             if (first_address == 0) {
8020dcbe: 03 35 84 fb  	ld	a0, -72(s0)
8020dcc2: 81 45        	mv	a1, zero
8020dcc4: 63 12 b5 02  	bne	a0, a1, 0x8020dce8 <.LBB136_1404+0xa44>
8020dcc8: 09 a0        	j	0x8020dcca <.LBB136_1404+0xa26>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020dcca: 83 35 04 fc  	ld	a1, -64(s0)
8020dcce: 7d 55        	addi	a0, zero, -1
8020dcd0: 19 81        	srli	a0, a0, 6
8020dcd2: 6d 8d        	and	a0, a0, a1
8020dcd4: 13 96 65 00  	slli	a2, a1, 6
8020dcd8: 23 30 c4 9e  	sd	a2, -1568(s0)
8020dcdc: 63 04 b5 00  	beq	a0, a1, 0x8020dce4 <.LBB136_1404+0xa40>
8020dce0: 6f 20 d0 1d  	j	0x802106bc <.LBB136_1509>
8020dce4: 6f 20 b0 1e  	j	0x802106ce <.LBB136_1509+0x12>
;                             if (first_address == 0) {
8020dce8: 09 a0        	j	0x8020dcea <.LBB136_1404+0xa46>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020dcea: 83 35 84 f9  	ld	a1, -104(s0)
8020dcee: 88 61        	ld	a0, 0(a1)
8020dcf0: 37 06 08 00  	lui	a2, 128
8020dcf4: 51 8d        	or	a0, a0, a2
8020dcf6: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020dcf8: 83 35 84 fc  	ld	a1, -56(s0)
8020dcfc: 13 85 15 00  	addi	a0, a1, 1
8020dd00: 23 3c a4 9c  	sd	a0, -1576(s0)
8020dd04: 63 74 b5 00  	bgeu	a0, a1, 0x8020dd0c <.LBB136_1404+0xa68>
8020dd08: 6f 20 10 27  	j	0x80210778 <.LBB136_1513>
8020dd0c: 6f 20 f0 27  	j	0x8021078a <.LBB136_1513+0x12>
;                         if (!bit_set) {
8020dd10: 09 a0        	j	0x8020dd12 <.LBB136_1404+0xa6e>
;                     if (region_allocated_page_count == page_count) {
8020dd12: 09 a0        	j	0x8020dd14 <.LBB136_1404+0xa70>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020dd14: 03 35 84 f9  	ld	a0, -104(s0)
8020dd18: 08 61        	ld	a0, 0(a0)
8020dd1a: 51 81        	srli	a0, a0, 20
8020dd1c: 05 89        	andi	a0, a0, 1
8020dd1e: a3 0b a4 e4  	sb	a0, -425(s0)
;                     if (region_allocated_page_count == page_count) {
8020dd22: 03 35 84 fc  	ld	a0, -56(s0)
8020dd26: 83 35 04 b5  	ld	a1, -1200(s0)
8020dd2a: 63 15 b5 00  	bne	a0, a1, 0x8020dd34 <.LBB136_1404+0xa90>
8020dd2e: 09 a0        	j	0x8020dd30 <.LBB136_1404+0xa8c>
;                         break :bitset_loop;
8020dd30: 6f 10 a0 6d  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020dd34: 03 45 74 e5  	lbu	a0, -425(s0)
8020dd38: 81 45        	mv	a1, zero
8020dd3a: 63 1c b5 04  	bne	a0, a1, 0x8020dd92 <.LBB136_1404+0xaee>
8020dd3e: 09 a0        	j	0x8020dd40 <.LBB136_1404+0xa9c>
;                             if (first_address == 0) {
8020dd40: 03 35 84 fb  	ld	a0, -72(s0)
8020dd44: 81 45        	mv	a1, zero
8020dd46: 63 12 b5 02  	bne	a0, a1, 0x8020dd6a <.LBB136_1404+0xac6>
8020dd4a: 09 a0        	j	0x8020dd4c <.LBB136_1404+0xaa8>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020dd4c: 83 35 04 fc  	ld	a1, -64(s0)
8020dd50: 7d 55        	addi	a0, zero, -1
8020dd52: 19 81        	srli	a0, a0, 6
8020dd54: 6d 8d        	and	a0, a0, a1
8020dd56: 13 96 65 00  	slli	a2, a1, 6
8020dd5a: 23 38 c4 9c  	sd	a2, -1584(s0)
8020dd5e: 63 04 b5 00  	beq	a0, a1, 0x8020dd66 <.LBB136_1404+0xac2>
8020dd62: 6f 20 50 23  	j	0x80210796 <.LBB136_1514>
8020dd66: 6f 20 30 24  	j	0x802107a8 <.LBB136_1514+0x12>
;                             if (first_address == 0) {
8020dd6a: 09 a0        	j	0x8020dd6c <.LBB136_1404+0xac8>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020dd6c: 83 35 84 f9  	ld	a1, -104(s0)
8020dd70: 88 61        	ld	a0, 0(a1)
8020dd72: 37 06 10 00  	lui	a2, 256
8020dd76: 51 8d        	or	a0, a0, a2
8020dd78: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020dd7a: 83 35 84 fc  	ld	a1, -56(s0)
8020dd7e: 13 85 15 00  	addi	a0, a1, 1
8020dd82: 23 34 a4 9c  	sd	a0, -1592(s0)
8020dd86: 63 74 b5 00  	bgeu	a0, a1, 0x8020dd8e <.LBB136_1404+0xaea>
8020dd8a: 6f 20 90 2c  	j	0x80210852 <.LBB136_1518>
8020dd8e: 6f 20 70 2d  	j	0x80210864 <.LBB136_1518+0x12>
;                         if (!bit_set) {
8020dd92: 09 a0        	j	0x8020dd94 <.LBB136_1404+0xaf0>
;                     if (region_allocated_page_count == page_count) {
8020dd94: 09 a0        	j	0x8020dd96 <.LBB136_1404+0xaf2>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020dd96: 03 35 84 f9  	ld	a0, -104(s0)
8020dd9a: 08 61        	ld	a0, 0(a0)
8020dd9c: 55 81        	srli	a0, a0, 21
8020dd9e: 05 89        	andi	a0, a0, 1
8020dda0: a3 03 a4 e4  	sb	a0, -441(s0)
;                     if (region_allocated_page_count == page_count) {
8020dda4: 03 35 84 fc  	ld	a0, -56(s0)
8020dda8: 83 35 04 b5  	ld	a1, -1200(s0)
8020ddac: 63 15 b5 00  	bne	a0, a1, 0x8020ddb6 <.LBB136_1404+0xb12>
8020ddb0: 09 a0        	j	0x8020ddb2 <.LBB136_1404+0xb0e>
;                         break :bitset_loop;
8020ddb2: 6f 10 80 65  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020ddb6: 03 45 74 e4  	lbu	a0, -441(s0)
8020ddba: 81 45        	mv	a1, zero
8020ddbc: 63 1c b5 04  	bne	a0, a1, 0x8020de14 <.LBB136_1404+0xb70>
8020ddc0: 09 a0        	j	0x8020ddc2 <.LBB136_1404+0xb1e>
;                             if (first_address == 0) {
8020ddc2: 03 35 84 fb  	ld	a0, -72(s0)
8020ddc6: 81 45        	mv	a1, zero
8020ddc8: 63 12 b5 02  	bne	a0, a1, 0x8020ddec <.LBB136_1404+0xb48>
8020ddcc: 09 a0        	j	0x8020ddce <.LBB136_1404+0xb2a>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020ddce: 83 35 04 fc  	ld	a1, -64(s0)
8020ddd2: 7d 55        	addi	a0, zero, -1
8020ddd4: 19 81        	srli	a0, a0, 6
8020ddd6: 6d 8d        	and	a0, a0, a1
8020ddd8: 13 96 65 00  	slli	a2, a1, 6
8020dddc: 23 30 c4 9c  	sd	a2, -1600(s0)
8020dde0: 63 04 b5 00  	beq	a0, a1, 0x8020dde8 <.LBB136_1404+0xb44>
8020dde4: 6f 20 d0 28  	j	0x80210870 <.LBB136_1519>
8020dde8: 6f 20 b0 29  	j	0x80210882 <.LBB136_1519+0x12>
;                             if (first_address == 0) {
8020ddec: 09 a0        	j	0x8020ddee <.LBB136_1404+0xb4a>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020ddee: 83 35 84 f9  	ld	a1, -104(s0)
8020ddf2: 88 61        	ld	a0, 0(a1)
8020ddf4: 37 06 20 00  	lui	a2, 512
8020ddf8: 51 8d        	or	a0, a0, a2
8020ddfa: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020ddfc: 83 35 84 fc  	ld	a1, -56(s0)
8020de00: 13 85 15 00  	addi	a0, a1, 1
8020de04: 23 3c a4 9a  	sd	a0, -1608(s0)
8020de08: 63 74 b5 00  	bgeu	a0, a1, 0x8020de10 <.LBB136_1404+0xb6c>
8020de0c: 6f 20 10 32  	j	0x8021092c <.LBB136_1523>
8020de10: 6f 20 f0 32  	j	0x8021093e <.LBB136_1523+0x12>
;                         if (!bit_set) {
8020de14: 09 a0        	j	0x8020de16 <.LBB136_1404+0xb72>
;                     if (region_allocated_page_count == page_count) {
8020de16: 09 a0        	j	0x8020de18 <.LBB136_1404+0xb74>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020de18: 03 35 84 f9  	ld	a0, -104(s0)
8020de1c: 08 61        	ld	a0, 0(a0)
8020de1e: 59 81        	srli	a0, a0, 22
8020de20: 05 89        	andi	a0, a0, 1
8020de22: a3 0b a4 e2  	sb	a0, -457(s0)
;                     if (region_allocated_page_count == page_count) {
8020de26: 03 35 84 fc  	ld	a0, -56(s0)
8020de2a: 83 35 04 b5  	ld	a1, -1200(s0)
8020de2e: 63 15 b5 00  	bne	a0, a1, 0x8020de38 <.LBB136_1404+0xb94>
8020de32: 09 a0        	j	0x8020de34 <.LBB136_1404+0xb90>
;                         break :bitset_loop;
8020de34: 6f 10 60 5d  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020de38: 03 45 74 e3  	lbu	a0, -457(s0)
8020de3c: 81 45        	mv	a1, zero
8020de3e: 63 1c b5 04  	bne	a0, a1, 0x8020de96 <.LBB136_1404+0xbf2>
8020de42: 09 a0        	j	0x8020de44 <.LBB136_1404+0xba0>
;                             if (first_address == 0) {
8020de44: 03 35 84 fb  	ld	a0, -72(s0)
8020de48: 81 45        	mv	a1, zero
8020de4a: 63 12 b5 02  	bne	a0, a1, 0x8020de6e <.LBB136_1404+0xbca>
8020de4e: 09 a0        	j	0x8020de50 <.LBB136_1404+0xbac>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020de50: 83 35 04 fc  	ld	a1, -64(s0)
8020de54: 7d 55        	addi	a0, zero, -1
8020de56: 19 81        	srli	a0, a0, 6
8020de58: 6d 8d        	and	a0, a0, a1
8020de5a: 13 96 65 00  	slli	a2, a1, 6
8020de5e: 23 38 c4 9a  	sd	a2, -1616(s0)
8020de62: 63 04 b5 00  	beq	a0, a1, 0x8020de6a <.LBB136_1404+0xbc6>
8020de66: 6f 20 50 2e  	j	0x8021094a <.LBB136_1524>
8020de6a: 6f 20 30 2f  	j	0x8021095c <.LBB136_1524+0x12>
;                             if (first_address == 0) {
8020de6e: 09 a0        	j	0x8020de70 <.LBB136_1404+0xbcc>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020de70: 83 35 84 f9  	ld	a1, -104(s0)
8020de74: 88 61        	ld	a0, 0(a1)
8020de76: 37 06 40 00  	lui	a2, 1024
8020de7a: 51 8d        	or	a0, a0, a2
8020de7c: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020de7e: 83 35 84 fc  	ld	a1, -56(s0)
8020de82: 13 85 15 00  	addi	a0, a1, 1
8020de86: 23 34 a4 9a  	sd	a0, -1624(s0)
8020de8a: 63 74 b5 00  	bgeu	a0, a1, 0x8020de92 <.LBB136_1404+0xbee>
8020de8e: 6f 20 90 37  	j	0x80210a06 <.LBB136_1528>
8020de92: 6f 20 70 38  	j	0x80210a18 <.LBB136_1528+0x12>
;                         if (!bit_set) {
8020de96: 09 a0        	j	0x8020de98 <.LBB136_1404+0xbf4>
;                     if (region_allocated_page_count == page_count) {
8020de98: 09 a0        	j	0x8020de9a <.LBB136_1404+0xbf6>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020de9a: 03 35 84 f9  	ld	a0, -104(s0)
8020de9e: 08 61        	ld	a0, 0(a0)
8020dea0: 5d 81        	srli	a0, a0, 23
8020dea2: 05 89        	andi	a0, a0, 1
8020dea4: a3 03 a4 e2  	sb	a0, -473(s0)
;                     if (region_allocated_page_count == page_count) {
8020dea8: 03 35 84 fc  	ld	a0, -56(s0)
8020deac: 83 35 04 b5  	ld	a1, -1200(s0)
8020deb0: 63 15 b5 00  	bne	a0, a1, 0x8020deba <.LBB136_1404+0xc16>
8020deb4: 09 a0        	j	0x8020deb6 <.LBB136_1404+0xc12>
;                         break :bitset_loop;
8020deb6: 6f 10 40 55  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020deba: 03 45 74 e2  	lbu	a0, -473(s0)
8020debe: 81 45        	mv	a1, zero
8020dec0: 63 1c b5 04  	bne	a0, a1, 0x8020df18 <.LBB136_1404+0xc74>
8020dec4: 09 a0        	j	0x8020dec6 <.LBB136_1404+0xc22>
;                             if (first_address == 0) {
8020dec6: 03 35 84 fb  	ld	a0, -72(s0)
8020deca: 81 45        	mv	a1, zero
8020decc: 63 12 b5 02  	bne	a0, a1, 0x8020def0 <.LBB136_1404+0xc4c>
8020ded0: 09 a0        	j	0x8020ded2 <.LBB136_1404+0xc2e>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020ded2: 83 35 04 fc  	ld	a1, -64(s0)
8020ded6: 7d 55        	addi	a0, zero, -1
8020ded8: 19 81        	srli	a0, a0, 6
8020deda: 6d 8d        	and	a0, a0, a1
8020dedc: 13 96 65 00  	slli	a2, a1, 6
8020dee0: 23 30 c4 9a  	sd	a2, -1632(s0)
8020dee4: 63 04 b5 00  	beq	a0, a1, 0x8020deec <.LBB136_1404+0xc48>
8020dee8: 6f 20 d0 33  	j	0x80210a24 <.LBB136_1529>
8020deec: 6f 20 b0 34  	j	0x80210a36 <.LBB136_1529+0x12>
;                             if (first_address == 0) {
8020def0: 09 a0        	j	0x8020def2 <.LBB136_1404+0xc4e>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020def2: 83 35 84 f9  	ld	a1, -104(s0)
8020def6: 88 61        	ld	a0, 0(a1)
8020def8: 37 06 80 00  	lui	a2, 2048
8020defc: 51 8d        	or	a0, a0, a2
8020defe: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020df00: 83 35 84 fc  	ld	a1, -56(s0)
8020df04: 13 85 15 00  	addi	a0, a1, 1
8020df08: 23 3c a4 98  	sd	a0, -1640(s0)
8020df0c: 63 74 b5 00  	bgeu	a0, a1, 0x8020df14 <.LBB136_1404+0xc70>
8020df10: 6f 20 10 3d  	j	0x80210ae0 <.LBB136_1533>
8020df14: 6f 20 f0 3d  	j	0x80210af2 <.LBB136_1533+0x12>
;                         if (!bit_set) {
8020df18: 09 a0        	j	0x8020df1a <.LBB136_1404+0xc76>
;                     if (region_allocated_page_count == page_count) {
8020df1a: 09 a0        	j	0x8020df1c <.LBB136_1404+0xc78>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020df1c: 03 35 84 f9  	ld	a0, -104(s0)
8020df20: 08 61        	ld	a0, 0(a0)
8020df22: 61 81        	srli	a0, a0, 24
8020df24: 05 89        	andi	a0, a0, 1
8020df26: a3 0b a4 e0  	sb	a0, -489(s0)
;                     if (region_allocated_page_count == page_count) {
8020df2a: 03 35 84 fc  	ld	a0, -56(s0)
8020df2e: 83 35 04 b5  	ld	a1, -1200(s0)
8020df32: 63 15 b5 00  	bne	a0, a1, 0x8020df3c <.LBB136_1404+0xc98>
8020df36: 09 a0        	j	0x8020df38 <.LBB136_1404+0xc94>
;                         break :bitset_loop;
8020df38: 6f 10 20 4d  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020df3c: 03 45 74 e1  	lbu	a0, -489(s0)
8020df40: 81 45        	mv	a1, zero
8020df42: 63 1c b5 04  	bne	a0, a1, 0x8020df9a <.LBB136_1404+0xcf6>
8020df46: 09 a0        	j	0x8020df48 <.LBB136_1404+0xca4>
;                             if (first_address == 0) {
8020df48: 03 35 84 fb  	ld	a0, -72(s0)
8020df4c: 81 45        	mv	a1, zero
8020df4e: 63 12 b5 02  	bne	a0, a1, 0x8020df72 <.LBB136_1404+0xcce>
8020df52: 09 a0        	j	0x8020df54 <.LBB136_1404+0xcb0>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020df54: 83 35 04 fc  	ld	a1, -64(s0)
8020df58: 7d 55        	addi	a0, zero, -1
8020df5a: 19 81        	srli	a0, a0, 6
8020df5c: 6d 8d        	and	a0, a0, a1
8020df5e: 13 96 65 00  	slli	a2, a1, 6
8020df62: 23 38 c4 98  	sd	a2, -1648(s0)
8020df66: 63 04 b5 00  	beq	a0, a1, 0x8020df6e <.LBB136_1404+0xcca>
8020df6a: 6f 20 50 39  	j	0x80210afe <.LBB136_1534>
8020df6e: 6f 20 30 3a  	j	0x80210b10 <.LBB136_1534+0x12>
;                             if (first_address == 0) {
8020df72: 09 a0        	j	0x8020df74 <.LBB136_1404+0xcd0>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020df74: 83 35 84 f9  	ld	a1, -104(s0)
8020df78: 88 61        	ld	a0, 0(a1)
8020df7a: 37 06 00 01  	lui	a2, 4096
8020df7e: 51 8d        	or	a0, a0, a2
8020df80: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020df82: 83 35 84 fc  	ld	a1, -56(s0)
8020df86: 13 85 15 00  	addi	a0, a1, 1
8020df8a: 23 34 a4 98  	sd	a0, -1656(s0)
8020df8e: 63 74 b5 00  	bgeu	a0, a1, 0x8020df96 <.LBB136_1404+0xcf2>
8020df92: 6f 20 90 42  	j	0x80210bba <.LBB136_1538>
8020df96: 6f 20 70 43  	j	0x80210bcc <.LBB136_1538+0x12>
;                         if (!bit_set) {
8020df9a: 09 a0        	j	0x8020df9c <.LBB136_1404+0xcf8>
;                     if (region_allocated_page_count == page_count) {
8020df9c: 09 a0        	j	0x8020df9e <.LBB136_1404+0xcfa>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020df9e: 03 35 84 f9  	ld	a0, -104(s0)
8020dfa2: 08 61        	ld	a0, 0(a0)
8020dfa4: 65 81        	srli	a0, a0, 25
8020dfa6: 05 89        	andi	a0, a0, 1
8020dfa8: a3 03 a4 e0  	sb	a0, -505(s0)
;                     if (region_allocated_page_count == page_count) {
8020dfac: 03 35 84 fc  	ld	a0, -56(s0)
8020dfb0: 83 35 04 b5  	ld	a1, -1200(s0)
8020dfb4: 63 15 b5 00  	bne	a0, a1, 0x8020dfbe <.LBB136_1404+0xd1a>
8020dfb8: 09 a0        	j	0x8020dfba <.LBB136_1404+0xd16>
;                         break :bitset_loop;
8020dfba: 6f 10 00 45  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020dfbe: 03 45 74 e0  	lbu	a0, -505(s0)
8020dfc2: 81 45        	mv	a1, zero
8020dfc4: 63 1c b5 04  	bne	a0, a1, 0x8020e01c <.LBB136_1404+0xd78>
8020dfc8: 09 a0        	j	0x8020dfca <.LBB136_1404+0xd26>
;                             if (first_address == 0) {
8020dfca: 03 35 84 fb  	ld	a0, -72(s0)
8020dfce: 81 45        	mv	a1, zero
8020dfd0: 63 12 b5 02  	bne	a0, a1, 0x8020dff4 <.LBB136_1404+0xd50>
8020dfd4: 09 a0        	j	0x8020dfd6 <.LBB136_1404+0xd32>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020dfd6: 83 35 04 fc  	ld	a1, -64(s0)
8020dfda: 7d 55        	addi	a0, zero, -1
8020dfdc: 19 81        	srli	a0, a0, 6
8020dfde: 6d 8d        	and	a0, a0, a1
8020dfe0: 13 96 65 00  	slli	a2, a1, 6
8020dfe4: 23 30 c4 98  	sd	a2, -1664(s0)
8020dfe8: 63 04 b5 00  	beq	a0, a1, 0x8020dff0 <.LBB136_1404+0xd4c>
8020dfec: 6f 20 d0 3e  	j	0x80210bd8 <.LBB136_1539>
8020dff0: 6f 20 b0 3f  	j	0x80210bea <.LBB136_1539+0x12>
;                             if (first_address == 0) {
8020dff4: 09 a0        	j	0x8020dff6 <.LBB136_1404+0xd52>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020dff6: 83 35 84 f9  	ld	a1, -104(s0)
8020dffa: 88 61        	ld	a0, 0(a1)
8020dffc: 37 06 00 02  	lui	a2, 8192
8020e000: 51 8d        	or	a0, a0, a2
8020e002: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020e004: 83 35 84 fc  	ld	a1, -56(s0)
8020e008: 13 85 15 00  	addi	a0, a1, 1
8020e00c: 23 3c a4 96  	sd	a0, -1672(s0)
8020e010: 63 74 b5 00  	bgeu	a0, a1, 0x8020e018 <.LBB136_1404+0xd74>
8020e014: 6f 20 10 48  	j	0x80210c94 <.LBB136_1543>
8020e018: 6f 20 f0 48  	j	0x80210ca6 <.LBB136_1543+0x12>
;                         if (!bit_set) {
8020e01c: 09 a0        	j	0x8020e01e <.LBB136_1404+0xd7a>
;                     if (region_allocated_page_count == page_count) {
8020e01e: 09 a0        	j	0x8020e020 <.LBB136_1404+0xd7c>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020e020: 03 35 84 f9  	ld	a0, -104(s0)
8020e024: 08 61        	ld	a0, 0(a0)
8020e026: 69 81        	srli	a0, a0, 26
8020e028: 05 89        	andi	a0, a0, 1
8020e02a: a3 0b a4 de  	sb	a0, -521(s0)
;                     if (region_allocated_page_count == page_count) {
8020e02e: 03 35 84 fc  	ld	a0, -56(s0)
8020e032: 83 35 04 b5  	ld	a1, -1200(s0)
8020e036: 63 15 b5 00  	bne	a0, a1, 0x8020e040 <.LBB136_1404+0xd9c>
8020e03a: 09 a0        	j	0x8020e03c <.LBB136_1404+0xd98>
;                         break :bitset_loop;
8020e03c: 6f 10 e0 3c  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020e040: 03 45 74 df  	lbu	a0, -521(s0)
8020e044: 81 45        	mv	a1, zero
8020e046: 63 1c b5 04  	bne	a0, a1, 0x8020e09e <.LBB136_1404+0xdfa>
8020e04a: 09 a0        	j	0x8020e04c <.LBB136_1404+0xda8>
;                             if (first_address == 0) {
8020e04c: 03 35 84 fb  	ld	a0, -72(s0)
8020e050: 81 45        	mv	a1, zero
8020e052: 63 12 b5 02  	bne	a0, a1, 0x8020e076 <.LBB136_1404+0xdd2>
8020e056: 09 a0        	j	0x8020e058 <.LBB136_1404+0xdb4>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020e058: 83 35 04 fc  	ld	a1, -64(s0)
8020e05c: 7d 55        	addi	a0, zero, -1
8020e05e: 19 81        	srli	a0, a0, 6
8020e060: 6d 8d        	and	a0, a0, a1
8020e062: 13 96 65 00  	slli	a2, a1, 6
8020e066: 23 38 c4 96  	sd	a2, -1680(s0)
8020e06a: 63 04 b5 00  	beq	a0, a1, 0x8020e072 <.LBB136_1404+0xdce>
8020e06e: 6f 20 50 44  	j	0x80210cb2 <.LBB136_1544>
8020e072: 6f 20 30 45  	j	0x80210cc4 <.LBB136_1544+0x12>
;                             if (first_address == 0) {
8020e076: 09 a0        	j	0x8020e078 <.LBB136_1404+0xdd4>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020e078: 83 35 84 f9  	ld	a1, -104(s0)
8020e07c: 88 61        	ld	a0, 0(a1)
8020e07e: 37 06 00 04  	lui	a2, 16384
8020e082: 51 8d        	or	a0, a0, a2
8020e084: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020e086: 83 35 84 fc  	ld	a1, -56(s0)
8020e08a: 13 85 15 00  	addi	a0, a1, 1
8020e08e: 23 34 a4 96  	sd	a0, -1688(s0)
8020e092: 63 74 b5 00  	bgeu	a0, a1, 0x8020e09a <.LBB136_1404+0xdf6>
8020e096: 6f 20 90 4d  	j	0x80210d6e <.LBB136_1548>
8020e09a: 6f 20 70 4e  	j	0x80210d80 <.LBB136_1548+0x12>
;                         if (!bit_set) {
8020e09e: 09 a0        	j	0x8020e0a0 <.LBB136_1404+0xdfc>
;                     if (region_allocated_page_count == page_count) {
8020e0a0: 09 a0        	j	0x8020e0a2 <.LBB136_1404+0xdfe>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020e0a2: 03 35 84 f9  	ld	a0, -104(s0)
8020e0a6: 08 61        	ld	a0, 0(a0)
8020e0a8: 6d 81        	srli	a0, a0, 27
8020e0aa: 05 89        	andi	a0, a0, 1
8020e0ac: a3 03 a4 de  	sb	a0, -537(s0)
;                     if (region_allocated_page_count == page_count) {
8020e0b0: 03 35 84 fc  	ld	a0, -56(s0)
8020e0b4: 83 35 04 b5  	ld	a1, -1200(s0)
8020e0b8: 63 15 b5 00  	bne	a0, a1, 0x8020e0c2 <.LBB136_1404+0xe1e>
8020e0bc: 09 a0        	j	0x8020e0be <.LBB136_1404+0xe1a>
;                         break :bitset_loop;
8020e0be: 6f 10 c0 34  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020e0c2: 03 45 74 de  	lbu	a0, -537(s0)
8020e0c6: 81 45        	mv	a1, zero
8020e0c8: 63 1c b5 04  	bne	a0, a1, 0x8020e120 <.LBB136_1404+0xe7c>
8020e0cc: 09 a0        	j	0x8020e0ce <.LBB136_1404+0xe2a>
;                             if (first_address == 0) {
8020e0ce: 03 35 84 fb  	ld	a0, -72(s0)
8020e0d2: 81 45        	mv	a1, zero
8020e0d4: 63 12 b5 02  	bne	a0, a1, 0x8020e0f8 <.LBB136_1404+0xe54>
8020e0d8: 09 a0        	j	0x8020e0da <.LBB136_1404+0xe36>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020e0da: 83 35 04 fc  	ld	a1, -64(s0)
8020e0de: 7d 55        	addi	a0, zero, -1
8020e0e0: 19 81        	srli	a0, a0, 6
8020e0e2: 6d 8d        	and	a0, a0, a1
8020e0e4: 13 96 65 00  	slli	a2, a1, 6
8020e0e8: 23 30 c4 96  	sd	a2, -1696(s0)
8020e0ec: 63 04 b5 00  	beq	a0, a1, 0x8020e0f4 <.LBB136_1404+0xe50>
8020e0f0: 6f 20 d0 49  	j	0x80210d8c <.LBB136_1549>
8020e0f4: 6f 20 b0 4a  	j	0x80210d9e <.LBB136_1549+0x12>
;                             if (first_address == 0) {
8020e0f8: 09 a0        	j	0x8020e0fa <.LBB136_1404+0xe56>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020e0fa: 83 35 84 f9  	ld	a1, -104(s0)
8020e0fe: 88 61        	ld	a0, 0(a1)
8020e100: 37 06 00 08  	lui	a2, 32768
8020e104: 51 8d        	or	a0, a0, a2
8020e106: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020e108: 83 35 84 fc  	ld	a1, -56(s0)
8020e10c: 13 85 15 00  	addi	a0, a1, 1
8020e110: 23 3c a4 94  	sd	a0, -1704(s0)
8020e114: 63 74 b5 00  	bgeu	a0, a1, 0x8020e11c <.LBB136_1404+0xe78>
8020e118: 6f 20 10 53  	j	0x80210e48 <.LBB136_1553>
8020e11c: 6f 20 f0 53  	j	0x80210e5a <.LBB136_1553+0x12>
;                         if (!bit_set) {
8020e120: 09 a0        	j	0x8020e122 <.LBB136_1404+0xe7e>
;                     if (region_allocated_page_count == page_count) {
8020e122: 09 a0        	j	0x8020e124 <.LBB136_1404+0xe80>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020e124: 03 35 84 f9  	ld	a0, -104(s0)
8020e128: 08 61        	ld	a0, 0(a0)
8020e12a: 71 81        	srli	a0, a0, 28
8020e12c: 05 89        	andi	a0, a0, 1
8020e12e: a3 0b a4 dc  	sb	a0, -553(s0)
;                     if (region_allocated_page_count == page_count) {
8020e132: 03 35 84 fc  	ld	a0, -56(s0)
8020e136: 83 35 04 b5  	ld	a1, -1200(s0)
8020e13a: 63 15 b5 00  	bne	a0, a1, 0x8020e144 <.LBB136_1404+0xea0>
8020e13e: 09 a0        	j	0x8020e140 <.LBB136_1404+0xe9c>
;                         break :bitset_loop;
8020e140: 6f 10 a0 2c  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020e144: 03 45 74 dd  	lbu	a0, -553(s0)
8020e148: 81 45        	mv	a1, zero
8020e14a: 63 1c b5 04  	bne	a0, a1, 0x8020e1a2 <.LBB136_1404+0xefe>
8020e14e: 09 a0        	j	0x8020e150 <.LBB136_1404+0xeac>
;                             if (first_address == 0) {
8020e150: 03 35 84 fb  	ld	a0, -72(s0)
8020e154: 81 45        	mv	a1, zero
8020e156: 63 12 b5 02  	bne	a0, a1, 0x8020e17a <.LBB136_1404+0xed6>
8020e15a: 09 a0        	j	0x8020e15c <.LBB136_1404+0xeb8>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020e15c: 83 35 04 fc  	ld	a1, -64(s0)
8020e160: 7d 55        	addi	a0, zero, -1
8020e162: 19 81        	srli	a0, a0, 6
8020e164: 6d 8d        	and	a0, a0, a1
8020e166: 13 96 65 00  	slli	a2, a1, 6
8020e16a: 23 38 c4 94  	sd	a2, -1712(s0)
8020e16e: 63 04 b5 00  	beq	a0, a1, 0x8020e176 <.LBB136_1404+0xed2>
8020e172: 6f 20 50 4f  	j	0x80210e66 <.LBB136_1554>
8020e176: 6f 20 30 50  	j	0x80210e78 <.LBB136_1554+0x12>
;                             if (first_address == 0) {
8020e17a: 09 a0        	j	0x8020e17c <.LBB136_1404+0xed8>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020e17c: 83 35 84 f9  	ld	a1, -104(s0)
8020e180: 88 61        	ld	a0, 0(a1)
8020e182: 37 06 00 10  	lui	a2, 65536
8020e186: 51 8d        	or	a0, a0, a2
8020e188: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020e18a: 83 35 84 fc  	ld	a1, -56(s0)
8020e18e: 13 85 15 00  	addi	a0, a1, 1
8020e192: 23 34 a4 94  	sd	a0, -1720(s0)
8020e196: 63 74 b5 00  	bgeu	a0, a1, 0x8020e19e <.LBB136_1404+0xefa>
8020e19a: 6f 20 90 58  	j	0x80210f22 <.LBB136_1558>
8020e19e: 6f 20 70 59  	j	0x80210f34 <.LBB136_1558+0x12>
;                         if (!bit_set) {
8020e1a2: 09 a0        	j	0x8020e1a4 <.LBB136_1404+0xf00>
;                     if (region_allocated_page_count == page_count) {
8020e1a4: 09 a0        	j	0x8020e1a6 <.LBB136_1404+0xf02>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020e1a6: 03 35 84 f9  	ld	a0, -104(s0)
8020e1aa: 08 61        	ld	a0, 0(a0)
8020e1ac: 75 81        	srli	a0, a0, 29
8020e1ae: 05 89        	andi	a0, a0, 1
8020e1b0: a3 03 a4 dc  	sb	a0, -569(s0)
;                     if (region_allocated_page_count == page_count) {
8020e1b4: 03 35 84 fc  	ld	a0, -56(s0)
8020e1b8: 83 35 04 b5  	ld	a1, -1200(s0)
8020e1bc: 63 15 b5 00  	bne	a0, a1, 0x8020e1c6 <.LBB136_1404+0xf22>
8020e1c0: 09 a0        	j	0x8020e1c2 <.LBB136_1404+0xf1e>
;                         break :bitset_loop;
8020e1c2: 6f 10 80 24  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020e1c6: 03 45 74 dc  	lbu	a0, -569(s0)
8020e1ca: 81 45        	mv	a1, zero
8020e1cc: 63 1c b5 04  	bne	a0, a1, 0x8020e224 <.LBB136_1404+0xf80>
8020e1d0: 09 a0        	j	0x8020e1d2 <.LBB136_1404+0xf2e>
;                             if (first_address == 0) {
8020e1d2: 03 35 84 fb  	ld	a0, -72(s0)
8020e1d6: 81 45        	mv	a1, zero
8020e1d8: 63 12 b5 02  	bne	a0, a1, 0x8020e1fc <.LBB136_1404+0xf58>
8020e1dc: 09 a0        	j	0x8020e1de <.LBB136_1404+0xf3a>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020e1de: 83 35 04 fc  	ld	a1, -64(s0)
8020e1e2: 7d 55        	addi	a0, zero, -1
8020e1e4: 19 81        	srli	a0, a0, 6
8020e1e6: 6d 8d        	and	a0, a0, a1
8020e1e8: 13 96 65 00  	slli	a2, a1, 6
8020e1ec: 23 30 c4 94  	sd	a2, -1728(s0)
8020e1f0: 63 04 b5 00  	beq	a0, a1, 0x8020e1f8 <.LBB136_1404+0xf54>
8020e1f4: 6f 20 d0 54  	j	0x80210f40 <.LBB136_1559>
8020e1f8: 6f 20 b0 55  	j	0x80210f52 <.LBB136_1559+0x12>
;                             if (first_address == 0) {
8020e1fc: 09 a0        	j	0x8020e1fe <.LBB136_1404+0xf5a>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020e1fe: 83 35 84 f9  	ld	a1, -104(s0)
8020e202: 88 61        	ld	a0, 0(a1)
8020e204: 37 06 00 20  	lui	a2, 131072
8020e208: 51 8d        	or	a0, a0, a2
8020e20a: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020e20c: 83 35 84 fc  	ld	a1, -56(s0)
8020e210: 13 85 15 00  	addi	a0, a1, 1
8020e214: 23 3c a4 92  	sd	a0, -1736(s0)
8020e218: 63 74 b5 00  	bgeu	a0, a1, 0x8020e220 <.LBB136_1404+0xf7c>
8020e21c: 6f 20 10 5e  	j	0x80210ffc <.LBB136_1563>
8020e220: 6f 20 f0 5e  	j	0x8021100e <.LBB136_1563+0x12>
;                         if (!bit_set) {
8020e224: 09 a0        	j	0x8020e226 <.LBB136_1404+0xf82>
;                     if (region_allocated_page_count == page_count) {
8020e226: 09 a0        	j	0x8020e228 <.LBB136_1404+0xf84>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020e228: 03 35 84 f9  	ld	a0, -104(s0)
8020e22c: 08 61        	ld	a0, 0(a0)
8020e22e: 79 81        	srli	a0, a0, 30
8020e230: 05 89        	andi	a0, a0, 1
8020e232: a3 0b a4 da  	sb	a0, -585(s0)
;                     if (region_allocated_page_count == page_count) {
8020e236: 03 35 84 fc  	ld	a0, -56(s0)
8020e23a: 83 35 04 b5  	ld	a1, -1200(s0)
8020e23e: 63 15 b5 00  	bne	a0, a1, 0x8020e248 <.LBB136_1404+0xfa4>
8020e242: 09 a0        	j	0x8020e244 <.LBB136_1404+0xfa0>
;                         break :bitset_loop;
8020e244: 6f 10 60 1c  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020e248: 03 45 74 db  	lbu	a0, -585(s0)
8020e24c: 81 45        	mv	a1, zero
8020e24e: 63 1c b5 04  	bne	a0, a1, 0x8020e2a6 <.LBB136_1404+0x1002>
8020e252: 09 a0        	j	0x8020e254 <.LBB136_1404+0xfb0>
;                             if (first_address == 0) {
8020e254: 03 35 84 fb  	ld	a0, -72(s0)
8020e258: 81 45        	mv	a1, zero
8020e25a: 63 12 b5 02  	bne	a0, a1, 0x8020e27e <.LBB136_1404+0xfda>
8020e25e: 09 a0        	j	0x8020e260 <.LBB136_1404+0xfbc>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020e260: 83 35 04 fc  	ld	a1, -64(s0)
8020e264: 7d 55        	addi	a0, zero, -1
8020e266: 19 81        	srli	a0, a0, 6
8020e268: 6d 8d        	and	a0, a0, a1
8020e26a: 13 96 65 00  	slli	a2, a1, 6
8020e26e: 23 38 c4 92  	sd	a2, -1744(s0)
8020e272: 63 04 b5 00  	beq	a0, a1, 0x8020e27a <.LBB136_1404+0xfd6>
8020e276: 6f 20 50 5a  	j	0x8021101a <.LBB136_1564>
8020e27a: 6f 20 30 5b  	j	0x8021102c <.LBB136_1564+0x12>
;                             if (first_address == 0) {
8020e27e: 09 a0        	j	0x8020e280 <.LBB136_1404+0xfdc>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020e280: 83 35 84 f9  	ld	a1, -104(s0)
8020e284: 88 61        	ld	a0, 0(a1)
8020e286: 37 06 00 40  	lui	a2, 262144
8020e28a: 51 8d        	or	a0, a0, a2
8020e28c: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020e28e: 83 35 84 fc  	ld	a1, -56(s0)
8020e292: 13 85 15 00  	addi	a0, a1, 1
8020e296: 23 34 a4 92  	sd	a0, -1752(s0)
8020e29a: 63 74 b5 00  	bgeu	a0, a1, 0x8020e2a2 <.LBB136_1404+0xffe>
8020e29e: 6f 20 90 63  	j	0x802110d6 <.LBB136_1568>
8020e2a2: 6f 20 70 64  	j	0x802110e8 <.LBB136_1568+0x12>
;                         if (!bit_set) {
8020e2a6: 09 a0        	j	0x8020e2a8 <.LBB136_1404+0x1004>
;                     if (region_allocated_page_count == page_count) {
8020e2a8: 09 a0        	j	0x8020e2aa <.LBB136_1404+0x1006>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020e2aa: 03 35 84 f9  	ld	a0, -104(s0)
8020e2ae: 08 61        	ld	a0, 0(a0)
8020e2b0: 1b 55 f5 01  	srliw	a0, a0, 31
8020e2b4: a3 03 a4 da  	sb	a0, -601(s0)
;                     if (region_allocated_page_count == page_count) {
8020e2b8: 03 35 84 fc  	ld	a0, -56(s0)
8020e2bc: 83 35 04 b5  	ld	a1, -1200(s0)
8020e2c0: 63 15 b5 00  	bne	a0, a1, 0x8020e2ca <.LBB136_1404+0x1026>
8020e2c4: 09 a0        	j	0x8020e2c6 <.LBB136_1404+0x1022>
;                         break :bitset_loop;
8020e2c6: 6f 10 40 14  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020e2ca: 03 45 74 da  	lbu	a0, -601(s0)
8020e2ce: 81 45        	mv	a1, zero
8020e2d0: 63 1c b5 04  	bne	a0, a1, 0x8020e328 <.LBB136_1404+0x1084>
8020e2d4: 09 a0        	j	0x8020e2d6 <.LBB136_1404+0x1032>
;                             if (first_address == 0) {
8020e2d6: 03 35 84 fb  	ld	a0, -72(s0)
8020e2da: 81 45        	mv	a1, zero
8020e2dc: 63 12 b5 02  	bne	a0, a1, 0x8020e300 <.LBB136_1404+0x105c>
8020e2e0: 09 a0        	j	0x8020e2e2 <.LBB136_1404+0x103e>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020e2e2: 83 35 04 fc  	ld	a1, -64(s0)
8020e2e6: 7d 55        	addi	a0, zero, -1
8020e2e8: 19 81        	srli	a0, a0, 6
8020e2ea: 6d 8d        	and	a0, a0, a1
8020e2ec: 13 96 65 00  	slli	a2, a1, 6
8020e2f0: 23 30 c4 92  	sd	a2, -1760(s0)
8020e2f4: 63 04 b5 00  	beq	a0, a1, 0x8020e2fc <.LBB136_1404+0x1058>
8020e2f8: 6f 20 d0 5f  	j	0x802110f4 <.LBB136_1569>
8020e2fc: 6f 20 b0 60  	j	0x80211106 <.LBB136_1569+0x12>
;                             if (first_address == 0) {
8020e300: 09 a0        	j	0x8020e302 <.LBB136_1404+0x105e>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020e302: 83 35 84 f9  	ld	a1, -104(s0)
8020e306: 88 61        	ld	a0, 0(a1)
8020e308: 05 46        	addi	a2, zero, 1
8020e30a: 7e 06        	slli	a2, a2, 31
8020e30c: 51 8d        	or	a0, a0, a2
8020e30e: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020e310: 83 35 84 fc  	ld	a1, -56(s0)
8020e314: 13 85 15 00  	addi	a0, a1, 1
8020e318: 23 3c a4 90  	sd	a0, -1768(s0)
8020e31c: 63 74 b5 00  	bgeu	a0, a1, 0x8020e324 <.LBB136_1404+0x1080>
8020e320: 6f 20 10 69  	j	0x802111b0 <.LBB136_1573>
8020e324: 6f 20 f0 69  	j	0x802111c2 <.LBB136_1573+0x12>
;                         if (!bit_set) {
8020e328: 09 a0        	j	0x8020e32a <.LBB136_1404+0x1086>
;                     if (region_allocated_page_count == page_count) {
8020e32a: 09 a0        	j	0x8020e32c <.LBB136_1404+0x1088>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020e32c: 03 35 84 f9  	ld	a0, -104(s0)
8020e330: 03 65 45 00  	lwu	a0, 4(a0)
8020e334: 05 89        	andi	a0, a0, 1
8020e336: a3 0b a4 d8  	sb	a0, -617(s0)
;                     if (region_allocated_page_count == page_count) {
8020e33a: 03 35 84 fc  	ld	a0, -56(s0)
8020e33e: 83 35 04 b5  	ld	a1, -1200(s0)
8020e342: 63 15 b5 00  	bne	a0, a1, 0x8020e34c <.LBB136_1404+0x10a8>
8020e346: 09 a0        	j	0x8020e348 <.LBB136_1404+0x10a4>
;                         break :bitset_loop;
8020e348: 6f 10 20 0c  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020e34c: 03 45 74 d9  	lbu	a0, -617(s0)
8020e350: 81 45        	mv	a1, zero
8020e352: 63 1c b5 04  	bne	a0, a1, 0x8020e3aa <.LBB136_1404+0x1106>
8020e356: 09 a0        	j	0x8020e358 <.LBB136_1404+0x10b4>
;                             if (first_address == 0) {
8020e358: 03 35 84 fb  	ld	a0, -72(s0)
8020e35c: 81 45        	mv	a1, zero
8020e35e: 63 12 b5 02  	bne	a0, a1, 0x8020e382 <.LBB136_1404+0x10de>
8020e362: 09 a0        	j	0x8020e364 <.LBB136_1404+0x10c0>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020e364: 83 35 04 fc  	ld	a1, -64(s0)
8020e368: 7d 55        	addi	a0, zero, -1
8020e36a: 19 81        	srli	a0, a0, 6
8020e36c: 6d 8d        	and	a0, a0, a1
8020e36e: 13 96 65 00  	slli	a2, a1, 6
8020e372: 23 38 c4 90  	sd	a2, -1776(s0)
8020e376: 63 04 b5 00  	beq	a0, a1, 0x8020e37e <.LBB136_1404+0x10da>
8020e37a: 6f 20 50 65  	j	0x802111ce <.LBB136_1574>
8020e37e: 6f 20 30 66  	j	0x802111e0 <.LBB136_1574+0x12>
;                             if (first_address == 0) {
8020e382: 09 a0        	j	0x8020e384 <.LBB136_1404+0x10e0>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020e384: 83 35 84 f9  	ld	a1, -104(s0)
8020e388: 88 61        	ld	a0, 0(a1)
8020e38a: 05 46        	addi	a2, zero, 1
8020e38c: 02 16        	slli	a2, a2, 32
8020e38e: 51 8d        	or	a0, a0, a2
8020e390: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020e392: 83 35 84 fc  	ld	a1, -56(s0)
8020e396: 13 85 15 00  	addi	a0, a1, 1
8020e39a: 23 34 a4 90  	sd	a0, -1784(s0)
8020e39e: 63 74 b5 00  	bgeu	a0, a1, 0x8020e3a6 <.LBB136_1404+0x1102>
8020e3a2: 6f 20 90 6e  	j	0x8021128a <.LBB136_1578>
8020e3a6: 6f 20 70 6f  	j	0x8021129c <.LBB136_1578+0x12>
;                         if (!bit_set) {
8020e3aa: 09 a0        	j	0x8020e3ac <.LBB136_1404+0x1108>
;                     if (region_allocated_page_count == page_count) {
8020e3ac: 09 a0        	j	0x8020e3ae <.LBB136_1404+0x110a>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020e3ae: 03 35 84 f9  	ld	a0, -104(s0)
8020e3b2: 08 61        	ld	a0, 0(a0)
8020e3b4: 05 91        	srli	a0, a0, 33
8020e3b6: 05 89        	andi	a0, a0, 1
8020e3b8: a3 03 a4 d8  	sb	a0, -633(s0)
;                     if (region_allocated_page_count == page_count) {
8020e3bc: 03 35 84 fc  	ld	a0, -56(s0)
8020e3c0: 83 35 04 b5  	ld	a1, -1200(s0)
8020e3c4: 63 15 b5 00  	bne	a0, a1, 0x8020e3ce <.LBB136_1404+0x112a>
8020e3c8: 09 a0        	j	0x8020e3ca <.LBB136_1404+0x1126>
;                         break :bitset_loop;
8020e3ca: 6f 10 00 04  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020e3ce: 03 45 74 d8  	lbu	a0, -633(s0)
8020e3d2: 81 45        	mv	a1, zero
8020e3d4: 63 1c b5 04  	bne	a0, a1, 0x8020e42c <.LBB136_1404+0x1188>
8020e3d8: 09 a0        	j	0x8020e3da <.LBB136_1404+0x1136>
;                             if (first_address == 0) {
8020e3da: 03 35 84 fb  	ld	a0, -72(s0)
8020e3de: 81 45        	mv	a1, zero
8020e3e0: 63 12 b5 02  	bne	a0, a1, 0x8020e404 <.LBB136_1404+0x1160>
8020e3e4: 09 a0        	j	0x8020e3e6 <.LBB136_1404+0x1142>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020e3e6: 83 35 04 fc  	ld	a1, -64(s0)
8020e3ea: 7d 55        	addi	a0, zero, -1
8020e3ec: 19 81        	srli	a0, a0, 6
8020e3ee: 6d 8d        	and	a0, a0, a1
8020e3f0: 13 96 65 00  	slli	a2, a1, 6
8020e3f4: 23 30 c4 90  	sd	a2, -1792(s0)
8020e3f8: 63 04 b5 00  	beq	a0, a1, 0x8020e400 <.LBB136_1404+0x115c>
8020e3fc: 6f 20 d0 6a  	j	0x802112a8 <.LBB136_1579>
8020e400: 6f 20 b0 6b  	j	0x802112ba <.LBB136_1579+0x12>
;                             if (first_address == 0) {
8020e404: 09 a0        	j	0x8020e406 <.LBB136_1404+0x1162>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020e406: 83 35 84 f9  	ld	a1, -104(s0)
8020e40a: 88 61        	ld	a0, 0(a1)
8020e40c: 05 46        	addi	a2, zero, 1
8020e40e: 06 16        	slli	a2, a2, 33
8020e410: 51 8d        	or	a0, a0, a2
8020e412: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020e414: 83 35 84 fc  	ld	a1, -56(s0)
8020e418: 13 85 15 00  	addi	a0, a1, 1
8020e41c: 23 3c a4 8e  	sd	a0, -1800(s0)
8020e420: 63 74 b5 00  	bgeu	a0, a1, 0x8020e428 <.LBB136_1404+0x1184>
8020e424: 6f 20 10 74  	j	0x80211364 <.LBB136_1583>
8020e428: 6f 20 f0 74  	j	0x80211376 <.LBB136_1583+0x12>
;                         if (!bit_set) {
8020e42c: 09 a0        	j	0x8020e42e <.LBB136_1404+0x118a>
;                     if (region_allocated_page_count == page_count) {
8020e42e: 09 a0        	j	0x8020e430 <.LBB136_1404+0x118c>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020e430: 03 35 84 f9  	ld	a0, -104(s0)
8020e434: 08 61        	ld	a0, 0(a0)
8020e436: 09 91        	srli	a0, a0, 34
8020e438: 05 89        	andi	a0, a0, 1
8020e43a: a3 0b a4 d6  	sb	a0, -649(s0)
;                     if (region_allocated_page_count == page_count) {
8020e43e: 03 35 84 fc  	ld	a0, -56(s0)
8020e442: 83 35 04 b5  	ld	a1, -1200(s0)
8020e446: 63 15 b5 00  	bne	a0, a1, 0x8020e450 <.LBB136_1404+0x11ac>
8020e44a: 09 a0        	j	0x8020e44c <.LBB136_1404+0x11a8>
;                         break :bitset_loop;
8020e44c: 6f 00 f0 7b  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020e450: 03 45 74 d7  	lbu	a0, -649(s0)
8020e454: 81 45        	mv	a1, zero
8020e456: 63 1c b5 04  	bne	a0, a1, 0x8020e4ae <.LBB136_1404+0x120a>
8020e45a: 09 a0        	j	0x8020e45c <.LBB136_1404+0x11b8>
;                             if (first_address == 0) {
8020e45c: 03 35 84 fb  	ld	a0, -72(s0)
8020e460: 81 45        	mv	a1, zero
8020e462: 63 12 b5 02  	bne	a0, a1, 0x8020e486 <.LBB136_1404+0x11e2>
8020e466: 09 a0        	j	0x8020e468 <.LBB136_1404+0x11c4>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020e468: 83 35 04 fc  	ld	a1, -64(s0)
8020e46c: 7d 55        	addi	a0, zero, -1
8020e46e: 19 81        	srli	a0, a0, 6
8020e470: 6d 8d        	and	a0, a0, a1
8020e472: 13 96 65 00  	slli	a2, a1, 6
8020e476: 23 38 c4 8e  	sd	a2, -1808(s0)
8020e47a: 63 04 b5 00  	beq	a0, a1, 0x8020e482 <.LBB136_1404+0x11de>
8020e47e: 6f 20 50 70  	j	0x80211382 <.LBB136_1584>
8020e482: 6f 20 30 71  	j	0x80211394 <.LBB136_1584+0x12>
;                             if (first_address == 0) {
8020e486: 09 a0        	j	0x8020e488 <.LBB136_1404+0x11e4>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020e488: 83 35 84 f9  	ld	a1, -104(s0)
8020e48c: 88 61        	ld	a0, 0(a1)
8020e48e: 05 46        	addi	a2, zero, 1
8020e490: 0a 16        	slli	a2, a2, 34
8020e492: 51 8d        	or	a0, a0, a2
8020e494: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020e496: 83 35 84 fc  	ld	a1, -56(s0)
8020e49a: 13 85 15 00  	addi	a0, a1, 1
8020e49e: 23 34 a4 8e  	sd	a0, -1816(s0)
8020e4a2: 63 74 b5 00  	bgeu	a0, a1, 0x8020e4aa <.LBB136_1404+0x1206>
8020e4a6: 6f 20 90 79  	j	0x8021143e <.LBB136_1588>
8020e4aa: 6f 20 70 7a  	j	0x80211450 <.LBB136_1588+0x12>
;                         if (!bit_set) {
8020e4ae: 09 a0        	j	0x8020e4b0 <.LBB136_1404+0x120c>
;                     if (region_allocated_page_count == page_count) {
8020e4b0: 09 a0        	j	0x8020e4b2 <.LBB136_1404+0x120e>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020e4b2: 03 35 84 f9  	ld	a0, -104(s0)
8020e4b6: 08 61        	ld	a0, 0(a0)
8020e4b8: 0d 91        	srli	a0, a0, 35
8020e4ba: 05 89        	andi	a0, a0, 1
8020e4bc: a3 03 a4 d6  	sb	a0, -665(s0)
;                     if (region_allocated_page_count == page_count) {
8020e4c0: 03 35 84 fc  	ld	a0, -56(s0)
8020e4c4: 83 35 04 b5  	ld	a1, -1200(s0)
8020e4c8: 63 15 b5 00  	bne	a0, a1, 0x8020e4d2 <.LBB136_1404+0x122e>
8020e4cc: 09 a0        	j	0x8020e4ce <.LBB136_1404+0x122a>
;                         break :bitset_loop;
8020e4ce: 6f 00 d0 73  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020e4d2: 03 45 74 d6  	lbu	a0, -665(s0)
8020e4d6: 81 45        	mv	a1, zero
8020e4d8: 63 1c b5 04  	bne	a0, a1, 0x8020e530 <.LBB136_1404+0x128c>
8020e4dc: 09 a0        	j	0x8020e4de <.LBB136_1404+0x123a>
;                             if (first_address == 0) {
8020e4de: 03 35 84 fb  	ld	a0, -72(s0)
8020e4e2: 81 45        	mv	a1, zero
8020e4e4: 63 12 b5 02  	bne	a0, a1, 0x8020e508 <.LBB136_1404+0x1264>
8020e4e8: 09 a0        	j	0x8020e4ea <.LBB136_1404+0x1246>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020e4ea: 83 35 04 fc  	ld	a1, -64(s0)
8020e4ee: 7d 55        	addi	a0, zero, -1
8020e4f0: 19 81        	srli	a0, a0, 6
8020e4f2: 6d 8d        	and	a0, a0, a1
8020e4f4: 13 96 65 00  	slli	a2, a1, 6
8020e4f8: 23 30 c4 8e  	sd	a2, -1824(s0)
8020e4fc: 63 04 b5 00  	beq	a0, a1, 0x8020e504 <.LBB136_1404+0x1260>
8020e500: 6f 20 d0 75  	j	0x8021145c <.LBB136_1589>
8020e504: 6f 20 b0 76  	j	0x8021146e <.LBB136_1589+0x12>
;                             if (first_address == 0) {
8020e508: 09 a0        	j	0x8020e50a <.LBB136_1404+0x1266>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020e50a: 83 35 84 f9  	ld	a1, -104(s0)
8020e50e: 88 61        	ld	a0, 0(a1)
8020e510: 05 46        	addi	a2, zero, 1
8020e512: 0e 16        	slli	a2, a2, 35
8020e514: 51 8d        	or	a0, a0, a2
8020e516: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020e518: 83 35 84 fc  	ld	a1, -56(s0)
8020e51c: 13 85 15 00  	addi	a0, a1, 1
8020e520: 23 3c a4 8c  	sd	a0, -1832(s0)
8020e524: 63 74 b5 00  	bgeu	a0, a1, 0x8020e52c <.LBB136_1404+0x1288>
8020e528: 6f 20 10 7f  	j	0x80211518 <.LBB136_1593>
8020e52c: 6f 20 f0 7f  	j	0x8021152a <.LBB136_1593+0x12>
;                         if (!bit_set) {
8020e530: 09 a0        	j	0x8020e532 <.LBB136_1404+0x128e>
;                     if (region_allocated_page_count == page_count) {
8020e532: 09 a0        	j	0x8020e534 <.LBB136_1404+0x1290>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020e534: 03 35 84 f9  	ld	a0, -104(s0)
8020e538: 08 61        	ld	a0, 0(a0)
8020e53a: 11 91        	srli	a0, a0, 36
8020e53c: 05 89        	andi	a0, a0, 1
8020e53e: a3 0b a4 d4  	sb	a0, -681(s0)
;                     if (region_allocated_page_count == page_count) {
8020e542: 03 35 84 fc  	ld	a0, -56(s0)
8020e546: 83 35 04 b5  	ld	a1, -1200(s0)
8020e54a: 63 15 b5 00  	bne	a0, a1, 0x8020e554 <.LBB136_1404+0x12b0>
8020e54e: 09 a0        	j	0x8020e550 <.LBB136_1404+0x12ac>
;                         break :bitset_loop;
8020e550: 6f 00 b0 6b  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020e554: 03 45 74 d5  	lbu	a0, -681(s0)
8020e558: 81 45        	mv	a1, zero
8020e55a: 63 1c b5 04  	bne	a0, a1, 0x8020e5b2 <.LBB136_1404+0x130e>
8020e55e: 09 a0        	j	0x8020e560 <.LBB136_1404+0x12bc>
;                             if (first_address == 0) {
8020e560: 03 35 84 fb  	ld	a0, -72(s0)
8020e564: 81 45        	mv	a1, zero
8020e566: 63 12 b5 02  	bne	a0, a1, 0x8020e58a <.LBB136_1404+0x12e6>
8020e56a: 09 a0        	j	0x8020e56c <.LBB136_1404+0x12c8>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020e56c: 83 35 04 fc  	ld	a1, -64(s0)
8020e570: 7d 55        	addi	a0, zero, -1
8020e572: 19 81        	srli	a0, a0, 6
8020e574: 6d 8d        	and	a0, a0, a1
8020e576: 13 96 65 00  	slli	a2, a1, 6
8020e57a: 23 38 c4 8c  	sd	a2, -1840(s0)
8020e57e: 63 04 b5 00  	beq	a0, a1, 0x8020e586 <.LBB136_1404+0x12e2>
8020e582: 6f 20 50 7b  	j	0x80211536 <.LBB136_1594>
8020e586: 6f 20 30 7c  	j	0x80211548 <.LBB136_1594+0x12>
;                             if (first_address == 0) {
8020e58a: 09 a0        	j	0x8020e58c <.LBB136_1404+0x12e8>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020e58c: 83 35 84 f9  	ld	a1, -104(s0)
8020e590: 88 61        	ld	a0, 0(a1)
8020e592: 05 46        	addi	a2, zero, 1
8020e594: 12 16        	slli	a2, a2, 36
8020e596: 51 8d        	or	a0, a0, a2
8020e598: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020e59a: 83 35 84 fc  	ld	a1, -56(s0)
8020e59e: 13 85 15 00  	addi	a0, a1, 1
8020e5a2: 23 34 a4 8c  	sd	a0, -1848(s0)
8020e5a6: 63 74 b5 00  	bgeu	a0, a1, 0x8020e5ae <.LBB136_1404+0x130a>
8020e5aa: 6f 30 80 04  	j	0x802115f2 <.LBB136_1598>
8020e5ae: 6f 30 60 05  	j	0x80211604 <.LBB136_1598+0x12>
;                         if (!bit_set) {
8020e5b2: 09 a0        	j	0x8020e5b4 <.LBB136_1404+0x1310>
;                     if (region_allocated_page_count == page_count) {
8020e5b4: 09 a0        	j	0x8020e5b6 <.LBB136_1404+0x1312>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020e5b6: 03 35 84 f9  	ld	a0, -104(s0)
8020e5ba: 08 61        	ld	a0, 0(a0)
8020e5bc: 15 91        	srli	a0, a0, 37
8020e5be: 05 89        	andi	a0, a0, 1
8020e5c0: a3 03 a4 d4  	sb	a0, -697(s0)
;                     if (region_allocated_page_count == page_count) {
8020e5c4: 03 35 84 fc  	ld	a0, -56(s0)
8020e5c8: 83 35 04 b5  	ld	a1, -1200(s0)
8020e5cc: 63 15 b5 00  	bne	a0, a1, 0x8020e5d6 <.LBB136_1404+0x1332>
8020e5d0: 09 a0        	j	0x8020e5d2 <.LBB136_1404+0x132e>
;                         break :bitset_loop;
8020e5d2: 6f 00 90 63  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020e5d6: 03 45 74 d4  	lbu	a0, -697(s0)
8020e5da: 81 45        	mv	a1, zero
8020e5dc: 63 1c b5 04  	bne	a0, a1, 0x8020e634 <.LBB136_1404+0x1390>
8020e5e0: 09 a0        	j	0x8020e5e2 <.LBB136_1404+0x133e>
;                             if (first_address == 0) {
8020e5e2: 03 35 84 fb  	ld	a0, -72(s0)
8020e5e6: 81 45        	mv	a1, zero
8020e5e8: 63 12 b5 02  	bne	a0, a1, 0x8020e60c <.LBB136_1404+0x1368>
8020e5ec: 09 a0        	j	0x8020e5ee <.LBB136_1404+0x134a>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020e5ee: 83 35 04 fc  	ld	a1, -64(s0)
8020e5f2: 7d 55        	addi	a0, zero, -1
8020e5f4: 19 81        	srli	a0, a0, 6
8020e5f6: 6d 8d        	and	a0, a0, a1
8020e5f8: 13 96 65 00  	slli	a2, a1, 6
8020e5fc: 23 30 c4 8c  	sd	a2, -1856(s0)
8020e600: 63 04 b5 00  	beq	a0, a1, 0x8020e608 <.LBB136_1404+0x1364>
8020e604: 6f 30 c0 00  	j	0x80211610 <.LBB136_1599>
8020e608: 6f 30 a0 01  	j	0x80211622 <.LBB136_1599+0x12>
;                             if (first_address == 0) {
8020e60c: 09 a0        	j	0x8020e60e <.LBB136_1404+0x136a>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020e60e: 83 35 84 f9  	ld	a1, -104(s0)
8020e612: 88 61        	ld	a0, 0(a1)
8020e614: 05 46        	addi	a2, zero, 1
8020e616: 16 16        	slli	a2, a2, 37
8020e618: 51 8d        	or	a0, a0, a2
8020e61a: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020e61c: 83 35 84 fc  	ld	a1, -56(s0)
8020e620: 13 85 15 00  	addi	a0, a1, 1
8020e624: 23 3c a4 8a  	sd	a0, -1864(s0)
8020e628: 63 74 b5 00  	bgeu	a0, a1, 0x8020e630 <.LBB136_1404+0x138c>
8020e62c: 6f 30 00 0a  	j	0x802116cc <.LBB136_1603>
8020e630: 6f 30 e0 0a  	j	0x802116de <.LBB136_1603+0x12>
;                         if (!bit_set) {
8020e634: 09 a0        	j	0x8020e636 <.LBB136_1404+0x1392>
;                     if (region_allocated_page_count == page_count) {
8020e636: 09 a0        	j	0x8020e638 <.LBB136_1404+0x1394>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020e638: 03 35 84 f9  	ld	a0, -104(s0)
8020e63c: 08 61        	ld	a0, 0(a0)
8020e63e: 19 91        	srli	a0, a0, 38
8020e640: 05 89        	andi	a0, a0, 1
8020e642: a3 0b a4 d2  	sb	a0, -713(s0)
;                     if (region_allocated_page_count == page_count) {
8020e646: 03 35 84 fc  	ld	a0, -56(s0)
8020e64a: 83 35 04 b5  	ld	a1, -1200(s0)
8020e64e: 63 15 b5 00  	bne	a0, a1, 0x8020e658 <.LBB136_1404+0x13b4>
8020e652: 09 a0        	j	0x8020e654 <.LBB136_1404+0x13b0>
;                         break :bitset_loop;
8020e654: 6f 00 70 5b  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020e658: 03 45 74 d3  	lbu	a0, -713(s0)
8020e65c: 81 45        	mv	a1, zero
8020e65e: 63 1c b5 04  	bne	a0, a1, 0x8020e6b6 <.LBB136_1404+0x1412>
8020e662: 09 a0        	j	0x8020e664 <.LBB136_1404+0x13c0>
;                             if (first_address == 0) {
8020e664: 03 35 84 fb  	ld	a0, -72(s0)
8020e668: 81 45        	mv	a1, zero
8020e66a: 63 12 b5 02  	bne	a0, a1, 0x8020e68e <.LBB136_1404+0x13ea>
8020e66e: 09 a0        	j	0x8020e670 <.LBB136_1404+0x13cc>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020e670: 83 35 04 fc  	ld	a1, -64(s0)
8020e674: 7d 55        	addi	a0, zero, -1
8020e676: 19 81        	srli	a0, a0, 6
8020e678: 6d 8d        	and	a0, a0, a1
8020e67a: 13 96 65 00  	slli	a2, a1, 6
8020e67e: 23 38 c4 8a  	sd	a2, -1872(s0)
8020e682: 63 04 b5 00  	beq	a0, a1, 0x8020e68a <.LBB136_1404+0x13e6>
8020e686: 6f 30 40 06  	j	0x802116ea <.LBB136_1604>
8020e68a: 6f 30 20 07  	j	0x802116fc <.LBB136_1604+0x12>
;                             if (first_address == 0) {
8020e68e: 09 a0        	j	0x8020e690 <.LBB136_1404+0x13ec>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020e690: 83 35 84 f9  	ld	a1, -104(s0)
8020e694: 88 61        	ld	a0, 0(a1)
8020e696: 05 46        	addi	a2, zero, 1
8020e698: 1a 16        	slli	a2, a2, 38
8020e69a: 51 8d        	or	a0, a0, a2
8020e69c: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020e69e: 83 35 84 fc  	ld	a1, -56(s0)
8020e6a2: 13 85 15 00  	addi	a0, a1, 1
8020e6a6: 23 34 a4 8a  	sd	a0, -1880(s0)
8020e6aa: 63 74 b5 00  	bgeu	a0, a1, 0x8020e6b2 <.LBB136_1404+0x140e>
8020e6ae: 6f 30 80 0f  	j	0x802117a6 <.LBB136_1608>
8020e6b2: 6f 30 60 10  	j	0x802117b8 <.LBB136_1608+0x12>
;                         if (!bit_set) {
8020e6b6: 09 a0        	j	0x8020e6b8 <.LBB136_1404+0x1414>
;                     if (region_allocated_page_count == page_count) {
8020e6b8: 09 a0        	j	0x8020e6ba <.LBB136_1404+0x1416>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020e6ba: 03 35 84 f9  	ld	a0, -104(s0)
8020e6be: 08 61        	ld	a0, 0(a0)
8020e6c0: 1d 91        	srli	a0, a0, 39
8020e6c2: 05 89        	andi	a0, a0, 1
8020e6c4: a3 03 a4 d2  	sb	a0, -729(s0)
;                     if (region_allocated_page_count == page_count) {
8020e6c8: 03 35 84 fc  	ld	a0, -56(s0)
8020e6cc: 83 35 04 b5  	ld	a1, -1200(s0)
8020e6d0: 63 15 b5 00  	bne	a0, a1, 0x8020e6da <.LBB136_1404+0x1436>
8020e6d4: 09 a0        	j	0x8020e6d6 <.LBB136_1404+0x1432>
;                         break :bitset_loop;
8020e6d6: 6f 00 50 53  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020e6da: 03 45 74 d2  	lbu	a0, -729(s0)
8020e6de: 81 45        	mv	a1, zero
8020e6e0: 63 1c b5 04  	bne	a0, a1, 0x8020e738 <.LBB136_1404+0x1494>
8020e6e4: 09 a0        	j	0x8020e6e6 <.LBB136_1404+0x1442>
;                             if (first_address == 0) {
8020e6e6: 03 35 84 fb  	ld	a0, -72(s0)
8020e6ea: 81 45        	mv	a1, zero
8020e6ec: 63 12 b5 02  	bne	a0, a1, 0x8020e710 <.LBB136_1404+0x146c>
8020e6f0: 09 a0        	j	0x8020e6f2 <.LBB136_1404+0x144e>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020e6f2: 83 35 04 fc  	ld	a1, -64(s0)
8020e6f6: 7d 55        	addi	a0, zero, -1
8020e6f8: 19 81        	srli	a0, a0, 6
8020e6fa: 6d 8d        	and	a0, a0, a1
8020e6fc: 13 96 65 00  	slli	a2, a1, 6
8020e700: 23 30 c4 8a  	sd	a2, -1888(s0)
8020e704: 63 04 b5 00  	beq	a0, a1, 0x8020e70c <.LBB136_1404+0x1468>
8020e708: 6f 30 c0 0b  	j	0x802117c4 <.LBB136_1609>
8020e70c: 6f 30 a0 0c  	j	0x802117d6 <.LBB136_1609+0x12>
;                             if (first_address == 0) {
8020e710: 09 a0        	j	0x8020e712 <.LBB136_1404+0x146e>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020e712: 83 35 84 f9  	ld	a1, -104(s0)
8020e716: 88 61        	ld	a0, 0(a1)
8020e718: 05 46        	addi	a2, zero, 1
8020e71a: 1e 16        	slli	a2, a2, 39
8020e71c: 51 8d        	or	a0, a0, a2
8020e71e: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020e720: 83 35 84 fc  	ld	a1, -56(s0)
8020e724: 13 85 15 00  	addi	a0, a1, 1
8020e728: 23 3c a4 88  	sd	a0, -1896(s0)
8020e72c: 63 74 b5 00  	bgeu	a0, a1, 0x8020e734 <.LBB136_1404+0x1490>
8020e730: 6f 30 00 15  	j	0x80211880 <.LBB136_1613>
8020e734: 6f 30 e0 15  	j	0x80211892 <.LBB136_1613+0x12>
;                         if (!bit_set) {
8020e738: 09 a0        	j	0x8020e73a <.LBB136_1404+0x1496>
;                     if (region_allocated_page_count == page_count) {
8020e73a: 09 a0        	j	0x8020e73c <.LBB136_1404+0x1498>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020e73c: 03 35 84 f9  	ld	a0, -104(s0)
8020e740: 08 61        	ld	a0, 0(a0)
8020e742: 21 91        	srli	a0, a0, 40
8020e744: 05 89        	andi	a0, a0, 1
8020e746: a3 0b a4 d0  	sb	a0, -745(s0)
;                     if (region_allocated_page_count == page_count) {
8020e74a: 03 35 84 fc  	ld	a0, -56(s0)
8020e74e: 83 35 04 b5  	ld	a1, -1200(s0)
8020e752: 63 15 b5 00  	bne	a0, a1, 0x8020e75c <.LBB136_1404+0x14b8>
8020e756: 09 a0        	j	0x8020e758 <.LBB136_1404+0x14b4>
;                         break :bitset_loop;
8020e758: 6f 00 30 4b  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020e75c: 03 45 74 d1  	lbu	a0, -745(s0)
8020e760: 81 45        	mv	a1, zero
8020e762: 63 1c b5 04  	bne	a0, a1, 0x8020e7ba <.LBB136_1404+0x1516>
8020e766: 09 a0        	j	0x8020e768 <.LBB136_1404+0x14c4>
;                             if (first_address == 0) {
8020e768: 03 35 84 fb  	ld	a0, -72(s0)
8020e76c: 81 45        	mv	a1, zero
8020e76e: 63 12 b5 02  	bne	a0, a1, 0x8020e792 <.LBB136_1404+0x14ee>
8020e772: 09 a0        	j	0x8020e774 <.LBB136_1404+0x14d0>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020e774: 83 35 04 fc  	ld	a1, -64(s0)
8020e778: 7d 55        	addi	a0, zero, -1
8020e77a: 19 81        	srli	a0, a0, 6
8020e77c: 6d 8d        	and	a0, a0, a1
8020e77e: 13 96 65 00  	slli	a2, a1, 6
8020e782: 23 38 c4 88  	sd	a2, -1904(s0)
8020e786: 63 04 b5 00  	beq	a0, a1, 0x8020e78e <.LBB136_1404+0x14ea>
8020e78a: 6f 30 40 11  	j	0x8021189e <.LBB136_1614>
8020e78e: 6f 30 20 12  	j	0x802118b0 <.LBB136_1614+0x12>
;                             if (first_address == 0) {
8020e792: 09 a0        	j	0x8020e794 <.LBB136_1404+0x14f0>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020e794: 83 35 84 f9  	ld	a1, -104(s0)
8020e798: 88 61        	ld	a0, 0(a1)
8020e79a: 05 46        	addi	a2, zero, 1
8020e79c: 22 16        	slli	a2, a2, 40
8020e79e: 51 8d        	or	a0, a0, a2
8020e7a0: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020e7a2: 83 35 84 fc  	ld	a1, -56(s0)
8020e7a6: 13 85 15 00  	addi	a0, a1, 1
8020e7aa: 23 34 a4 88  	sd	a0, -1912(s0)
8020e7ae: 63 74 b5 00  	bgeu	a0, a1, 0x8020e7b6 <.LBB136_1404+0x1512>
8020e7b2: 6f 30 80 1a  	j	0x8021195a <.LBB136_1618>
8020e7b6: 6f 30 60 1b  	j	0x8021196c <.LBB136_1618+0x12>
;                         if (!bit_set) {
8020e7ba: 09 a0        	j	0x8020e7bc <.LBB136_1404+0x1518>
;                     if (region_allocated_page_count == page_count) {
8020e7bc: 09 a0        	j	0x8020e7be <.LBB136_1404+0x151a>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020e7be: 03 35 84 f9  	ld	a0, -104(s0)
8020e7c2: 08 61        	ld	a0, 0(a0)
8020e7c4: 25 91        	srli	a0, a0, 41
8020e7c6: 05 89        	andi	a0, a0, 1
8020e7c8: a3 03 a4 d0  	sb	a0, -761(s0)
;                     if (region_allocated_page_count == page_count) {
8020e7cc: 03 35 84 fc  	ld	a0, -56(s0)
8020e7d0: 83 35 04 b5  	ld	a1, -1200(s0)
8020e7d4: 63 15 b5 00  	bne	a0, a1, 0x8020e7de <.LBB136_1404+0x153a>
8020e7d8: 09 a0        	j	0x8020e7da <.LBB136_1404+0x1536>
;                         break :bitset_loop;
8020e7da: 6f 00 10 43  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020e7de: 03 45 74 d0  	lbu	a0, -761(s0)
8020e7e2: 81 45        	mv	a1, zero
8020e7e4: 63 1c b5 04  	bne	a0, a1, 0x8020e83c <.LBB136_1404+0x1598>
8020e7e8: 09 a0        	j	0x8020e7ea <.LBB136_1404+0x1546>
;                             if (first_address == 0) {
8020e7ea: 03 35 84 fb  	ld	a0, -72(s0)
8020e7ee: 81 45        	mv	a1, zero
8020e7f0: 63 12 b5 02  	bne	a0, a1, 0x8020e814 <.LBB136_1404+0x1570>
8020e7f4: 09 a0        	j	0x8020e7f6 <.LBB136_1404+0x1552>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020e7f6: 83 35 04 fc  	ld	a1, -64(s0)
8020e7fa: 7d 55        	addi	a0, zero, -1
8020e7fc: 19 81        	srli	a0, a0, 6
8020e7fe: 6d 8d        	and	a0, a0, a1
8020e800: 13 96 65 00  	slli	a2, a1, 6
8020e804: 23 30 c4 88  	sd	a2, -1920(s0)
8020e808: 63 04 b5 00  	beq	a0, a1, 0x8020e810 <.LBB136_1404+0x156c>
8020e80c: 6f 30 c0 16  	j	0x80211978 <.LBB136_1619>
8020e810: 6f 30 a0 17  	j	0x8021198a <.LBB136_1619+0x12>
;                             if (first_address == 0) {
8020e814: 09 a0        	j	0x8020e816 <.LBB136_1404+0x1572>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020e816: 83 35 84 f9  	ld	a1, -104(s0)
8020e81a: 88 61        	ld	a0, 0(a1)
8020e81c: 05 46        	addi	a2, zero, 1
8020e81e: 26 16        	slli	a2, a2, 41
8020e820: 51 8d        	or	a0, a0, a2
8020e822: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020e824: 83 35 84 fc  	ld	a1, -56(s0)
8020e828: 13 85 15 00  	addi	a0, a1, 1
8020e82c: 23 3c a4 86  	sd	a0, -1928(s0)
8020e830: 63 74 b5 00  	bgeu	a0, a1, 0x8020e838 <.LBB136_1404+0x1594>
8020e834: 6f 30 00 20  	j	0x80211a34 <.LBB136_1623>
8020e838: 6f 30 e0 20  	j	0x80211a46 <.LBB136_1623+0x12>
;                         if (!bit_set) {
8020e83c: 09 a0        	j	0x8020e83e <.LBB136_1404+0x159a>
;                     if (region_allocated_page_count == page_count) {
8020e83e: 09 a0        	j	0x8020e840 <.LBB136_1404+0x159c>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020e840: 03 35 84 f9  	ld	a0, -104(s0)
8020e844: 08 61        	ld	a0, 0(a0)
8020e846: 29 91        	srli	a0, a0, 42
8020e848: 05 89        	andi	a0, a0, 1
8020e84a: a3 0b a4 ce  	sb	a0, -777(s0)
;                     if (region_allocated_page_count == page_count) {
8020e84e: 03 35 84 fc  	ld	a0, -56(s0)
8020e852: 83 35 04 b5  	ld	a1, -1200(s0)
8020e856: 63 15 b5 00  	bne	a0, a1, 0x8020e860 <.LBB136_1404+0x15bc>
8020e85a: 09 a0        	j	0x8020e85c <.LBB136_1404+0x15b8>
;                         break :bitset_loop;
8020e85c: 6f 00 f0 3a  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020e860: 03 45 74 cf  	lbu	a0, -777(s0)
8020e864: 81 45        	mv	a1, zero
8020e866: 63 1c b5 04  	bne	a0, a1, 0x8020e8be <.LBB136_1404+0x161a>
8020e86a: 09 a0        	j	0x8020e86c <.LBB136_1404+0x15c8>
;                             if (first_address == 0) {
8020e86c: 03 35 84 fb  	ld	a0, -72(s0)
8020e870: 81 45        	mv	a1, zero
8020e872: 63 12 b5 02  	bne	a0, a1, 0x8020e896 <.LBB136_1404+0x15f2>
8020e876: 09 a0        	j	0x8020e878 <.LBB136_1404+0x15d4>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020e878: 83 35 04 fc  	ld	a1, -64(s0)
8020e87c: 7d 55        	addi	a0, zero, -1
8020e87e: 19 81        	srli	a0, a0, 6
8020e880: 6d 8d        	and	a0, a0, a1
8020e882: 13 96 65 00  	slli	a2, a1, 6
8020e886: 23 38 c4 86  	sd	a2, -1936(s0)
8020e88a: 63 04 b5 00  	beq	a0, a1, 0x8020e892 <.LBB136_1404+0x15ee>
8020e88e: 6f 30 40 1c  	j	0x80211a52 <.LBB136_1624>
8020e892: 6f 30 20 1d  	j	0x80211a64 <.LBB136_1624+0x12>
;                             if (first_address == 0) {
8020e896: 09 a0        	j	0x8020e898 <.LBB136_1404+0x15f4>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020e898: 83 35 84 f9  	ld	a1, -104(s0)
8020e89c: 88 61        	ld	a0, 0(a1)
8020e89e: 05 46        	addi	a2, zero, 1
8020e8a0: 2a 16        	slli	a2, a2, 42
8020e8a2: 51 8d        	or	a0, a0, a2
8020e8a4: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020e8a6: 83 35 84 fc  	ld	a1, -56(s0)
8020e8aa: 13 85 15 00  	addi	a0, a1, 1
8020e8ae: 23 34 a4 86  	sd	a0, -1944(s0)
8020e8b2: 63 74 b5 00  	bgeu	a0, a1, 0x8020e8ba <.LBB136_1404+0x1616>
8020e8b6: 6f 30 80 25  	j	0x80211b0e <.LBB136_1628>
8020e8ba: 6f 30 60 26  	j	0x80211b20 <.LBB136_1628+0x12>
;                         if (!bit_set) {
8020e8be: 09 a0        	j	0x8020e8c0 <.LBB136_1404+0x161c>
;                     if (region_allocated_page_count == page_count) {
8020e8c0: 09 a0        	j	0x8020e8c2 <.LBB136_1404+0x161e>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020e8c2: 03 35 84 f9  	ld	a0, -104(s0)
8020e8c6: 08 61        	ld	a0, 0(a0)
8020e8c8: 2d 91        	srli	a0, a0, 43
8020e8ca: 05 89        	andi	a0, a0, 1
8020e8cc: a3 03 a4 ce  	sb	a0, -793(s0)
;                     if (region_allocated_page_count == page_count) {
8020e8d0: 03 35 84 fc  	ld	a0, -56(s0)
8020e8d4: 83 35 04 b5  	ld	a1, -1200(s0)
8020e8d8: 63 15 b5 00  	bne	a0, a1, 0x8020e8e2 <.LBB136_1404+0x163e>
8020e8dc: 09 a0        	j	0x8020e8de <.LBB136_1404+0x163a>
;                         break :bitset_loop;
8020e8de: 6f 00 d0 32  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020e8e2: 03 45 74 ce  	lbu	a0, -793(s0)
8020e8e6: 81 45        	mv	a1, zero
8020e8e8: 63 1c b5 04  	bne	a0, a1, 0x8020e940 <.LBB136_1404+0x169c>
8020e8ec: 09 a0        	j	0x8020e8ee <.LBB136_1404+0x164a>
;                             if (first_address == 0) {
8020e8ee: 03 35 84 fb  	ld	a0, -72(s0)
8020e8f2: 81 45        	mv	a1, zero
8020e8f4: 63 12 b5 02  	bne	a0, a1, 0x8020e918 <.LBB136_1404+0x1674>
8020e8f8: 09 a0        	j	0x8020e8fa <.LBB136_1404+0x1656>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020e8fa: 83 35 04 fc  	ld	a1, -64(s0)
8020e8fe: 7d 55        	addi	a0, zero, -1
8020e900: 19 81        	srli	a0, a0, 6
8020e902: 6d 8d        	and	a0, a0, a1
8020e904: 13 96 65 00  	slli	a2, a1, 6
8020e908: 23 30 c4 86  	sd	a2, -1952(s0)
8020e90c: 63 04 b5 00  	beq	a0, a1, 0x8020e914 <.LBB136_1404+0x1670>
8020e910: 6f 30 c0 21  	j	0x80211b2c <.LBB136_1629>
8020e914: 6f 30 a0 22  	j	0x80211b3e <.LBB136_1629+0x12>
;                             if (first_address == 0) {
8020e918: 09 a0        	j	0x8020e91a <.LBB136_1404+0x1676>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020e91a: 83 35 84 f9  	ld	a1, -104(s0)
8020e91e: 88 61        	ld	a0, 0(a1)
8020e920: 05 46        	addi	a2, zero, 1
8020e922: 2e 16        	slli	a2, a2, 43
8020e924: 51 8d        	or	a0, a0, a2
8020e926: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020e928: 83 35 84 fc  	ld	a1, -56(s0)
8020e92c: 13 85 15 00  	addi	a0, a1, 1
8020e930: 23 3c a4 84  	sd	a0, -1960(s0)
8020e934: 63 74 b5 00  	bgeu	a0, a1, 0x8020e93c <.LBB136_1404+0x1698>
8020e938: 6f 30 00 2b  	j	0x80211be8 <.LBB136_1633>
8020e93c: 6f 30 e0 2b  	j	0x80211bfa <.LBB136_1633+0x12>
;                         if (!bit_set) {
8020e940: 09 a0        	j	0x8020e942 <.LBB136_1404+0x169e>
;                     if (region_allocated_page_count == page_count) {
8020e942: 09 a0        	j	0x8020e944 <.LBB136_1404+0x16a0>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020e944: 03 35 84 f9  	ld	a0, -104(s0)
8020e948: 08 61        	ld	a0, 0(a0)
8020e94a: 31 91        	srli	a0, a0, 44
8020e94c: 05 89        	andi	a0, a0, 1
8020e94e: a3 0b a4 cc  	sb	a0, -809(s0)
;                     if (region_allocated_page_count == page_count) {
8020e952: 03 35 84 fc  	ld	a0, -56(s0)
8020e956: 83 35 04 b5  	ld	a1, -1200(s0)
8020e95a: 63 15 b5 00  	bne	a0, a1, 0x8020e964 <.LBB136_1404+0x16c0>
8020e95e: 09 a0        	j	0x8020e960 <.LBB136_1404+0x16bc>
;                         break :bitset_loop;
8020e960: 6f 00 b0 2a  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020e964: 03 45 74 cd  	lbu	a0, -809(s0)
8020e968: 81 45        	mv	a1, zero
8020e96a: 63 1c b5 04  	bne	a0, a1, 0x8020e9c2 <.LBB136_1404+0x171e>
8020e96e: 09 a0        	j	0x8020e970 <.LBB136_1404+0x16cc>
;                             if (first_address == 0) {
8020e970: 03 35 84 fb  	ld	a0, -72(s0)
8020e974: 81 45        	mv	a1, zero
8020e976: 63 12 b5 02  	bne	a0, a1, 0x8020e99a <.LBB136_1404+0x16f6>
8020e97a: 09 a0        	j	0x8020e97c <.LBB136_1404+0x16d8>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020e97c: 83 35 04 fc  	ld	a1, -64(s0)
8020e980: 7d 55        	addi	a0, zero, -1
8020e982: 19 81        	srli	a0, a0, 6
8020e984: 6d 8d        	and	a0, a0, a1
8020e986: 13 96 65 00  	slli	a2, a1, 6
8020e98a: 23 38 c4 84  	sd	a2, -1968(s0)
8020e98e: 63 04 b5 00  	beq	a0, a1, 0x8020e996 <.LBB136_1404+0x16f2>
8020e992: 6f 30 40 27  	j	0x80211c06 <.LBB136_1634>
8020e996: 6f 30 20 28  	j	0x80211c18 <.LBB136_1634+0x12>
;                             if (first_address == 0) {
8020e99a: 09 a0        	j	0x8020e99c <.LBB136_1404+0x16f8>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020e99c: 83 35 84 f9  	ld	a1, -104(s0)
8020e9a0: 88 61        	ld	a0, 0(a1)
8020e9a2: 05 46        	addi	a2, zero, 1
8020e9a4: 32 16        	slli	a2, a2, 44
8020e9a6: 51 8d        	or	a0, a0, a2
8020e9a8: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020e9aa: 83 35 84 fc  	ld	a1, -56(s0)
8020e9ae: 13 85 15 00  	addi	a0, a1, 1
8020e9b2: 23 34 a4 84  	sd	a0, -1976(s0)
8020e9b6: 63 74 b5 00  	bgeu	a0, a1, 0x8020e9be <.LBB136_1404+0x171a>
8020e9ba: 6f 30 80 30  	j	0x80211cc2 <.LBB136_1638>
8020e9be: 6f 30 60 31  	j	0x80211cd4 <.LBB136_1638+0x12>
;                         if (!bit_set) {
8020e9c2: 09 a0        	j	0x8020e9c4 <.LBB136_1404+0x1720>
;                     if (region_allocated_page_count == page_count) {
8020e9c4: 09 a0        	j	0x8020e9c6 <.LBB136_1404+0x1722>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020e9c6: 03 35 84 f9  	ld	a0, -104(s0)
8020e9ca: 08 61        	ld	a0, 0(a0)
8020e9cc: 35 91        	srli	a0, a0, 45
8020e9ce: 05 89        	andi	a0, a0, 1
8020e9d0: a3 03 a4 cc  	sb	a0, -825(s0)
;                     if (region_allocated_page_count == page_count) {
8020e9d4: 03 35 84 fc  	ld	a0, -56(s0)
8020e9d8: 83 35 04 b5  	ld	a1, -1200(s0)
8020e9dc: 63 15 b5 00  	bne	a0, a1, 0x8020e9e6 <.LBB136_1404+0x1742>
8020e9e0: 09 a0        	j	0x8020e9e2 <.LBB136_1404+0x173e>
;                         break :bitset_loop;
8020e9e2: 6f 00 90 22  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020e9e6: 03 45 74 cc  	lbu	a0, -825(s0)
8020e9ea: 81 45        	mv	a1, zero
8020e9ec: 63 1c b5 04  	bne	a0, a1, 0x8020ea44 <.LBB136_1404+0x17a0>
8020e9f0: 09 a0        	j	0x8020e9f2 <.LBB136_1404+0x174e>
;                             if (first_address == 0) {
8020e9f2: 03 35 84 fb  	ld	a0, -72(s0)
8020e9f6: 81 45        	mv	a1, zero
8020e9f8: 63 12 b5 02  	bne	a0, a1, 0x8020ea1c <.LBB136_1404+0x1778>
8020e9fc: 09 a0        	j	0x8020e9fe <.LBB136_1404+0x175a>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020e9fe: 83 35 04 fc  	ld	a1, -64(s0)
8020ea02: 7d 55        	addi	a0, zero, -1
8020ea04: 19 81        	srli	a0, a0, 6
8020ea06: 6d 8d        	and	a0, a0, a1
8020ea08: 13 96 65 00  	slli	a2, a1, 6
8020ea0c: 23 30 c4 84  	sd	a2, -1984(s0)
8020ea10: 63 04 b5 00  	beq	a0, a1, 0x8020ea18 <.LBB136_1404+0x1774>
8020ea14: 6f 30 c0 2c  	j	0x80211ce0 <.LBB136_1639>
8020ea18: 6f 30 a0 2d  	j	0x80211cf2 <.LBB136_1639+0x12>
;                             if (first_address == 0) {
8020ea1c: 09 a0        	j	0x8020ea1e <.LBB136_1404+0x177a>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020ea1e: 83 35 84 f9  	ld	a1, -104(s0)
8020ea22: 88 61        	ld	a0, 0(a1)
8020ea24: 05 46        	addi	a2, zero, 1
8020ea26: 36 16        	slli	a2, a2, 45
8020ea28: 51 8d        	or	a0, a0, a2
8020ea2a: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020ea2c: 83 35 84 fc  	ld	a1, -56(s0)
8020ea30: 13 85 15 00  	addi	a0, a1, 1
8020ea34: 23 3c a4 82  	sd	a0, -1992(s0)
8020ea38: 63 74 b5 00  	bgeu	a0, a1, 0x8020ea40 <.LBB136_1404+0x179c>
8020ea3c: 6f 30 00 36  	j	0x80211d9c <.LBB136_1643>
8020ea40: 6f 30 e0 36  	j	0x80211dae <.LBB136_1643+0x12>
;                         if (!bit_set) {
8020ea44: 09 a0        	j	0x8020ea46 <.LBB136_1404+0x17a2>
;                     if (region_allocated_page_count == page_count) {
8020ea46: 09 a0        	j	0x8020ea48 <.LBB136_1404+0x17a4>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020ea48: 03 35 84 f9  	ld	a0, -104(s0)
8020ea4c: 08 61        	ld	a0, 0(a0)
8020ea4e: 39 91        	srli	a0, a0, 46
8020ea50: 05 89        	andi	a0, a0, 1
8020ea52: a3 0b a4 ca  	sb	a0, -841(s0)
;                     if (region_allocated_page_count == page_count) {
8020ea56: 03 35 84 fc  	ld	a0, -56(s0)
8020ea5a: 83 35 04 b5  	ld	a1, -1200(s0)
8020ea5e: 63 15 b5 00  	bne	a0, a1, 0x8020ea68 <.LBB136_1404+0x17c4>
8020ea62: 09 a0        	j	0x8020ea64 <.LBB136_1404+0x17c0>
;                         break :bitset_loop;
8020ea64: 6f 00 70 1a  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020ea68: 03 45 74 cb  	lbu	a0, -841(s0)
8020ea6c: 81 45        	mv	a1, zero
8020ea6e: 63 1c b5 04  	bne	a0, a1, 0x8020eac6 <.LBB136_1404+0x1822>
8020ea72: 09 a0        	j	0x8020ea74 <.LBB136_1404+0x17d0>
;                             if (first_address == 0) {
8020ea74: 03 35 84 fb  	ld	a0, -72(s0)
8020ea78: 81 45        	mv	a1, zero
8020ea7a: 63 12 b5 02  	bne	a0, a1, 0x8020ea9e <.LBB136_1404+0x17fa>
8020ea7e: 09 a0        	j	0x8020ea80 <.LBB136_1404+0x17dc>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020ea80: 83 35 04 fc  	ld	a1, -64(s0)
8020ea84: 7d 55        	addi	a0, zero, -1
8020ea86: 19 81        	srli	a0, a0, 6
8020ea88: 6d 8d        	and	a0, a0, a1
8020ea8a: 13 96 65 00  	slli	a2, a1, 6
8020ea8e: 23 38 c4 82  	sd	a2, -2000(s0)
8020ea92: 63 04 b5 00  	beq	a0, a1, 0x8020ea9a <.LBB136_1404+0x17f6>
8020ea96: 6f 30 40 32  	j	0x80211dba <.LBB136_1644>
8020ea9a: 6f 30 20 33  	j	0x80211dcc <.LBB136_1644+0x12>
;                             if (first_address == 0) {
8020ea9e: 09 a0        	j	0x8020eaa0 <.LBB136_1404+0x17fc>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020eaa0: 83 35 84 f9  	ld	a1, -104(s0)
8020eaa4: 88 61        	ld	a0, 0(a1)
8020eaa6: 05 46        	addi	a2, zero, 1
8020eaa8: 3a 16        	slli	a2, a2, 46
8020eaaa: 51 8d        	or	a0, a0, a2
8020eaac: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020eaae: 83 35 84 fc  	ld	a1, -56(s0)
8020eab2: 13 85 15 00  	addi	a0, a1, 1
8020eab6: 23 34 a4 82  	sd	a0, -2008(s0)
8020eaba: 63 74 b5 00  	bgeu	a0, a1, 0x8020eac2 <.LBB136_1404+0x181e>
8020eabe: 6f 30 80 3b  	j	0x80211e76 <.LBB136_1648>
8020eac2: 6f 30 60 3c  	j	0x80211e88 <.LBB136_1648+0x12>
;                         if (!bit_set) {
8020eac6: 09 a0        	j	0x8020eac8 <.LBB136_1404+0x1824>
;                     if (region_allocated_page_count == page_count) {
8020eac8: 09 a0        	j	0x8020eaca <.LBB136_1404+0x1826>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020eaca: 03 35 84 f9  	ld	a0, -104(s0)
8020eace: 08 61        	ld	a0, 0(a0)
8020ead0: 3d 91        	srli	a0, a0, 47
8020ead2: 05 89        	andi	a0, a0, 1
8020ead4: a3 03 a4 ca  	sb	a0, -857(s0)
;                     if (region_allocated_page_count == page_count) {
8020ead8: 03 35 84 fc  	ld	a0, -56(s0)
8020eadc: 83 35 04 b5  	ld	a1, -1200(s0)
8020eae0: 63 15 b5 00  	bne	a0, a1, 0x8020eaea <.LBB136_1404+0x1846>
8020eae4: 09 a0        	j	0x8020eae6 <.LBB136_1404+0x1842>
;                         break :bitset_loop;
8020eae6: 6f 00 50 12  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020eaea: 03 45 74 ca  	lbu	a0, -857(s0)
8020eaee: 81 45        	mv	a1, zero
8020eaf0: 63 1c b5 04  	bne	a0, a1, 0x8020eb48 <.LBB136_1404+0x18a4>
8020eaf4: 09 a0        	j	0x8020eaf6 <.LBB136_1404+0x1852>
;                             if (first_address == 0) {
8020eaf6: 03 35 84 fb  	ld	a0, -72(s0)
8020eafa: 81 45        	mv	a1, zero
8020eafc: 63 12 b5 02  	bne	a0, a1, 0x8020eb20 <.LBB136_1404+0x187c>
8020eb00: 09 a0        	j	0x8020eb02 <.LBB136_1404+0x185e>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020eb02: 83 35 04 fc  	ld	a1, -64(s0)
8020eb06: 7d 55        	addi	a0, zero, -1
8020eb08: 19 81        	srli	a0, a0, 6
8020eb0a: 6d 8d        	and	a0, a0, a1
8020eb0c: 13 96 65 00  	slli	a2, a1, 6
8020eb10: 23 30 c4 82  	sd	a2, -2016(s0)
8020eb14: 63 04 b5 00  	beq	a0, a1, 0x8020eb1c <.LBB136_1404+0x1878>
8020eb18: 6f 30 c0 37  	j	0x80211e94 <.LBB136_1649>
8020eb1c: 6f 30 a0 38  	j	0x80211ea6 <.LBB136_1649+0x12>
;                             if (first_address == 0) {
8020eb20: 09 a0        	j	0x8020eb22 <.LBB136_1404+0x187e>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020eb22: 83 35 84 f9  	ld	a1, -104(s0)
8020eb26: 88 61        	ld	a0, 0(a1)
8020eb28: 05 46        	addi	a2, zero, 1
8020eb2a: 3e 16        	slli	a2, a2, 47
8020eb2c: 51 8d        	or	a0, a0, a2
8020eb2e: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020eb30: 83 35 84 fc  	ld	a1, -56(s0)
8020eb34: 13 85 15 00  	addi	a0, a1, 1
8020eb38: 23 3c a4 80  	sd	a0, -2024(s0)
8020eb3c: 63 74 b5 00  	bgeu	a0, a1, 0x8020eb44 <.LBB136_1404+0x18a0>
8020eb40: 6f 30 00 41  	j	0x80211f50 <.LBB136_1653>
8020eb44: 6f 30 e0 41  	j	0x80211f62 <.LBB136_1653+0x12>
;                         if (!bit_set) {
8020eb48: 09 a0        	j	0x8020eb4a <.LBB136_1404+0x18a6>
;                     if (region_allocated_page_count == page_count) {
8020eb4a: 09 a0        	j	0x8020eb4c <.LBB136_1404+0x18a8>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020eb4c: 03 35 84 f9  	ld	a0, -104(s0)
8020eb50: 03 55 65 00  	lhu	a0, 6(a0)
8020eb54: 05 89        	andi	a0, a0, 1
8020eb56: a3 0b a4 c8  	sb	a0, -873(s0)
;                     if (region_allocated_page_count == page_count) {
8020eb5a: 03 35 84 fc  	ld	a0, -56(s0)
8020eb5e: 83 35 04 b5  	ld	a1, -1200(s0)
8020eb62: 63 15 b5 00  	bne	a0, a1, 0x8020eb6c <.LBB136_1404+0x18c8>
8020eb66: 09 a0        	j	0x8020eb68 <.LBB136_1404+0x18c4>
;                         break :bitset_loop;
8020eb68: 6f 00 30 0a  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020eb6c: 03 45 74 c9  	lbu	a0, -873(s0)
8020eb70: 81 45        	mv	a1, zero
8020eb72: 63 1c b5 04  	bne	a0, a1, 0x8020ebca <.LBB136_1404+0x1926>
8020eb76: 09 a0        	j	0x8020eb78 <.LBB136_1404+0x18d4>
;                             if (first_address == 0) {
8020eb78: 03 35 84 fb  	ld	a0, -72(s0)
8020eb7c: 81 45        	mv	a1, zero
8020eb7e: 63 12 b5 02  	bne	a0, a1, 0x8020eba2 <.LBB136_1404+0x18fe>
8020eb82: 09 a0        	j	0x8020eb84 <.LBB136_1404+0x18e0>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020eb84: 83 35 04 fc  	ld	a1, -64(s0)
8020eb88: 7d 55        	addi	a0, zero, -1
8020eb8a: 19 81        	srli	a0, a0, 6
8020eb8c: 6d 8d        	and	a0, a0, a1
8020eb8e: 13 96 65 00  	slli	a2, a1, 6
8020eb92: 23 38 c4 80  	sd	a2, -2032(s0)
8020eb96: 63 04 b5 00  	beq	a0, a1, 0x8020eb9e <.LBB136_1404+0x18fa>
8020eb9a: 6f 30 40 3d  	j	0x80211f6e <.LBB136_1654>
8020eb9e: 6f 30 20 3e  	j	0x80211f80 <.LBB136_1654+0x12>
;                             if (first_address == 0) {
8020eba2: 09 a0        	j	0x8020eba4 <.LBB136_1404+0x1900>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020eba4: 83 35 84 f9  	ld	a1, -104(s0)
8020eba8: 88 61        	ld	a0, 0(a1)
8020ebaa: 05 46        	addi	a2, zero, 1
8020ebac: 42 16        	slli	a2, a2, 48
8020ebae: 51 8d        	or	a0, a0, a2
8020ebb0: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020ebb2: 83 35 84 fc  	ld	a1, -56(s0)
8020ebb6: 13 85 15 00  	addi	a0, a1, 1
8020ebba: 23 34 a4 80  	sd	a0, -2040(s0)
8020ebbe: 63 74 b5 00  	bgeu	a0, a1, 0x8020ebc6 <.LBB136_1404+0x1922>
8020ebc2: 6f 30 80 46  	j	0x8021202a <.LBB136_1658>
8020ebc6: 6f 30 60 47  	j	0x8021203c <.LBB136_1658+0x12>
;                         if (!bit_set) {
8020ebca: 09 a0        	j	0x8020ebcc <.LBB136_1404+0x1928>
;                     if (region_allocated_page_count == page_count) {
8020ebcc: 09 a0        	j	0x8020ebce <.LBB136_1404+0x192a>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020ebce: 03 35 84 f9  	ld	a0, -104(s0)
8020ebd2: 08 61        	ld	a0, 0(a0)
8020ebd4: 45 91        	srli	a0, a0, 49
8020ebd6: 05 89        	andi	a0, a0, 1
8020ebd8: a3 03 a4 c8  	sb	a0, -889(s0)
;                     if (region_allocated_page_count == page_count) {
8020ebdc: 03 35 84 fc  	ld	a0, -56(s0)
8020ebe0: 83 35 04 b5  	ld	a1, -1200(s0)
8020ebe4: 63 15 b5 00  	bne	a0, a1, 0x8020ebee <.LBB136_1404+0x194a>
8020ebe8: 09 a0        	j	0x8020ebea <.LBB136_1404+0x1946>
;                         break :bitset_loop;
8020ebea: 6f 00 10 02  	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020ebee: 03 45 74 c8  	lbu	a0, -889(s0)
8020ebf2: 81 45        	mv	a1, zero
8020ebf4: 63 1f b5 04  	bne	a0, a1, 0x8020ec52 <.LBB136_1404+0x19ae>
8020ebf8: 09 a0        	j	0x8020ebfa <.LBB136_1404+0x1956>
;                             if (first_address == 0) {
8020ebfa: 03 35 84 fb  	ld	a0, -72(s0)
8020ebfe: 81 45        	mv	a1, zero
8020ec00: 63 12 b5 02  	bne	a0, a1, 0x8020ec24 <.LBB136_1404+0x1980>
8020ec04: 09 a0        	j	0x8020ec06 <.LBB136_1404+0x1962>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020ec06: 83 35 04 fc  	ld	a1, -64(s0)
8020ec0a: 7d 55        	addi	a0, zero, -1
8020ec0c: 19 81        	srli	a0, a0, 6
8020ec0e: 6d 8d        	and	a0, a0, a1
8020ec10: 13 96 65 00  	slli	a2, a1, 6
8020ec14: 23 30 c4 80  	sd	a2, -2048(s0)
8020ec18: 63 04 b5 00  	beq	a0, a1, 0x8020ec20 <.LBB136_1404+0x197c>
8020ec1c: 6f 30 c0 42  	j	0x80212048 <.LBB136_1659>
8020ec20: 6f 30 a0 43  	j	0x8021205a <.LBB136_1659+0x12>
;                             if (first_address == 0) {
8020ec24: 09 a0        	j	0x8020ec26 <.LBB136_1404+0x1982>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020ec26: 83 35 84 f9  	ld	a1, -104(s0)
8020ec2a: 88 61        	ld	a0, 0(a1)
8020ec2c: 05 46        	addi	a2, zero, 1
8020ec2e: 46 16        	slli	a2, a2, 49
8020ec30: 51 8d        	or	a0, a0, a2
8020ec32: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020ec34: 83 35 84 fc  	ld	a1, -56(s0)
8020ec38: 13 85 15 00  	addi	a0, a1, 1
8020ec3c: 7d 76        	lui	a2, 1048575
8020ec3e: 1b 06 86 7f  	addiw	a2, a2, 2040
8020ec42: 22 96        	add	a2, a2, s0
8020ec44: 08 e2        	sd	a0, 0(a2)
8020ec46: 63 74 b5 00  	bgeu	a0, a1, 0x8020ec4e <.LBB136_1404+0x19aa>
8020ec4a: 6f 30 a0 4b  	j	0x80212104 <.LBB136_1663>
8020ec4e: 6f 30 80 4c  	j	0x80212116 <.LBB136_1663+0x12>
;                         if (!bit_set) {
8020ec52: 09 a0        	j	0x8020ec54 <.LBB136_1404+0x19b0>
;                     if (region_allocated_page_count == page_count) {
8020ec54: 09 a0        	j	0x8020ec56 <.LBB136_1404+0x19b2>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020ec56: 03 35 84 f9  	ld	a0, -104(s0)
8020ec5a: 08 61        	ld	a0, 0(a0)
8020ec5c: 49 91        	srli	a0, a0, 50
8020ec5e: 05 89        	andi	a0, a0, 1
8020ec60: a3 0b a4 c6  	sb	a0, -905(s0)
;                     if (region_allocated_page_count == page_count) {
8020ec64: 03 35 84 fc  	ld	a0, -56(s0)
8020ec68: 83 35 04 b5  	ld	a1, -1200(s0)
8020ec6c: 63 14 b5 00  	bne	a0, a1, 0x8020ec74 <.LBB136_1404+0x19d0>
8020ec70: 09 a0        	j	0x8020ec72 <.LBB136_1404+0x19ce>
;                         break :bitset_loop;
8020ec72: 61 af        	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020ec74: 03 45 74 c7  	lbu	a0, -905(s0)
8020ec78: 81 45        	mv	a1, zero
8020ec7a: 63 12 b5 06  	bne	a0, a1, 0x8020ecde <.LBB136_1404+0x1a3a>
8020ec7e: 09 a0        	j	0x8020ec80 <.LBB136_1404+0x19dc>
;                             if (first_address == 0) {
8020ec80: 03 35 84 fb  	ld	a0, -72(s0)
8020ec84: 81 45        	mv	a1, zero
8020ec86: 63 15 b5 02  	bne	a0, a1, 0x8020ecb0 <.LBB136_1404+0x1a0c>
8020ec8a: 09 a0        	j	0x8020ec8c <.LBB136_1404+0x19e8>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020ec8c: 83 35 04 fc  	ld	a1, -64(s0)
8020ec90: 7d 55        	addi	a0, zero, -1
8020ec92: 19 81        	srli	a0, a0, 6
8020ec94: 6d 8d        	and	a0, a0, a1
8020ec96: 13 96 65 00  	slli	a2, a1, 6
8020ec9a: fd 76        	lui	a3, 1048575
8020ec9c: 9b 86 06 7f  	addiw	a3, a3, 2032
8020eca0: a2 96        	add	a3, a3, s0
8020eca2: 90 e2        	sd	a2, 0(a3)
8020eca4: 63 04 b5 00  	beq	a0, a1, 0x8020ecac <.LBB136_1404+0x1a08>
8020eca8: 6f 30 00 48  	j	0x80212128 <.LBB136_1664>
8020ecac: 6f 30 e0 48  	j	0x8021213a <.LBB136_1664+0x12>
;                             if (first_address == 0) {
8020ecb0: 09 a0        	j	0x8020ecb2 <.LBB136_1404+0x1a0e>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020ecb2: 83 35 84 f9  	ld	a1, -104(s0)
8020ecb6: 88 61        	ld	a0, 0(a1)
8020ecb8: 05 46        	addi	a2, zero, 1
8020ecba: 4a 16        	slli	a2, a2, 50
8020ecbc: 51 8d        	or	a0, a0, a2
8020ecbe: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020ecc0: 83 35 84 fc  	ld	a1, -56(s0)
8020ecc4: 13 85 15 00  	addi	a0, a1, 1
8020ecc8: 7d 76        	lui	a2, 1048575
8020ecca: 1b 06 86 7e  	addiw	a2, a2, 2024
8020ecce: 22 96        	add	a2, a2, s0
8020ecd0: 08 e2        	sd	a0, 0(a2)
8020ecd2: 63 74 b5 00  	bgeu	a0, a1, 0x8020ecda <.LBB136_1404+0x1a36>
8020ecd6: 6f 30 40 51  	j	0x802121ea <.LBB136_1668>
8020ecda: 6f 30 20 52  	j	0x802121fc <.LBB136_1668+0x12>
;                         if (!bit_set) {
8020ecde: 09 a0        	j	0x8020ece0 <.LBB136_1404+0x1a3c>
;                     if (region_allocated_page_count == page_count) {
8020ece0: 09 a0        	j	0x8020ece2 <.LBB136_1404+0x1a3e>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020ece2: 03 35 84 f9  	ld	a0, -104(s0)
8020ece6: 08 61        	ld	a0, 0(a0)
8020ece8: 4d 91        	srli	a0, a0, 51
8020ecea: 05 89        	andi	a0, a0, 1
8020ecec: a3 03 a4 c6  	sb	a0, -921(s0)
;                     if (region_allocated_page_count == page_count) {
8020ecf0: 03 35 84 fc  	ld	a0, -56(s0)
8020ecf4: 83 35 04 b5  	ld	a1, -1200(s0)
8020ecf8: 63 14 b5 00  	bne	a0, a1, 0x8020ed00 <.LBB136_1404+0x1a5c>
8020ecfc: 09 a0        	j	0x8020ecfe <.LBB136_1404+0x1a5a>
;                         break :bitset_loop;
8020ecfe: 31 a7        	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020ed00: 03 45 74 c6  	lbu	a0, -921(s0)
8020ed04: 81 45        	mv	a1, zero
8020ed06: 63 12 b5 06  	bne	a0, a1, 0x8020ed6a <.LBB136_1404+0x1ac6>
8020ed0a: 09 a0        	j	0x8020ed0c <.LBB136_1404+0x1a68>
;                             if (first_address == 0) {
8020ed0c: 03 35 84 fb  	ld	a0, -72(s0)
8020ed10: 81 45        	mv	a1, zero
8020ed12: 63 15 b5 02  	bne	a0, a1, 0x8020ed3c <.LBB136_1404+0x1a98>
8020ed16: 09 a0        	j	0x8020ed18 <.LBB136_1404+0x1a74>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020ed18: 83 35 04 fc  	ld	a1, -64(s0)
8020ed1c: 7d 55        	addi	a0, zero, -1
8020ed1e: 19 81        	srli	a0, a0, 6
8020ed20: 6d 8d        	and	a0, a0, a1
8020ed22: 13 96 65 00  	slli	a2, a1, 6
8020ed26: fd 76        	lui	a3, 1048575
8020ed28: 9b 86 06 7e  	addiw	a3, a3, 2016
8020ed2c: a2 96        	add	a3, a3, s0
8020ed2e: 90 e2        	sd	a2, 0(a3)
8020ed30: 63 04 b5 00  	beq	a0, a1, 0x8020ed38 <.LBB136_1404+0x1a94>
8020ed34: 6f 30 a0 4d  	j	0x8021220e <.LBB136_1669>
8020ed38: 6f 30 80 4e  	j	0x80212220 <.LBB136_1669+0x12>
;                             if (first_address == 0) {
8020ed3c: 09 a0        	j	0x8020ed3e <.LBB136_1404+0x1a9a>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020ed3e: 83 35 84 f9  	ld	a1, -104(s0)
8020ed42: 88 61        	ld	a0, 0(a1)
8020ed44: 05 46        	addi	a2, zero, 1
8020ed46: 4e 16        	slli	a2, a2, 51
8020ed48: 51 8d        	or	a0, a0, a2
8020ed4a: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020ed4c: 83 35 84 fc  	ld	a1, -56(s0)
8020ed50: 13 85 15 00  	addi	a0, a1, 1
8020ed54: 7d 76        	lui	a2, 1048575
8020ed56: 1b 06 86 7d  	addiw	a2, a2, 2008
8020ed5a: 22 96        	add	a2, a2, s0
8020ed5c: 08 e2        	sd	a0, 0(a2)
8020ed5e: 63 74 b5 00  	bgeu	a0, a1, 0x8020ed66 <.LBB136_1404+0x1ac2>
8020ed62: 6f 30 e0 56  	j	0x802122d0 <.LBB136_1673>
8020ed66: 6f 30 c0 57  	j	0x802122e2 <.LBB136_1673+0x12>
;                         if (!bit_set) {
8020ed6a: 09 a0        	j	0x8020ed6c <.LBB136_1404+0x1ac8>
;                     if (region_allocated_page_count == page_count) {
8020ed6c: 09 a0        	j	0x8020ed6e <.LBB136_1404+0x1aca>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020ed6e: 03 35 84 f9  	ld	a0, -104(s0)
8020ed72: 08 61        	ld	a0, 0(a0)
8020ed74: 51 91        	srli	a0, a0, 52
8020ed76: 05 89        	andi	a0, a0, 1
8020ed78: a3 0b a4 c4  	sb	a0, -937(s0)
;                     if (region_allocated_page_count == page_count) {
8020ed7c: 03 35 84 fc  	ld	a0, -56(s0)
8020ed80: 83 35 04 b5  	ld	a1, -1200(s0)
8020ed84: 63 14 b5 00  	bne	a0, a1, 0x8020ed8c <.LBB136_1404+0x1ae8>
8020ed88: 09 a0        	j	0x8020ed8a <.LBB136_1404+0x1ae6>
;                         break :bitset_loop;
8020ed8a: 41 a5        	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020ed8c: 03 45 74 c5  	lbu	a0, -937(s0)
8020ed90: 81 45        	mv	a1, zero
8020ed92: 63 12 b5 06  	bne	a0, a1, 0x8020edf6 <.LBB136_1404+0x1b52>
8020ed96: 09 a0        	j	0x8020ed98 <.LBB136_1404+0x1af4>
;                             if (first_address == 0) {
8020ed98: 03 35 84 fb  	ld	a0, -72(s0)
8020ed9c: 81 45        	mv	a1, zero
8020ed9e: 63 15 b5 02  	bne	a0, a1, 0x8020edc8 <.LBB136_1404+0x1b24>
8020eda2: 09 a0        	j	0x8020eda4 <.LBB136_1404+0x1b00>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020eda4: 83 35 04 fc  	ld	a1, -64(s0)
8020eda8: 7d 55        	addi	a0, zero, -1
8020edaa: 19 81        	srli	a0, a0, 6
8020edac: 6d 8d        	and	a0, a0, a1
8020edae: 13 96 65 00  	slli	a2, a1, 6
8020edb2: fd 76        	lui	a3, 1048575
8020edb4: 9b 86 06 7d  	addiw	a3, a3, 2000
8020edb8: a2 96        	add	a3, a3, s0
8020edba: 90 e2        	sd	a2, 0(a3)
8020edbc: 63 04 b5 00  	beq	a0, a1, 0x8020edc4 <.LBB136_1404+0x1b20>
8020edc0: 6f 30 40 53  	j	0x802122f4 <.LBB136_1674>
8020edc4: 6f 30 20 54  	j	0x80212306 <.LBB136_1674+0x12>
;                             if (first_address == 0) {
8020edc8: 09 a0        	j	0x8020edca <.LBB136_1404+0x1b26>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020edca: 83 35 84 f9  	ld	a1, -104(s0)
8020edce: 88 61        	ld	a0, 0(a1)
8020edd0: 05 46        	addi	a2, zero, 1
8020edd2: 52 16        	slli	a2, a2, 52
8020edd4: 51 8d        	or	a0, a0, a2
8020edd6: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020edd8: 83 35 84 fc  	ld	a1, -56(s0)
8020eddc: 13 85 15 00  	addi	a0, a1, 1
8020ede0: 7d 76        	lui	a2, 1048575
8020ede2: 1b 06 86 7c  	addiw	a2, a2, 1992
8020ede6: 22 96        	add	a2, a2, s0
8020ede8: 08 e2        	sd	a0, 0(a2)
8020edea: 63 74 b5 00  	bgeu	a0, a1, 0x8020edf2 <.LBB136_1404+0x1b4e>
8020edee: 6f 30 80 5c  	j	0x802123b6 <.LBB136_1678>
8020edf2: 6f 30 60 5d  	j	0x802123c8 <.LBB136_1678+0x12>
;                         if (!bit_set) {
8020edf6: 09 a0        	j	0x8020edf8 <.LBB136_1404+0x1b54>
;                     if (region_allocated_page_count == page_count) {
8020edf8: 09 a0        	j	0x8020edfa <.LBB136_1404+0x1b56>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020edfa: 03 35 84 f9  	ld	a0, -104(s0)
8020edfe: 08 61        	ld	a0, 0(a0)
8020ee00: 55 91        	srli	a0, a0, 53
8020ee02: 05 89        	andi	a0, a0, 1
8020ee04: a3 03 a4 c4  	sb	a0, -953(s0)
;                     if (region_allocated_page_count == page_count) {
8020ee08: 03 35 84 fc  	ld	a0, -56(s0)
8020ee0c: 83 35 04 b5  	ld	a1, -1200(s0)
8020ee10: 63 14 b5 00  	bne	a0, a1, 0x8020ee18 <.LBB136_1404+0x1b74>
8020ee14: 09 a0        	j	0x8020ee16 <.LBB136_1404+0x1b72>
;                         break :bitset_loop;
8020ee16: d5 ab        	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020ee18: 03 45 74 c4  	lbu	a0, -953(s0)
8020ee1c: 81 45        	mv	a1, zero
8020ee1e: 63 12 b5 06  	bne	a0, a1, 0x8020ee82 <.LBB136_1404+0x1bde>
8020ee22: 09 a0        	j	0x8020ee24 <.LBB136_1404+0x1b80>
;                             if (first_address == 0) {
8020ee24: 03 35 84 fb  	ld	a0, -72(s0)
8020ee28: 81 45        	mv	a1, zero
8020ee2a: 63 15 b5 02  	bne	a0, a1, 0x8020ee54 <.LBB136_1404+0x1bb0>
8020ee2e: 09 a0        	j	0x8020ee30 <.LBB136_1404+0x1b8c>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020ee30: 83 35 04 fc  	ld	a1, -64(s0)
8020ee34: 7d 55        	addi	a0, zero, -1
8020ee36: 19 81        	srli	a0, a0, 6
8020ee38: 6d 8d        	and	a0, a0, a1
8020ee3a: 13 96 65 00  	slli	a2, a1, 6
8020ee3e: fd 76        	lui	a3, 1048575
8020ee40: 9b 86 06 7c  	addiw	a3, a3, 1984
8020ee44: a2 96        	add	a3, a3, s0
8020ee46: 90 e2        	sd	a2, 0(a3)
8020ee48: 63 04 b5 00  	beq	a0, a1, 0x8020ee50 <.LBB136_1404+0x1bac>
8020ee4c: 6f 30 e0 58  	j	0x802123da <.LBB136_1679>
8020ee50: 6f 30 c0 59  	j	0x802123ec <.LBB136_1679+0x12>
;                             if (first_address == 0) {
8020ee54: 09 a0        	j	0x8020ee56 <.LBB136_1404+0x1bb2>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020ee56: 83 35 84 f9  	ld	a1, -104(s0)
8020ee5a: 88 61        	ld	a0, 0(a1)
8020ee5c: 05 46        	addi	a2, zero, 1
8020ee5e: 56 16        	slli	a2, a2, 53
8020ee60: 51 8d        	or	a0, a0, a2
8020ee62: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020ee64: 83 35 84 fc  	ld	a1, -56(s0)
8020ee68: 13 85 15 00  	addi	a0, a1, 1
8020ee6c: 7d 76        	lui	a2, 1048575
8020ee6e: 1b 06 86 7b  	addiw	a2, a2, 1976
8020ee72: 22 96        	add	a2, a2, s0
8020ee74: 08 e2        	sd	a0, 0(a2)
8020ee76: 63 74 b5 00  	bgeu	a0, a1, 0x8020ee7e <.LBB136_1404+0x1bda>
8020ee7a: 6f 30 20 62  	j	0x8021249c <.LBB136_1683>
8020ee7e: 6f 30 00 63  	j	0x802124ae <.LBB136_1683+0x12>
;                         if (!bit_set) {
8020ee82: 09 a0        	j	0x8020ee84 <.LBB136_1404+0x1be0>
;                     if (region_allocated_page_count == page_count) {
8020ee84: 09 a0        	j	0x8020ee86 <.LBB136_1404+0x1be2>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020ee86: 03 35 84 f9  	ld	a0, -104(s0)
8020ee8a: 08 61        	ld	a0, 0(a0)
8020ee8c: 59 91        	srli	a0, a0, 54
8020ee8e: 05 89        	andi	a0, a0, 1
8020ee90: a3 0b a4 c2  	sb	a0, -969(s0)
;                     if (region_allocated_page_count == page_count) {
8020ee94: 03 35 84 fc  	ld	a0, -56(s0)
8020ee98: 83 35 04 b5  	ld	a1, -1200(s0)
8020ee9c: 63 14 b5 00  	bne	a0, a1, 0x8020eea4 <.LBB136_1404+0x1c00>
8020eea0: 09 a0        	j	0x8020eea2 <.LBB136_1404+0x1bfe>
;                         break :bitset_loop;
8020eea2: a5 a3        	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020eea4: 03 45 74 c3  	lbu	a0, -969(s0)
8020eea8: 81 45        	mv	a1, zero
8020eeaa: 63 12 b5 06  	bne	a0, a1, 0x8020ef0e <.LBB136_1404+0x1c6a>
8020eeae: 09 a0        	j	0x8020eeb0 <.LBB136_1404+0x1c0c>
;                             if (first_address == 0) {
8020eeb0: 03 35 84 fb  	ld	a0, -72(s0)
8020eeb4: 81 45        	mv	a1, zero
8020eeb6: 63 15 b5 02  	bne	a0, a1, 0x8020eee0 <.LBB136_1404+0x1c3c>
8020eeba: 09 a0        	j	0x8020eebc <.LBB136_1404+0x1c18>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020eebc: 83 35 04 fc  	ld	a1, -64(s0)
8020eec0: 7d 55        	addi	a0, zero, -1
8020eec2: 19 81        	srli	a0, a0, 6
8020eec4: 6d 8d        	and	a0, a0, a1
8020eec6: 13 96 65 00  	slli	a2, a1, 6
8020eeca: fd 76        	lui	a3, 1048575
8020eecc: 9b 86 06 7b  	addiw	a3, a3, 1968
8020eed0: a2 96        	add	a3, a3, s0
8020eed2: 90 e2        	sd	a2, 0(a3)
8020eed4: 63 04 b5 00  	beq	a0, a1, 0x8020eedc <.LBB136_1404+0x1c38>
8020eed8: 6f 30 80 5e  	j	0x802124c0 <.LBB136_1684>
8020eedc: 6f 30 60 5f  	j	0x802124d2 <.LBB136_1684+0x12>
;                             if (first_address == 0) {
8020eee0: 09 a0        	j	0x8020eee2 <.LBB136_1404+0x1c3e>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020eee2: 83 35 84 f9  	ld	a1, -104(s0)
8020eee6: 88 61        	ld	a0, 0(a1)
8020eee8: 05 46        	addi	a2, zero, 1
8020eeea: 5a 16        	slli	a2, a2, 54
8020eeec: 51 8d        	or	a0, a0, a2
8020eeee: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020eef0: 83 35 84 fc  	ld	a1, -56(s0)
8020eef4: 13 85 15 00  	addi	a0, a1, 1
8020eef8: 7d 76        	lui	a2, 1048575
8020eefa: 1b 06 86 7a  	addiw	a2, a2, 1960
8020eefe: 22 96        	add	a2, a2, s0
8020ef00: 08 e2        	sd	a0, 0(a2)
8020ef02: 63 74 b5 00  	bgeu	a0, a1, 0x8020ef0a <.LBB136_1404+0x1c66>
8020ef06: 6f 30 c0 67  	j	0x80212582 <.LBB136_1688>
8020ef0a: 6f 30 a0 68  	j	0x80212594 <.LBB136_1688+0x12>
;                         if (!bit_set) {
8020ef0e: 09 a0        	j	0x8020ef10 <.LBB136_1404+0x1c6c>
;                     if (region_allocated_page_count == page_count) {
8020ef10: 09 a0        	j	0x8020ef12 <.LBB136_1404+0x1c6e>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020ef12: 03 35 84 f9  	ld	a0, -104(s0)
8020ef16: 08 61        	ld	a0, 0(a0)
8020ef18: 5d 91        	srli	a0, a0, 55
8020ef1a: 05 89        	andi	a0, a0, 1
8020ef1c: a3 03 a4 c2  	sb	a0, -985(s0)
;                     if (region_allocated_page_count == page_count) {
8020ef20: 03 35 84 fc  	ld	a0, -56(s0)
8020ef24: 83 35 04 b5  	ld	a1, -1200(s0)
8020ef28: 63 14 b5 00  	bne	a0, a1, 0x8020ef30 <.LBB136_1404+0x1c8c>
8020ef2c: 09 a0        	j	0x8020ef2e <.LBB136_1404+0x1c8a>
;                         break :bitset_loop;
8020ef2e: f1 a9        	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020ef30: 03 45 74 c2  	lbu	a0, -985(s0)
8020ef34: 81 45        	mv	a1, zero
8020ef36: 63 12 b5 06  	bne	a0, a1, 0x8020ef9a <.LBB136_1404+0x1cf6>
8020ef3a: 09 a0        	j	0x8020ef3c <.LBB136_1404+0x1c98>
;                             if (first_address == 0) {
8020ef3c: 03 35 84 fb  	ld	a0, -72(s0)
8020ef40: 81 45        	mv	a1, zero
8020ef42: 63 15 b5 02  	bne	a0, a1, 0x8020ef6c <.LBB136_1404+0x1cc8>
8020ef46: 09 a0        	j	0x8020ef48 <.LBB136_1404+0x1ca4>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020ef48: 83 35 04 fc  	ld	a1, -64(s0)
8020ef4c: 7d 55        	addi	a0, zero, -1
8020ef4e: 19 81        	srli	a0, a0, 6
8020ef50: 6d 8d        	and	a0, a0, a1
8020ef52: 13 96 65 00  	slli	a2, a1, 6
8020ef56: fd 76        	lui	a3, 1048575
8020ef58: 9b 86 06 7a  	addiw	a3, a3, 1952
8020ef5c: a2 96        	add	a3, a3, s0
8020ef5e: 90 e2        	sd	a2, 0(a3)
8020ef60: 63 04 b5 00  	beq	a0, a1, 0x8020ef68 <.LBB136_1404+0x1cc4>
8020ef64: 6f 30 20 64  	j	0x802125a6 <.LBB136_1689>
8020ef68: 6f 30 00 65  	j	0x802125b8 <.LBB136_1689+0x12>
;                             if (first_address == 0) {
8020ef6c: 09 a0        	j	0x8020ef6e <.LBB136_1404+0x1cca>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020ef6e: 83 35 84 f9  	ld	a1, -104(s0)
8020ef72: 88 61        	ld	a0, 0(a1)
8020ef74: 05 46        	addi	a2, zero, 1
8020ef76: 5e 16        	slli	a2, a2, 55
8020ef78: 51 8d        	or	a0, a0, a2
8020ef7a: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020ef7c: 83 35 84 fc  	ld	a1, -56(s0)
8020ef80: 13 85 15 00  	addi	a0, a1, 1
8020ef84: 7d 76        	lui	a2, 1048575
8020ef86: 1b 06 86 79  	addiw	a2, a2, 1944
8020ef8a: 22 96        	add	a2, a2, s0
8020ef8c: 08 e2        	sd	a0, 0(a2)
8020ef8e: 63 74 b5 00  	bgeu	a0, a1, 0x8020ef96 <.LBB136_1404+0x1cf2>
8020ef92: 6f 30 60 6d  	j	0x80212668 <.LBB136_1693>
8020ef96: 6f 30 40 6e  	j	0x8021267a <.LBB136_1693+0x12>
;                         if (!bit_set) {
8020ef9a: 09 a0        	j	0x8020ef9c <.LBB136_1404+0x1cf8>
;                     if (region_allocated_page_count == page_count) {
8020ef9c: 09 a0        	j	0x8020ef9e <.LBB136_1404+0x1cfa>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020ef9e: 03 35 84 f9  	ld	a0, -104(s0)
8020efa2: 03 45 75 00  	lbu	a0, 7(a0)
8020efa6: 05 89        	andi	a0, a0, 1
8020efa8: a3 0b a4 c0  	sb	a0, -1001(s0)
;                     if (region_allocated_page_count == page_count) {
8020efac: 03 35 84 fc  	ld	a0, -56(s0)
8020efb0: 83 35 04 b5  	ld	a1, -1200(s0)
8020efb4: 63 14 b5 00  	bne	a0, a1, 0x8020efbc <.LBB136_1404+0x1d18>
8020efb8: 09 a0        	j	0x8020efba <.LBB136_1404+0x1d16>
;                         break :bitset_loop;
8020efba: 81 a9        	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020efbc: 03 45 74 c1  	lbu	a0, -1001(s0)
8020efc0: 81 45        	mv	a1, zero
8020efc2: 63 12 b5 06  	bne	a0, a1, 0x8020f026 <.LBB136_1404+0x1d82>
8020efc6: 09 a0        	j	0x8020efc8 <.LBB136_1404+0x1d24>
;                             if (first_address == 0) {
8020efc8: 03 35 84 fb  	ld	a0, -72(s0)
8020efcc: 81 45        	mv	a1, zero
8020efce: 63 15 b5 02  	bne	a0, a1, 0x8020eff8 <.LBB136_1404+0x1d54>
8020efd2: 09 a0        	j	0x8020efd4 <.LBB136_1404+0x1d30>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020efd4: 83 35 04 fc  	ld	a1, -64(s0)
8020efd8: 7d 55        	addi	a0, zero, -1
8020efda: 19 81        	srli	a0, a0, 6
8020efdc: 6d 8d        	and	a0, a0, a1
8020efde: 13 96 65 00  	slli	a2, a1, 6
8020efe2: fd 76        	lui	a3, 1048575
8020efe4: 9b 86 06 79  	addiw	a3, a3, 1936
8020efe8: a2 96        	add	a3, a3, s0
8020efea: 90 e2        	sd	a2, 0(a3)
8020efec: 63 04 b5 00  	beq	a0, a1, 0x8020eff4 <.LBB136_1404+0x1d50>
8020eff0: 6f 30 c0 69  	j	0x8021268c <.LBB136_1694>
8020eff4: 6f 30 a0 6a  	j	0x8021269e <.LBB136_1694+0x12>
;                             if (first_address == 0) {
8020eff8: 09 a0        	j	0x8020effa <.LBB136_1404+0x1d56>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020effa: 83 35 84 f9  	ld	a1, -104(s0)
8020effe: 88 61        	ld	a0, 0(a1)
8020f000: 05 46        	addi	a2, zero, 1
8020f002: 62 16        	slli	a2, a2, 56
8020f004: 51 8d        	or	a0, a0, a2
8020f006: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020f008: 83 35 84 fc  	ld	a1, -56(s0)
8020f00c: 13 85 15 00  	addi	a0, a1, 1
8020f010: 7d 76        	lui	a2, 1048575
8020f012: 1b 06 86 78  	addiw	a2, a2, 1928
8020f016: 22 96        	add	a2, a2, s0
8020f018: 08 e2        	sd	a0, 0(a2)
8020f01a: 63 74 b5 00  	bgeu	a0, a1, 0x8020f022 <.LBB136_1404+0x1d7e>
8020f01e: 6f 30 00 73  	j	0x8021274e <.LBB136_1698>
8020f022: 6f 30 e0 73  	j	0x80212760 <.LBB136_1698+0x12>
;                         if (!bit_set) {
8020f026: 09 a0        	j	0x8020f028 <.LBB136_1404+0x1d84>
;                     if (region_allocated_page_count == page_count) {
8020f028: 09 a0        	j	0x8020f02a <.LBB136_1404+0x1d86>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020f02a: 03 35 84 f9  	ld	a0, -104(s0)
8020f02e: 08 61        	ld	a0, 0(a0)
8020f030: 65 91        	srli	a0, a0, 57
8020f032: 05 89        	andi	a0, a0, 1
8020f034: a3 03 a4 c0  	sb	a0, -1017(s0)
;                     if (region_allocated_page_count == page_count) {
8020f038: 03 35 84 fc  	ld	a0, -56(s0)
8020f03c: 83 35 04 b5  	ld	a1, -1200(s0)
8020f040: 63 14 b5 00  	bne	a0, a1, 0x8020f048 <.LBB136_1404+0x1da4>
8020f044: 09 a0        	j	0x8020f046 <.LBB136_1404+0x1da2>
;                         break :bitset_loop;
8020f046: d1 a6        	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020f048: 03 45 74 c0  	lbu	a0, -1017(s0)
8020f04c: 81 45        	mv	a1, zero
8020f04e: 63 12 b5 06  	bne	a0, a1, 0x8020f0b2 <.LBB136_1404+0x1e0e>
8020f052: 09 a0        	j	0x8020f054 <.LBB136_1404+0x1db0>
;                             if (first_address == 0) {
8020f054: 03 35 84 fb  	ld	a0, -72(s0)
8020f058: 81 45        	mv	a1, zero
8020f05a: 63 15 b5 02  	bne	a0, a1, 0x8020f084 <.LBB136_1404+0x1de0>
8020f05e: 09 a0        	j	0x8020f060 <.LBB136_1404+0x1dbc>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020f060: 83 35 04 fc  	ld	a1, -64(s0)
8020f064: 7d 55        	addi	a0, zero, -1
8020f066: 19 81        	srli	a0, a0, 6
8020f068: 6d 8d        	and	a0, a0, a1
8020f06a: 13 96 65 00  	slli	a2, a1, 6
8020f06e: fd 76        	lui	a3, 1048575
8020f070: 9b 86 06 78  	addiw	a3, a3, 1920
8020f074: a2 96        	add	a3, a3, s0
8020f076: 90 e2        	sd	a2, 0(a3)
8020f078: 63 04 b5 00  	beq	a0, a1, 0x8020f080 <.LBB136_1404+0x1ddc>
8020f07c: 6f 30 60 6f  	j	0x80212772 <.LBB136_1699>
8020f080: 6f 30 40 70  	j	0x80212784 <.LBB136_1699+0x12>
;                             if (first_address == 0) {
8020f084: 09 a0        	j	0x8020f086 <.LBB136_1404+0x1de2>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020f086: 83 35 84 f9  	ld	a1, -104(s0)
8020f08a: 88 61        	ld	a0, 0(a1)
8020f08c: 05 46        	addi	a2, zero, 1
8020f08e: 66 16        	slli	a2, a2, 57
8020f090: 51 8d        	or	a0, a0, a2
8020f092: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020f094: 83 35 84 fc  	ld	a1, -56(s0)
8020f098: 13 85 15 00  	addi	a0, a1, 1
8020f09c: 7d 76        	lui	a2, 1048575
8020f09e: 1b 06 86 77  	addiw	a2, a2, 1912
8020f0a2: 22 96        	add	a2, a2, s0
8020f0a4: 08 e2        	sd	a0, 0(a2)
8020f0a6: 63 74 b5 00  	bgeu	a0, a1, 0x8020f0ae <.LBB136_1404+0x1e0a>
8020f0aa: 6f 30 a0 78  	j	0x80212834 <.LBB136_1703>
8020f0ae: 6f 30 80 79  	j	0x80212846 <.LBB136_1703+0x12>
;                         if (!bit_set) {
8020f0b2: 09 a0        	j	0x8020f0b4 <.LBB136_1404+0x1e10>
;                     if (region_allocated_page_count == page_count) {
8020f0b4: 09 a0        	j	0x8020f0b6 <.LBB136_1404+0x1e12>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020f0b6: 03 35 84 f9  	ld	a0, -104(s0)
8020f0ba: 08 61        	ld	a0, 0(a0)
8020f0bc: 69 91        	srli	a0, a0, 58
8020f0be: 05 89        	andi	a0, a0, 1
8020f0c0: a3 0b a4 be  	sb	a0, -1033(s0)
;                     if (region_allocated_page_count == page_count) {
8020f0c4: 03 35 84 fc  	ld	a0, -56(s0)
8020f0c8: 83 35 04 b5  	ld	a1, -1200(s0)
8020f0cc: 63 14 b5 00  	bne	a0, a1, 0x8020f0d4 <.LBB136_1404+0x1e30>
8020f0d0: 09 a0        	j	0x8020f0d2 <.LBB136_1404+0x1e2e>
;                         break :bitset_loop;
8020f0d2: 25 ae        	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020f0d4: 03 45 74 bf  	lbu	a0, -1033(s0)
8020f0d8: 81 45        	mv	a1, zero
8020f0da: 63 12 b5 06  	bne	a0, a1, 0x8020f13e <.LBB136_1404+0x1e9a>
8020f0de: 09 a0        	j	0x8020f0e0 <.LBB136_1404+0x1e3c>
;                             if (first_address == 0) {
8020f0e0: 03 35 84 fb  	ld	a0, -72(s0)
8020f0e4: 81 45        	mv	a1, zero
8020f0e6: 63 15 b5 02  	bne	a0, a1, 0x8020f110 <.LBB136_1404+0x1e6c>
8020f0ea: 09 a0        	j	0x8020f0ec <.LBB136_1404+0x1e48>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020f0ec: 83 35 04 fc  	ld	a1, -64(s0)
8020f0f0: 7d 55        	addi	a0, zero, -1
8020f0f2: 19 81        	srli	a0, a0, 6
8020f0f4: 6d 8d        	and	a0, a0, a1
8020f0f6: 13 96 65 00  	slli	a2, a1, 6
8020f0fa: fd 76        	lui	a3, 1048575
8020f0fc: 9b 86 06 77  	addiw	a3, a3, 1904
8020f100: a2 96        	add	a3, a3, s0
8020f102: 90 e2        	sd	a2, 0(a3)
8020f104: 63 04 b5 00  	beq	a0, a1, 0x8020f10c <.LBB136_1404+0x1e68>
8020f108: 6f 30 00 75  	j	0x80212858 <.LBB136_1704>
8020f10c: 6f 30 e0 75  	j	0x8021286a <.LBB136_1704+0x12>
;                             if (first_address == 0) {
8020f110: 09 a0        	j	0x8020f112 <.LBB136_1404+0x1e6e>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020f112: 83 35 84 f9  	ld	a1, -104(s0)
8020f116: 88 61        	ld	a0, 0(a1)
8020f118: 05 46        	addi	a2, zero, 1
8020f11a: 6a 16        	slli	a2, a2, 58
8020f11c: 51 8d        	or	a0, a0, a2
8020f11e: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020f120: 83 35 84 fc  	ld	a1, -56(s0)
8020f124: 13 85 15 00  	addi	a0, a1, 1
8020f128: 7d 76        	lui	a2, 1048575
8020f12a: 1b 06 86 76  	addiw	a2, a2, 1896
8020f12e: 22 96        	add	a2, a2, s0
8020f130: 08 e2        	sd	a0, 0(a2)
8020f132: 63 74 b5 00  	bgeu	a0, a1, 0x8020f13a <.LBB136_1404+0x1e96>
8020f136: 6f 30 40 7e  	j	0x8021291a <.LBB136_1708>
8020f13a: 6f 30 20 7f  	j	0x8021292c <.LBB136_1708+0x12>
;                         if (!bit_set) {
8020f13e: 09 a0        	j	0x8020f140 <.LBB136_1404+0x1e9c>
;                     if (region_allocated_page_count == page_count) {
8020f140: 09 a0        	j	0x8020f142 <.LBB136_1404+0x1e9e>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020f142: 03 35 84 f9  	ld	a0, -104(s0)
8020f146: 08 61        	ld	a0, 0(a0)
8020f148: 6d 91        	srli	a0, a0, 59
8020f14a: 05 89        	andi	a0, a0, 1
8020f14c: a3 03 a4 be  	sb	a0, -1049(s0)
;                     if (region_allocated_page_count == page_count) {
8020f150: 03 35 84 fc  	ld	a0, -56(s0)
8020f154: 83 35 04 b5  	ld	a1, -1200(s0)
8020f158: 63 14 b5 00  	bne	a0, a1, 0x8020f160 <.LBB136_1404+0x1ebc>
8020f15c: 09 a0        	j	0x8020f15e <.LBB136_1404+0x1eba>
;                         break :bitset_loop;
8020f15e: 75 a4        	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020f160: 03 45 74 be  	lbu	a0, -1049(s0)
8020f164: 81 45        	mv	a1, zero
8020f166: 63 12 b5 06  	bne	a0, a1, 0x8020f1ca <.LBB136_1404+0x1f26>
8020f16a: 09 a0        	j	0x8020f16c <.LBB136_1404+0x1ec8>
;                             if (first_address == 0) {
8020f16c: 03 35 84 fb  	ld	a0, -72(s0)
8020f170: 81 45        	mv	a1, zero
8020f172: 63 15 b5 02  	bne	a0, a1, 0x8020f19c <.LBB136_1404+0x1ef8>
8020f176: 09 a0        	j	0x8020f178 <.LBB136_1404+0x1ed4>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020f178: 83 35 04 fc  	ld	a1, -64(s0)
8020f17c: 7d 55        	addi	a0, zero, -1
8020f17e: 19 81        	srli	a0, a0, 6
8020f180: 6d 8d        	and	a0, a0, a1
8020f182: 13 96 65 00  	slli	a2, a1, 6
8020f186: fd 76        	lui	a3, 1048575
8020f188: 9b 86 06 76  	addiw	a3, a3, 1888
8020f18c: a2 96        	add	a3, a3, s0
8020f18e: 90 e2        	sd	a2, 0(a3)
8020f190: 63 04 b5 00  	beq	a0, a1, 0x8020f198 <.LBB136_1404+0x1ef4>
8020f194: 6f 30 a0 7a  	j	0x8021293e <.LBB136_1709>
8020f198: 6f 30 80 7b  	j	0x80212950 <.LBB136_1709+0x12>
;                             if (first_address == 0) {
8020f19c: 09 a0        	j	0x8020f19e <.LBB136_1404+0x1efa>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020f19e: 83 35 84 f9  	ld	a1, -104(s0)
8020f1a2: 88 61        	ld	a0, 0(a1)
8020f1a4: 05 46        	addi	a2, zero, 1
8020f1a6: 6e 16        	slli	a2, a2, 59
8020f1a8: 51 8d        	or	a0, a0, a2
8020f1aa: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020f1ac: 83 35 84 fc  	ld	a1, -56(s0)
8020f1b0: 13 85 15 00  	addi	a0, a1, 1
8020f1b4: 7d 76        	lui	a2, 1048575
8020f1b6: 1b 06 86 75  	addiw	a2, a2, 1880
8020f1ba: 22 96        	add	a2, a2, s0
8020f1bc: 08 e2        	sd	a0, 0(a2)
8020f1be: 63 74 b5 00  	bgeu	a0, a1, 0x8020f1c6 <.LBB136_1404+0x1f22>
8020f1c2: 6f 30 f0 03  	j	0x80212a00 <.LBB136_1713>
8020f1c6: 6f 30 d0 04  	j	0x80212a12 <.LBB136_1713+0x12>
;                         if (!bit_set) {
8020f1ca: 09 a0        	j	0x8020f1cc <.LBB136_1404+0x1f28>
;                     if (region_allocated_page_count == page_count) {
8020f1cc: 09 a0        	j	0x8020f1ce <.LBB136_1404+0x1f2a>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020f1ce: 03 35 84 f9  	ld	a0, -104(s0)
8020f1d2: 08 61        	ld	a0, 0(a0)
8020f1d4: 71 91        	srli	a0, a0, 60
8020f1d6: 05 89        	andi	a0, a0, 1
8020f1d8: a3 0b a4 bc  	sb	a0, -1065(s0)
;                     if (region_allocated_page_count == page_count) {
8020f1dc: 03 35 84 fc  	ld	a0, -56(s0)
8020f1e0: 83 35 04 b5  	ld	a1, -1200(s0)
8020f1e4: 63 14 b5 00  	bne	a0, a1, 0x8020f1ec <.LBB136_1404+0x1f48>
8020f1e8: 09 a0        	j	0x8020f1ea <.LBB136_1404+0x1f46>
;                         break :bitset_loop;
8020f1ea: 05 a4        	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020f1ec: 03 45 74 bd  	lbu	a0, -1065(s0)
8020f1f0: 81 45        	mv	a1, zero
8020f1f2: 63 12 b5 06  	bne	a0, a1, 0x8020f256 <.LBB136_1404+0x1fb2>
8020f1f6: 09 a0        	j	0x8020f1f8 <.LBB136_1404+0x1f54>
;                             if (first_address == 0) {
8020f1f8: 03 35 84 fb  	ld	a0, -72(s0)
8020f1fc: 81 45        	mv	a1, zero
8020f1fe: 63 15 b5 02  	bne	a0, a1, 0x8020f228 <.LBB136_1404+0x1f84>
8020f202: 09 a0        	j	0x8020f204 <.LBB136_1404+0x1f60>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020f204: 83 35 04 fc  	ld	a1, -64(s0)
8020f208: 7d 55        	addi	a0, zero, -1
8020f20a: 19 81        	srli	a0, a0, 6
8020f20c: 6d 8d        	and	a0, a0, a1
8020f20e: 13 96 65 00  	slli	a2, a1, 6
8020f212: fd 76        	lui	a3, 1048575
8020f214: 9b 86 06 75  	addiw	a3, a3, 1872
8020f218: a2 96        	add	a3, a3, s0
8020f21a: 90 e2        	sd	a2, 0(a3)
8020f21c: 63 04 b5 00  	beq	a0, a1, 0x8020f224 <.LBB136_1404+0x1f80>
8020f220: 6f 30 50 00  	j	0x80212a24 <.LBB136_1714>
8020f224: 6f 30 30 01  	j	0x80212a36 <.LBB136_1714+0x12>
;                             if (first_address == 0) {
8020f228: 09 a0        	j	0x8020f22a <.LBB136_1404+0x1f86>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020f22a: 83 35 84 f9  	ld	a1, -104(s0)
8020f22e: 88 61        	ld	a0, 0(a1)
8020f230: 05 46        	addi	a2, zero, 1
8020f232: 72 16        	slli	a2, a2, 60
8020f234: 51 8d        	or	a0, a0, a2
8020f236: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020f238: 83 35 84 fc  	ld	a1, -56(s0)
8020f23c: 13 85 15 00  	addi	a0, a1, 1
8020f240: 7d 76        	lui	a2, 1048575
8020f242: 1b 06 86 74  	addiw	a2, a2, 1864
8020f246: 22 96        	add	a2, a2, s0
8020f248: 08 e2        	sd	a0, 0(a2)
8020f24a: 63 74 b5 00  	bgeu	a0, a1, 0x8020f252 <.LBB136_1404+0x1fae>
8020f24e: 6f 30 90 09  	j	0x80212ae6 <.LBB136_1718>
8020f252: 6f 30 70 0a  	j	0x80212af8 <.LBB136_1718+0x12>
;                         if (!bit_set) {
8020f256: 09 a0        	j	0x8020f258 <.LBB136_1404+0x1fb4>
;                     if (region_allocated_page_count == page_count) {
8020f258: 09 a0        	j	0x8020f25a <.LBB136_1404+0x1fb6>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020f25a: 03 35 84 f9  	ld	a0, -104(s0)
8020f25e: 08 61        	ld	a0, 0(a0)
8020f260: 75 91        	srli	a0, a0, 61
8020f262: 05 89        	andi	a0, a0, 1
8020f264: a3 03 a4 bc  	sb	a0, -1081(s0)
;                     if (region_allocated_page_count == page_count) {
8020f268: 03 35 84 fc  	ld	a0, -56(s0)
8020f26c: 83 35 04 b5  	ld	a1, -1200(s0)
8020f270: 63 14 b5 00  	bne	a0, a1, 0x8020f278 <.LBB136_1404+0x1fd4>
8020f274: 09 a0        	j	0x8020f276 <.LBB136_1404+0x1fd2>
;                         break :bitset_loop;
8020f276: 51 aa        	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020f278: 03 45 74 bc  	lbu	a0, -1081(s0)
8020f27c: 81 45        	mv	a1, zero
8020f27e: 63 12 b5 06  	bne	a0, a1, 0x8020f2e2 <.LBB136_1404+0x203e>
8020f282: 09 a0        	j	0x8020f284 <.LBB136_1404+0x1fe0>
;                             if (first_address == 0) {
8020f284: 03 35 84 fb  	ld	a0, -72(s0)
8020f288: 81 45        	mv	a1, zero
8020f28a: 63 15 b5 02  	bne	a0, a1, 0x8020f2b4 <.LBB136_1404+0x2010>
8020f28e: 09 a0        	j	0x8020f290 <.LBB136_1404+0x1fec>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020f290: 83 35 04 fc  	ld	a1, -64(s0)
8020f294: 7d 55        	addi	a0, zero, -1
8020f296: 19 81        	srli	a0, a0, 6
8020f298: 6d 8d        	and	a0, a0, a1
8020f29a: 13 96 65 00  	slli	a2, a1, 6
8020f29e: fd 76        	lui	a3, 1048575
8020f2a0: 9b 86 06 74  	addiw	a3, a3, 1856
8020f2a4: a2 96        	add	a3, a3, s0
8020f2a6: 90 e2        	sd	a2, 0(a3)
8020f2a8: 63 04 b5 00  	beq	a0, a1, 0x8020f2b0 <.LBB136_1404+0x200c>
8020f2ac: 6f 30 f0 05  	j	0x80212b0a <.LBB136_1719>
8020f2b0: 6f 30 d0 06  	j	0x80212b1c <.LBB136_1719+0x12>
;                             if (first_address == 0) {
8020f2b4: 09 a0        	j	0x8020f2b6 <.LBB136_1404+0x2012>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020f2b6: 83 35 84 f9  	ld	a1, -104(s0)
8020f2ba: 88 61        	ld	a0, 0(a1)
8020f2bc: 05 46        	addi	a2, zero, 1
8020f2be: 76 16        	slli	a2, a2, 61
8020f2c0: 51 8d        	or	a0, a0, a2
8020f2c2: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020f2c4: 83 35 84 fc  	ld	a1, -56(s0)
8020f2c8: 13 85 15 00  	addi	a0, a1, 1
8020f2cc: 7d 76        	lui	a2, 1048575
8020f2ce: 1b 06 86 73  	addiw	a2, a2, 1848
8020f2d2: 22 96        	add	a2, a2, s0
8020f2d4: 08 e2        	sd	a0, 0(a2)
8020f2d6: 63 74 b5 00  	bgeu	a0, a1, 0x8020f2de <.LBB136_1404+0x203a>
8020f2da: 6f 30 30 0f  	j	0x80212bcc <.LBB136_1723>
8020f2de: 6f 30 10 10  	j	0x80212bde <.LBB136_1723+0x12>
;                         if (!bit_set) {
8020f2e2: 09 a0        	j	0x8020f2e4 <.LBB136_1404+0x2040>
;                     if (region_allocated_page_count == page_count) {
8020f2e4: 09 a0        	j	0x8020f2e6 <.LBB136_1404+0x2042>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020f2e6: 03 35 84 f9  	ld	a0, -104(s0)
8020f2ea: 08 61        	ld	a0, 0(a0)
8020f2ec: 79 91        	srli	a0, a0, 62
8020f2ee: 05 89        	andi	a0, a0, 1
8020f2f0: a3 0b a4 ba  	sb	a0, -1097(s0)
;                     if (region_allocated_page_count == page_count) {
8020f2f4: 03 35 84 fc  	ld	a0, -56(s0)
8020f2f8: 83 35 04 b5  	ld	a1, -1200(s0)
8020f2fc: 63 14 b5 00  	bne	a0, a1, 0x8020f304 <.LBB136_1404+0x2060>
8020f300: 09 a0        	j	0x8020f302 <.LBB136_1404+0x205e>
;                         break :bitset_loop;
8020f302: 21 a2        	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020f304: 03 45 74 bb  	lbu	a0, -1097(s0)
8020f308: 81 45        	mv	a1, zero
8020f30a: 63 12 b5 06  	bne	a0, a1, 0x8020f36e <.LBB136_1404+0x20ca>
8020f30e: 09 a0        	j	0x8020f310 <.LBB136_1404+0x206c>
;                             if (first_address == 0) {
8020f310: 03 35 84 fb  	ld	a0, -72(s0)
8020f314: 81 45        	mv	a1, zero
8020f316: 63 15 b5 02  	bne	a0, a1, 0x8020f340 <.LBB136_1404+0x209c>
8020f31a: 09 a0        	j	0x8020f31c <.LBB136_1404+0x2078>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020f31c: 83 35 04 fc  	ld	a1, -64(s0)
8020f320: 7d 55        	addi	a0, zero, -1
8020f322: 19 81        	srli	a0, a0, 6
8020f324: 6d 8d        	and	a0, a0, a1
8020f326: 13 96 65 00  	slli	a2, a1, 6
8020f32a: fd 76        	lui	a3, 1048575
8020f32c: 9b 86 06 73  	addiw	a3, a3, 1840
8020f330: a2 96        	add	a3, a3, s0
8020f332: 90 e2        	sd	a2, 0(a3)
8020f334: 63 04 b5 00  	beq	a0, a1, 0x8020f33c <.LBB136_1404+0x2098>
8020f338: 6f 30 90 0b  	j	0x80212bf0 <.LBB136_1724>
8020f33c: 6f 30 70 0c  	j	0x80212c02 <.LBB136_1724+0x12>
;                             if (first_address == 0) {
8020f340: 09 a0        	j	0x8020f342 <.LBB136_1404+0x209e>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020f342: 83 35 84 f9  	ld	a1, -104(s0)
8020f346: 88 61        	ld	a0, 0(a1)
8020f348: 05 46        	addi	a2, zero, 1
8020f34a: 7a 16        	slli	a2, a2, 62
8020f34c: 51 8d        	or	a0, a0, a2
8020f34e: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020f350: 83 35 84 fc  	ld	a1, -56(s0)
8020f354: 13 85 15 00  	addi	a0, a1, 1
8020f358: 7d 76        	lui	a2, 1048575
8020f35a: 1b 06 86 72  	addiw	a2, a2, 1832
8020f35e: 22 96        	add	a2, a2, s0
8020f360: 08 e2        	sd	a0, 0(a2)
8020f362: 63 74 b5 00  	bgeu	a0, a1, 0x8020f36a <.LBB136_1404+0x20c6>
8020f366: 6f 30 d0 14  	j	0x80212cb2 <.LBB136_1728>
8020f36a: 6f 30 b0 15  	j	0x80212cc4 <.LBB136_1728+0x12>
;                         if (!bit_set) {
8020f36e: 09 a0        	j	0x8020f370 <.LBB136_1404+0x20cc>
;                     if (region_allocated_page_count == page_count) {
8020f370: 09 a0        	j	0x8020f372 <.LBB136_1404+0x20ce>
;                     const bit_set = bitset_elem.* & (1 << bit) != 0;
8020f372: 03 35 84 f9  	ld	a0, -104(s0)
8020f376: 08 61        	ld	a0, 0(a0)
8020f378: 7d 91        	srli	a0, a0, 63
8020f37a: a3 03 a4 ba  	sb	a0, -1113(s0)
;                     if (region_allocated_page_count == page_count) {
8020f37e: 03 35 84 fc  	ld	a0, -56(s0)
8020f382: 83 35 04 b5  	ld	a1, -1200(s0)
8020f386: 63 14 b5 00  	bne	a0, a1, 0x8020f38e <.LBB136_1404+0x20ea>
8020f38a: 09 a0        	j	0x8020f38c <.LBB136_1404+0x20e8>
;                         break :bitset_loop;
8020f38c: bd a8        	j	0x8020f40a <.LBB136_1404+0x2166>
;                         if (!bit_set) {
8020f38e: 03 45 74 ba  	lbu	a0, -1113(s0)
8020f392: 81 45        	mv	a1, zero
8020f394: 63 12 b5 06  	bne	a0, a1, 0x8020f3f8 <.LBB136_1404+0x2154>
8020f398: 09 a0        	j	0x8020f39a <.LBB136_1404+0x20f6>
;                             if (first_address == 0) {
8020f39a: 03 35 84 fb  	ld	a0, -72(s0)
8020f39e: 81 45        	mv	a1, zero
8020f3a0: 63 15 b5 02  	bne	a0, a1, 0x8020f3ca <.LBB136_1404+0x2126>
8020f3a4: 09 a0        	j	0x8020f3a6 <.LBB136_1404+0x2102>
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020f3a6: 83 35 04 fc  	ld	a1, -64(s0)
8020f3aa: 7d 55        	addi	a0, zero, -1
8020f3ac: 19 81        	srli	a0, a0, 6
8020f3ae: 6d 8d        	and	a0, a0, a1
8020f3b0: 13 96 65 00  	slli	a2, a1, 6
8020f3b4: fd 76        	lui	a3, 1048575
8020f3b6: 9b 86 06 72  	addiw	a3, a3, 1824
8020f3ba: a2 96        	add	a3, a3, s0
8020f3bc: 90 e2        	sd	a2, 0(a3)
8020f3be: 63 04 b5 00  	beq	a0, a1, 0x8020f3c6 <.LBB136_1404+0x2122>
8020f3c2: 6f 30 50 11  	j	0x80212cd6 <.LBB136_1729>
8020f3c6: 6f 30 30 12  	j	0x80212ce8 <.LBB136_1729+0x12>
;                             if (first_address == 0) {
8020f3ca: 09 a0        	j	0x8020f3cc <.LBB136_1404+0x2128>
;                             bitset_elem.* = bitset_elem.* | (1 << bit);
8020f3cc: 83 35 84 f9  	ld	a1, -104(s0)
8020f3d0: 88 61        	ld	a0, 0(a1)
8020f3d2: 7d 56        	addi	a2, zero, -1
8020f3d4: 7e 16        	slli	a2, a2, 63
8020f3d6: 51 8d        	or	a0, a0, a2
8020f3d8: 88 e1        	sd	a0, 0(a1)
;                             region_allocated_page_count += 1;
8020f3da: 83 35 84 fc  	ld	a1, -56(s0)
8020f3de: 13 85 15 00  	addi	a0, a1, 1
8020f3e2: 7d 76        	lui	a2, 1048575
8020f3e4: 1b 06 86 71  	addiw	a2, a2, 1816
8020f3e8: 22 96        	add	a2, a2, s0
8020f3ea: 08 e2        	sd	a0, 0(a2)
8020f3ec: 63 74 b5 00  	bgeu	a0, a1, 0x8020f3f4 <.LBB136_1404+0x2150>
8020f3f0: 6f 30 90 1a  	j	0x80212d98 <.LBB136_1733>
8020f3f4: 6f 30 70 1b  	j	0x80212daa <.LBB136_1733+0x12>
;                         if (!bit_set) {
8020f3f8: 09 a0        	j	0x8020f3fa <.LBB136_1404+0x2156>
;                     if (region_allocated_page_count == page_count) {
8020f3fa: 09 a0        	j	0x8020f3fc <.LBB136_1404+0x2158>
;             bitset_loop: for (region.bitset[start_index..]) |*bitset_elem| {
8020f3fc: 03 35 04 b2  	ld	a0, -1248(s0)
8020f400: 05 05        	addi	a0, a0, 1
8020f402: 23 30 a4 fa  	sd	a0, -96(s0)
8020f406: 6f d0 7f ee  	j	0x8020d2ec <.LBB136_1404+0x48>
;             if (region_allocated_page_count == page_count) {
8020f40a: 03 35 84 fc  	ld	a0, -56(s0)
8020f40e: 83 35 04 b5  	ld	a1, -1200(s0)
8020f412: 63 1f b5 02  	bne	a0, a1, 0x8020f450 <.LBB136_1404+0x21ac>
8020f416: 09 a0        	j	0x8020f418 <.LBB136_1404+0x2174>
;                 const result = first_address;
8020f418: 03 35 84 fb  	ld	a0, -72(s0)
8020f41c: 23 38 a4 b8  	sd	a0, -1136(s0)
;                 region.allocated_page_count += region_allocated_page_count;
8020f420: 03 35 84 fd  	ld	a0, -40(s0)
8020f424: 93 05 05 01  	addi	a1, a0, 16
8020f428: 7d 76        	lui	a2, 1048575
8020f42a: 1b 06 86 70  	addiw	a2, a2, 1800
8020f42e: 22 96        	add	a2, a2, s0
8020f430: 0c e2        	sd	a1, 0(a2)
8020f432: 0c 69        	ld	a1, 16(a0)
8020f434: 03 35 84 fc  	ld	a0, -56(s0)
8020f438: 2e 95        	add	a0, a0, a1
8020f43a: 7d 76        	lui	a2, 1048575
8020f43c: 1b 06 06 71  	addiw	a2, a2, 1808
8020f440: 22 96        	add	a2, a2, s0
8020f442: 08 e2        	sd	a0, 0(a2)
8020f444: 63 74 b5 00  	bgeu	a0, a1, 0x8020f44c <.LBB136_1404+0x21a8>
8020f448: 6f 30 50 17  	j	0x80212dbc <.LBB136_1734>
8020f44c: 6f 30 30 18  	j	0x80212dce <.LBB136_1734+0x12>
;             if (region_allocated_page_count == page_count) {
8020f450: 09 a0        	j	0x8020f452 <.LBB136_1404+0x21ae>
;             log.debug("Asked page count: {}. Pages to deallocate: {}. Region page count: {}. Region already allocated: {}", .{ page_count, region_allocated_page_count, region.descriptor.page_count, region.allocated_page_count });
8020f452: 03 35 04 b5  	ld	a0, -1200(s0)
8020f456: 23 38 a4 b6  	sd	a0, -1168(s0)
8020f45a: 03 35 84 fc  	ld	a0, -56(s0)
8020f45e: 23 3c a4 b6  	sd	a0, -1160(s0)
8020f462: 03 35 84 fd  	ld	a0, -40(s0)
8020f466: 0c 65        	ld	a1, 8(a0)
8020f468: 23 30 b4 b8  	sd	a1, -1152(s0)
8020f46c: 08 69        	ld	a0, 16(a0)
8020f46e: 23 34 a4 b8  	sd	a0, -1144(s0)
8020f472: 13 05 04 b7  	addi	a0, s0, -1168
8020f476: 97 60 00 00  	auipc	ra, 6
8020f47a: e7 80 a0 d3  	jalr	-710(ra)
;             kernel.assert(@src(), region.allocated_page_count + page_count > region.descriptor.page_count);
8020f47e: 03 35 84 fd  	ld	a0, -40(s0)
8020f482: 0c 69        	ld	a1, 16(a0)
8020f484: 03 35 04 b5  	ld	a0, -1200(s0)
8020f488: 2e 95        	add	a0, a0, a1
8020f48a: 7d 76        	lui	a2, 1048575
8020f48c: 1b 06 06 70  	addiw	a2, a2, 1792
8020f490: 22 96        	add	a2, a2, s0
8020f492: 08 e2        	sd	a0, 0(a2)
8020f494: 63 74 b5 00  	bgeu	a0, a1, 0x8020f49c <.LBB136_1404+0x21f8>
8020f498: 6f 30 70 18  	j	0x80212e1e <.LBB136_1736>
8020f49c: 6f 30 50 19  	j	0x80212e30 <.LBB136_1736+0x12>
;                 while (bit < @bitSizeOf(u64)) : (bit += 1) {
8020f4a0: 09 a0        	j	0x8020f4a2 <.LBB136_1404+0x21fe>
8020f4a2: 83 35 84 b5  	ld	a1, -1192(s0)
8020f4a6: 13 05 f0 03  	addi	a0, zero, 63
8020f4aa: 63 6a b5 02  	bltu	a0, a1, 0x8020f4de <.LBB136_1404+0x223a>
8020f4ae: 09 a0        	j	0x8020f4b0 <.LBB136_1404+0x220c>
;                     region.bitset[byte] &= (~(@as(u64, 1) << @intCast(u6, bit)));
8020f4b0: 83 35 84 fd  	ld	a1, -40(s0)
8020f4b4: 13 85 85 01  	addi	a0, a1, 24
8020f4b8: 7d 76        	lui	a2, 1048575
8020f4ba: 1b 06 06 6f  	addiw	a2, a2, 1776
8020f4be: 22 96        	add	a2, a2, s0
8020f4c0: 08 e2        	sd	a0, 0(a2)
8020f4c2: 03 35 04 b6  	ld	a0, -1184(s0)
8020f4c6: 7d 76        	lui	a2, 1048575
8020f4c8: 1b 06 86 6f  	addiw	a2, a2, 1784
8020f4cc: 22 96        	add	a2, a2, s0
8020f4ce: 08 e2        	sd	a0, 0(a2)
8020f4d0: 8c 71        	ld	a1, 32(a1)
8020f4d2: 63 74 b5 00  	bgeu	a0, a1, 0x8020f4da <.LBB136_1404+0x2236>
8020f4d6: 6f 30 10 28  	j	0x80212f56 <.LBB136_1743+0x12>
8020f4da: 6f 30 b0 26  	j	0x80212f44 <.LBB136_1743>
;             if (bit > 0) {
8020f4de: 11 a0        	j	0x8020f4e2 <.LBB136_1404+0x223e>
8020f4e0: 09 a0        	j	0x8020f4e2 <.LBB136_1404+0x223e>
;             if (region_allocated_page_count >= 64) {
8020f4e2: 03 35 84 fc  	ld	a0, -56(s0)
8020f4e6: 93 05 00 04  	addi	a1, zero, 64
8020f4ea: 63 6b b5 00  	bltu	a0, a1, 0x8020f500 <.LBB136_1405+0x10>
8020f4ee: 09 a0        	j	0x8020f4f0 <.LBB136_1405>

000000008020f4f0 <.LBB136_1405>:
;                 TODO(@src());
8020f4f0: 17 f5 00 00  	auipc	a0, 15
8020f4f4: 13 05 05 14  	addi	a0, a0, 320
8020f4f8: 97 10 ff ff  	auipc	ra, 1048561
8020f4fc: e7 80 a0 cd  	jalr	-806(ra)
;             if (region_allocated_page_count >= 64) {
8020f500: 09 a0        	j	0x8020f502 <.LBB136_1405+0x12>
;             if (region_allocated_page_count > 0) {
8020f502: 03 35 84 fc  	ld	a0, -56(s0)
8020f506: 81 45        	mv	a1, zero
8020f508: 63 0b b5 00  	beq	a0, a1, 0x8020f51e <.LBB136_1406+0x10>
8020f50c: 09 a0        	j	0x8020f50e <.LBB136_1406>

000000008020f50e <.LBB136_1406>:
;                 TODO(@src());
8020f50e: 17 f5 00 00  	auipc	a0, 15
8020f512: 13 05 a5 14  	addi	a0, a0, 330
8020f516: 97 10 ff ff  	auipc	ra, 1048561
8020f51a: e7 80 c0 cb  	jalr	-836(ra)
;             if (region_allocated_page_count > 0) {
8020f51e: 09 a0        	j	0x8020f520 <.LBB136_1406+0x12>
;             region.allocated_page_count = original_allocated_page_count;
8020f520: 83 35 84 fd  	ld	a1, -40(s0)
8020f524: 03 35 84 b6  	ld	a0, -1176(s0)
8020f528: 88 e9        	sd	a0, 16(a1)
;         if (region.descriptor.page_count - region.allocated_page_count >= page_count) {
8020f52a: 11 a0        	j	0x8020f52e <.LBB136_1406+0x20>
8020f52c: 09 a0        	j	0x8020f52e <.LBB136_1406+0x20>
;     for (available_regions) |*region| {
8020f52e: 03 35 84 b3  	ld	a0, -1224(s0)
8020f532: 05 05        	addi	a0, a0, 1
8020f534: 23 30 a4 fe  	sd	a0, -32(s0)
8020f538: 6f d0 5f d5  	j	0x8020d28c <.LBB136_1403+0x10>

000000008020f53c <.LBB136_1407>:
;     @panic("allocation failed, no memory");
8020f53c: 17 f5 00 00  	auipc	a0, 15
8020f540: 13 05 45 14  	addi	a0, a0, 324
8020f544: 81 45        	mv	a1, zero
8020f546: 97 10 ff ff  	auipc	ra, 1048561
8020f54a: e7 80 a0 b5  	jalr	-1190(ra)

000000008020f54e <.LBB136_1408>:
;         if (region.descriptor.page_count - region.allocated_page_count >= page_count) {
8020f54e: 17 e5 00 00  	auipc	a0, 14
8020f552: 13 05 25 f3  	addi	a0, a0, -206
8020f556: 81 45        	mv	a1, zero
8020f558: 97 10 ff ff  	auipc	ra, 1048561
8020f55c: e7 80 80 b4  	jalr	-1208(ra)
8020f560: 03 35 04 b3  	ld	a0, -1232(s0)
8020f564: 83 35 04 b5  	ld	a1, -1200(s0)
8020f568: e3 62 b5 fc  	bltu	a0, a1, 0x8020f52c <.LBB136_1406+0x1e>
8020f56c: 6f d0 9f d6  	j	0x8020d2d4 <.LBB136_1404+0x30>

000000008020f570 <.LBB136_1409>:
;             const supposed_bitset_size = region.descriptor.page_count / @bitSizeOf(u64);
8020f570: 17 e5 00 00  	auipc	a0, 14
8020f574: 13 05 05 d6  	addi	a0, a0, -672
8020f578: 81 45        	mv	a1, zero
8020f57a: 97 10 ff ff  	auipc	ra, 1048561
8020f57e: e7 80 60 b2  	jalr	-1242(ra)
8020f582: 03 35 84 b2  	ld	a0, -1240(s0)
8020f586: 93 55 65 00  	srli	a1, a0, 6
8020f58a: 23 38 b4 fc  	sd	a1, -48(s0)
;             kernel.assert(@src(), region.bitset.len >= supposed_bitset_size);
8020f58e: 03 35 84 fd  	ld	a0, -40(s0)
8020f592: 08 71        	ld	a0, 32(a0)
8020f594: 33 35 b5 00  	sltu	a0, a0, a1
8020f598: 93 45 15 00  	xori	a1, a0, 1

000000008020f59c <.LBB136_1410>:
8020f59c: 17 f5 00 00  	auipc	a0, 15
8020f5a0: 13 05 c5 fc  	addi	a0, a0, -52
8020f5a4: 97 10 ff ff  	auipc	ra, 1048561
8020f5a8: e7 80 80 c6  	jalr	-920(ra)
8020f5ac: 81 45        	mv	a1, zero
;             var region_allocated_page_count: u64 = 0;
8020f5ae: 23 34 b4 fc  	sd	a1, -56(s0)
;             const start_index = if (take_hint) region.allocated_page_count / @bitSizeOf(u64) else 0;
8020f5b2: 03 35 84 fd  	ld	a0, -40(s0)
8020f5b6: 08 69        	ld	a0, 16(a0)
8020f5b8: 7d 76        	lui	a2, 1048575
8020f5ba: 1b 06 86 6e  	addiw	a2, a2, 1768
8020f5be: 22 96        	add	a2, a2, s0
8020f5c0: 08 e2        	sd	a0, 0(a2)
8020f5c2: 05 45        	addi	a0, zero, 1
8020f5c4: 63 1c b5 00  	bne	a0, a1, 0x8020f5dc <.LBB136_1411+0x12>
8020f5c8: 09 a0        	j	0x8020f5ca <.LBB136_1411>

000000008020f5ca <.LBB136_1411>:
8020f5ca: 17 e5 00 00  	auipc	a0, 14
8020f5ce: 13 05 65 d0  	addi	a0, a0, -762
8020f5d2: 81 45        	mv	a1, zero
8020f5d4: 97 10 ff ff  	auipc	ra, 1048561
8020f5d8: e7 80 c0 ac  	jalr	-1332(ra)
8020f5dc: 7d 75        	lui	a0, 1048575
8020f5de: 1b 05 85 6e  	addiw	a0, a0, 1768
8020f5e2: 22 95        	add	a0, a0, s0
8020f5e4: 08 61        	ld	a0, 0(a0)
8020f5e6: 93 55 65 00  	srli	a1, a0, 6
8020f5ea: 7d 75        	lui	a0, 1048575
8020f5ec: 1b 05 05 6d  	addiw	a0, a0, 1744
8020f5f0: 22 95        	add	a0, a0, s0
8020f5f2: 0c e1        	sd	a1, 0(a0)
8020f5f4: 23 30 b4 fc  	sd	a1, -64(s0)
8020f5f8: 01 45        	mv	a0, zero
;             var first_address: u64 = 0;
8020f5fa: 23 3c a4 fa  	sd	a0, -72(s0)
;             bitset_loop: for (region.bitset[start_index..]) |*bitset_elem| {
8020f5fe: 03 35 84 fd  	ld	a0, -40(s0)
8020f602: 13 06 85 01  	addi	a2, a0, 24
8020f606: fd 76        	lui	a3, 1048575
8020f608: 9b 86 86 6d  	addiw	a3, a3, 1752
8020f60c: a2 96        	add	a3, a3, s0
8020f60e: 90 e2        	sd	a2, 0(a3)
8020f610: 08 71        	ld	a0, 32(a0)
8020f612: 7d 76        	lui	a2, 1048575
8020f614: 1b 06 06 6e  	addiw	a2, a2, 1760
8020f618: 22 96        	add	a2, a2, s0
8020f61a: 08 e2        	sd	a0, 0(a2)
8020f61c: 63 7c b5 00  	bgeu	a0, a1, 0x8020f634 <.LBB136_1412+0x12>
8020f620: 09 a0        	j	0x8020f622 <.LBB136_1412>

000000008020f622 <.LBB136_1412>:
8020f622: 17 e5 00 00  	auipc	a0, 14
8020f626: 13 05 e5 cd  	addi	a0, a0, -802
8020f62a: 81 45        	mv	a1, zero
8020f62c: 97 10 ff ff  	auipc	ra, 1048561
8020f630: e7 80 40 a7  	jalr	-1420(ra)
8020f634: 81 45        	mv	a1, zero
8020f636: 05 45        	addi	a0, zero, 1
;             bitset_loop: for (region.bitset[start_index..]) |*bitset_elem| {
8020f638: 63 1c b5 00  	bne	a0, a1, 0x8020f650 <.LBB136_1413+0x12>
8020f63c: 09 a0        	j	0x8020f63e <.LBB136_1413>

000000008020f63e <.LBB136_1413>:
8020f63e: 17 e5 00 00  	auipc	a0, 14
8020f642: 13 05 25 cc  	addi	a0, a0, -830
8020f646: 81 45        	mv	a1, zero
8020f648: 97 10 ff ff  	auipc	ra, 1048561
8020f64c: e7 80 80 a5  	jalr	-1448(ra)
8020f650: 7d 75        	lui	a0, 1048575
8020f652: 1b 05 05 6e  	addiw	a0, a0, 1760
8020f656: 22 95        	add	a0, a0, s0
8020f658: 08 61        	ld	a0, 0(a0)
8020f65a: fd 75        	lui	a1, 1048575
8020f65c: 9b 85 05 6d  	addiw	a1, a1, 1744
8020f660: a2 95        	add	a1, a1, s0
8020f662: 90 61        	ld	a2, 0(a1)
8020f664: fd 75        	lui	a1, 1048575
8020f666: 9b 85 85 6d  	addiw	a1, a1, 1752
8020f66a: a2 95        	add	a1, a1, s0
8020f66c: 8c 61        	ld	a1, 0(a1)
8020f66e: 8c 61        	ld	a1, 0(a1)
8020f670: 93 16 36 00  	slli	a3, a2, 3
8020f674: b6 95        	add	a1, a1, a3
8020f676: 11 8d        	sub	a0, a0, a2
8020f678: 23 3c a4 b0  	sd	a0, -1256(s0)
8020f67c: 23 34 b4 fa  	sd	a1, -88(s0)
8020f680: 23 38 a4 fa  	sd	a0, -80(s0)
8020f684: 01 45        	mv	a0, zero
8020f686: 23 30 a4 fa  	sd	a0, -96(s0)
8020f68a: 6f d0 3f c6  	j	0x8020d2ec <.LBB136_1404+0x48>

000000008020f68e <.LBB136_1414>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020f68e: 17 e5 00 00  	auipc	a0, 14
8020f692: 13 05 25 df  	addi	a0, a0, -526
8020f696: 81 45        	mv	a1, zero
8020f698: 97 10 ff ff  	auipc	ra, 1048561
8020f69c: e7 80 80 a0  	jalr	-1528(ra)
8020f6a0: 03 35 04 b1  	ld	a0, -1264(s0)
8020f6a4: fd 75        	lui	a1, 1048575
8020f6a6: 9b 85 85 6c  	addiw	a1, a1, 1736
8020f6aa: a2 95        	add	a1, a1, s0
8020f6ac: 88 e1        	sd	a0, 0(a1)
8020f6ae: 81 45        	mv	a1, zero
8020f6b0: 05 45        	addi	a0, zero, 1
8020f6b2: 63 1c b5 00  	bne	a0, a1, 0x8020f6ca <.LBB136_1415+0x12>
8020f6b6: 09 a0        	j	0x8020f6b8 <.LBB136_1415>

000000008020f6b8 <.LBB136_1415>:
8020f6b8: 17 e5 00 00  	auipc	a0, 14
8020f6bc: 13 05 85 dc  	addi	a0, a0, -568
8020f6c0: 81 45        	mv	a1, zero
8020f6c2: 97 10 ff ff  	auipc	ra, 1048561
8020f6c6: e7 80 e0 9d  	jalr	-1570(ra)
8020f6ca: 7d 75        	lui	a0, 1048575
8020f6cc: 1b 05 85 6c  	addiw	a0, a0, 1736
8020f6d0: 22 95        	add	a0, a0, s0
8020f6d2: 0c 61        	ld	a1, 0(a0)
8020f6d4: 7d 55        	addi	a0, zero, -1
8020f6d6: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020f6d8: 6d 8d        	and	a0, a0, a1
8020f6da: 13 96 c5 00  	slli	a2, a1, 12
8020f6de: fd 76        	lui	a3, 1048575
8020f6e0: 9b 86 06 6c  	addiw	a3, a3, 1728
8020f6e4: a2 96        	add	a3, a3, s0
8020f6e6: 90 e2        	sd	a2, 0(a3)
8020f6e8: 63 0c b5 00  	beq	a0, a1, 0x8020f700 <.LBB136_1416+0x12>
8020f6ec: 09 a0        	j	0x8020f6ee <.LBB136_1416>

000000008020f6ee <.LBB136_1416>:
8020f6ee: 17 e5 00 00  	auipc	a0, 14
8020f6f2: 13 05 25 d9  	addi	a0, a0, -622
8020f6f6: 81 45        	mv	a1, zero
8020f6f8: 97 10 ff ff  	auipc	ra, 1048561
8020f6fc: e7 80 80 9a  	jalr	-1624(ra)
8020f700: 7d 75        	lui	a0, 1048575
8020f702: 1b 05 05 6c  	addiw	a0, a0, 1728
8020f706: 22 95        	add	a0, a0, s0
8020f708: 08 61        	ld	a0, 0(a0)
8020f70a: 23 34 a4 f8  	sd	a0, -120(s0)
;                                 first_address = region.descriptor.address + offset;
8020f70e: 83 35 84 fd  	ld	a1, -40(s0)
8020f712: 8c 61        	ld	a1, 0(a1)
8020f714: 2e 95        	add	a0, a0, a1
8020f716: 7d 76        	lui	a2, 1048575
8020f718: 1b 06 86 6b  	addiw	a2, a2, 1720
8020f71c: 22 96        	add	a2, a2, s0
8020f71e: 08 e2        	sd	a0, 0(a2)
8020f720: 63 7c b5 00  	bgeu	a0, a1, 0x8020f738 <.LBB136_1417+0x12>
8020f724: 09 a0        	j	0x8020f726 <.LBB136_1417>

000000008020f726 <.LBB136_1417>:
8020f726: 17 e5 00 00  	auipc	a0, 14
8020f72a: 13 05 a5 d5  	addi	a0, a0, -678
8020f72e: 81 45        	mv	a1, zero
8020f730: 97 10 ff ff  	auipc	ra, 1048561
8020f734: e7 80 00 97  	jalr	-1680(ra)
8020f738: 7d 75        	lui	a0, 1048575
8020f73a: 1b 05 85 6b  	addiw	a0, a0, 1720
8020f73e: 22 95        	add	a0, a0, s0
8020f740: 08 61        	ld	a0, 0(a0)
8020f742: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
8020f746: 6f d0 df c1  	j	0x8020d362 <.LBB136_1404+0xbe>

000000008020f74a <.LBB136_1418>:
;                             region_allocated_page_count += 1;
8020f74a: 17 e5 00 00  	auipc	a0, 14
8020f74e: 13 05 65 d3  	addi	a0, a0, -714
8020f752: 81 45        	mv	a1, zero
8020f754: 97 10 ff ff  	auipc	ra, 1048561
8020f758: e7 80 c0 94  	jalr	-1716(ra)
8020f75c: 03 35 84 b0  	ld	a0, -1272(s0)
8020f760: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
8020f764: 6f d0 5f c2  	j	0x8020d388 <.LBB136_1404+0xe4>

000000008020f768 <.LBB136_1419>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020f768: 17 e5 00 00  	auipc	a0, 14
8020f76c: 13 05 85 d1  	addi	a0, a0, -744
8020f770: 81 45        	mv	a1, zero
8020f772: 97 10 ff ff  	auipc	ra, 1048561
8020f776: e7 80 e0 92  	jalr	-1746(ra)
8020f77a: 83 35 04 b0  	ld	a1, -1280(s0)
8020f77e: 13 85 15 00  	addi	a0, a1, 1
8020f782: 7d 76        	lui	a2, 1048575
8020f784: 1b 06 06 6b  	addiw	a2, a2, 1712
8020f788: 22 96        	add	a2, a2, s0
8020f78a: 08 e2        	sd	a0, 0(a2)
8020f78c: 63 7c b5 00  	bgeu	a0, a1, 0x8020f7a4 <.LBB136_1420+0x12>
8020f790: 09 a0        	j	0x8020f792 <.LBB136_1420>

000000008020f792 <.LBB136_1420>:
8020f792: 17 e5 00 00  	auipc	a0, 14
8020f796: 13 05 e5 ce  	addi	a0, a0, -786
8020f79a: 81 45        	mv	a1, zero
8020f79c: 97 10 ff ff  	auipc	ra, 1048561
8020f7a0: e7 80 40 90  	jalr	-1788(ra)
8020f7a4: 7d 75        	lui	a0, 1048575
8020f7a6: 1b 05 05 6b  	addiw	a0, a0, 1712
8020f7aa: 22 95        	add	a0, a0, s0
8020f7ac: 0c 61        	ld	a1, 0(a0)
8020f7ae: 7d 55        	addi	a0, zero, -1
8020f7b0: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020f7b2: 6d 8d        	and	a0, a0, a1
8020f7b4: 13 96 c5 00  	slli	a2, a1, 12
8020f7b8: fd 76        	lui	a3, 1048575
8020f7ba: 9b 86 86 6a  	addiw	a3, a3, 1704
8020f7be: a2 96        	add	a3, a3, s0
8020f7c0: 90 e2        	sd	a2, 0(a3)
8020f7c2: 63 0c b5 00  	beq	a0, a1, 0x8020f7da <.LBB136_1421+0x12>
8020f7c6: 09 a0        	j	0x8020f7c8 <.LBB136_1421>

000000008020f7c8 <.LBB136_1421>:
8020f7c8: 17 e5 00 00  	auipc	a0, 14
8020f7cc: 13 05 85 cb  	addi	a0, a0, -840
8020f7d0: 81 45        	mv	a1, zero
8020f7d2: 97 10 ff ff  	auipc	ra, 1048561
8020f7d6: e7 80 e0 8c  	jalr	-1842(ra)
8020f7da: 7d 75        	lui	a0, 1048575
8020f7dc: 1b 05 85 6a  	addiw	a0, a0, 1704
8020f7e0: 22 95        	add	a0, a0, s0
8020f7e2: 08 61        	ld	a0, 0(a0)
8020f7e4: 23 3c a4 f6  	sd	a0, -136(s0)
;                                 first_address = region.descriptor.address + offset;
8020f7e8: 83 35 84 fd  	ld	a1, -40(s0)
8020f7ec: 8c 61        	ld	a1, 0(a1)
8020f7ee: 2e 95        	add	a0, a0, a1
8020f7f0: 7d 76        	lui	a2, 1048575
8020f7f2: 1b 06 06 6a  	addiw	a2, a2, 1696
8020f7f6: 22 96        	add	a2, a2, s0
8020f7f8: 08 e2        	sd	a0, 0(a2)
8020f7fa: 63 7c b5 00  	bgeu	a0, a1, 0x8020f812 <.LBB136_1422+0x12>
8020f7fe: 09 a0        	j	0x8020f800 <.LBB136_1422>

000000008020f800 <.LBB136_1422>:
8020f800: 17 e5 00 00  	auipc	a0, 14
8020f804: 13 05 05 c8  	addi	a0, a0, -896
8020f808: 81 45        	mv	a1, zero
8020f80a: 97 10 ff ff  	auipc	ra, 1048561
8020f80e: e7 80 60 89  	jalr	-1898(ra)
8020f812: 7d 75        	lui	a0, 1048575
8020f814: 1b 05 05 6a  	addiw	a0, a0, 1696
8020f818: 22 95        	add	a0, a0, s0
8020f81a: 08 61        	ld	a0, 0(a0)
8020f81c: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
8020f820: 6f d0 3f bc  	j	0x8020d3e2 <.LBB136_1404+0x13e>

000000008020f824 <.LBB136_1423>:
;                             region_allocated_page_count += 1;
8020f824: 17 e5 00 00  	auipc	a0, 14
8020f828: 13 05 c5 c5  	addi	a0, a0, -932
8020f82c: 81 45        	mv	a1, zero
8020f82e: 97 10 ff ff  	auipc	ra, 1048561
8020f832: e7 80 20 87  	jalr	-1934(ra)
8020f836: 03 35 84 af  	ld	a0, -1288(s0)
8020f83a: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
8020f83e: 6f d0 bf bc  	j	0x8020d408 <.LBB136_1404+0x164>

000000008020f842 <.LBB136_1424>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020f842: 17 e5 00 00  	auipc	a0, 14
8020f846: 13 05 e5 c3  	addi	a0, a0, -962
8020f84a: 81 45        	mv	a1, zero
8020f84c: 97 10 ff ff  	auipc	ra, 1048561
8020f850: e7 80 40 85  	jalr	-1964(ra)
8020f854: 83 35 04 af  	ld	a1, -1296(s0)
8020f858: 13 85 25 00  	addi	a0, a1, 2
8020f85c: 7d 76        	lui	a2, 1048575
8020f85e: 1b 06 86 69  	addiw	a2, a2, 1688
8020f862: 22 96        	add	a2, a2, s0
8020f864: 08 e2        	sd	a0, 0(a2)
8020f866: 63 7c b5 00  	bgeu	a0, a1, 0x8020f87e <.LBB136_1425+0x12>
8020f86a: 09 a0        	j	0x8020f86c <.LBB136_1425>

000000008020f86c <.LBB136_1425>:
8020f86c: 17 e5 00 00  	auipc	a0, 14
8020f870: 13 05 45 c1  	addi	a0, a0, -1004
8020f874: 81 45        	mv	a1, zero
8020f876: 97 10 ff ff  	auipc	ra, 1048561
8020f87a: e7 80 a0 82  	jalr	-2006(ra)
8020f87e: 7d 75        	lui	a0, 1048575
8020f880: 1b 05 85 69  	addiw	a0, a0, 1688
8020f884: 22 95        	add	a0, a0, s0
8020f886: 0c 61        	ld	a1, 0(a0)
8020f888: 7d 55        	addi	a0, zero, -1
8020f88a: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020f88c: 6d 8d        	and	a0, a0, a1
8020f88e: 13 96 c5 00  	slli	a2, a1, 12
8020f892: fd 76        	lui	a3, 1048575
8020f894: 9b 86 06 69  	addiw	a3, a3, 1680
8020f898: a2 96        	add	a3, a3, s0
8020f89a: 90 e2        	sd	a2, 0(a3)
8020f89c: 63 0c b5 00  	beq	a0, a1, 0x8020f8b4 <.LBB136_1426+0x12>
8020f8a0: 09 a0        	j	0x8020f8a2 <.LBB136_1426>

000000008020f8a2 <.LBB136_1426>:
8020f8a2: 17 e5 00 00  	auipc	a0, 14
8020f8a6: 13 05 e5 bd  	addi	a0, a0, -1058
8020f8aa: 81 45        	mv	a1, zero
8020f8ac: 97 00 ff ff  	auipc	ra, 1048560
8020f8b0: e7 80 40 7f  	jalr	2036(ra)
8020f8b4: 7d 75        	lui	a0, 1048575
8020f8b6: 1b 05 05 69  	addiw	a0, a0, 1680
8020f8ba: 22 95        	add	a0, a0, s0
8020f8bc: 08 61        	ld	a0, 0(a0)
8020f8be: 23 34 a4 f6  	sd	a0, -152(s0)
;                                 first_address = region.descriptor.address + offset;
8020f8c2: 83 35 84 fd  	ld	a1, -40(s0)
8020f8c6: 8c 61        	ld	a1, 0(a1)
8020f8c8: 2e 95        	add	a0, a0, a1
8020f8ca: 7d 76        	lui	a2, 1048575
8020f8cc: 1b 06 86 68  	addiw	a2, a2, 1672
8020f8d0: 22 96        	add	a2, a2, s0
8020f8d2: 08 e2        	sd	a0, 0(a2)
8020f8d4: 63 7c b5 00  	bgeu	a0, a1, 0x8020f8ec <.LBB136_1427+0x12>
8020f8d8: 09 a0        	j	0x8020f8da <.LBB136_1427>

000000008020f8da <.LBB136_1427>:
8020f8da: 17 e5 00 00  	auipc	a0, 14
8020f8de: 13 05 65 ba  	addi	a0, a0, -1114
8020f8e2: 81 45        	mv	a1, zero
8020f8e4: 97 00 ff ff  	auipc	ra, 1048560
8020f8e8: e7 80 c0 7b  	jalr	1980(ra)
8020f8ec: 7d 75        	lui	a0, 1048575
8020f8ee: 1b 05 85 68  	addiw	a0, a0, 1672
8020f8f2: 22 95        	add	a0, a0, s0
8020f8f4: 08 61        	ld	a0, 0(a0)
8020f8f6: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
8020f8fa: 6f d0 9f b6  	j	0x8020d462 <.LBB136_1404+0x1be>

000000008020f8fe <.LBB136_1428>:
;                             region_allocated_page_count += 1;
8020f8fe: 17 e5 00 00  	auipc	a0, 14
8020f902: 13 05 25 b8  	addi	a0, a0, -1150
8020f906: 81 45        	mv	a1, zero
8020f908: 97 00 ff ff  	auipc	ra, 1048560
8020f90c: e7 80 80 79  	jalr	1944(ra)
8020f910: 03 35 84 ae  	ld	a0, -1304(s0)
8020f914: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
8020f918: 6f d0 1f b7  	j	0x8020d488 <.LBB136_1404+0x1e4>

000000008020f91c <.LBB136_1429>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020f91c: 17 e5 00 00  	auipc	a0, 14
8020f920: 13 05 45 b6  	addi	a0, a0, -1180
8020f924: 81 45        	mv	a1, zero
8020f926: 97 00 ff ff  	auipc	ra, 1048560
8020f92a: e7 80 a0 77  	jalr	1914(ra)
8020f92e: 83 35 04 ae  	ld	a1, -1312(s0)
8020f932: 13 85 35 00  	addi	a0, a1, 3
8020f936: 7d 76        	lui	a2, 1048575
8020f938: 1b 06 06 68  	addiw	a2, a2, 1664
8020f93c: 22 96        	add	a2, a2, s0
8020f93e: 08 e2        	sd	a0, 0(a2)
8020f940: 63 7c b5 00  	bgeu	a0, a1, 0x8020f958 <.LBB136_1430+0x12>
8020f944: 09 a0        	j	0x8020f946 <.LBB136_1430>

000000008020f946 <.LBB136_1430>:
8020f946: 17 e5 00 00  	auipc	a0, 14
8020f94a: 13 05 a5 b3  	addi	a0, a0, -1222
8020f94e: 81 45        	mv	a1, zero
8020f950: 97 00 ff ff  	auipc	ra, 1048560
8020f954: e7 80 00 75  	jalr	1872(ra)
8020f958: 7d 75        	lui	a0, 1048575
8020f95a: 1b 05 05 68  	addiw	a0, a0, 1664
8020f95e: 22 95        	add	a0, a0, s0
8020f960: 0c 61        	ld	a1, 0(a0)
8020f962: 7d 55        	addi	a0, zero, -1
8020f964: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020f966: 6d 8d        	and	a0, a0, a1
8020f968: 13 96 c5 00  	slli	a2, a1, 12
8020f96c: fd 76        	lui	a3, 1048575
8020f96e: 9b 86 86 67  	addiw	a3, a3, 1656
8020f972: a2 96        	add	a3, a3, s0
8020f974: 90 e2        	sd	a2, 0(a3)
8020f976: 63 0c b5 00  	beq	a0, a1, 0x8020f98e <.LBB136_1431+0x12>
8020f97a: 09 a0        	j	0x8020f97c <.LBB136_1431>

000000008020f97c <.LBB136_1431>:
8020f97c: 17 e5 00 00  	auipc	a0, 14
8020f980: 13 05 45 b0  	addi	a0, a0, -1276
8020f984: 81 45        	mv	a1, zero
8020f986: 97 00 ff ff  	auipc	ra, 1048560
8020f98a: e7 80 a0 71  	jalr	1818(ra)
8020f98e: 7d 75        	lui	a0, 1048575
8020f990: 1b 05 85 67  	addiw	a0, a0, 1656
8020f994: 22 95        	add	a0, a0, s0
8020f996: 08 61        	ld	a0, 0(a0)
8020f998: 23 3c a4 f4  	sd	a0, -168(s0)
;                                 first_address = region.descriptor.address + offset;
8020f99c: 83 35 84 fd  	ld	a1, -40(s0)
8020f9a0: 8c 61        	ld	a1, 0(a1)
8020f9a2: 2e 95        	add	a0, a0, a1
8020f9a4: 7d 76        	lui	a2, 1048575
8020f9a6: 1b 06 06 67  	addiw	a2, a2, 1648
8020f9aa: 22 96        	add	a2, a2, s0
8020f9ac: 08 e2        	sd	a0, 0(a2)
8020f9ae: 63 7c b5 00  	bgeu	a0, a1, 0x8020f9c6 <.LBB136_1432+0x12>
8020f9b2: 09 a0        	j	0x8020f9b4 <.LBB136_1432>

000000008020f9b4 <.LBB136_1432>:
8020f9b4: 17 e5 00 00  	auipc	a0, 14
8020f9b8: 13 05 c5 ac  	addi	a0, a0, -1332
8020f9bc: 81 45        	mv	a1, zero
8020f9be: 97 00 ff ff  	auipc	ra, 1048560
8020f9c2: e7 80 20 6e  	jalr	1762(ra)
8020f9c6: 7d 75        	lui	a0, 1048575
8020f9c8: 1b 05 05 67  	addiw	a0, a0, 1648
8020f9cc: 22 95        	add	a0, a0, s0
8020f9ce: 08 61        	ld	a0, 0(a0)
8020f9d0: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
8020f9d4: 6f d0 ff b0  	j	0x8020d4e2 <.LBB136_1404+0x23e>

000000008020f9d8 <.LBB136_1433>:
;                             region_allocated_page_count += 1;
8020f9d8: 17 e5 00 00  	auipc	a0, 14
8020f9dc: 13 05 85 aa  	addi	a0, a0, -1368
8020f9e0: 81 45        	mv	a1, zero
8020f9e2: 97 00 ff ff  	auipc	ra, 1048560
8020f9e6: e7 80 e0 6b  	jalr	1726(ra)
8020f9ea: 03 35 84 ad  	ld	a0, -1320(s0)
8020f9ee: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
8020f9f2: 6f d0 7f b1  	j	0x8020d508 <.LBB136_1404+0x264>

000000008020f9f6 <.LBB136_1434>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020f9f6: 17 e5 00 00  	auipc	a0, 14
8020f9fa: 13 05 a5 a8  	addi	a0, a0, -1398
8020f9fe: 81 45        	mv	a1, zero
8020fa00: 97 00 ff ff  	auipc	ra, 1048560
8020fa04: e7 80 00 6a  	jalr	1696(ra)
8020fa08: 83 35 04 ad  	ld	a1, -1328(s0)
8020fa0c: 13 85 45 00  	addi	a0, a1, 4
8020fa10: 7d 76        	lui	a2, 1048575
8020fa12: 1b 06 86 66  	addiw	a2, a2, 1640
8020fa16: 22 96        	add	a2, a2, s0
8020fa18: 08 e2        	sd	a0, 0(a2)
8020fa1a: 63 7c b5 00  	bgeu	a0, a1, 0x8020fa32 <.LBB136_1435+0x12>
8020fa1e: 09 a0        	j	0x8020fa20 <.LBB136_1435>

000000008020fa20 <.LBB136_1435>:
8020fa20: 17 e5 00 00  	auipc	a0, 14
8020fa24: 13 05 05 a6  	addi	a0, a0, -1440
8020fa28: 81 45        	mv	a1, zero
8020fa2a: 97 00 ff ff  	auipc	ra, 1048560
8020fa2e: e7 80 60 67  	jalr	1654(ra)
8020fa32: 7d 75        	lui	a0, 1048575
8020fa34: 1b 05 85 66  	addiw	a0, a0, 1640
8020fa38: 22 95        	add	a0, a0, s0
8020fa3a: 0c 61        	ld	a1, 0(a0)
8020fa3c: 7d 55        	addi	a0, zero, -1
8020fa3e: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020fa40: 6d 8d        	and	a0, a0, a1
8020fa42: 13 96 c5 00  	slli	a2, a1, 12
8020fa46: fd 76        	lui	a3, 1048575
8020fa48: 9b 86 06 66  	addiw	a3, a3, 1632
8020fa4c: a2 96        	add	a3, a3, s0
8020fa4e: 90 e2        	sd	a2, 0(a3)
8020fa50: 63 0c b5 00  	beq	a0, a1, 0x8020fa68 <.LBB136_1436+0x12>
8020fa54: 09 a0        	j	0x8020fa56 <.LBB136_1436>

000000008020fa56 <.LBB136_1436>:
8020fa56: 17 e5 00 00  	auipc	a0, 14
8020fa5a: 13 05 a5 a2  	addi	a0, a0, -1494
8020fa5e: 81 45        	mv	a1, zero
8020fa60: 97 00 ff ff  	auipc	ra, 1048560
8020fa64: e7 80 00 64  	jalr	1600(ra)
8020fa68: 7d 75        	lui	a0, 1048575
8020fa6a: 1b 05 05 66  	addiw	a0, a0, 1632
8020fa6e: 22 95        	add	a0, a0, s0
8020fa70: 08 61        	ld	a0, 0(a0)
8020fa72: 23 34 a4 f4  	sd	a0, -184(s0)
;                                 first_address = region.descriptor.address + offset;
8020fa76: 83 35 84 fd  	ld	a1, -40(s0)
8020fa7a: 8c 61        	ld	a1, 0(a1)
8020fa7c: 2e 95        	add	a0, a0, a1
8020fa7e: 7d 76        	lui	a2, 1048575
8020fa80: 1b 06 86 65  	addiw	a2, a2, 1624
8020fa84: 22 96        	add	a2, a2, s0
8020fa86: 08 e2        	sd	a0, 0(a2)
8020fa88: 63 7c b5 00  	bgeu	a0, a1, 0x8020faa0 <.LBB136_1437+0x12>
8020fa8c: 09 a0        	j	0x8020fa8e <.LBB136_1437>

000000008020fa8e <.LBB136_1437>:
8020fa8e: 17 e5 00 00  	auipc	a0, 14
8020fa92: 13 05 25 9f  	addi	a0, a0, -1550
8020fa96: 81 45        	mv	a1, zero
8020fa98: 97 00 ff ff  	auipc	ra, 1048560
8020fa9c: e7 80 80 60  	jalr	1544(ra)
8020faa0: 7d 75        	lui	a0, 1048575
8020faa2: 1b 05 85 65  	addiw	a0, a0, 1624
8020faa6: 22 95        	add	a0, a0, s0
8020faa8: 08 61        	ld	a0, 0(a0)
8020faaa: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
8020faae: 6f d0 5f ab  	j	0x8020d562 <.LBB136_1404+0x2be>

000000008020fab2 <.LBB136_1438>:
;                             region_allocated_page_count += 1;
8020fab2: 17 e5 00 00  	auipc	a0, 14
8020fab6: 13 05 e5 9c  	addi	a0, a0, -1586
8020faba: 81 45        	mv	a1, zero
8020fabc: 97 00 ff ff  	auipc	ra, 1048560
8020fac0: e7 80 40 5e  	jalr	1508(ra)
8020fac4: 03 35 84 ac  	ld	a0, -1336(s0)
8020fac8: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
8020facc: 6f d0 df ab  	j	0x8020d588 <.LBB136_1404+0x2e4>

000000008020fad0 <.LBB136_1439>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020fad0: 17 e5 00 00  	auipc	a0, 14
8020fad4: 13 05 05 9b  	addi	a0, a0, -1616
8020fad8: 81 45        	mv	a1, zero
8020fada: 97 00 ff ff  	auipc	ra, 1048560
8020fade: e7 80 60 5c  	jalr	1478(ra)
8020fae2: 83 35 04 ac  	ld	a1, -1344(s0)
8020fae6: 13 85 55 00  	addi	a0, a1, 5
8020faea: 7d 76        	lui	a2, 1048575
8020faec: 1b 06 06 65  	addiw	a2, a2, 1616
8020faf0: 22 96        	add	a2, a2, s0
8020faf2: 08 e2        	sd	a0, 0(a2)
8020faf4: 63 7c b5 00  	bgeu	a0, a1, 0x8020fb0c <.LBB136_1440+0x12>
8020faf8: 09 a0        	j	0x8020fafa <.LBB136_1440>

000000008020fafa <.LBB136_1440>:
8020fafa: 17 e5 00 00  	auipc	a0, 14
8020fafe: 13 05 65 98  	addi	a0, a0, -1658
8020fb02: 81 45        	mv	a1, zero
8020fb04: 97 00 ff ff  	auipc	ra, 1048560
8020fb08: e7 80 c0 59  	jalr	1436(ra)
8020fb0c: 7d 75        	lui	a0, 1048575
8020fb0e: 1b 05 05 65  	addiw	a0, a0, 1616
8020fb12: 22 95        	add	a0, a0, s0
8020fb14: 0c 61        	ld	a1, 0(a0)
8020fb16: 7d 55        	addi	a0, zero, -1
8020fb18: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020fb1a: 6d 8d        	and	a0, a0, a1
8020fb1c: 13 96 c5 00  	slli	a2, a1, 12
8020fb20: fd 76        	lui	a3, 1048575
8020fb22: 9b 86 86 64  	addiw	a3, a3, 1608
8020fb26: a2 96        	add	a3, a3, s0
8020fb28: 90 e2        	sd	a2, 0(a3)
8020fb2a: 63 0c b5 00  	beq	a0, a1, 0x8020fb42 <.LBB136_1441+0x12>
8020fb2e: 09 a0        	j	0x8020fb30 <.LBB136_1441>

000000008020fb30 <.LBB136_1441>:
8020fb30: 17 e5 00 00  	auipc	a0, 14
8020fb34: 13 05 05 95  	addi	a0, a0, -1712
8020fb38: 81 45        	mv	a1, zero
8020fb3a: 97 00 ff ff  	auipc	ra, 1048560
8020fb3e: e7 80 60 56  	jalr	1382(ra)
8020fb42: 7d 75        	lui	a0, 1048575
8020fb44: 1b 05 85 64  	addiw	a0, a0, 1608
8020fb48: 22 95        	add	a0, a0, s0
8020fb4a: 08 61        	ld	a0, 0(a0)
8020fb4c: 23 3c a4 f2  	sd	a0, -200(s0)
;                                 first_address = region.descriptor.address + offset;
8020fb50: 83 35 84 fd  	ld	a1, -40(s0)
8020fb54: 8c 61        	ld	a1, 0(a1)
8020fb56: 2e 95        	add	a0, a0, a1
8020fb58: 7d 76        	lui	a2, 1048575
8020fb5a: 1b 06 06 64  	addiw	a2, a2, 1600
8020fb5e: 22 96        	add	a2, a2, s0
8020fb60: 08 e2        	sd	a0, 0(a2)
8020fb62: 63 7c b5 00  	bgeu	a0, a1, 0x8020fb7a <.LBB136_1442+0x12>
8020fb66: 09 a0        	j	0x8020fb68 <.LBB136_1442>

000000008020fb68 <.LBB136_1442>:
8020fb68: 17 e5 00 00  	auipc	a0, 14
8020fb6c: 13 05 85 91  	addi	a0, a0, -1768
8020fb70: 81 45        	mv	a1, zero
8020fb72: 97 00 ff ff  	auipc	ra, 1048560
8020fb76: e7 80 e0 52  	jalr	1326(ra)
8020fb7a: 7d 75        	lui	a0, 1048575
8020fb7c: 1b 05 05 64  	addiw	a0, a0, 1600
8020fb80: 22 95        	add	a0, a0, s0
8020fb82: 08 61        	ld	a0, 0(a0)
8020fb84: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
8020fb88: 6f d0 bf a5  	j	0x8020d5e2 <.LBB136_1404+0x33e>

000000008020fb8c <.LBB136_1443>:
;                             region_allocated_page_count += 1;
8020fb8c: 17 e5 00 00  	auipc	a0, 14
8020fb90: 13 05 45 8f  	addi	a0, a0, -1804
8020fb94: 81 45        	mv	a1, zero
8020fb96: 97 00 ff ff  	auipc	ra, 1048560
8020fb9a: e7 80 a0 50  	jalr	1290(ra)
8020fb9e: 03 35 84 ab  	ld	a0, -1352(s0)
8020fba2: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
8020fba6: 6f d0 3f a6  	j	0x8020d608 <.LBB136_1404+0x364>

000000008020fbaa <.LBB136_1444>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020fbaa: 17 e5 00 00  	auipc	a0, 14
8020fbae: 13 05 65 8d  	addi	a0, a0, -1834
8020fbb2: 81 45        	mv	a1, zero
8020fbb4: 97 00 ff ff  	auipc	ra, 1048560
8020fbb8: e7 80 c0 4e  	jalr	1260(ra)
8020fbbc: 83 35 04 ab  	ld	a1, -1360(s0)
8020fbc0: 13 85 65 00  	addi	a0, a1, 6
8020fbc4: 7d 76        	lui	a2, 1048575
8020fbc6: 1b 06 86 63  	addiw	a2, a2, 1592
8020fbca: 22 96        	add	a2, a2, s0
8020fbcc: 08 e2        	sd	a0, 0(a2)
8020fbce: 63 7c b5 00  	bgeu	a0, a1, 0x8020fbe6 <.LBB136_1445+0x12>
8020fbd2: 09 a0        	j	0x8020fbd4 <.LBB136_1445>

000000008020fbd4 <.LBB136_1445>:
8020fbd4: 17 e5 00 00  	auipc	a0, 14
8020fbd8: 13 05 c5 8a  	addi	a0, a0, -1876
8020fbdc: 81 45        	mv	a1, zero
8020fbde: 97 00 ff ff  	auipc	ra, 1048560
8020fbe2: e7 80 20 4c  	jalr	1218(ra)
8020fbe6: 7d 75        	lui	a0, 1048575
8020fbe8: 1b 05 85 63  	addiw	a0, a0, 1592
8020fbec: 22 95        	add	a0, a0, s0
8020fbee: 0c 61        	ld	a1, 0(a0)
8020fbf0: 7d 55        	addi	a0, zero, -1
8020fbf2: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020fbf4: 6d 8d        	and	a0, a0, a1
8020fbf6: 13 96 c5 00  	slli	a2, a1, 12
8020fbfa: fd 76        	lui	a3, 1048575
8020fbfc: 9b 86 06 63  	addiw	a3, a3, 1584
8020fc00: a2 96        	add	a3, a3, s0
8020fc02: 90 e2        	sd	a2, 0(a3)
8020fc04: 63 0c b5 00  	beq	a0, a1, 0x8020fc1c <.LBB136_1446+0x12>
8020fc08: 09 a0        	j	0x8020fc0a <.LBB136_1446>

000000008020fc0a <.LBB136_1446>:
8020fc0a: 17 e5 00 00  	auipc	a0, 14
8020fc0e: 13 05 65 87  	addi	a0, a0, -1930
8020fc12: 81 45        	mv	a1, zero
8020fc14: 97 00 ff ff  	auipc	ra, 1048560
8020fc18: e7 80 c0 48  	jalr	1164(ra)
8020fc1c: 7d 75        	lui	a0, 1048575
8020fc1e: 1b 05 05 63  	addiw	a0, a0, 1584
8020fc22: 22 95        	add	a0, a0, s0
8020fc24: 08 61        	ld	a0, 0(a0)
8020fc26: 23 34 a4 f2  	sd	a0, -216(s0)
;                                 first_address = region.descriptor.address + offset;
8020fc2a: 83 35 84 fd  	ld	a1, -40(s0)
8020fc2e: 8c 61        	ld	a1, 0(a1)
8020fc30: 2e 95        	add	a0, a0, a1
8020fc32: 7d 76        	lui	a2, 1048575
8020fc34: 1b 06 86 62  	addiw	a2, a2, 1576
8020fc38: 22 96        	add	a2, a2, s0
8020fc3a: 08 e2        	sd	a0, 0(a2)
8020fc3c: 63 7c b5 00  	bgeu	a0, a1, 0x8020fc54 <.LBB136_1447+0x12>
8020fc40: 09 a0        	j	0x8020fc42 <.LBB136_1447>

000000008020fc42 <.LBB136_1447>:
8020fc42: 17 e5 00 00  	auipc	a0, 14
8020fc46: 13 05 e5 83  	addi	a0, a0, -1986
8020fc4a: 81 45        	mv	a1, zero
8020fc4c: 97 00 ff ff  	auipc	ra, 1048560
8020fc50: e7 80 40 45  	jalr	1108(ra)
8020fc54: 7d 75        	lui	a0, 1048575
8020fc56: 1b 05 85 62  	addiw	a0, a0, 1576
8020fc5a: 22 95        	add	a0, a0, s0
8020fc5c: 08 61        	ld	a0, 0(a0)
8020fc5e: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
8020fc62: 6f d0 1f a0  	j	0x8020d662 <.LBB136_1404+0x3be>

000000008020fc66 <.LBB136_1448>:
;                             region_allocated_page_count += 1;
8020fc66: 17 e5 00 00  	auipc	a0, 14
8020fc6a: 13 05 a5 81  	addi	a0, a0, -2022
8020fc6e: 81 45        	mv	a1, zero
8020fc70: 97 00 ff ff  	auipc	ra, 1048560
8020fc74: e7 80 00 43  	jalr	1072(ra)
8020fc78: 03 35 84 aa  	ld	a0, -1368(s0)
8020fc7c: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
8020fc80: 6f d0 9f a0  	j	0x8020d688 <.LBB136_1404+0x3e4>

000000008020fc84 <.LBB136_1449>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020fc84: 17 d5 00 00  	auipc	a0, 13
8020fc88: 13 05 c5 7f  	addi	a0, a0, 2044
8020fc8c: 81 45        	mv	a1, zero
8020fc8e: 97 00 ff ff  	auipc	ra, 1048560
8020fc92: e7 80 20 41  	jalr	1042(ra)
8020fc96: 83 35 04 aa  	ld	a1, -1376(s0)
8020fc9a: 13 85 75 00  	addi	a0, a1, 7
8020fc9e: 7d 76        	lui	a2, 1048575
8020fca0: 1b 06 06 62  	addiw	a2, a2, 1568
8020fca4: 22 96        	add	a2, a2, s0
8020fca6: 08 e2        	sd	a0, 0(a2)
8020fca8: 63 7c b5 00  	bgeu	a0, a1, 0x8020fcc0 <.LBB136_1450+0x12>
8020fcac: 09 a0        	j	0x8020fcae <.LBB136_1450>

000000008020fcae <.LBB136_1450>:
8020fcae: 17 d5 00 00  	auipc	a0, 13
8020fcb2: 13 05 25 7d  	addi	a0, a0, 2002
8020fcb6: 81 45        	mv	a1, zero
8020fcb8: 97 00 ff ff  	auipc	ra, 1048560
8020fcbc: e7 80 80 3e  	jalr	1000(ra)
8020fcc0: 7d 75        	lui	a0, 1048575
8020fcc2: 1b 05 05 62  	addiw	a0, a0, 1568
8020fcc6: 22 95        	add	a0, a0, s0
8020fcc8: 0c 61        	ld	a1, 0(a0)
8020fcca: 7d 55        	addi	a0, zero, -1
8020fccc: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020fcce: 6d 8d        	and	a0, a0, a1
8020fcd0: 13 96 c5 00  	slli	a2, a1, 12
8020fcd4: fd 76        	lui	a3, 1048575
8020fcd6: 9b 86 86 61  	addiw	a3, a3, 1560
8020fcda: a2 96        	add	a3, a3, s0
8020fcdc: 90 e2        	sd	a2, 0(a3)
8020fcde: 63 0c b5 00  	beq	a0, a1, 0x8020fcf6 <.LBB136_1451+0x12>
8020fce2: 09 a0        	j	0x8020fce4 <.LBB136_1451>

000000008020fce4 <.LBB136_1451>:
8020fce4: 17 d5 00 00  	auipc	a0, 13
8020fce8: 13 05 c5 79  	addi	a0, a0, 1948
8020fcec: 81 45        	mv	a1, zero
8020fcee: 97 00 ff ff  	auipc	ra, 1048560
8020fcf2: e7 80 20 3b  	jalr	946(ra)
8020fcf6: 7d 75        	lui	a0, 1048575
8020fcf8: 1b 05 85 61  	addiw	a0, a0, 1560
8020fcfc: 22 95        	add	a0, a0, s0
8020fcfe: 08 61        	ld	a0, 0(a0)
8020fd00: 23 3c a4 f0  	sd	a0, -232(s0)
;                                 first_address = region.descriptor.address + offset;
8020fd04: 83 35 84 fd  	ld	a1, -40(s0)
8020fd08: 8c 61        	ld	a1, 0(a1)
8020fd0a: 2e 95        	add	a0, a0, a1
8020fd0c: 7d 76        	lui	a2, 1048575
8020fd0e: 1b 06 06 61  	addiw	a2, a2, 1552
8020fd12: 22 96        	add	a2, a2, s0
8020fd14: 08 e2        	sd	a0, 0(a2)
8020fd16: 63 7c b5 00  	bgeu	a0, a1, 0x8020fd2e <.LBB136_1452+0x12>
8020fd1a: 09 a0        	j	0x8020fd1c <.LBB136_1452>

000000008020fd1c <.LBB136_1452>:
8020fd1c: 17 d5 00 00  	auipc	a0, 13
8020fd20: 13 05 45 76  	addi	a0, a0, 1892
8020fd24: 81 45        	mv	a1, zero
8020fd26: 97 00 ff ff  	auipc	ra, 1048560
8020fd2a: e7 80 a0 37  	jalr	890(ra)
8020fd2e: 7d 75        	lui	a0, 1048575
8020fd30: 1b 05 05 61  	addiw	a0, a0, 1552
8020fd34: 22 95        	add	a0, a0, s0
8020fd36: 08 61        	ld	a0, 0(a0)
8020fd38: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
8020fd3c: 6f d0 7f 9a  	j	0x8020d6e2 <.LBB136_1404+0x43e>

000000008020fd40 <.LBB136_1453>:
;                             region_allocated_page_count += 1;
8020fd40: 17 d5 00 00  	auipc	a0, 13
8020fd44: 13 05 05 74  	addi	a0, a0, 1856
8020fd48: 81 45        	mv	a1, zero
8020fd4a: 97 00 ff ff  	auipc	ra, 1048560
8020fd4e: e7 80 60 35  	jalr	854(ra)
8020fd52: 03 35 84 a9  	ld	a0, -1384(s0)
8020fd56: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
8020fd5a: 6f d0 ff 9a  	j	0x8020d708 <.LBB136_1404+0x464>

000000008020fd5e <.LBB136_1454>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020fd5e: 17 d5 00 00  	auipc	a0, 13
8020fd62: 13 05 25 72  	addi	a0, a0, 1826
8020fd66: 81 45        	mv	a1, zero
8020fd68: 97 00 ff ff  	auipc	ra, 1048560
8020fd6c: e7 80 80 33  	jalr	824(ra)
8020fd70: 83 35 04 a9  	ld	a1, -1392(s0)
8020fd74: 13 85 85 00  	addi	a0, a1, 8
8020fd78: 7d 76        	lui	a2, 1048575
8020fd7a: 1b 06 86 60  	addiw	a2, a2, 1544
8020fd7e: 22 96        	add	a2, a2, s0
8020fd80: 08 e2        	sd	a0, 0(a2)
8020fd82: 63 7c b5 00  	bgeu	a0, a1, 0x8020fd9a <.LBB136_1455+0x12>
8020fd86: 09 a0        	j	0x8020fd88 <.LBB136_1455>

000000008020fd88 <.LBB136_1455>:
8020fd88: 17 d5 00 00  	auipc	a0, 13
8020fd8c: 13 05 85 6f  	addi	a0, a0, 1784
8020fd90: 81 45        	mv	a1, zero
8020fd92: 97 00 ff ff  	auipc	ra, 1048560
8020fd96: e7 80 e0 30  	jalr	782(ra)
8020fd9a: 7d 75        	lui	a0, 1048575
8020fd9c: 1b 05 85 60  	addiw	a0, a0, 1544
8020fda0: 22 95        	add	a0, a0, s0
8020fda2: 0c 61        	ld	a1, 0(a0)
8020fda4: 7d 55        	addi	a0, zero, -1
8020fda6: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020fda8: 6d 8d        	and	a0, a0, a1
8020fdaa: 13 96 c5 00  	slli	a2, a1, 12
8020fdae: fd 76        	lui	a3, 1048575
8020fdb0: 9b 86 06 60  	addiw	a3, a3, 1536
8020fdb4: a2 96        	add	a3, a3, s0
8020fdb6: 90 e2        	sd	a2, 0(a3)
8020fdb8: 63 0c b5 00  	beq	a0, a1, 0x8020fdd0 <.LBB136_1456+0x12>
8020fdbc: 09 a0        	j	0x8020fdbe <.LBB136_1456>

000000008020fdbe <.LBB136_1456>:
8020fdbe: 17 d5 00 00  	auipc	a0, 13
8020fdc2: 13 05 25 6c  	addi	a0, a0, 1730
8020fdc6: 81 45        	mv	a1, zero
8020fdc8: 97 00 ff ff  	auipc	ra, 1048560
8020fdcc: e7 80 80 2d  	jalr	728(ra)
8020fdd0: 7d 75        	lui	a0, 1048575
8020fdd2: 1b 05 05 60  	addiw	a0, a0, 1536
8020fdd6: 22 95        	add	a0, a0, s0
8020fdd8: 08 61        	ld	a0, 0(a0)
8020fdda: 23 34 a4 f0  	sd	a0, -248(s0)
;                                 first_address = region.descriptor.address + offset;
8020fdde: 83 35 84 fd  	ld	a1, -40(s0)
8020fde2: 8c 61        	ld	a1, 0(a1)
8020fde4: 2e 95        	add	a0, a0, a1
8020fde6: 7d 76        	lui	a2, 1048575
8020fde8: 1b 06 86 5f  	addiw	a2, a2, 1528
8020fdec: 22 96        	add	a2, a2, s0
8020fdee: 08 e2        	sd	a0, 0(a2)
8020fdf0: 63 7c b5 00  	bgeu	a0, a1, 0x8020fe08 <.LBB136_1457+0x12>
8020fdf4: 09 a0        	j	0x8020fdf6 <.LBB136_1457>

000000008020fdf6 <.LBB136_1457>:
8020fdf6: 17 d5 00 00  	auipc	a0, 13
8020fdfa: 13 05 a5 68  	addi	a0, a0, 1674
8020fdfe: 81 45        	mv	a1, zero
8020fe00: 97 00 ff ff  	auipc	ra, 1048560
8020fe04: e7 80 00 2a  	jalr	672(ra)
8020fe08: 7d 75        	lui	a0, 1048575
8020fe0a: 1b 05 85 5f  	addiw	a0, a0, 1528
8020fe0e: 22 95        	add	a0, a0, s0
8020fe10: 08 61        	ld	a0, 0(a0)
8020fe12: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
8020fe16: 6f d0 df 94  	j	0x8020d762 <.LBB136_1404+0x4be>

000000008020fe1a <.LBB136_1458>:
;                             region_allocated_page_count += 1;
8020fe1a: 17 d5 00 00  	auipc	a0, 13
8020fe1e: 13 05 65 66  	addi	a0, a0, 1638
8020fe22: 81 45        	mv	a1, zero
8020fe24: 97 00 ff ff  	auipc	ra, 1048560
8020fe28: e7 80 c0 27  	jalr	636(ra)
8020fe2c: 03 35 84 a8  	ld	a0, -1400(s0)
8020fe30: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
8020fe34: 6f d0 5f 95  	j	0x8020d788 <.LBB136_1404+0x4e4>

000000008020fe38 <.LBB136_1459>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020fe38: 17 d5 00 00  	auipc	a0, 13
8020fe3c: 13 05 85 64  	addi	a0, a0, 1608
8020fe40: 81 45        	mv	a1, zero
8020fe42: 97 00 ff ff  	auipc	ra, 1048560
8020fe46: e7 80 e0 25  	jalr	606(ra)
8020fe4a: 83 35 04 a8  	ld	a1, -1408(s0)
8020fe4e: 13 85 95 00  	addi	a0, a1, 9
8020fe52: 7d 76        	lui	a2, 1048575
8020fe54: 1b 06 06 5f  	addiw	a2, a2, 1520
8020fe58: 22 96        	add	a2, a2, s0
8020fe5a: 08 e2        	sd	a0, 0(a2)
8020fe5c: 63 7c b5 00  	bgeu	a0, a1, 0x8020fe74 <.LBB136_1460+0x12>
8020fe60: 09 a0        	j	0x8020fe62 <.LBB136_1460>

000000008020fe62 <.LBB136_1460>:
8020fe62: 17 d5 00 00  	auipc	a0, 13
8020fe66: 13 05 e5 61  	addi	a0, a0, 1566
8020fe6a: 81 45        	mv	a1, zero
8020fe6c: 97 00 ff ff  	auipc	ra, 1048560
8020fe70: e7 80 40 23  	jalr	564(ra)
8020fe74: 7d 75        	lui	a0, 1048575
8020fe76: 1b 05 05 5f  	addiw	a0, a0, 1520
8020fe7a: 22 95        	add	a0, a0, s0
8020fe7c: 0c 61        	ld	a1, 0(a0)
8020fe7e: 7d 55        	addi	a0, zero, -1
8020fe80: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020fe82: 6d 8d        	and	a0, a0, a1
8020fe84: 13 96 c5 00  	slli	a2, a1, 12
8020fe88: fd 76        	lui	a3, 1048575
8020fe8a: 9b 86 86 5e  	addiw	a3, a3, 1512
8020fe8e: a2 96        	add	a3, a3, s0
8020fe90: 90 e2        	sd	a2, 0(a3)
8020fe92: 63 0c b5 00  	beq	a0, a1, 0x8020feaa <.LBB136_1461+0x12>
8020fe96: 09 a0        	j	0x8020fe98 <.LBB136_1461>

000000008020fe98 <.LBB136_1461>:
8020fe98: 17 d5 00 00  	auipc	a0, 13
8020fe9c: 13 05 85 5e  	addi	a0, a0, 1512
8020fea0: 81 45        	mv	a1, zero
8020fea2: 97 00 ff ff  	auipc	ra, 1048560
8020fea6: e7 80 e0 1f  	jalr	510(ra)
8020feaa: 7d 75        	lui	a0, 1048575
8020feac: 1b 05 85 5e  	addiw	a0, a0, 1512
8020feb0: 22 95        	add	a0, a0, s0
8020feb2: 08 61        	ld	a0, 0(a0)
8020feb4: 23 3c a4 ee  	sd	a0, -264(s0)
;                                 first_address = region.descriptor.address + offset;
8020feb8: 83 35 84 fd  	ld	a1, -40(s0)
8020febc: 8c 61        	ld	a1, 0(a1)
8020febe: 2e 95        	add	a0, a0, a1
8020fec0: 7d 76        	lui	a2, 1048575
8020fec2: 1b 06 06 5e  	addiw	a2, a2, 1504
8020fec6: 22 96        	add	a2, a2, s0
8020fec8: 08 e2        	sd	a0, 0(a2)
8020feca: 63 7c b5 00  	bgeu	a0, a1, 0x8020fee2 <.LBB136_1462+0x12>
8020fece: 09 a0        	j	0x8020fed0 <.LBB136_1462>

000000008020fed0 <.LBB136_1462>:
8020fed0: 17 d5 00 00  	auipc	a0, 13
8020fed4: 13 05 05 5b  	addi	a0, a0, 1456
8020fed8: 81 45        	mv	a1, zero
8020feda: 97 00 ff ff  	auipc	ra, 1048560
8020fede: e7 80 60 1c  	jalr	454(ra)
8020fee2: 7d 75        	lui	a0, 1048575
8020fee4: 1b 05 05 5e  	addiw	a0, a0, 1504
8020fee8: 22 95        	add	a0, a0, s0
8020feea: 08 61        	ld	a0, 0(a0)
8020feec: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
8020fef0: 6f d0 3f 8f  	j	0x8020d7e2 <.LBB136_1404+0x53e>

000000008020fef4 <.LBB136_1463>:
;                             region_allocated_page_count += 1;
8020fef4: 17 d5 00 00  	auipc	a0, 13
8020fef8: 13 05 c5 58  	addi	a0, a0, 1420
8020fefc: 81 45        	mv	a1, zero
8020fefe: 97 00 ff ff  	auipc	ra, 1048560
8020ff02: e7 80 20 1a  	jalr	418(ra)
8020ff06: 03 35 84 a7  	ld	a0, -1416(s0)
8020ff0a: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
8020ff0e: 6f d0 bf 8f  	j	0x8020d808 <.LBB136_1404+0x564>

000000008020ff12 <.LBB136_1464>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020ff12: 17 d5 00 00  	auipc	a0, 13
8020ff16: 13 05 e5 56  	addi	a0, a0, 1390
8020ff1a: 81 45        	mv	a1, zero
8020ff1c: 97 00 ff ff  	auipc	ra, 1048560
8020ff20: e7 80 40 18  	jalr	388(ra)
8020ff24: 83 35 04 a7  	ld	a1, -1424(s0)
8020ff28: 13 85 a5 00  	addi	a0, a1, 10
8020ff2c: 7d 76        	lui	a2, 1048575
8020ff2e: 1b 06 86 5d  	addiw	a2, a2, 1496
8020ff32: 22 96        	add	a2, a2, s0
8020ff34: 08 e2        	sd	a0, 0(a2)
8020ff36: 63 7c b5 00  	bgeu	a0, a1, 0x8020ff4e <.LBB136_1465+0x12>
8020ff3a: 09 a0        	j	0x8020ff3c <.LBB136_1465>

000000008020ff3c <.LBB136_1465>:
8020ff3c: 17 d5 00 00  	auipc	a0, 13
8020ff40: 13 05 45 54  	addi	a0, a0, 1348
8020ff44: 81 45        	mv	a1, zero
8020ff46: 97 00 ff ff  	auipc	ra, 1048560
8020ff4a: e7 80 a0 15  	jalr	346(ra)
8020ff4e: 7d 75        	lui	a0, 1048575
8020ff50: 1b 05 85 5d  	addiw	a0, a0, 1496
8020ff54: 22 95        	add	a0, a0, s0
8020ff56: 0c 61        	ld	a1, 0(a0)
8020ff58: 7d 55        	addi	a0, zero, -1
8020ff5a: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020ff5c: 6d 8d        	and	a0, a0, a1
8020ff5e: 13 96 c5 00  	slli	a2, a1, 12
8020ff62: fd 76        	lui	a3, 1048575
8020ff64: 9b 86 06 5d  	addiw	a3, a3, 1488
8020ff68: a2 96        	add	a3, a3, s0
8020ff6a: 90 e2        	sd	a2, 0(a3)
8020ff6c: 63 0c b5 00  	beq	a0, a1, 0x8020ff84 <.LBB136_1466+0x12>
8020ff70: 09 a0        	j	0x8020ff72 <.LBB136_1466>

000000008020ff72 <.LBB136_1466>:
8020ff72: 17 d5 00 00  	auipc	a0, 13
8020ff76: 13 05 e5 50  	addi	a0, a0, 1294
8020ff7a: 81 45        	mv	a1, zero
8020ff7c: 97 00 ff ff  	auipc	ra, 1048560
8020ff80: e7 80 40 12  	jalr	292(ra)
8020ff84: 7d 75        	lui	a0, 1048575
8020ff86: 1b 05 05 5d  	addiw	a0, a0, 1488
8020ff8a: 22 95        	add	a0, a0, s0
8020ff8c: 08 61        	ld	a0, 0(a0)
8020ff8e: 23 34 a4 ee  	sd	a0, -280(s0)
;                                 first_address = region.descriptor.address + offset;
8020ff92: 83 35 84 fd  	ld	a1, -40(s0)
8020ff96: 8c 61        	ld	a1, 0(a1)
8020ff98: 2e 95        	add	a0, a0, a1
8020ff9a: 7d 76        	lui	a2, 1048575
8020ff9c: 1b 06 86 5c  	addiw	a2, a2, 1480
8020ffa0: 22 96        	add	a2, a2, s0
8020ffa2: 08 e2        	sd	a0, 0(a2)
8020ffa4: 63 7c b5 00  	bgeu	a0, a1, 0x8020ffbc <.LBB136_1467+0x12>
8020ffa8: 09 a0        	j	0x8020ffaa <.LBB136_1467>

000000008020ffaa <.LBB136_1467>:
8020ffaa: 17 d5 00 00  	auipc	a0, 13
8020ffae: 13 05 65 4d  	addi	a0, a0, 1238
8020ffb2: 81 45        	mv	a1, zero
8020ffb4: 97 00 ff ff  	auipc	ra, 1048560
8020ffb8: e7 80 c0 0e  	jalr	236(ra)
8020ffbc: 7d 75        	lui	a0, 1048575
8020ffbe: 1b 05 85 5c  	addiw	a0, a0, 1480
8020ffc2: 22 95        	add	a0, a0, s0
8020ffc4: 08 61        	ld	a0, 0(a0)
8020ffc6: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
8020ffca: 6f d0 9f 89  	j	0x8020d862 <.LBB136_1404+0x5be>

000000008020ffce <.LBB136_1468>:
;                             region_allocated_page_count += 1;
8020ffce: 17 d5 00 00  	auipc	a0, 13
8020ffd2: 13 05 25 4b  	addi	a0, a0, 1202
8020ffd6: 81 45        	mv	a1, zero
8020ffd8: 97 00 ff ff  	auipc	ra, 1048560
8020ffdc: e7 80 80 0c  	jalr	200(ra)
8020ffe0: 03 35 84 a6  	ld	a0, -1432(s0)
8020ffe4: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
8020ffe8: 6f d0 1f 8a  	j	0x8020d888 <.LBB136_1404+0x5e4>

000000008020ffec <.LBB136_1469>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8020ffec: 17 d5 00 00  	auipc	a0, 13
8020fff0: 13 05 45 49  	addi	a0, a0, 1172
8020fff4: 81 45        	mv	a1, zero
8020fff6: 97 00 ff ff  	auipc	ra, 1048560
8020fffa: e7 80 a0 0a  	jalr	170(ra)
8020fffe: 83 35 04 a6  	ld	a1, -1440(s0)
80210002: 13 85 b5 00  	addi	a0, a1, 11
80210006: 7d 76        	lui	a2, 1048575
80210008: 1b 06 06 5c  	addiw	a2, a2, 1472
8021000c: 22 96        	add	a2, a2, s0
8021000e: 08 e2        	sd	a0, 0(a2)
80210010: 63 7c b5 00  	bgeu	a0, a1, 0x80210028 <.LBB136_1470+0x12>
80210014: 09 a0        	j	0x80210016 <.LBB136_1470>

0000000080210016 <.LBB136_1470>:
80210016: 17 d5 00 00  	auipc	a0, 13
8021001a: 13 05 a5 46  	addi	a0, a0, 1130
8021001e: 81 45        	mv	a1, zero
80210020: 97 00 ff ff  	auipc	ra, 1048560
80210024: e7 80 00 08  	jalr	128(ra)
80210028: 7d 75        	lui	a0, 1048575
8021002a: 1b 05 05 5c  	addiw	a0, a0, 1472
8021002e: 22 95        	add	a0, a0, s0
80210030: 0c 61        	ld	a1, 0(a0)
80210032: 7d 55        	addi	a0, zero, -1
80210034: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210036: 6d 8d        	and	a0, a0, a1
80210038: 13 96 c5 00  	slli	a2, a1, 12
8021003c: fd 76        	lui	a3, 1048575
8021003e: 9b 86 86 5b  	addiw	a3, a3, 1464
80210042: a2 96        	add	a3, a3, s0
80210044: 90 e2        	sd	a2, 0(a3)
80210046: 63 0c b5 00  	beq	a0, a1, 0x8021005e <.LBB136_1471+0x12>
8021004a: 09 a0        	j	0x8021004c <.LBB136_1471>

000000008021004c <.LBB136_1471>:
8021004c: 17 d5 00 00  	auipc	a0, 13
80210050: 13 05 45 43  	addi	a0, a0, 1076
80210054: 81 45        	mv	a1, zero
80210056: 97 00 ff ff  	auipc	ra, 1048560
8021005a: e7 80 a0 04  	jalr	74(ra)
8021005e: 7d 75        	lui	a0, 1048575
80210060: 1b 05 85 5b  	addiw	a0, a0, 1464
80210064: 22 95        	add	a0, a0, s0
80210066: 08 61        	ld	a0, 0(a0)
80210068: 23 3c a4 ec  	sd	a0, -296(s0)
;                                 first_address = region.descriptor.address + offset;
8021006c: 83 35 84 fd  	ld	a1, -40(s0)
80210070: 8c 61        	ld	a1, 0(a1)
80210072: 2e 95        	add	a0, a0, a1
80210074: 7d 76        	lui	a2, 1048575
80210076: 1b 06 06 5b  	addiw	a2, a2, 1456
8021007a: 22 96        	add	a2, a2, s0
8021007c: 08 e2        	sd	a0, 0(a2)
8021007e: 63 7c b5 00  	bgeu	a0, a1, 0x80210096 <.LBB136_1472+0x12>
80210082: 09 a0        	j	0x80210084 <.LBB136_1472>

0000000080210084 <.LBB136_1472>:
80210084: 17 d5 00 00  	auipc	a0, 13
80210088: 13 05 c5 3f  	addi	a0, a0, 1020
8021008c: 81 45        	mv	a1, zero
8021008e: 97 00 ff ff  	auipc	ra, 1048560
80210092: e7 80 20 01  	jalr	18(ra)
80210096: 7d 75        	lui	a0, 1048575
80210098: 1b 05 05 5b  	addiw	a0, a0, 1456
8021009c: 22 95        	add	a0, a0, s0
8021009e: 08 61        	ld	a0, 0(a0)
802100a0: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
802100a4: 6f d0 ff 83  	j	0x8020d8e2 <.LBB136_1404+0x63e>

00000000802100a8 <.LBB136_1473>:
;                             region_allocated_page_count += 1;
802100a8: 17 d5 00 00  	auipc	a0, 13
802100ac: 13 05 85 3d  	addi	a0, a0, 984
802100b0: 81 45        	mv	a1, zero
802100b2: 97 00 ff ff  	auipc	ra, 1048560
802100b6: e7 80 e0 fe  	jalr	-18(ra)
802100ba: 03 35 84 a5  	ld	a0, -1448(s0)
802100be: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
802100c2: 6f d0 bf 84  	j	0x8020d90c <.LBB136_1404+0x668>

00000000802100c6 <.LBB136_1474>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802100c6: 17 d5 00 00  	auipc	a0, 13
802100ca: 13 05 a5 3b  	addi	a0, a0, 954
802100ce: 81 45        	mv	a1, zero
802100d0: 97 00 ff ff  	auipc	ra, 1048560
802100d4: e7 80 00 fd  	jalr	-48(ra)
802100d8: 83 35 04 a5  	ld	a1, -1456(s0)
802100dc: 13 85 c5 00  	addi	a0, a1, 12
802100e0: 7d 76        	lui	a2, 1048575
802100e2: 1b 06 86 5a  	addiw	a2, a2, 1448
802100e6: 22 96        	add	a2, a2, s0
802100e8: 08 e2        	sd	a0, 0(a2)
802100ea: 63 7c b5 00  	bgeu	a0, a1, 0x80210102 <.LBB136_1475+0x12>
802100ee: 09 a0        	j	0x802100f0 <.LBB136_1475>

00000000802100f0 <.LBB136_1475>:
802100f0: 17 d5 00 00  	auipc	a0, 13
802100f4: 13 05 05 39  	addi	a0, a0, 912
802100f8: 81 45        	mv	a1, zero
802100fa: 97 00 ff ff  	auipc	ra, 1048560
802100fe: e7 80 60 fa  	jalr	-90(ra)
80210102: 7d 75        	lui	a0, 1048575
80210104: 1b 05 85 5a  	addiw	a0, a0, 1448
80210108: 22 95        	add	a0, a0, s0
8021010a: 0c 61        	ld	a1, 0(a0)
8021010c: 7d 55        	addi	a0, zero, -1
8021010e: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210110: 6d 8d        	and	a0, a0, a1
80210112: 13 96 c5 00  	slli	a2, a1, 12
80210116: fd 76        	lui	a3, 1048575
80210118: 9b 86 06 5a  	addiw	a3, a3, 1440
8021011c: a2 96        	add	a3, a3, s0
8021011e: 90 e2        	sd	a2, 0(a3)
80210120: 63 0c b5 00  	beq	a0, a1, 0x80210138 <.LBB136_1476+0x12>
80210124: 09 a0        	j	0x80210126 <.LBB136_1476>

0000000080210126 <.LBB136_1476>:
80210126: 17 d5 00 00  	auipc	a0, 13
8021012a: 13 05 a5 35  	addi	a0, a0, 858
8021012e: 81 45        	mv	a1, zero
80210130: 97 00 ff ff  	auipc	ra, 1048560
80210134: e7 80 00 f7  	jalr	-144(ra)
80210138: 7d 75        	lui	a0, 1048575
8021013a: 1b 05 05 5a  	addiw	a0, a0, 1440
8021013e: 22 95        	add	a0, a0, s0
80210140: 08 61        	ld	a0, 0(a0)
80210142: 23 34 a4 ec  	sd	a0, -312(s0)
;                                 first_address = region.descriptor.address + offset;
80210146: 83 35 84 fd  	ld	a1, -40(s0)
8021014a: 8c 61        	ld	a1, 0(a1)
8021014c: 2e 95        	add	a0, a0, a1
8021014e: 7d 76        	lui	a2, 1048575
80210150: 1b 06 86 59  	addiw	a2, a2, 1432
80210154: 22 96        	add	a2, a2, s0
80210156: 08 e2        	sd	a0, 0(a2)
80210158: 63 7c b5 00  	bgeu	a0, a1, 0x80210170 <.LBB136_1477+0x12>
8021015c: 09 a0        	j	0x8021015e <.LBB136_1477>

000000008021015e <.LBB136_1477>:
8021015e: 17 d5 00 00  	auipc	a0, 13
80210162: 13 05 25 32  	addi	a0, a0, 802
80210166: 81 45        	mv	a1, zero
80210168: 97 00 ff ff  	auipc	ra, 1048560
8021016c: e7 80 80 f3  	jalr	-200(ra)
80210170: 7d 75        	lui	a0, 1048575
80210172: 1b 05 85 59  	addiw	a0, a0, 1432
80210176: 22 95        	add	a0, a0, s0
80210178: 08 61        	ld	a0, 0(a0)
8021017a: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
8021017e: 6f d0 8f fe  	j	0x8020d966 <.LBB136_1404+0x6c2>

0000000080210182 <.LBB136_1478>:
;                             region_allocated_page_count += 1;
80210182: 17 d5 00 00  	auipc	a0, 13
80210186: 13 05 e5 2f  	addi	a0, a0, 766
8021018a: 81 45        	mv	a1, zero
8021018c: 97 00 ff ff  	auipc	ra, 1048560
80210190: e7 80 40 f1  	jalr	-236(ra)
80210194: 03 35 84 a4  	ld	a0, -1464(s0)
80210198: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
8021019c: 6f d0 0f ff  	j	0x8020d98c <.LBB136_1404+0x6e8>

00000000802101a0 <.LBB136_1479>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802101a0: 17 d5 00 00  	auipc	a0, 13
802101a4: 13 05 05 2e  	addi	a0, a0, 736
802101a8: 81 45        	mv	a1, zero
802101aa: 97 00 ff ff  	auipc	ra, 1048560
802101ae: e7 80 60 ef  	jalr	-266(ra)
802101b2: 83 35 04 a4  	ld	a1, -1472(s0)
802101b6: 13 85 d5 00  	addi	a0, a1, 13
802101ba: 7d 76        	lui	a2, 1048575
802101bc: 1b 06 06 59  	addiw	a2, a2, 1424
802101c0: 22 96        	add	a2, a2, s0
802101c2: 08 e2        	sd	a0, 0(a2)
802101c4: 63 7c b5 00  	bgeu	a0, a1, 0x802101dc <.LBB136_1480+0x12>
802101c8: 09 a0        	j	0x802101ca <.LBB136_1480>

00000000802101ca <.LBB136_1480>:
802101ca: 17 d5 00 00  	auipc	a0, 13
802101ce: 13 05 65 2b  	addi	a0, a0, 694
802101d2: 81 45        	mv	a1, zero
802101d4: 97 00 ff ff  	auipc	ra, 1048560
802101d8: e7 80 c0 ec  	jalr	-308(ra)
802101dc: 7d 75        	lui	a0, 1048575
802101de: 1b 05 05 59  	addiw	a0, a0, 1424
802101e2: 22 95        	add	a0, a0, s0
802101e4: 0c 61        	ld	a1, 0(a0)
802101e6: 7d 55        	addi	a0, zero, -1
802101e8: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802101ea: 6d 8d        	and	a0, a0, a1
802101ec: 13 96 c5 00  	slli	a2, a1, 12
802101f0: fd 76        	lui	a3, 1048575
802101f2: 9b 86 86 58  	addiw	a3, a3, 1416
802101f6: a2 96        	add	a3, a3, s0
802101f8: 90 e2        	sd	a2, 0(a3)
802101fa: 63 0c b5 00  	beq	a0, a1, 0x80210212 <.LBB136_1481+0x12>
802101fe: 09 a0        	j	0x80210200 <.LBB136_1481>

0000000080210200 <.LBB136_1481>:
80210200: 17 d5 00 00  	auipc	a0, 13
80210204: 13 05 05 28  	addi	a0, a0, 640
80210208: 81 45        	mv	a1, zero
8021020a: 97 00 ff ff  	auipc	ra, 1048560
8021020e: e7 80 60 e9  	jalr	-362(ra)
80210212: 7d 75        	lui	a0, 1048575
80210214: 1b 05 85 58  	addiw	a0, a0, 1416
80210218: 22 95        	add	a0, a0, s0
8021021a: 08 61        	ld	a0, 0(a0)
8021021c: 23 3c a4 ea  	sd	a0, -328(s0)
;                                 first_address = region.descriptor.address + offset;
80210220: 83 35 84 fd  	ld	a1, -40(s0)
80210224: 8c 61        	ld	a1, 0(a1)
80210226: 2e 95        	add	a0, a0, a1
80210228: 7d 76        	lui	a2, 1048575
8021022a: 1b 06 06 58  	addiw	a2, a2, 1408
8021022e: 22 96        	add	a2, a2, s0
80210230: 08 e2        	sd	a0, 0(a2)
80210232: 63 7c b5 00  	bgeu	a0, a1, 0x8021024a <.LBB136_1482+0x12>
80210236: 09 a0        	j	0x80210238 <.LBB136_1482>

0000000080210238 <.LBB136_1482>:
80210238: 17 d5 00 00  	auipc	a0, 13
8021023c: 13 05 85 24  	addi	a0, a0, 584
80210240: 81 45        	mv	a1, zero
80210242: 97 00 ff ff  	auipc	ra, 1048560
80210246: e7 80 e0 e5  	jalr	-418(ra)
8021024a: 7d 75        	lui	a0, 1048575
8021024c: 1b 05 05 58  	addiw	a0, a0, 1408
80210250: 22 95        	add	a0, a0, s0
80210252: 08 61        	ld	a0, 0(a0)
80210254: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80210258: 6f d0 ef f8  	j	0x8020d9e6 <.LBB136_1404+0x742>

000000008021025c <.LBB136_1483>:
;                             region_allocated_page_count += 1;
8021025c: 17 d5 00 00  	auipc	a0, 13
80210260: 13 05 45 22  	addi	a0, a0, 548
80210264: 81 45        	mv	a1, zero
80210266: 97 00 ff ff  	auipc	ra, 1048560
8021026a: e7 80 a0 e3  	jalr	-454(ra)
8021026e: 03 35 84 a3  	ld	a0, -1480(s0)
80210272: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80210276: 6f d0 6f f9  	j	0x8020da0c <.LBB136_1404+0x768>

000000008021027a <.LBB136_1484>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8021027a: 17 d5 00 00  	auipc	a0, 13
8021027e: 13 05 65 20  	addi	a0, a0, 518
80210282: 81 45        	mv	a1, zero
80210284: 97 00 ff ff  	auipc	ra, 1048560
80210288: e7 80 c0 e1  	jalr	-484(ra)
8021028c: 83 35 04 a3  	ld	a1, -1488(s0)
80210290: 13 85 e5 00  	addi	a0, a1, 14
80210294: 7d 76        	lui	a2, 1048575
80210296: 1b 06 86 57  	addiw	a2, a2, 1400
8021029a: 22 96        	add	a2, a2, s0
8021029c: 08 e2        	sd	a0, 0(a2)
8021029e: 63 7c b5 00  	bgeu	a0, a1, 0x802102b6 <.LBB136_1485+0x12>
802102a2: 09 a0        	j	0x802102a4 <.LBB136_1485>

00000000802102a4 <.LBB136_1485>:
802102a4: 17 d5 00 00  	auipc	a0, 13
802102a8: 13 05 c5 1d  	addi	a0, a0, 476
802102ac: 81 45        	mv	a1, zero
802102ae: 97 00 ff ff  	auipc	ra, 1048560
802102b2: e7 80 20 df  	jalr	-526(ra)
802102b6: 7d 75        	lui	a0, 1048575
802102b8: 1b 05 85 57  	addiw	a0, a0, 1400
802102bc: 22 95        	add	a0, a0, s0
802102be: 0c 61        	ld	a1, 0(a0)
802102c0: 7d 55        	addi	a0, zero, -1
802102c2: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802102c4: 6d 8d        	and	a0, a0, a1
802102c6: 13 96 c5 00  	slli	a2, a1, 12
802102ca: fd 76        	lui	a3, 1048575
802102cc: 9b 86 06 57  	addiw	a3, a3, 1392
802102d0: a2 96        	add	a3, a3, s0
802102d2: 90 e2        	sd	a2, 0(a3)
802102d4: 63 0c b5 00  	beq	a0, a1, 0x802102ec <.LBB136_1486+0x12>
802102d8: 09 a0        	j	0x802102da <.LBB136_1486>

00000000802102da <.LBB136_1486>:
802102da: 17 d5 00 00  	auipc	a0, 13
802102de: 13 05 65 1a  	addi	a0, a0, 422
802102e2: 81 45        	mv	a1, zero
802102e4: 97 00 ff ff  	auipc	ra, 1048560
802102e8: e7 80 c0 db  	jalr	-580(ra)
802102ec: 7d 75        	lui	a0, 1048575
802102ee: 1b 05 05 57  	addiw	a0, a0, 1392
802102f2: 22 95        	add	a0, a0, s0
802102f4: 08 61        	ld	a0, 0(a0)
802102f6: 23 34 a4 ea  	sd	a0, -344(s0)
;                                 first_address = region.descriptor.address + offset;
802102fa: 83 35 84 fd  	ld	a1, -40(s0)
802102fe: 8c 61        	ld	a1, 0(a1)
80210300: 2e 95        	add	a0, a0, a1
80210302: 7d 76        	lui	a2, 1048575
80210304: 1b 06 86 56  	addiw	a2, a2, 1384
80210308: 22 96        	add	a2, a2, s0
8021030a: 08 e2        	sd	a0, 0(a2)
8021030c: 63 7c b5 00  	bgeu	a0, a1, 0x80210324 <.LBB136_1487+0x12>
80210310: 09 a0        	j	0x80210312 <.LBB136_1487>

0000000080210312 <.LBB136_1487>:
80210312: 17 d5 00 00  	auipc	a0, 13
80210316: 13 05 e5 16  	addi	a0, a0, 366
8021031a: 81 45        	mv	a1, zero
8021031c: 97 00 ff ff  	auipc	ra, 1048560
80210320: e7 80 40 d8  	jalr	-636(ra)
80210324: 7d 75        	lui	a0, 1048575
80210326: 1b 05 85 56  	addiw	a0, a0, 1384
8021032a: 22 95        	add	a0, a0, s0
8021032c: 08 61        	ld	a0, 0(a0)
8021032e: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80210332: 6f d0 4f f3  	j	0x8020da66 <.LBB136_1404+0x7c2>

0000000080210336 <.LBB136_1488>:
;                             region_allocated_page_count += 1;
80210336: 17 d5 00 00  	auipc	a0, 13
8021033a: 13 05 a5 14  	addi	a0, a0, 330
8021033e: 81 45        	mv	a1, zero
80210340: 97 00 ff ff  	auipc	ra, 1048560
80210344: e7 80 00 d6  	jalr	-672(ra)
80210348: 03 35 84 a2  	ld	a0, -1496(s0)
8021034c: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80210350: 6f d0 cf f3  	j	0x8020da8c <.LBB136_1404+0x7e8>

0000000080210354 <.LBB136_1489>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210354: 17 d5 00 00  	auipc	a0, 13
80210358: 13 05 c5 12  	addi	a0, a0, 300
8021035c: 81 45        	mv	a1, zero
8021035e: 97 00 ff ff  	auipc	ra, 1048560
80210362: e7 80 20 d4  	jalr	-702(ra)
80210366: 83 35 04 a2  	ld	a1, -1504(s0)
8021036a: 13 85 f5 00  	addi	a0, a1, 15
8021036e: 7d 76        	lui	a2, 1048575
80210370: 1b 06 06 56  	addiw	a2, a2, 1376
80210374: 22 96        	add	a2, a2, s0
80210376: 08 e2        	sd	a0, 0(a2)
80210378: 63 7c b5 00  	bgeu	a0, a1, 0x80210390 <.LBB136_1490+0x12>
8021037c: 09 a0        	j	0x8021037e <.LBB136_1490>

000000008021037e <.LBB136_1490>:
8021037e: 17 d5 00 00  	auipc	a0, 13
80210382: 13 05 25 10  	addi	a0, a0, 258
80210386: 81 45        	mv	a1, zero
80210388: 97 00 ff ff  	auipc	ra, 1048560
8021038c: e7 80 80 d1  	jalr	-744(ra)
80210390: 7d 75        	lui	a0, 1048575
80210392: 1b 05 05 56  	addiw	a0, a0, 1376
80210396: 22 95        	add	a0, a0, s0
80210398: 0c 61        	ld	a1, 0(a0)
8021039a: 7d 55        	addi	a0, zero, -1
8021039c: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8021039e: 6d 8d        	and	a0, a0, a1
802103a0: 13 96 c5 00  	slli	a2, a1, 12
802103a4: fd 76        	lui	a3, 1048575
802103a6: 9b 86 86 55  	addiw	a3, a3, 1368
802103aa: a2 96        	add	a3, a3, s0
802103ac: 90 e2        	sd	a2, 0(a3)
802103ae: 63 0c b5 00  	beq	a0, a1, 0x802103c6 <.LBB136_1491+0x12>
802103b2: 09 a0        	j	0x802103b4 <.LBB136_1491>

00000000802103b4 <.LBB136_1491>:
802103b4: 17 d5 00 00  	auipc	a0, 13
802103b8: 13 05 c5 0c  	addi	a0, a0, 204
802103bc: 81 45        	mv	a1, zero
802103be: 97 00 ff ff  	auipc	ra, 1048560
802103c2: e7 80 20 ce  	jalr	-798(ra)
802103c6: 7d 75        	lui	a0, 1048575
802103c8: 1b 05 85 55  	addiw	a0, a0, 1368
802103cc: 22 95        	add	a0, a0, s0
802103ce: 08 61        	ld	a0, 0(a0)
802103d0: 23 3c a4 e8  	sd	a0, -360(s0)
;                                 first_address = region.descriptor.address + offset;
802103d4: 83 35 84 fd  	ld	a1, -40(s0)
802103d8: 8c 61        	ld	a1, 0(a1)
802103da: 2e 95        	add	a0, a0, a1
802103dc: 7d 76        	lui	a2, 1048575
802103de: 1b 06 06 55  	addiw	a2, a2, 1360
802103e2: 22 96        	add	a2, a2, s0
802103e4: 08 e2        	sd	a0, 0(a2)
802103e6: 63 7c b5 00  	bgeu	a0, a1, 0x802103fe <.LBB136_1492+0x12>
802103ea: 09 a0        	j	0x802103ec <.LBB136_1492>

00000000802103ec <.LBB136_1492>:
802103ec: 17 d5 00 00  	auipc	a0, 13
802103f0: 13 05 45 09  	addi	a0, a0, 148
802103f4: 81 45        	mv	a1, zero
802103f6: 97 00 ff ff  	auipc	ra, 1048560
802103fa: e7 80 a0 ca  	jalr	-854(ra)
802103fe: 7d 75        	lui	a0, 1048575
80210400: 1b 05 05 55  	addiw	a0, a0, 1360
80210404: 22 95        	add	a0, a0, s0
80210406: 08 61        	ld	a0, 0(a0)
80210408: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
8021040c: 6f d0 af ed  	j	0x8020dae6 <.LBB136_1404+0x842>

0000000080210410 <.LBB136_1493>:
;                             region_allocated_page_count += 1;
80210410: 17 d5 00 00  	auipc	a0, 13
80210414: 13 05 05 07  	addi	a0, a0, 112
80210418: 81 45        	mv	a1, zero
8021041a: 97 00 ff ff  	auipc	ra, 1048560
8021041e: e7 80 60 c8  	jalr	-890(ra)
80210422: 03 35 84 a1  	ld	a0, -1512(s0)
80210426: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
8021042a: 6f d0 2f ee  	j	0x8020db0c <.LBB136_1404+0x868>

000000008021042e <.LBB136_1494>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8021042e: 17 d5 00 00  	auipc	a0, 13
80210432: 13 05 25 05  	addi	a0, a0, 82
80210436: 81 45        	mv	a1, zero
80210438: 97 00 ff ff  	auipc	ra, 1048560
8021043c: e7 80 80 c6  	jalr	-920(ra)
80210440: 83 35 04 a1  	ld	a1, -1520(s0)
80210444: 13 85 05 01  	addi	a0, a1, 16
80210448: 7d 76        	lui	a2, 1048575
8021044a: 1b 06 86 54  	addiw	a2, a2, 1352
8021044e: 22 96        	add	a2, a2, s0
80210450: 08 e2        	sd	a0, 0(a2)
80210452: 63 7c b5 00  	bgeu	a0, a1, 0x8021046a <.LBB136_1495+0x12>
80210456: 09 a0        	j	0x80210458 <.LBB136_1495>

0000000080210458 <.LBB136_1495>:
80210458: 17 d5 00 00  	auipc	a0, 13
8021045c: 13 05 85 02  	addi	a0, a0, 40
80210460: 81 45        	mv	a1, zero
80210462: 97 00 ff ff  	auipc	ra, 1048560
80210466: e7 80 e0 c3  	jalr	-962(ra)
8021046a: 7d 75        	lui	a0, 1048575
8021046c: 1b 05 85 54  	addiw	a0, a0, 1352
80210470: 22 95        	add	a0, a0, s0
80210472: 0c 61        	ld	a1, 0(a0)
80210474: 7d 55        	addi	a0, zero, -1
80210476: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210478: 6d 8d        	and	a0, a0, a1
8021047a: 13 96 c5 00  	slli	a2, a1, 12
8021047e: fd 76        	lui	a3, 1048575
80210480: 9b 86 06 54  	addiw	a3, a3, 1344
80210484: a2 96        	add	a3, a3, s0
80210486: 90 e2        	sd	a2, 0(a3)
80210488: 63 0c b5 00  	beq	a0, a1, 0x802104a0 <.LBB136_1496+0x12>
8021048c: 09 a0        	j	0x8021048e <.LBB136_1496>

000000008021048e <.LBB136_1496>:
8021048e: 17 d5 00 00  	auipc	a0, 13
80210492: 13 05 25 ff  	addi	a0, a0, -14
80210496: 81 45        	mv	a1, zero
80210498: 97 00 ff ff  	auipc	ra, 1048560
8021049c: e7 80 80 c0  	jalr	-1016(ra)
802104a0: 7d 75        	lui	a0, 1048575
802104a2: 1b 05 05 54  	addiw	a0, a0, 1344
802104a6: 22 95        	add	a0, a0, s0
802104a8: 08 61        	ld	a0, 0(a0)
802104aa: 23 34 a4 e8  	sd	a0, -376(s0)
;                                 first_address = region.descriptor.address + offset;
802104ae: 83 35 84 fd  	ld	a1, -40(s0)
802104b2: 8c 61        	ld	a1, 0(a1)
802104b4: 2e 95        	add	a0, a0, a1
802104b6: 7d 76        	lui	a2, 1048575
802104b8: 1b 06 86 53  	addiw	a2, a2, 1336
802104bc: 22 96        	add	a2, a2, s0
802104be: 08 e2        	sd	a0, 0(a2)
802104c0: 63 7c b5 00  	bgeu	a0, a1, 0x802104d8 <.LBB136_1497+0x12>
802104c4: 09 a0        	j	0x802104c6 <.LBB136_1497>

00000000802104c6 <.LBB136_1497>:
802104c6: 17 d5 00 00  	auipc	a0, 13
802104ca: 13 05 a5 fb  	addi	a0, a0, -70
802104ce: 81 45        	mv	a1, zero
802104d0: 97 00 ff ff  	auipc	ra, 1048560
802104d4: e7 80 00 bd  	jalr	-1072(ra)
802104d8: 7d 75        	lui	a0, 1048575
802104da: 1b 05 85 53  	addiw	a0, a0, 1336
802104de: 22 95        	add	a0, a0, s0
802104e0: 08 61        	ld	a0, 0(a0)
802104e2: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
802104e6: 6f d0 0f e8  	j	0x8020db66 <.LBB136_1404+0x8c2>

00000000802104ea <.LBB136_1498>:
;                             region_allocated_page_count += 1;
802104ea: 17 d5 00 00  	auipc	a0, 13
802104ee: 13 05 65 f9  	addi	a0, a0, -106
802104f2: 81 45        	mv	a1, zero
802104f4: 97 00 ff ff  	auipc	ra, 1048560
802104f8: e7 80 c0 ba  	jalr	-1108(ra)
802104fc: 03 35 84 a0  	ld	a0, -1528(s0)
80210500: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80210504: 6f d0 8f e8  	j	0x8020db8c <.LBB136_1404+0x8e8>

0000000080210508 <.LBB136_1499>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210508: 17 d5 00 00  	auipc	a0, 13
8021050c: 13 05 85 f7  	addi	a0, a0, -136
80210510: 81 45        	mv	a1, zero
80210512: 97 00 ff ff  	auipc	ra, 1048560
80210516: e7 80 e0 b8  	jalr	-1138(ra)
8021051a: 83 35 04 a0  	ld	a1, -1536(s0)
8021051e: 13 85 15 01  	addi	a0, a1, 17
80210522: 7d 76        	lui	a2, 1048575
80210524: 1b 06 06 53  	addiw	a2, a2, 1328
80210528: 22 96        	add	a2, a2, s0
8021052a: 08 e2        	sd	a0, 0(a2)
8021052c: 63 7c b5 00  	bgeu	a0, a1, 0x80210544 <.LBB136_1500+0x12>
80210530: 09 a0        	j	0x80210532 <.LBB136_1500>

0000000080210532 <.LBB136_1500>:
80210532: 17 d5 00 00  	auipc	a0, 13
80210536: 13 05 e5 f4  	addi	a0, a0, -178
8021053a: 81 45        	mv	a1, zero
8021053c: 97 00 ff ff  	auipc	ra, 1048560
80210540: e7 80 40 b6  	jalr	-1180(ra)
80210544: 7d 75        	lui	a0, 1048575
80210546: 1b 05 05 53  	addiw	a0, a0, 1328
8021054a: 22 95        	add	a0, a0, s0
8021054c: 0c 61        	ld	a1, 0(a0)
8021054e: 7d 55        	addi	a0, zero, -1
80210550: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210552: 6d 8d        	and	a0, a0, a1
80210554: 13 96 c5 00  	slli	a2, a1, 12
80210558: fd 76        	lui	a3, 1048575
8021055a: 9b 86 86 52  	addiw	a3, a3, 1320
8021055e: a2 96        	add	a3, a3, s0
80210560: 90 e2        	sd	a2, 0(a3)
80210562: 63 0c b5 00  	beq	a0, a1, 0x8021057a <.LBB136_1501+0x12>
80210566: 09 a0        	j	0x80210568 <.LBB136_1501>

0000000080210568 <.LBB136_1501>:
80210568: 17 d5 00 00  	auipc	a0, 13
8021056c: 13 05 85 f1  	addi	a0, a0, -232
80210570: 81 45        	mv	a1, zero
80210572: 97 00 ff ff  	auipc	ra, 1048560
80210576: e7 80 e0 b2  	jalr	-1234(ra)
8021057a: 7d 75        	lui	a0, 1048575
8021057c: 1b 05 85 52  	addiw	a0, a0, 1320
80210580: 22 95        	add	a0, a0, s0
80210582: 08 61        	ld	a0, 0(a0)
80210584: 23 3c a4 e6  	sd	a0, -392(s0)
;                                 first_address = region.descriptor.address + offset;
80210588: 83 35 84 fd  	ld	a1, -40(s0)
8021058c: 8c 61        	ld	a1, 0(a1)
8021058e: 2e 95        	add	a0, a0, a1
80210590: 7d 76        	lui	a2, 1048575
80210592: 1b 06 06 52  	addiw	a2, a2, 1312
80210596: 22 96        	add	a2, a2, s0
80210598: 08 e2        	sd	a0, 0(a2)
8021059a: 63 7c b5 00  	bgeu	a0, a1, 0x802105b2 <.LBB136_1502+0x12>
8021059e: 09 a0        	j	0x802105a0 <.LBB136_1502>

00000000802105a0 <.LBB136_1502>:
802105a0: 17 d5 00 00  	auipc	a0, 13
802105a4: 13 05 05 ee  	addi	a0, a0, -288
802105a8: 81 45        	mv	a1, zero
802105aa: 97 00 ff ff  	auipc	ra, 1048560
802105ae: e7 80 60 af  	jalr	-1290(ra)
802105b2: 7d 75        	lui	a0, 1048575
802105b4: 1b 05 05 52  	addiw	a0, a0, 1312
802105b8: 22 95        	add	a0, a0, s0
802105ba: 08 61        	ld	a0, 0(a0)
802105bc: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
802105c0: 6f d0 6f e2  	j	0x8020dbe6 <.LBB136_1404+0x942>

00000000802105c4 <.LBB136_1503>:
;                             region_allocated_page_count += 1;
802105c4: 17 d5 00 00  	auipc	a0, 13
802105c8: 13 05 c5 eb  	addi	a0, a0, -324
802105cc: 81 45        	mv	a1, zero
802105ce: 97 00 ff ff  	auipc	ra, 1048560
802105d2: e7 80 20 ad  	jalr	-1326(ra)
802105d6: 03 35 84 9f  	ld	a0, -1544(s0)
802105da: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
802105de: 6f d0 0f e3  	j	0x8020dc0e <.LBB136_1404+0x96a>

00000000802105e2 <.LBB136_1504>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802105e2: 17 d5 00 00  	auipc	a0, 13
802105e6: 13 05 e5 e9  	addi	a0, a0, -354
802105ea: 81 45        	mv	a1, zero
802105ec: 97 00 ff ff  	auipc	ra, 1048560
802105f0: e7 80 40 ab  	jalr	-1356(ra)
802105f4: 83 35 04 9f  	ld	a1, -1552(s0)
802105f8: 13 85 25 01  	addi	a0, a1, 18
802105fc: 7d 76        	lui	a2, 1048575
802105fe: 1b 06 86 51  	addiw	a2, a2, 1304
80210602: 22 96        	add	a2, a2, s0
80210604: 08 e2        	sd	a0, 0(a2)
80210606: 63 7c b5 00  	bgeu	a0, a1, 0x8021061e <.LBB136_1505+0x12>
8021060a: 09 a0        	j	0x8021060c <.LBB136_1505>

000000008021060c <.LBB136_1505>:
8021060c: 17 d5 00 00  	auipc	a0, 13
80210610: 13 05 45 e7  	addi	a0, a0, -396
80210614: 81 45        	mv	a1, zero
80210616: 97 00 ff ff  	auipc	ra, 1048560
8021061a: e7 80 a0 a8  	jalr	-1398(ra)
8021061e: 7d 75        	lui	a0, 1048575
80210620: 1b 05 85 51  	addiw	a0, a0, 1304
80210624: 22 95        	add	a0, a0, s0
80210626: 0c 61        	ld	a1, 0(a0)
80210628: 7d 55        	addi	a0, zero, -1
8021062a: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8021062c: 6d 8d        	and	a0, a0, a1
8021062e: 13 96 c5 00  	slli	a2, a1, 12
80210632: fd 76        	lui	a3, 1048575
80210634: 9b 86 06 51  	addiw	a3, a3, 1296
80210638: a2 96        	add	a3, a3, s0
8021063a: 90 e2        	sd	a2, 0(a3)
8021063c: 63 0c b5 00  	beq	a0, a1, 0x80210654 <.LBB136_1506+0x12>
80210640: 09 a0        	j	0x80210642 <.LBB136_1506>

0000000080210642 <.LBB136_1506>:
80210642: 17 d5 00 00  	auipc	a0, 13
80210646: 13 05 e5 e3  	addi	a0, a0, -450
8021064a: 81 45        	mv	a1, zero
8021064c: 97 00 ff ff  	auipc	ra, 1048560
80210650: e7 80 40 a5  	jalr	-1452(ra)
80210654: 7d 75        	lui	a0, 1048575
80210656: 1b 05 05 51  	addiw	a0, a0, 1296
8021065a: 22 95        	add	a0, a0, s0
8021065c: 08 61        	ld	a0, 0(a0)
8021065e: 23 34 a4 e6  	sd	a0, -408(s0)
;                                 first_address = region.descriptor.address + offset;
80210662: 83 35 84 fd  	ld	a1, -40(s0)
80210666: 8c 61        	ld	a1, 0(a1)
80210668: 2e 95        	add	a0, a0, a1
8021066a: 7d 76        	lui	a2, 1048575
8021066c: 1b 06 86 50  	addiw	a2, a2, 1288
80210670: 22 96        	add	a2, a2, s0
80210672: 08 e2        	sd	a0, 0(a2)
80210674: 63 7c b5 00  	bgeu	a0, a1, 0x8021068c <.LBB136_1507+0x12>
80210678: 09 a0        	j	0x8021067a <.LBB136_1507>

000000008021067a <.LBB136_1507>:
8021067a: 17 d5 00 00  	auipc	a0, 13
8021067e: 13 05 65 e0  	addi	a0, a0, -506
80210682: 81 45        	mv	a1, zero
80210684: 97 00 ff ff  	auipc	ra, 1048560
80210688: e7 80 c0 a1  	jalr	-1508(ra)
8021068c: 7d 75        	lui	a0, 1048575
8021068e: 1b 05 85 50  	addiw	a0, a0, 1288
80210692: 22 95        	add	a0, a0, s0
80210694: 08 61        	ld	a0, 0(a0)
80210696: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
8021069a: 6f d0 ef dc  	j	0x8020dc68 <.LBB136_1404+0x9c4>

000000008021069e <.LBB136_1508>:
;                             region_allocated_page_count += 1;
8021069e: 17 d5 00 00  	auipc	a0, 13
802106a2: 13 05 25 de  	addi	a0, a0, -542
802106a6: 81 45        	mv	a1, zero
802106a8: 97 00 ff ff  	auipc	ra, 1048560
802106ac: e7 80 80 9f  	jalr	-1544(ra)
802106b0: 03 35 84 9e  	ld	a0, -1560(s0)
802106b4: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
802106b8: 6f d0 8f dd  	j	0x8020dc90 <.LBB136_1404+0x9ec>

00000000802106bc <.LBB136_1509>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802106bc: 17 d5 00 00  	auipc	a0, 13
802106c0: 13 05 45 dc  	addi	a0, a0, -572
802106c4: 81 45        	mv	a1, zero
802106c6: 97 00 ff ff  	auipc	ra, 1048560
802106ca: e7 80 a0 9d  	jalr	-1574(ra)
802106ce: 83 35 04 9e  	ld	a1, -1568(s0)
802106d2: 13 85 35 01  	addi	a0, a1, 19
802106d6: 7d 76        	lui	a2, 1048575
802106d8: 1b 06 06 50  	addiw	a2, a2, 1280
802106dc: 22 96        	add	a2, a2, s0
802106de: 08 e2        	sd	a0, 0(a2)
802106e0: 63 7c b5 00  	bgeu	a0, a1, 0x802106f8 <.LBB136_1510+0x12>
802106e4: 09 a0        	j	0x802106e6 <.LBB136_1510>

00000000802106e6 <.LBB136_1510>:
802106e6: 17 d5 00 00  	auipc	a0, 13
802106ea: 13 05 a5 d9  	addi	a0, a0, -614
802106ee: 81 45        	mv	a1, zero
802106f0: 97 00 ff ff  	auipc	ra, 1048560
802106f4: e7 80 00 9b  	jalr	-1616(ra)
802106f8: 7d 75        	lui	a0, 1048575
802106fa: 1b 05 05 50  	addiw	a0, a0, 1280
802106fe: 22 95        	add	a0, a0, s0
80210700: 0c 61        	ld	a1, 0(a0)
80210702: 7d 55        	addi	a0, zero, -1
80210704: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210706: 6d 8d        	and	a0, a0, a1
80210708: 13 96 c5 00  	slli	a2, a1, 12
8021070c: fd 76        	lui	a3, 1048575
8021070e: 9b 86 86 4f  	addiw	a3, a3, 1272
80210712: a2 96        	add	a3, a3, s0
80210714: 90 e2        	sd	a2, 0(a3)
80210716: 63 0c b5 00  	beq	a0, a1, 0x8021072e <.LBB136_1511+0x12>
8021071a: 09 a0        	j	0x8021071c <.LBB136_1511>

000000008021071c <.LBB136_1511>:
8021071c: 17 d5 00 00  	auipc	a0, 13
80210720: 13 05 45 d6  	addi	a0, a0, -668
80210724: 81 45        	mv	a1, zero
80210726: 97 00 ff ff  	auipc	ra, 1048560
8021072a: e7 80 a0 97  	jalr	-1670(ra)
8021072e: 7d 75        	lui	a0, 1048575
80210730: 1b 05 85 4f  	addiw	a0, a0, 1272
80210734: 22 95        	add	a0, a0, s0
80210736: 08 61        	ld	a0, 0(a0)
80210738: 23 3c a4 e4  	sd	a0, -424(s0)
;                                 first_address = region.descriptor.address + offset;
8021073c: 83 35 84 fd  	ld	a1, -40(s0)
80210740: 8c 61        	ld	a1, 0(a1)
80210742: 2e 95        	add	a0, a0, a1
80210744: 7d 76        	lui	a2, 1048575
80210746: 1b 06 06 4f  	addiw	a2, a2, 1264
8021074a: 22 96        	add	a2, a2, s0
8021074c: 08 e2        	sd	a0, 0(a2)
8021074e: 63 7c b5 00  	bgeu	a0, a1, 0x80210766 <.LBB136_1512+0x12>
80210752: 09 a0        	j	0x80210754 <.LBB136_1512>

0000000080210754 <.LBB136_1512>:
80210754: 17 d5 00 00  	auipc	a0, 13
80210758: 13 05 c5 d2  	addi	a0, a0, -724
8021075c: 81 45        	mv	a1, zero
8021075e: 97 00 ff ff  	auipc	ra, 1048560
80210762: e7 80 20 94  	jalr	-1726(ra)
80210766: 7d 75        	lui	a0, 1048575
80210768: 1b 05 05 4f  	addiw	a0, a0, 1264
8021076c: 22 95        	add	a0, a0, s0
8021076e: 08 61        	ld	a0, 0(a0)
80210770: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80210774: 6f d0 6f d7  	j	0x8020dcea <.LBB136_1404+0xa46>

0000000080210778 <.LBB136_1513>:
;                             region_allocated_page_count += 1;
80210778: 17 d5 00 00  	auipc	a0, 13
8021077c: 13 05 85 d0  	addi	a0, a0, -760
80210780: 81 45        	mv	a1, zero
80210782: 97 00 ff ff  	auipc	ra, 1048560
80210786: e7 80 e0 91  	jalr	-1762(ra)
8021078a: 03 35 84 9d  	ld	a0, -1576(s0)
8021078e: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80210792: 6f d0 0f d8  	j	0x8020dd12 <.LBB136_1404+0xa6e>

0000000080210796 <.LBB136_1514>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210796: 17 d5 00 00  	auipc	a0, 13
8021079a: 13 05 a5 ce  	addi	a0, a0, -790
8021079e: 81 45        	mv	a1, zero
802107a0: 97 00 ff ff  	auipc	ra, 1048560
802107a4: e7 80 00 90  	jalr	-1792(ra)
802107a8: 83 35 04 9d  	ld	a1, -1584(s0)
802107ac: 13 85 45 01  	addi	a0, a1, 20
802107b0: 7d 76        	lui	a2, 1048575
802107b2: 1b 06 86 4e  	addiw	a2, a2, 1256
802107b6: 22 96        	add	a2, a2, s0
802107b8: 08 e2        	sd	a0, 0(a2)
802107ba: 63 7c b5 00  	bgeu	a0, a1, 0x802107d2 <.LBB136_1515+0x12>
802107be: 09 a0        	j	0x802107c0 <.LBB136_1515>

00000000802107c0 <.LBB136_1515>:
802107c0: 17 d5 00 00  	auipc	a0, 13
802107c4: 13 05 05 cc  	addi	a0, a0, -832
802107c8: 81 45        	mv	a1, zero
802107ca: 97 00 ff ff  	auipc	ra, 1048560
802107ce: e7 80 60 8d  	jalr	-1834(ra)
802107d2: 7d 75        	lui	a0, 1048575
802107d4: 1b 05 85 4e  	addiw	a0, a0, 1256
802107d8: 22 95        	add	a0, a0, s0
802107da: 0c 61        	ld	a1, 0(a0)
802107dc: 7d 55        	addi	a0, zero, -1
802107de: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802107e0: 6d 8d        	and	a0, a0, a1
802107e2: 13 96 c5 00  	slli	a2, a1, 12
802107e6: fd 76        	lui	a3, 1048575
802107e8: 9b 86 06 4e  	addiw	a3, a3, 1248
802107ec: a2 96        	add	a3, a3, s0
802107ee: 90 e2        	sd	a2, 0(a3)
802107f0: 63 0c b5 00  	beq	a0, a1, 0x80210808 <.LBB136_1516+0x12>
802107f4: 09 a0        	j	0x802107f6 <.LBB136_1516>

00000000802107f6 <.LBB136_1516>:
802107f6: 17 d5 00 00  	auipc	a0, 13
802107fa: 13 05 a5 c8  	addi	a0, a0, -886
802107fe: 81 45        	mv	a1, zero
80210800: 97 00 ff ff  	auipc	ra, 1048560
80210804: e7 80 00 8a  	jalr	-1888(ra)
80210808: 7d 75        	lui	a0, 1048575
8021080a: 1b 05 05 4e  	addiw	a0, a0, 1248
8021080e: 22 95        	add	a0, a0, s0
80210810: 08 61        	ld	a0, 0(a0)
80210812: 23 34 a4 e4  	sd	a0, -440(s0)
;                                 first_address = region.descriptor.address + offset;
80210816: 83 35 84 fd  	ld	a1, -40(s0)
8021081a: 8c 61        	ld	a1, 0(a1)
8021081c: 2e 95        	add	a0, a0, a1
8021081e: 7d 76        	lui	a2, 1048575
80210820: 1b 06 86 4d  	addiw	a2, a2, 1240
80210824: 22 96        	add	a2, a2, s0
80210826: 08 e2        	sd	a0, 0(a2)
80210828: 63 7c b5 00  	bgeu	a0, a1, 0x80210840 <.LBB136_1517+0x12>
8021082c: 09 a0        	j	0x8021082e <.LBB136_1517>

000000008021082e <.LBB136_1517>:
8021082e: 17 d5 00 00  	auipc	a0, 13
80210832: 13 05 25 c5  	addi	a0, a0, -942
80210836: 81 45        	mv	a1, zero
80210838: 97 00 ff ff  	auipc	ra, 1048560
8021083c: e7 80 80 86  	jalr	-1944(ra)
80210840: 7d 75        	lui	a0, 1048575
80210842: 1b 05 85 4d  	addiw	a0, a0, 1240
80210846: 22 95        	add	a0, a0, s0
80210848: 08 61        	ld	a0, 0(a0)
8021084a: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
8021084e: 6f d0 ef d1  	j	0x8020dd6c <.LBB136_1404+0xac8>

0000000080210852 <.LBB136_1518>:
;                             region_allocated_page_count += 1;
80210852: 17 d5 00 00  	auipc	a0, 13
80210856: 13 05 e5 c2  	addi	a0, a0, -978
8021085a: 81 45        	mv	a1, zero
8021085c: 97 00 ff ff  	auipc	ra, 1048560
80210860: e7 80 40 84  	jalr	-1980(ra)
80210864: 03 35 84 9c  	ld	a0, -1592(s0)
80210868: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
8021086c: 6f d0 8f d2  	j	0x8020dd94 <.LBB136_1404+0xaf0>

0000000080210870 <.LBB136_1519>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210870: 17 d5 00 00  	auipc	a0, 13
80210874: 13 05 05 c1  	addi	a0, a0, -1008
80210878: 81 45        	mv	a1, zero
8021087a: 97 00 ff ff  	auipc	ra, 1048560
8021087e: e7 80 60 82  	jalr	-2010(ra)
80210882: 83 35 04 9c  	ld	a1, -1600(s0)
80210886: 13 85 55 01  	addi	a0, a1, 21
8021088a: 7d 76        	lui	a2, 1048575
8021088c: 1b 06 06 4d  	addiw	a2, a2, 1232
80210890: 22 96        	add	a2, a2, s0
80210892: 08 e2        	sd	a0, 0(a2)
80210894: 63 7c b5 00  	bgeu	a0, a1, 0x802108ac <.LBB136_1520+0x12>
80210898: 09 a0        	j	0x8021089a <.LBB136_1520>

000000008021089a <.LBB136_1520>:
8021089a: 17 d5 00 00  	auipc	a0, 13
8021089e: 13 05 65 be  	addi	a0, a0, -1050
802108a2: 81 45        	mv	a1, zero
802108a4: 97 f0 fe ff  	auipc	ra, 1048559
802108a8: e7 80 c0 7f  	jalr	2044(ra)
802108ac: 7d 75        	lui	a0, 1048575
802108ae: 1b 05 05 4d  	addiw	a0, a0, 1232
802108b2: 22 95        	add	a0, a0, s0
802108b4: 0c 61        	ld	a1, 0(a0)
802108b6: 7d 55        	addi	a0, zero, -1
802108b8: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802108ba: 6d 8d        	and	a0, a0, a1
802108bc: 13 96 c5 00  	slli	a2, a1, 12
802108c0: fd 76        	lui	a3, 1048575
802108c2: 9b 86 86 4c  	addiw	a3, a3, 1224
802108c6: a2 96        	add	a3, a3, s0
802108c8: 90 e2        	sd	a2, 0(a3)
802108ca: 63 0c b5 00  	beq	a0, a1, 0x802108e2 <.LBB136_1521+0x12>
802108ce: 09 a0        	j	0x802108d0 <.LBB136_1521>

00000000802108d0 <.LBB136_1521>:
802108d0: 17 d5 00 00  	auipc	a0, 13
802108d4: 13 05 05 bb  	addi	a0, a0, -1104
802108d8: 81 45        	mv	a1, zero
802108da: 97 f0 fe ff  	auipc	ra, 1048559
802108de: e7 80 60 7c  	jalr	1990(ra)
802108e2: 7d 75        	lui	a0, 1048575
802108e4: 1b 05 85 4c  	addiw	a0, a0, 1224
802108e8: 22 95        	add	a0, a0, s0
802108ea: 08 61        	ld	a0, 0(a0)
802108ec: 23 3c a4 e2  	sd	a0, -456(s0)
;                                 first_address = region.descriptor.address + offset;
802108f0: 83 35 84 fd  	ld	a1, -40(s0)
802108f4: 8c 61        	ld	a1, 0(a1)
802108f6: 2e 95        	add	a0, a0, a1
802108f8: 7d 76        	lui	a2, 1048575
802108fa: 1b 06 06 4c  	addiw	a2, a2, 1216
802108fe: 22 96        	add	a2, a2, s0
80210900: 08 e2        	sd	a0, 0(a2)
80210902: 63 7c b5 00  	bgeu	a0, a1, 0x8021091a <.LBB136_1522+0x12>
80210906: 09 a0        	j	0x80210908 <.LBB136_1522>

0000000080210908 <.LBB136_1522>:
80210908: 17 d5 00 00  	auipc	a0, 13
8021090c: 13 05 85 b7  	addi	a0, a0, -1160
80210910: 81 45        	mv	a1, zero
80210912: 97 f0 fe ff  	auipc	ra, 1048559
80210916: e7 80 e0 78  	jalr	1934(ra)
8021091a: 7d 75        	lui	a0, 1048575
8021091c: 1b 05 05 4c  	addiw	a0, a0, 1216
80210920: 22 95        	add	a0, a0, s0
80210922: 08 61        	ld	a0, 0(a0)
80210924: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80210928: 6f d0 6f cc  	j	0x8020ddee <.LBB136_1404+0xb4a>

000000008021092c <.LBB136_1523>:
;                             region_allocated_page_count += 1;
8021092c: 17 d5 00 00  	auipc	a0, 13
80210930: 13 05 45 b5  	addi	a0, a0, -1196
80210934: 81 45        	mv	a1, zero
80210936: 97 f0 fe ff  	auipc	ra, 1048559
8021093a: e7 80 a0 76  	jalr	1898(ra)
8021093e: 03 35 84 9b  	ld	a0, -1608(s0)
80210942: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80210946: 6f d0 0f cd  	j	0x8020de16 <.LBB136_1404+0xb72>

000000008021094a <.LBB136_1524>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8021094a: 17 d5 00 00  	auipc	a0, 13
8021094e: 13 05 65 b3  	addi	a0, a0, -1226
80210952: 81 45        	mv	a1, zero
80210954: 97 f0 fe ff  	auipc	ra, 1048559
80210958: e7 80 c0 74  	jalr	1868(ra)
8021095c: 83 35 04 9b  	ld	a1, -1616(s0)
80210960: 13 85 65 01  	addi	a0, a1, 22
80210964: 7d 76        	lui	a2, 1048575
80210966: 1b 06 86 4b  	addiw	a2, a2, 1208
8021096a: 22 96        	add	a2, a2, s0
8021096c: 08 e2        	sd	a0, 0(a2)
8021096e: 63 7c b5 00  	bgeu	a0, a1, 0x80210986 <.LBB136_1525+0x12>
80210972: 09 a0        	j	0x80210974 <.LBB136_1525>

0000000080210974 <.LBB136_1525>:
80210974: 17 d5 00 00  	auipc	a0, 13
80210978: 13 05 c5 b0  	addi	a0, a0, -1268
8021097c: 81 45        	mv	a1, zero
8021097e: 97 f0 fe ff  	auipc	ra, 1048559
80210982: e7 80 20 72  	jalr	1826(ra)
80210986: 7d 75        	lui	a0, 1048575
80210988: 1b 05 85 4b  	addiw	a0, a0, 1208
8021098c: 22 95        	add	a0, a0, s0
8021098e: 0c 61        	ld	a1, 0(a0)
80210990: 7d 55        	addi	a0, zero, -1
80210992: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210994: 6d 8d        	and	a0, a0, a1
80210996: 13 96 c5 00  	slli	a2, a1, 12
8021099a: fd 76        	lui	a3, 1048575
8021099c: 9b 86 06 4b  	addiw	a3, a3, 1200
802109a0: a2 96        	add	a3, a3, s0
802109a2: 90 e2        	sd	a2, 0(a3)
802109a4: 63 0c b5 00  	beq	a0, a1, 0x802109bc <.LBB136_1526+0x12>
802109a8: 09 a0        	j	0x802109aa <.LBB136_1526>

00000000802109aa <.LBB136_1526>:
802109aa: 17 d5 00 00  	auipc	a0, 13
802109ae: 13 05 65 ad  	addi	a0, a0, -1322
802109b2: 81 45        	mv	a1, zero
802109b4: 97 f0 fe ff  	auipc	ra, 1048559
802109b8: e7 80 c0 6e  	jalr	1772(ra)
802109bc: 7d 75        	lui	a0, 1048575
802109be: 1b 05 05 4b  	addiw	a0, a0, 1200
802109c2: 22 95        	add	a0, a0, s0
802109c4: 08 61        	ld	a0, 0(a0)
802109c6: 23 34 a4 e2  	sd	a0, -472(s0)
;                                 first_address = region.descriptor.address + offset;
802109ca: 83 35 84 fd  	ld	a1, -40(s0)
802109ce: 8c 61        	ld	a1, 0(a1)
802109d0: 2e 95        	add	a0, a0, a1
802109d2: 7d 76        	lui	a2, 1048575
802109d4: 1b 06 86 4a  	addiw	a2, a2, 1192
802109d8: 22 96        	add	a2, a2, s0
802109da: 08 e2        	sd	a0, 0(a2)
802109dc: 63 7c b5 00  	bgeu	a0, a1, 0x802109f4 <.LBB136_1527+0x12>
802109e0: 09 a0        	j	0x802109e2 <.LBB136_1527>

00000000802109e2 <.LBB136_1527>:
802109e2: 17 d5 00 00  	auipc	a0, 13
802109e6: 13 05 e5 a9  	addi	a0, a0, -1378
802109ea: 81 45        	mv	a1, zero
802109ec: 97 f0 fe ff  	auipc	ra, 1048559
802109f0: e7 80 40 6b  	jalr	1716(ra)
802109f4: 7d 75        	lui	a0, 1048575
802109f6: 1b 05 85 4a  	addiw	a0, a0, 1192
802109fa: 22 95        	add	a0, a0, s0
802109fc: 08 61        	ld	a0, 0(a0)
802109fe: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80210a02: 6f d0 ef c6  	j	0x8020de70 <.LBB136_1404+0xbcc>

0000000080210a06 <.LBB136_1528>:
;                             region_allocated_page_count += 1;
80210a06: 17 d5 00 00  	auipc	a0, 13
80210a0a: 13 05 a5 a7  	addi	a0, a0, -1414
80210a0e: 81 45        	mv	a1, zero
80210a10: 97 f0 fe ff  	auipc	ra, 1048559
80210a14: e7 80 00 69  	jalr	1680(ra)
80210a18: 03 35 84 9a  	ld	a0, -1624(s0)
80210a1c: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80210a20: 6f d0 8f c7  	j	0x8020de98 <.LBB136_1404+0xbf4>

0000000080210a24 <.LBB136_1529>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210a24: 17 d5 00 00  	auipc	a0, 13
80210a28: 13 05 c5 a5  	addi	a0, a0, -1444
80210a2c: 81 45        	mv	a1, zero
80210a2e: 97 f0 fe ff  	auipc	ra, 1048559
80210a32: e7 80 20 67  	jalr	1650(ra)
80210a36: 83 35 04 9a  	ld	a1, -1632(s0)
80210a3a: 13 85 75 01  	addi	a0, a1, 23
80210a3e: 7d 76        	lui	a2, 1048575
80210a40: 1b 06 06 4a  	addiw	a2, a2, 1184
80210a44: 22 96        	add	a2, a2, s0
80210a46: 08 e2        	sd	a0, 0(a2)
80210a48: 63 7c b5 00  	bgeu	a0, a1, 0x80210a60 <.LBB136_1530+0x12>
80210a4c: 09 a0        	j	0x80210a4e <.LBB136_1530>

0000000080210a4e <.LBB136_1530>:
80210a4e: 17 d5 00 00  	auipc	a0, 13
80210a52: 13 05 25 a3  	addi	a0, a0, -1486
80210a56: 81 45        	mv	a1, zero
80210a58: 97 f0 fe ff  	auipc	ra, 1048559
80210a5c: e7 80 80 64  	jalr	1608(ra)
80210a60: 7d 75        	lui	a0, 1048575
80210a62: 1b 05 05 4a  	addiw	a0, a0, 1184
80210a66: 22 95        	add	a0, a0, s0
80210a68: 0c 61        	ld	a1, 0(a0)
80210a6a: 7d 55        	addi	a0, zero, -1
80210a6c: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210a6e: 6d 8d        	and	a0, a0, a1
80210a70: 13 96 c5 00  	slli	a2, a1, 12
80210a74: fd 76        	lui	a3, 1048575
80210a76: 9b 86 86 49  	addiw	a3, a3, 1176
80210a7a: a2 96        	add	a3, a3, s0
80210a7c: 90 e2        	sd	a2, 0(a3)
80210a7e: 63 0c b5 00  	beq	a0, a1, 0x80210a96 <.LBB136_1531+0x12>
80210a82: 09 a0        	j	0x80210a84 <.LBB136_1531>

0000000080210a84 <.LBB136_1531>:
80210a84: 17 d5 00 00  	auipc	a0, 13
80210a88: 13 05 c5 9f  	addi	a0, a0, -1540
80210a8c: 81 45        	mv	a1, zero
80210a8e: 97 f0 fe ff  	auipc	ra, 1048559
80210a92: e7 80 20 61  	jalr	1554(ra)
80210a96: 7d 75        	lui	a0, 1048575
80210a98: 1b 05 85 49  	addiw	a0, a0, 1176
80210a9c: 22 95        	add	a0, a0, s0
80210a9e: 08 61        	ld	a0, 0(a0)
80210aa0: 23 3c a4 e0  	sd	a0, -488(s0)
;                                 first_address = region.descriptor.address + offset;
80210aa4: 83 35 84 fd  	ld	a1, -40(s0)
80210aa8: 8c 61        	ld	a1, 0(a1)
80210aaa: 2e 95        	add	a0, a0, a1
80210aac: 7d 76        	lui	a2, 1048575
80210aae: 1b 06 06 49  	addiw	a2, a2, 1168
80210ab2: 22 96        	add	a2, a2, s0
80210ab4: 08 e2        	sd	a0, 0(a2)
80210ab6: 63 7c b5 00  	bgeu	a0, a1, 0x80210ace <.LBB136_1532+0x12>
80210aba: 09 a0        	j	0x80210abc <.LBB136_1532>

0000000080210abc <.LBB136_1532>:
80210abc: 17 d5 00 00  	auipc	a0, 13
80210ac0: 13 05 45 9c  	addi	a0, a0, -1596
80210ac4: 81 45        	mv	a1, zero
80210ac6: 97 f0 fe ff  	auipc	ra, 1048559
80210aca: e7 80 a0 5d  	jalr	1498(ra)
80210ace: 7d 75        	lui	a0, 1048575
80210ad0: 1b 05 05 49  	addiw	a0, a0, 1168
80210ad4: 22 95        	add	a0, a0, s0
80210ad6: 08 61        	ld	a0, 0(a0)
80210ad8: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80210adc: 6f d0 6f c1  	j	0x8020def2 <.LBB136_1404+0xc4e>

0000000080210ae0 <.LBB136_1533>:
;                             region_allocated_page_count += 1;
80210ae0: 17 d5 00 00  	auipc	a0, 13
80210ae4: 13 05 05 9a  	addi	a0, a0, -1632
80210ae8: 81 45        	mv	a1, zero
80210aea: 97 f0 fe ff  	auipc	ra, 1048559
80210aee: e7 80 60 5b  	jalr	1462(ra)
80210af2: 03 35 84 99  	ld	a0, -1640(s0)
80210af6: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80210afa: 6f d0 0f c2  	j	0x8020df1a <.LBB136_1404+0xc76>

0000000080210afe <.LBB136_1534>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210afe: 17 d5 00 00  	auipc	a0, 13
80210b02: 13 05 25 98  	addi	a0, a0, -1662
80210b06: 81 45        	mv	a1, zero
80210b08: 97 f0 fe ff  	auipc	ra, 1048559
80210b0c: e7 80 80 59  	jalr	1432(ra)
80210b10: 83 35 04 99  	ld	a1, -1648(s0)
80210b14: 13 85 85 01  	addi	a0, a1, 24
80210b18: 7d 76        	lui	a2, 1048575
80210b1a: 1b 06 86 48  	addiw	a2, a2, 1160
80210b1e: 22 96        	add	a2, a2, s0
80210b20: 08 e2        	sd	a0, 0(a2)
80210b22: 63 7c b5 00  	bgeu	a0, a1, 0x80210b3a <.LBB136_1535+0x12>
80210b26: 09 a0        	j	0x80210b28 <.LBB136_1535>

0000000080210b28 <.LBB136_1535>:
80210b28: 17 d5 00 00  	auipc	a0, 13
80210b2c: 13 05 85 95  	addi	a0, a0, -1704
80210b30: 81 45        	mv	a1, zero
80210b32: 97 f0 fe ff  	auipc	ra, 1048559
80210b36: e7 80 e0 56  	jalr	1390(ra)
80210b3a: 7d 75        	lui	a0, 1048575
80210b3c: 1b 05 85 48  	addiw	a0, a0, 1160
80210b40: 22 95        	add	a0, a0, s0
80210b42: 0c 61        	ld	a1, 0(a0)
80210b44: 7d 55        	addi	a0, zero, -1
80210b46: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210b48: 6d 8d        	and	a0, a0, a1
80210b4a: 13 96 c5 00  	slli	a2, a1, 12
80210b4e: fd 76        	lui	a3, 1048575
80210b50: 9b 86 06 48  	addiw	a3, a3, 1152
80210b54: a2 96        	add	a3, a3, s0
80210b56: 90 e2        	sd	a2, 0(a3)
80210b58: 63 0c b5 00  	beq	a0, a1, 0x80210b70 <.LBB136_1536+0x12>
80210b5c: 09 a0        	j	0x80210b5e <.LBB136_1536>

0000000080210b5e <.LBB136_1536>:
80210b5e: 17 d5 00 00  	auipc	a0, 13
80210b62: 13 05 25 92  	addi	a0, a0, -1758
80210b66: 81 45        	mv	a1, zero
80210b68: 97 f0 fe ff  	auipc	ra, 1048559
80210b6c: e7 80 80 53  	jalr	1336(ra)
80210b70: 7d 75        	lui	a0, 1048575
80210b72: 1b 05 05 48  	addiw	a0, a0, 1152
80210b76: 22 95        	add	a0, a0, s0
80210b78: 08 61        	ld	a0, 0(a0)
80210b7a: 23 34 a4 e0  	sd	a0, -504(s0)
;                                 first_address = region.descriptor.address + offset;
80210b7e: 83 35 84 fd  	ld	a1, -40(s0)
80210b82: 8c 61        	ld	a1, 0(a1)
80210b84: 2e 95        	add	a0, a0, a1
80210b86: 7d 76        	lui	a2, 1048575
80210b88: 1b 06 86 47  	addiw	a2, a2, 1144
80210b8c: 22 96        	add	a2, a2, s0
80210b8e: 08 e2        	sd	a0, 0(a2)
80210b90: 63 7c b5 00  	bgeu	a0, a1, 0x80210ba8 <.LBB136_1537+0x12>
80210b94: 09 a0        	j	0x80210b96 <.LBB136_1537>

0000000080210b96 <.LBB136_1537>:
80210b96: 17 d5 00 00  	auipc	a0, 13
80210b9a: 13 05 a5 8e  	addi	a0, a0, -1814
80210b9e: 81 45        	mv	a1, zero
80210ba0: 97 f0 fe ff  	auipc	ra, 1048559
80210ba4: e7 80 00 50  	jalr	1280(ra)
80210ba8: 7d 75        	lui	a0, 1048575
80210baa: 1b 05 85 47  	addiw	a0, a0, 1144
80210bae: 22 95        	add	a0, a0, s0
80210bb0: 08 61        	ld	a0, 0(a0)
80210bb2: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80210bb6: 6f d0 ef bb  	j	0x8020df74 <.LBB136_1404+0xcd0>

0000000080210bba <.LBB136_1538>:
;                             region_allocated_page_count += 1;
80210bba: 17 d5 00 00  	auipc	a0, 13
80210bbe: 13 05 65 8c  	addi	a0, a0, -1850
80210bc2: 81 45        	mv	a1, zero
80210bc4: 97 f0 fe ff  	auipc	ra, 1048559
80210bc8: e7 80 c0 4d  	jalr	1244(ra)
80210bcc: 03 35 84 98  	ld	a0, -1656(s0)
80210bd0: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80210bd4: 6f d0 8f bc  	j	0x8020df9c <.LBB136_1404+0xcf8>

0000000080210bd8 <.LBB136_1539>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210bd8: 17 d5 00 00  	auipc	a0, 13
80210bdc: 13 05 85 8a  	addi	a0, a0, -1880
80210be0: 81 45        	mv	a1, zero
80210be2: 97 f0 fe ff  	auipc	ra, 1048559
80210be6: e7 80 e0 4b  	jalr	1214(ra)
80210bea: 83 35 04 98  	ld	a1, -1664(s0)
80210bee: 13 85 95 01  	addi	a0, a1, 25
80210bf2: 7d 76        	lui	a2, 1048575
80210bf4: 1b 06 06 47  	addiw	a2, a2, 1136
80210bf8: 22 96        	add	a2, a2, s0
80210bfa: 08 e2        	sd	a0, 0(a2)
80210bfc: 63 7c b5 00  	bgeu	a0, a1, 0x80210c14 <.LBB136_1540+0x12>
80210c00: 09 a0        	j	0x80210c02 <.LBB136_1540>

0000000080210c02 <.LBB136_1540>:
80210c02: 17 d5 00 00  	auipc	a0, 13
80210c06: 13 05 e5 87  	addi	a0, a0, -1922
80210c0a: 81 45        	mv	a1, zero
80210c0c: 97 f0 fe ff  	auipc	ra, 1048559
80210c10: e7 80 40 49  	jalr	1172(ra)
80210c14: 7d 75        	lui	a0, 1048575
80210c16: 1b 05 05 47  	addiw	a0, a0, 1136
80210c1a: 22 95        	add	a0, a0, s0
80210c1c: 0c 61        	ld	a1, 0(a0)
80210c1e: 7d 55        	addi	a0, zero, -1
80210c20: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210c22: 6d 8d        	and	a0, a0, a1
80210c24: 13 96 c5 00  	slli	a2, a1, 12
80210c28: fd 76        	lui	a3, 1048575
80210c2a: 9b 86 86 46  	addiw	a3, a3, 1128
80210c2e: a2 96        	add	a3, a3, s0
80210c30: 90 e2        	sd	a2, 0(a3)
80210c32: 63 0c b5 00  	beq	a0, a1, 0x80210c4a <.LBB136_1541+0x12>
80210c36: 09 a0        	j	0x80210c38 <.LBB136_1541>

0000000080210c38 <.LBB136_1541>:
80210c38: 17 d5 00 00  	auipc	a0, 13
80210c3c: 13 05 85 84  	addi	a0, a0, -1976
80210c40: 81 45        	mv	a1, zero
80210c42: 97 f0 fe ff  	auipc	ra, 1048559
80210c46: e7 80 e0 45  	jalr	1118(ra)
80210c4a: 7d 75        	lui	a0, 1048575
80210c4c: 1b 05 85 46  	addiw	a0, a0, 1128
80210c50: 22 95        	add	a0, a0, s0
80210c52: 08 61        	ld	a0, 0(a0)
80210c54: 23 3c a4 de  	sd	a0, -520(s0)
;                                 first_address = region.descriptor.address + offset;
80210c58: 83 35 84 fd  	ld	a1, -40(s0)
80210c5c: 8c 61        	ld	a1, 0(a1)
80210c5e: 2e 95        	add	a0, a0, a1
80210c60: 7d 76        	lui	a2, 1048575
80210c62: 1b 06 06 46  	addiw	a2, a2, 1120
80210c66: 22 96        	add	a2, a2, s0
80210c68: 08 e2        	sd	a0, 0(a2)
80210c6a: 63 7c b5 00  	bgeu	a0, a1, 0x80210c82 <.LBB136_1542+0x12>
80210c6e: 09 a0        	j	0x80210c70 <.LBB136_1542>

0000000080210c70 <.LBB136_1542>:
80210c70: 17 d5 00 00  	auipc	a0, 13
80210c74: 13 05 05 81  	addi	a0, a0, -2032
80210c78: 81 45        	mv	a1, zero
80210c7a: 97 f0 fe ff  	auipc	ra, 1048559
80210c7e: e7 80 60 42  	jalr	1062(ra)
80210c82: 7d 75        	lui	a0, 1048575
80210c84: 1b 05 05 46  	addiw	a0, a0, 1120
80210c88: 22 95        	add	a0, a0, s0
80210c8a: 08 61        	ld	a0, 0(a0)
80210c8c: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80210c90: 6f d0 6f b6  	j	0x8020dff6 <.LBB136_1404+0xd52>

0000000080210c94 <.LBB136_1543>:
;                             region_allocated_page_count += 1;
80210c94: 17 c5 00 00  	auipc	a0, 12
80210c98: 13 05 c5 7e  	addi	a0, a0, 2028
80210c9c: 81 45        	mv	a1, zero
80210c9e: 97 f0 fe ff  	auipc	ra, 1048559
80210ca2: e7 80 20 40  	jalr	1026(ra)
80210ca6: 03 35 84 97  	ld	a0, -1672(s0)
80210caa: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80210cae: 6f d0 0f b7  	j	0x8020e01e <.LBB136_1404+0xd7a>

0000000080210cb2 <.LBB136_1544>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210cb2: 17 c5 00 00  	auipc	a0, 12
80210cb6: 13 05 e5 7c  	addi	a0, a0, 1998
80210cba: 81 45        	mv	a1, zero
80210cbc: 97 f0 fe ff  	auipc	ra, 1048559
80210cc0: e7 80 40 3e  	jalr	996(ra)
80210cc4: 83 35 04 97  	ld	a1, -1680(s0)
80210cc8: 13 85 a5 01  	addi	a0, a1, 26
80210ccc: 7d 76        	lui	a2, 1048575
80210cce: 1b 06 86 45  	addiw	a2, a2, 1112
80210cd2: 22 96        	add	a2, a2, s0
80210cd4: 08 e2        	sd	a0, 0(a2)
80210cd6: 63 7c b5 00  	bgeu	a0, a1, 0x80210cee <.LBB136_1545+0x12>
80210cda: 09 a0        	j	0x80210cdc <.LBB136_1545>

0000000080210cdc <.LBB136_1545>:
80210cdc: 17 c5 00 00  	auipc	a0, 12
80210ce0: 13 05 45 7a  	addi	a0, a0, 1956
80210ce4: 81 45        	mv	a1, zero
80210ce6: 97 f0 fe ff  	auipc	ra, 1048559
80210cea: e7 80 a0 3b  	jalr	954(ra)
80210cee: 7d 75        	lui	a0, 1048575
80210cf0: 1b 05 85 45  	addiw	a0, a0, 1112
80210cf4: 22 95        	add	a0, a0, s0
80210cf6: 0c 61        	ld	a1, 0(a0)
80210cf8: 7d 55        	addi	a0, zero, -1
80210cfa: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210cfc: 6d 8d        	and	a0, a0, a1
80210cfe: 13 96 c5 00  	slli	a2, a1, 12
80210d02: fd 76        	lui	a3, 1048575
80210d04: 9b 86 06 45  	addiw	a3, a3, 1104
80210d08: a2 96        	add	a3, a3, s0
80210d0a: 90 e2        	sd	a2, 0(a3)
80210d0c: 63 0c b5 00  	beq	a0, a1, 0x80210d24 <.LBB136_1546+0x12>
80210d10: 09 a0        	j	0x80210d12 <.LBB136_1546>

0000000080210d12 <.LBB136_1546>:
80210d12: 17 c5 00 00  	auipc	a0, 12
80210d16: 13 05 e5 76  	addi	a0, a0, 1902
80210d1a: 81 45        	mv	a1, zero
80210d1c: 97 f0 fe ff  	auipc	ra, 1048559
80210d20: e7 80 40 38  	jalr	900(ra)
80210d24: 7d 75        	lui	a0, 1048575
80210d26: 1b 05 05 45  	addiw	a0, a0, 1104
80210d2a: 22 95        	add	a0, a0, s0
80210d2c: 08 61        	ld	a0, 0(a0)
80210d2e: 23 34 a4 de  	sd	a0, -536(s0)
;                                 first_address = region.descriptor.address + offset;
80210d32: 83 35 84 fd  	ld	a1, -40(s0)
80210d36: 8c 61        	ld	a1, 0(a1)
80210d38: 2e 95        	add	a0, a0, a1
80210d3a: 7d 76        	lui	a2, 1048575
80210d3c: 1b 06 86 44  	addiw	a2, a2, 1096
80210d40: 22 96        	add	a2, a2, s0
80210d42: 08 e2        	sd	a0, 0(a2)
80210d44: 63 7c b5 00  	bgeu	a0, a1, 0x80210d5c <.LBB136_1547+0x12>
80210d48: 09 a0        	j	0x80210d4a <.LBB136_1547>

0000000080210d4a <.LBB136_1547>:
80210d4a: 17 c5 00 00  	auipc	a0, 12
80210d4e: 13 05 65 73  	addi	a0, a0, 1846
80210d52: 81 45        	mv	a1, zero
80210d54: 97 f0 fe ff  	auipc	ra, 1048559
80210d58: e7 80 c0 34  	jalr	844(ra)
80210d5c: 7d 75        	lui	a0, 1048575
80210d5e: 1b 05 85 44  	addiw	a0, a0, 1096
80210d62: 22 95        	add	a0, a0, s0
80210d64: 08 61        	ld	a0, 0(a0)
80210d66: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80210d6a: 6f d0 ef b0  	j	0x8020e078 <.LBB136_1404+0xdd4>

0000000080210d6e <.LBB136_1548>:
;                             region_allocated_page_count += 1;
80210d6e: 17 c5 00 00  	auipc	a0, 12
80210d72: 13 05 25 71  	addi	a0, a0, 1810
80210d76: 81 45        	mv	a1, zero
80210d78: 97 f0 fe ff  	auipc	ra, 1048559
80210d7c: e7 80 80 32  	jalr	808(ra)
80210d80: 03 35 84 96  	ld	a0, -1688(s0)
80210d84: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80210d88: 6f d0 8f b1  	j	0x8020e0a0 <.LBB136_1404+0xdfc>

0000000080210d8c <.LBB136_1549>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210d8c: 17 c5 00 00  	auipc	a0, 12
80210d90: 13 05 45 6f  	addi	a0, a0, 1780
80210d94: 81 45        	mv	a1, zero
80210d96: 97 f0 fe ff  	auipc	ra, 1048559
80210d9a: e7 80 a0 30  	jalr	778(ra)
80210d9e: 83 35 04 96  	ld	a1, -1696(s0)
80210da2: 13 85 b5 01  	addi	a0, a1, 27
80210da6: 7d 76        	lui	a2, 1048575
80210da8: 1b 06 06 44  	addiw	a2, a2, 1088
80210dac: 22 96        	add	a2, a2, s0
80210dae: 08 e2        	sd	a0, 0(a2)
80210db0: 63 7c b5 00  	bgeu	a0, a1, 0x80210dc8 <.LBB136_1550+0x12>
80210db4: 09 a0        	j	0x80210db6 <.LBB136_1550>

0000000080210db6 <.LBB136_1550>:
80210db6: 17 c5 00 00  	auipc	a0, 12
80210dba: 13 05 a5 6c  	addi	a0, a0, 1738
80210dbe: 81 45        	mv	a1, zero
80210dc0: 97 f0 fe ff  	auipc	ra, 1048559
80210dc4: e7 80 00 2e  	jalr	736(ra)
80210dc8: 7d 75        	lui	a0, 1048575
80210dca: 1b 05 05 44  	addiw	a0, a0, 1088
80210dce: 22 95        	add	a0, a0, s0
80210dd0: 0c 61        	ld	a1, 0(a0)
80210dd2: 7d 55        	addi	a0, zero, -1
80210dd4: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210dd6: 6d 8d        	and	a0, a0, a1
80210dd8: 13 96 c5 00  	slli	a2, a1, 12
80210ddc: fd 76        	lui	a3, 1048575
80210dde: 9b 86 86 43  	addiw	a3, a3, 1080
80210de2: a2 96        	add	a3, a3, s0
80210de4: 90 e2        	sd	a2, 0(a3)
80210de6: 63 0c b5 00  	beq	a0, a1, 0x80210dfe <.LBB136_1551+0x12>
80210dea: 09 a0        	j	0x80210dec <.LBB136_1551>

0000000080210dec <.LBB136_1551>:
80210dec: 17 c5 00 00  	auipc	a0, 12
80210df0: 13 05 45 69  	addi	a0, a0, 1684
80210df4: 81 45        	mv	a1, zero
80210df6: 97 f0 fe ff  	auipc	ra, 1048559
80210dfa: e7 80 a0 2a  	jalr	682(ra)
80210dfe: 7d 75        	lui	a0, 1048575
80210e00: 1b 05 85 43  	addiw	a0, a0, 1080
80210e04: 22 95        	add	a0, a0, s0
80210e06: 08 61        	ld	a0, 0(a0)
80210e08: 23 3c a4 dc  	sd	a0, -552(s0)
;                                 first_address = region.descriptor.address + offset;
80210e0c: 83 35 84 fd  	ld	a1, -40(s0)
80210e10: 8c 61        	ld	a1, 0(a1)
80210e12: 2e 95        	add	a0, a0, a1
80210e14: 7d 76        	lui	a2, 1048575
80210e16: 1b 06 06 43  	addiw	a2, a2, 1072
80210e1a: 22 96        	add	a2, a2, s0
80210e1c: 08 e2        	sd	a0, 0(a2)
80210e1e: 63 7c b5 00  	bgeu	a0, a1, 0x80210e36 <.LBB136_1552+0x12>
80210e22: 09 a0        	j	0x80210e24 <.LBB136_1552>

0000000080210e24 <.LBB136_1552>:
80210e24: 17 c5 00 00  	auipc	a0, 12
80210e28: 13 05 c5 65  	addi	a0, a0, 1628
80210e2c: 81 45        	mv	a1, zero
80210e2e: 97 f0 fe ff  	auipc	ra, 1048559
80210e32: e7 80 20 27  	jalr	626(ra)
80210e36: 7d 75        	lui	a0, 1048575
80210e38: 1b 05 05 43  	addiw	a0, a0, 1072
80210e3c: 22 95        	add	a0, a0, s0
80210e3e: 08 61        	ld	a0, 0(a0)
80210e40: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80210e44: 6f d0 6f ab  	j	0x8020e0fa <.LBB136_1404+0xe56>

0000000080210e48 <.LBB136_1553>:
;                             region_allocated_page_count += 1;
80210e48: 17 c5 00 00  	auipc	a0, 12
80210e4c: 13 05 85 63  	addi	a0, a0, 1592
80210e50: 81 45        	mv	a1, zero
80210e52: 97 f0 fe ff  	auipc	ra, 1048559
80210e56: e7 80 e0 24  	jalr	590(ra)
80210e5a: 03 35 84 95  	ld	a0, -1704(s0)
80210e5e: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80210e62: 6f d0 0f ac  	j	0x8020e122 <.LBB136_1404+0xe7e>

0000000080210e66 <.LBB136_1554>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210e66: 17 c5 00 00  	auipc	a0, 12
80210e6a: 13 05 a5 61  	addi	a0, a0, 1562
80210e6e: 81 45        	mv	a1, zero
80210e70: 97 f0 fe ff  	auipc	ra, 1048559
80210e74: e7 80 00 23  	jalr	560(ra)
80210e78: 83 35 04 95  	ld	a1, -1712(s0)
80210e7c: 13 85 c5 01  	addi	a0, a1, 28
80210e80: 7d 76        	lui	a2, 1048575
80210e82: 1b 06 86 42  	addiw	a2, a2, 1064
80210e86: 22 96        	add	a2, a2, s0
80210e88: 08 e2        	sd	a0, 0(a2)
80210e8a: 63 7c b5 00  	bgeu	a0, a1, 0x80210ea2 <.LBB136_1555+0x12>
80210e8e: 09 a0        	j	0x80210e90 <.LBB136_1555>

0000000080210e90 <.LBB136_1555>:
80210e90: 17 c5 00 00  	auipc	a0, 12
80210e94: 13 05 05 5f  	addi	a0, a0, 1520
80210e98: 81 45        	mv	a1, zero
80210e9a: 97 f0 fe ff  	auipc	ra, 1048559
80210e9e: e7 80 60 20  	jalr	518(ra)
80210ea2: 7d 75        	lui	a0, 1048575
80210ea4: 1b 05 85 42  	addiw	a0, a0, 1064
80210ea8: 22 95        	add	a0, a0, s0
80210eaa: 0c 61        	ld	a1, 0(a0)
80210eac: 7d 55        	addi	a0, zero, -1
80210eae: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210eb0: 6d 8d        	and	a0, a0, a1
80210eb2: 13 96 c5 00  	slli	a2, a1, 12
80210eb6: fd 76        	lui	a3, 1048575
80210eb8: 9b 86 06 42  	addiw	a3, a3, 1056
80210ebc: a2 96        	add	a3, a3, s0
80210ebe: 90 e2        	sd	a2, 0(a3)
80210ec0: 63 0c b5 00  	beq	a0, a1, 0x80210ed8 <.LBB136_1556+0x12>
80210ec4: 09 a0        	j	0x80210ec6 <.LBB136_1556>

0000000080210ec6 <.LBB136_1556>:
80210ec6: 17 c5 00 00  	auipc	a0, 12
80210eca: 13 05 a5 5b  	addi	a0, a0, 1466
80210ece: 81 45        	mv	a1, zero
80210ed0: 97 f0 fe ff  	auipc	ra, 1048559
80210ed4: e7 80 00 1d  	jalr	464(ra)
80210ed8: 7d 75        	lui	a0, 1048575
80210eda: 1b 05 05 42  	addiw	a0, a0, 1056
80210ede: 22 95        	add	a0, a0, s0
80210ee0: 08 61        	ld	a0, 0(a0)
80210ee2: 23 34 a4 dc  	sd	a0, -568(s0)
;                                 first_address = region.descriptor.address + offset;
80210ee6: 83 35 84 fd  	ld	a1, -40(s0)
80210eea: 8c 61        	ld	a1, 0(a1)
80210eec: 2e 95        	add	a0, a0, a1
80210eee: 7d 76        	lui	a2, 1048575
80210ef0: 1b 06 86 41  	addiw	a2, a2, 1048
80210ef4: 22 96        	add	a2, a2, s0
80210ef6: 08 e2        	sd	a0, 0(a2)
80210ef8: 63 7c b5 00  	bgeu	a0, a1, 0x80210f10 <.LBB136_1557+0x12>
80210efc: 09 a0        	j	0x80210efe <.LBB136_1557>

0000000080210efe <.LBB136_1557>:
80210efe: 17 c5 00 00  	auipc	a0, 12
80210f02: 13 05 25 58  	addi	a0, a0, 1410
80210f06: 81 45        	mv	a1, zero
80210f08: 97 f0 fe ff  	auipc	ra, 1048559
80210f0c: e7 80 80 19  	jalr	408(ra)
80210f10: 7d 75        	lui	a0, 1048575
80210f12: 1b 05 85 41  	addiw	a0, a0, 1048
80210f16: 22 95        	add	a0, a0, s0
80210f18: 08 61        	ld	a0, 0(a0)
80210f1a: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80210f1e: 6f d0 ef a5  	j	0x8020e17c <.LBB136_1404+0xed8>

0000000080210f22 <.LBB136_1558>:
;                             region_allocated_page_count += 1;
80210f22: 17 c5 00 00  	auipc	a0, 12
80210f26: 13 05 e5 55  	addi	a0, a0, 1374
80210f2a: 81 45        	mv	a1, zero
80210f2c: 97 f0 fe ff  	auipc	ra, 1048559
80210f30: e7 80 40 17  	jalr	372(ra)
80210f34: 03 35 84 94  	ld	a0, -1720(s0)
80210f38: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80210f3c: 6f d0 8f a6  	j	0x8020e1a4 <.LBB136_1404+0xf00>

0000000080210f40 <.LBB136_1559>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210f40: 17 c5 00 00  	auipc	a0, 12
80210f44: 13 05 05 54  	addi	a0, a0, 1344
80210f48: 81 45        	mv	a1, zero
80210f4a: 97 f0 fe ff  	auipc	ra, 1048559
80210f4e: e7 80 60 15  	jalr	342(ra)
80210f52: 83 35 04 94  	ld	a1, -1728(s0)
80210f56: 13 85 d5 01  	addi	a0, a1, 29
80210f5a: 7d 76        	lui	a2, 1048575
80210f5c: 1b 06 06 41  	addiw	a2, a2, 1040
80210f60: 22 96        	add	a2, a2, s0
80210f62: 08 e2        	sd	a0, 0(a2)
80210f64: 63 7c b5 00  	bgeu	a0, a1, 0x80210f7c <.LBB136_1560+0x12>
80210f68: 09 a0        	j	0x80210f6a <.LBB136_1560>

0000000080210f6a <.LBB136_1560>:
80210f6a: 17 c5 00 00  	auipc	a0, 12
80210f6e: 13 05 65 51  	addi	a0, a0, 1302
80210f72: 81 45        	mv	a1, zero
80210f74: 97 f0 fe ff  	auipc	ra, 1048559
80210f78: e7 80 c0 12  	jalr	300(ra)
80210f7c: 7d 75        	lui	a0, 1048575
80210f7e: 1b 05 05 41  	addiw	a0, a0, 1040
80210f82: 22 95        	add	a0, a0, s0
80210f84: 0c 61        	ld	a1, 0(a0)
80210f86: 7d 55        	addi	a0, zero, -1
80210f88: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80210f8a: 6d 8d        	and	a0, a0, a1
80210f8c: 13 96 c5 00  	slli	a2, a1, 12
80210f90: fd 76        	lui	a3, 1048575
80210f92: 9b 86 86 40  	addiw	a3, a3, 1032
80210f96: a2 96        	add	a3, a3, s0
80210f98: 90 e2        	sd	a2, 0(a3)
80210f9a: 63 0c b5 00  	beq	a0, a1, 0x80210fb2 <.LBB136_1561+0x12>
80210f9e: 09 a0        	j	0x80210fa0 <.LBB136_1561>

0000000080210fa0 <.LBB136_1561>:
80210fa0: 17 c5 00 00  	auipc	a0, 12
80210fa4: 13 05 05 4e  	addi	a0, a0, 1248
80210fa8: 81 45        	mv	a1, zero
80210faa: 97 f0 fe ff  	auipc	ra, 1048559
80210fae: e7 80 60 0f  	jalr	246(ra)
80210fb2: 7d 75        	lui	a0, 1048575
80210fb4: 1b 05 85 40  	addiw	a0, a0, 1032
80210fb8: 22 95        	add	a0, a0, s0
80210fba: 08 61        	ld	a0, 0(a0)
80210fbc: 23 3c a4 da  	sd	a0, -584(s0)
;                                 first_address = region.descriptor.address + offset;
80210fc0: 83 35 84 fd  	ld	a1, -40(s0)
80210fc4: 8c 61        	ld	a1, 0(a1)
80210fc6: 2e 95        	add	a0, a0, a1
80210fc8: 7d 76        	lui	a2, 1048575
80210fca: 1b 06 06 40  	addiw	a2, a2, 1024
80210fce: 22 96        	add	a2, a2, s0
80210fd0: 08 e2        	sd	a0, 0(a2)
80210fd2: 63 7c b5 00  	bgeu	a0, a1, 0x80210fea <.LBB136_1562+0x12>
80210fd6: 09 a0        	j	0x80210fd8 <.LBB136_1562>

0000000080210fd8 <.LBB136_1562>:
80210fd8: 17 c5 00 00  	auipc	a0, 12
80210fdc: 13 05 85 4a  	addi	a0, a0, 1192
80210fe0: 81 45        	mv	a1, zero
80210fe2: 97 f0 fe ff  	auipc	ra, 1048559
80210fe6: e7 80 e0 0b  	jalr	190(ra)
80210fea: 7d 75        	lui	a0, 1048575
80210fec: 1b 05 05 40  	addiw	a0, a0, 1024
80210ff0: 22 95        	add	a0, a0, s0
80210ff2: 08 61        	ld	a0, 0(a0)
80210ff4: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80210ff8: 6f d0 6f a0  	j	0x8020e1fe <.LBB136_1404+0xf5a>

0000000080210ffc <.LBB136_1563>:
;                             region_allocated_page_count += 1;
80210ffc: 17 c5 00 00  	auipc	a0, 12
80211000: 13 05 45 48  	addi	a0, a0, 1156
80211004: 81 45        	mv	a1, zero
80211006: 97 f0 fe ff  	auipc	ra, 1048559
8021100a: e7 80 a0 09  	jalr	154(ra)
8021100e: 03 35 84 93  	ld	a0, -1736(s0)
80211012: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80211016: 6f d0 0f a1  	j	0x8020e226 <.LBB136_1404+0xf82>

000000008021101a <.LBB136_1564>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8021101a: 17 c5 00 00  	auipc	a0, 12
8021101e: 13 05 65 46  	addi	a0, a0, 1126
80211022: 81 45        	mv	a1, zero
80211024: 97 f0 fe ff  	auipc	ra, 1048559
80211028: e7 80 c0 07  	jalr	124(ra)
8021102c: 83 35 04 93  	ld	a1, -1744(s0)
80211030: 13 85 e5 01  	addi	a0, a1, 30
80211034: 7d 76        	lui	a2, 1048575
80211036: 1b 06 86 3f  	addiw	a2, a2, 1016
8021103a: 22 96        	add	a2, a2, s0
8021103c: 08 e2        	sd	a0, 0(a2)
8021103e: 63 7c b5 00  	bgeu	a0, a1, 0x80211056 <.LBB136_1565+0x12>
80211042: 09 a0        	j	0x80211044 <.LBB136_1565>

0000000080211044 <.LBB136_1565>:
80211044: 17 c5 00 00  	auipc	a0, 12
80211048: 13 05 c5 43  	addi	a0, a0, 1084
8021104c: 81 45        	mv	a1, zero
8021104e: 97 f0 fe ff  	auipc	ra, 1048559
80211052: e7 80 20 05  	jalr	82(ra)
80211056: 7d 75        	lui	a0, 1048575
80211058: 1b 05 85 3f  	addiw	a0, a0, 1016
8021105c: 22 95        	add	a0, a0, s0
8021105e: 0c 61        	ld	a1, 0(a0)
80211060: 7d 55        	addi	a0, zero, -1
80211062: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80211064: 6d 8d        	and	a0, a0, a1
80211066: 13 96 c5 00  	slli	a2, a1, 12
8021106a: fd 76        	lui	a3, 1048575
8021106c: 9b 86 06 3f  	addiw	a3, a3, 1008
80211070: a2 96        	add	a3, a3, s0
80211072: 90 e2        	sd	a2, 0(a3)
80211074: 63 0c b5 00  	beq	a0, a1, 0x8021108c <.LBB136_1566+0x12>
80211078: 09 a0        	j	0x8021107a <.LBB136_1566>

000000008021107a <.LBB136_1566>:
8021107a: 17 c5 00 00  	auipc	a0, 12
8021107e: 13 05 65 40  	addi	a0, a0, 1030
80211082: 81 45        	mv	a1, zero
80211084: 97 f0 fe ff  	auipc	ra, 1048559
80211088: e7 80 c0 01  	jalr	28(ra)
8021108c: 7d 75        	lui	a0, 1048575
8021108e: 1b 05 05 3f  	addiw	a0, a0, 1008
80211092: 22 95        	add	a0, a0, s0
80211094: 08 61        	ld	a0, 0(a0)
80211096: 23 34 a4 da  	sd	a0, -600(s0)
;                                 first_address = region.descriptor.address + offset;
8021109a: 83 35 84 fd  	ld	a1, -40(s0)
8021109e: 8c 61        	ld	a1, 0(a1)
802110a0: 2e 95        	add	a0, a0, a1
802110a2: 7d 76        	lui	a2, 1048575
802110a4: 1b 06 86 3e  	addiw	a2, a2, 1000
802110a8: 22 96        	add	a2, a2, s0
802110aa: 08 e2        	sd	a0, 0(a2)
802110ac: 63 7c b5 00  	bgeu	a0, a1, 0x802110c4 <.LBB136_1567+0x12>
802110b0: 09 a0        	j	0x802110b2 <.LBB136_1567>

00000000802110b2 <.LBB136_1567>:
802110b2: 17 c5 00 00  	auipc	a0, 12
802110b6: 13 05 e5 3c  	addi	a0, a0, 974
802110ba: 81 45        	mv	a1, zero
802110bc: 97 f0 fe ff  	auipc	ra, 1048559
802110c0: e7 80 40 fe  	jalr	-28(ra)
802110c4: 7d 75        	lui	a0, 1048575
802110c6: 1b 05 85 3e  	addiw	a0, a0, 1000
802110ca: 22 95        	add	a0, a0, s0
802110cc: 08 61        	ld	a0, 0(a0)
802110ce: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
802110d2: 6f d0 ef 9a  	j	0x8020e280 <.LBB136_1404+0xfdc>

00000000802110d6 <.LBB136_1568>:
;                             region_allocated_page_count += 1;
802110d6: 17 c5 00 00  	auipc	a0, 12
802110da: 13 05 a5 3a  	addi	a0, a0, 938
802110de: 81 45        	mv	a1, zero
802110e0: 97 f0 fe ff  	auipc	ra, 1048559
802110e4: e7 80 00 fc  	jalr	-64(ra)
802110e8: 03 35 84 92  	ld	a0, -1752(s0)
802110ec: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
802110f0: 6f d0 8f 9b  	j	0x8020e2a8 <.LBB136_1404+0x1004>

00000000802110f4 <.LBB136_1569>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802110f4: 17 c5 00 00  	auipc	a0, 12
802110f8: 13 05 c5 38  	addi	a0, a0, 908
802110fc: 81 45        	mv	a1, zero
802110fe: 97 f0 fe ff  	auipc	ra, 1048559
80211102: e7 80 20 fa  	jalr	-94(ra)
80211106: 83 35 04 92  	ld	a1, -1760(s0)
8021110a: 13 85 f5 01  	addi	a0, a1, 31
8021110e: 7d 76        	lui	a2, 1048575
80211110: 1b 06 06 3e  	addiw	a2, a2, 992
80211114: 22 96        	add	a2, a2, s0
80211116: 08 e2        	sd	a0, 0(a2)
80211118: 63 7c b5 00  	bgeu	a0, a1, 0x80211130 <.LBB136_1570+0x12>
8021111c: 09 a0        	j	0x8021111e <.LBB136_1570>

000000008021111e <.LBB136_1570>:
8021111e: 17 c5 00 00  	auipc	a0, 12
80211122: 13 05 25 36  	addi	a0, a0, 866
80211126: 81 45        	mv	a1, zero
80211128: 97 f0 fe ff  	auipc	ra, 1048559
8021112c: e7 80 80 f7  	jalr	-136(ra)
80211130: 7d 75        	lui	a0, 1048575
80211132: 1b 05 05 3e  	addiw	a0, a0, 992
80211136: 22 95        	add	a0, a0, s0
80211138: 0c 61        	ld	a1, 0(a0)
8021113a: 7d 55        	addi	a0, zero, -1
8021113c: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8021113e: 6d 8d        	and	a0, a0, a1
80211140: 13 96 c5 00  	slli	a2, a1, 12
80211144: fd 76        	lui	a3, 1048575
80211146: 9b 86 86 3d  	addiw	a3, a3, 984
8021114a: a2 96        	add	a3, a3, s0
8021114c: 90 e2        	sd	a2, 0(a3)
8021114e: 63 0c b5 00  	beq	a0, a1, 0x80211166 <.LBB136_1571+0x12>
80211152: 09 a0        	j	0x80211154 <.LBB136_1571>

0000000080211154 <.LBB136_1571>:
80211154: 17 c5 00 00  	auipc	a0, 12
80211158: 13 05 c5 32  	addi	a0, a0, 812
8021115c: 81 45        	mv	a1, zero
8021115e: 97 f0 fe ff  	auipc	ra, 1048559
80211162: e7 80 20 f4  	jalr	-190(ra)
80211166: 7d 75        	lui	a0, 1048575
80211168: 1b 05 85 3d  	addiw	a0, a0, 984
8021116c: 22 95        	add	a0, a0, s0
8021116e: 08 61        	ld	a0, 0(a0)
80211170: 23 3c a4 d8  	sd	a0, -616(s0)
;                                 first_address = region.descriptor.address + offset;
80211174: 83 35 84 fd  	ld	a1, -40(s0)
80211178: 8c 61        	ld	a1, 0(a1)
8021117a: 2e 95        	add	a0, a0, a1
8021117c: 7d 76        	lui	a2, 1048575
8021117e: 1b 06 06 3d  	addiw	a2, a2, 976
80211182: 22 96        	add	a2, a2, s0
80211184: 08 e2        	sd	a0, 0(a2)
80211186: 63 7c b5 00  	bgeu	a0, a1, 0x8021119e <.LBB136_1572+0x12>
8021118a: 09 a0        	j	0x8021118c <.LBB136_1572>

000000008021118c <.LBB136_1572>:
8021118c: 17 c5 00 00  	auipc	a0, 12
80211190: 13 05 45 2f  	addi	a0, a0, 756
80211194: 81 45        	mv	a1, zero
80211196: 97 f0 fe ff  	auipc	ra, 1048559
8021119a: e7 80 a0 f0  	jalr	-246(ra)
8021119e: 7d 75        	lui	a0, 1048575
802111a0: 1b 05 05 3d  	addiw	a0, a0, 976
802111a4: 22 95        	add	a0, a0, s0
802111a6: 08 61        	ld	a0, 0(a0)
802111a8: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
802111ac: 6f d0 6f 95  	j	0x8020e302 <.LBB136_1404+0x105e>

00000000802111b0 <.LBB136_1573>:
;                             region_allocated_page_count += 1;
802111b0: 17 c5 00 00  	auipc	a0, 12
802111b4: 13 05 05 2d  	addi	a0, a0, 720
802111b8: 81 45        	mv	a1, zero
802111ba: 97 f0 fe ff  	auipc	ra, 1048559
802111be: e7 80 60 ee  	jalr	-282(ra)
802111c2: 03 35 84 91  	ld	a0, -1768(s0)
802111c6: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
802111ca: 6f d0 0f 96  	j	0x8020e32a <.LBB136_1404+0x1086>

00000000802111ce <.LBB136_1574>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802111ce: 17 c5 00 00  	auipc	a0, 12
802111d2: 13 05 25 2b  	addi	a0, a0, 690
802111d6: 81 45        	mv	a1, zero
802111d8: 97 f0 fe ff  	auipc	ra, 1048559
802111dc: e7 80 80 ec  	jalr	-312(ra)
802111e0: 83 35 04 91  	ld	a1, -1776(s0)
802111e4: 13 85 05 02  	addi	a0, a1, 32
802111e8: 7d 76        	lui	a2, 1048575
802111ea: 1b 06 86 3c  	addiw	a2, a2, 968
802111ee: 22 96        	add	a2, a2, s0
802111f0: 08 e2        	sd	a0, 0(a2)
802111f2: 63 7c b5 00  	bgeu	a0, a1, 0x8021120a <.LBB136_1575+0x12>
802111f6: 09 a0        	j	0x802111f8 <.LBB136_1575>

00000000802111f8 <.LBB136_1575>:
802111f8: 17 c5 00 00  	auipc	a0, 12
802111fc: 13 05 85 28  	addi	a0, a0, 648
80211200: 81 45        	mv	a1, zero
80211202: 97 f0 fe ff  	auipc	ra, 1048559
80211206: e7 80 e0 e9  	jalr	-354(ra)
8021120a: 7d 75        	lui	a0, 1048575
8021120c: 1b 05 85 3c  	addiw	a0, a0, 968
80211210: 22 95        	add	a0, a0, s0
80211212: 0c 61        	ld	a1, 0(a0)
80211214: 7d 55        	addi	a0, zero, -1
80211216: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80211218: 6d 8d        	and	a0, a0, a1
8021121a: 13 96 c5 00  	slli	a2, a1, 12
8021121e: fd 76        	lui	a3, 1048575
80211220: 9b 86 06 3c  	addiw	a3, a3, 960
80211224: a2 96        	add	a3, a3, s0
80211226: 90 e2        	sd	a2, 0(a3)
80211228: 63 0c b5 00  	beq	a0, a1, 0x80211240 <.LBB136_1576+0x12>
8021122c: 09 a0        	j	0x8021122e <.LBB136_1576>

000000008021122e <.LBB136_1576>:
8021122e: 17 c5 00 00  	auipc	a0, 12
80211232: 13 05 25 25  	addi	a0, a0, 594
80211236: 81 45        	mv	a1, zero
80211238: 97 f0 fe ff  	auipc	ra, 1048559
8021123c: e7 80 80 e6  	jalr	-408(ra)
80211240: 7d 75        	lui	a0, 1048575
80211242: 1b 05 05 3c  	addiw	a0, a0, 960
80211246: 22 95        	add	a0, a0, s0
80211248: 08 61        	ld	a0, 0(a0)
8021124a: 23 34 a4 d8  	sd	a0, -632(s0)
;                                 first_address = region.descriptor.address + offset;
8021124e: 83 35 84 fd  	ld	a1, -40(s0)
80211252: 8c 61        	ld	a1, 0(a1)
80211254: 2e 95        	add	a0, a0, a1
80211256: 7d 76        	lui	a2, 1048575
80211258: 1b 06 86 3b  	addiw	a2, a2, 952
8021125c: 22 96        	add	a2, a2, s0
8021125e: 08 e2        	sd	a0, 0(a2)
80211260: 63 7c b5 00  	bgeu	a0, a1, 0x80211278 <.LBB136_1577+0x12>
80211264: 09 a0        	j	0x80211266 <.LBB136_1577>

0000000080211266 <.LBB136_1577>:
80211266: 17 c5 00 00  	auipc	a0, 12
8021126a: 13 05 a5 21  	addi	a0, a0, 538
8021126e: 81 45        	mv	a1, zero
80211270: 97 f0 fe ff  	auipc	ra, 1048559
80211274: e7 80 00 e3  	jalr	-464(ra)
80211278: 7d 75        	lui	a0, 1048575
8021127a: 1b 05 85 3b  	addiw	a0, a0, 952
8021127e: 22 95        	add	a0, a0, s0
80211280: 08 61        	ld	a0, 0(a0)
80211282: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80211286: 6f d0 ef 8f  	j	0x8020e384 <.LBB136_1404+0x10e0>

000000008021128a <.LBB136_1578>:
;                             region_allocated_page_count += 1;
8021128a: 17 c5 00 00  	auipc	a0, 12
8021128e: 13 05 65 1f  	addi	a0, a0, 502
80211292: 81 45        	mv	a1, zero
80211294: 97 f0 fe ff  	auipc	ra, 1048559
80211298: e7 80 c0 e0  	jalr	-500(ra)
8021129c: 03 35 84 90  	ld	a0, -1784(s0)
802112a0: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
802112a4: 6f d0 8f 90  	j	0x8020e3ac <.LBB136_1404+0x1108>

00000000802112a8 <.LBB136_1579>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802112a8: 17 c5 00 00  	auipc	a0, 12
802112ac: 13 05 85 1d  	addi	a0, a0, 472
802112b0: 81 45        	mv	a1, zero
802112b2: 97 f0 fe ff  	auipc	ra, 1048559
802112b6: e7 80 e0 de  	jalr	-530(ra)
802112ba: 83 35 04 90  	ld	a1, -1792(s0)
802112be: 13 85 15 02  	addi	a0, a1, 33
802112c2: 7d 76        	lui	a2, 1048575
802112c4: 1b 06 06 3b  	addiw	a2, a2, 944
802112c8: 22 96        	add	a2, a2, s0
802112ca: 08 e2        	sd	a0, 0(a2)
802112cc: 63 7c b5 00  	bgeu	a0, a1, 0x802112e4 <.LBB136_1580+0x12>
802112d0: 09 a0        	j	0x802112d2 <.LBB136_1580>

00000000802112d2 <.LBB136_1580>:
802112d2: 17 c5 00 00  	auipc	a0, 12
802112d6: 13 05 e5 1a  	addi	a0, a0, 430
802112da: 81 45        	mv	a1, zero
802112dc: 97 f0 fe ff  	auipc	ra, 1048559
802112e0: e7 80 40 dc  	jalr	-572(ra)
802112e4: 7d 75        	lui	a0, 1048575
802112e6: 1b 05 05 3b  	addiw	a0, a0, 944
802112ea: 22 95        	add	a0, a0, s0
802112ec: 0c 61        	ld	a1, 0(a0)
802112ee: 7d 55        	addi	a0, zero, -1
802112f0: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802112f2: 6d 8d        	and	a0, a0, a1
802112f4: 13 96 c5 00  	slli	a2, a1, 12
802112f8: fd 76        	lui	a3, 1048575
802112fa: 9b 86 86 3a  	addiw	a3, a3, 936
802112fe: a2 96        	add	a3, a3, s0
80211300: 90 e2        	sd	a2, 0(a3)
80211302: 63 0c b5 00  	beq	a0, a1, 0x8021131a <.LBB136_1581+0x12>
80211306: 09 a0        	j	0x80211308 <.LBB136_1581>

0000000080211308 <.LBB136_1581>:
80211308: 17 c5 00 00  	auipc	a0, 12
8021130c: 13 05 85 17  	addi	a0, a0, 376
80211310: 81 45        	mv	a1, zero
80211312: 97 f0 fe ff  	auipc	ra, 1048559
80211316: e7 80 e0 d8  	jalr	-626(ra)
8021131a: 7d 75        	lui	a0, 1048575
8021131c: 1b 05 85 3a  	addiw	a0, a0, 936
80211320: 22 95        	add	a0, a0, s0
80211322: 08 61        	ld	a0, 0(a0)
80211324: 23 3c a4 d6  	sd	a0, -648(s0)
;                                 first_address = region.descriptor.address + offset;
80211328: 83 35 84 fd  	ld	a1, -40(s0)
8021132c: 8c 61        	ld	a1, 0(a1)
8021132e: 2e 95        	add	a0, a0, a1
80211330: 7d 76        	lui	a2, 1048575
80211332: 1b 06 06 3a  	addiw	a2, a2, 928
80211336: 22 96        	add	a2, a2, s0
80211338: 08 e2        	sd	a0, 0(a2)
8021133a: 63 7c b5 00  	bgeu	a0, a1, 0x80211352 <.LBB136_1582+0x12>
8021133e: 09 a0        	j	0x80211340 <.LBB136_1582>

0000000080211340 <.LBB136_1582>:
80211340: 17 c5 00 00  	auipc	a0, 12
80211344: 13 05 05 14  	addi	a0, a0, 320
80211348: 81 45        	mv	a1, zero
8021134a: 97 f0 fe ff  	auipc	ra, 1048559
8021134e: e7 80 60 d5  	jalr	-682(ra)
80211352: 7d 75        	lui	a0, 1048575
80211354: 1b 05 05 3a  	addiw	a0, a0, 928
80211358: 22 95        	add	a0, a0, s0
8021135a: 08 61        	ld	a0, 0(a0)
8021135c: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80211360: 6f d0 6f 8a  	j	0x8020e406 <.LBB136_1404+0x1162>

0000000080211364 <.LBB136_1583>:
;                             region_allocated_page_count += 1;
80211364: 17 c5 00 00  	auipc	a0, 12
80211368: 13 05 c5 11  	addi	a0, a0, 284
8021136c: 81 45        	mv	a1, zero
8021136e: 97 f0 fe ff  	auipc	ra, 1048559
80211372: e7 80 20 d3  	jalr	-718(ra)
80211376: 03 35 84 8f  	ld	a0, -1800(s0)
8021137a: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
8021137e: 6f d0 0f 8b  	j	0x8020e42e <.LBB136_1404+0x118a>

0000000080211382 <.LBB136_1584>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80211382: 17 c5 00 00  	auipc	a0, 12
80211386: 13 05 e5 0f  	addi	a0, a0, 254
8021138a: 81 45        	mv	a1, zero
8021138c: 97 f0 fe ff  	auipc	ra, 1048559
80211390: e7 80 40 d1  	jalr	-748(ra)
80211394: 83 35 04 8f  	ld	a1, -1808(s0)
80211398: 13 85 25 02  	addi	a0, a1, 34
8021139c: 7d 76        	lui	a2, 1048575
8021139e: 1b 06 86 39  	addiw	a2, a2, 920
802113a2: 22 96        	add	a2, a2, s0
802113a4: 08 e2        	sd	a0, 0(a2)
802113a6: 63 7c b5 00  	bgeu	a0, a1, 0x802113be <.LBB136_1585+0x12>
802113aa: 09 a0        	j	0x802113ac <.LBB136_1585>

00000000802113ac <.LBB136_1585>:
802113ac: 17 c5 00 00  	auipc	a0, 12
802113b0: 13 05 45 0d  	addi	a0, a0, 212
802113b4: 81 45        	mv	a1, zero
802113b6: 97 f0 fe ff  	auipc	ra, 1048559
802113ba: e7 80 a0 ce  	jalr	-790(ra)
802113be: 7d 75        	lui	a0, 1048575
802113c0: 1b 05 85 39  	addiw	a0, a0, 920
802113c4: 22 95        	add	a0, a0, s0
802113c6: 0c 61        	ld	a1, 0(a0)
802113c8: 7d 55        	addi	a0, zero, -1
802113ca: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802113cc: 6d 8d        	and	a0, a0, a1
802113ce: 13 96 c5 00  	slli	a2, a1, 12
802113d2: fd 76        	lui	a3, 1048575
802113d4: 9b 86 06 39  	addiw	a3, a3, 912
802113d8: a2 96        	add	a3, a3, s0
802113da: 90 e2        	sd	a2, 0(a3)
802113dc: 63 0c b5 00  	beq	a0, a1, 0x802113f4 <.LBB136_1586+0x12>
802113e0: 09 a0        	j	0x802113e2 <.LBB136_1586>

00000000802113e2 <.LBB136_1586>:
802113e2: 17 c5 00 00  	auipc	a0, 12
802113e6: 13 05 e5 09  	addi	a0, a0, 158
802113ea: 81 45        	mv	a1, zero
802113ec: 97 f0 fe ff  	auipc	ra, 1048559
802113f0: e7 80 40 cb  	jalr	-844(ra)
802113f4: 7d 75        	lui	a0, 1048575
802113f6: 1b 05 05 39  	addiw	a0, a0, 912
802113fa: 22 95        	add	a0, a0, s0
802113fc: 08 61        	ld	a0, 0(a0)
802113fe: 23 34 a4 d6  	sd	a0, -664(s0)
;                                 first_address = region.descriptor.address + offset;
80211402: 83 35 84 fd  	ld	a1, -40(s0)
80211406: 8c 61        	ld	a1, 0(a1)
80211408: 2e 95        	add	a0, a0, a1
8021140a: 7d 76        	lui	a2, 1048575
8021140c: 1b 06 86 38  	addiw	a2, a2, 904
80211410: 22 96        	add	a2, a2, s0
80211412: 08 e2        	sd	a0, 0(a2)
80211414: 63 7c b5 00  	bgeu	a0, a1, 0x8021142c <.LBB136_1587+0x12>
80211418: 09 a0        	j	0x8021141a <.LBB136_1587>

000000008021141a <.LBB136_1587>:
8021141a: 17 c5 00 00  	auipc	a0, 12
8021141e: 13 05 65 06  	addi	a0, a0, 102
80211422: 81 45        	mv	a1, zero
80211424: 97 f0 fe ff  	auipc	ra, 1048559
80211428: e7 80 c0 c7  	jalr	-900(ra)
8021142c: 7d 75        	lui	a0, 1048575
8021142e: 1b 05 85 38  	addiw	a0, a0, 904
80211432: 22 95        	add	a0, a0, s0
80211434: 08 61        	ld	a0, 0(a0)
80211436: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
8021143a: 6f d0 ef 84  	j	0x8020e488 <.LBB136_1404+0x11e4>

000000008021143e <.LBB136_1588>:
;                             region_allocated_page_count += 1;
8021143e: 17 c5 00 00  	auipc	a0, 12
80211442: 13 05 25 04  	addi	a0, a0, 66
80211446: 81 45        	mv	a1, zero
80211448: 97 f0 fe ff  	auipc	ra, 1048559
8021144c: e7 80 80 c5  	jalr	-936(ra)
80211450: 03 35 84 8e  	ld	a0, -1816(s0)
80211454: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80211458: 6f d0 8f 85  	j	0x8020e4b0 <.LBB136_1404+0x120c>

000000008021145c <.LBB136_1589>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8021145c: 17 c5 00 00  	auipc	a0, 12
80211460: 13 05 45 02  	addi	a0, a0, 36
80211464: 81 45        	mv	a1, zero
80211466: 97 f0 fe ff  	auipc	ra, 1048559
8021146a: e7 80 a0 c3  	jalr	-966(ra)
8021146e: 83 35 04 8e  	ld	a1, -1824(s0)
80211472: 13 85 35 02  	addi	a0, a1, 35
80211476: 7d 76        	lui	a2, 1048575
80211478: 1b 06 06 38  	addiw	a2, a2, 896
8021147c: 22 96        	add	a2, a2, s0
8021147e: 08 e2        	sd	a0, 0(a2)
80211480: 63 7c b5 00  	bgeu	a0, a1, 0x80211498 <.LBB136_1590+0x12>
80211484: 09 a0        	j	0x80211486 <.LBB136_1590>

0000000080211486 <.LBB136_1590>:
80211486: 17 c5 00 00  	auipc	a0, 12
8021148a: 13 05 a5 ff  	addi	a0, a0, -6
8021148e: 81 45        	mv	a1, zero
80211490: 97 f0 fe ff  	auipc	ra, 1048559
80211494: e7 80 00 c1  	jalr	-1008(ra)
80211498: 7d 75        	lui	a0, 1048575
8021149a: 1b 05 05 38  	addiw	a0, a0, 896
8021149e: 22 95        	add	a0, a0, s0
802114a0: 0c 61        	ld	a1, 0(a0)
802114a2: 7d 55        	addi	a0, zero, -1
802114a4: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802114a6: 6d 8d        	and	a0, a0, a1
802114a8: 13 96 c5 00  	slli	a2, a1, 12
802114ac: fd 76        	lui	a3, 1048575
802114ae: 9b 86 86 37  	addiw	a3, a3, 888
802114b2: a2 96        	add	a3, a3, s0
802114b4: 90 e2        	sd	a2, 0(a3)
802114b6: 63 0c b5 00  	beq	a0, a1, 0x802114ce <.LBB136_1591+0x12>
802114ba: 09 a0        	j	0x802114bc <.LBB136_1591>

00000000802114bc <.LBB136_1591>:
802114bc: 17 c5 00 00  	auipc	a0, 12
802114c0: 13 05 45 fc  	addi	a0, a0, -60
802114c4: 81 45        	mv	a1, zero
802114c6: 97 f0 fe ff  	auipc	ra, 1048559
802114ca: e7 80 a0 bd  	jalr	-1062(ra)
802114ce: 7d 75        	lui	a0, 1048575
802114d0: 1b 05 85 37  	addiw	a0, a0, 888
802114d4: 22 95        	add	a0, a0, s0
802114d6: 08 61        	ld	a0, 0(a0)
802114d8: 23 3c a4 d4  	sd	a0, -680(s0)
;                                 first_address = region.descriptor.address + offset;
802114dc: 83 35 84 fd  	ld	a1, -40(s0)
802114e0: 8c 61        	ld	a1, 0(a1)
802114e2: 2e 95        	add	a0, a0, a1
802114e4: 7d 76        	lui	a2, 1048575
802114e6: 1b 06 06 37  	addiw	a2, a2, 880
802114ea: 22 96        	add	a2, a2, s0
802114ec: 08 e2        	sd	a0, 0(a2)
802114ee: 63 7c b5 00  	bgeu	a0, a1, 0x80211506 <.LBB136_1592+0x12>
802114f2: 09 a0        	j	0x802114f4 <.LBB136_1592>

00000000802114f4 <.LBB136_1592>:
802114f4: 17 c5 00 00  	auipc	a0, 12
802114f8: 13 05 c5 f8  	addi	a0, a0, -116
802114fc: 81 45        	mv	a1, zero
802114fe: 97 f0 fe ff  	auipc	ra, 1048559
80211502: e7 80 20 ba  	jalr	-1118(ra)
80211506: 7d 75        	lui	a0, 1048575
80211508: 1b 05 05 37  	addiw	a0, a0, 880
8021150c: 22 95        	add	a0, a0, s0
8021150e: 08 61        	ld	a0, 0(a0)
80211510: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80211514: 6f c0 7f ff  	j	0x8020e50a <.LBB136_1404+0x1266>

0000000080211518 <.LBB136_1593>:
;                             region_allocated_page_count += 1;
80211518: 17 c5 00 00  	auipc	a0, 12
8021151c: 13 05 85 f6  	addi	a0, a0, -152
80211520: 81 45        	mv	a1, zero
80211522: 97 f0 fe ff  	auipc	ra, 1048559
80211526: e7 80 e0 b7  	jalr	-1154(ra)
8021152a: 03 35 84 8d  	ld	a0, -1832(s0)
8021152e: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80211532: 6f d0 0f 80  	j	0x8020e532 <.LBB136_1404+0x128e>

0000000080211536 <.LBB136_1594>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80211536: 17 c5 00 00  	auipc	a0, 12
8021153a: 13 05 a5 f4  	addi	a0, a0, -182
8021153e: 81 45        	mv	a1, zero
80211540: 97 f0 fe ff  	auipc	ra, 1048559
80211544: e7 80 00 b6  	jalr	-1184(ra)
80211548: 83 35 04 8d  	ld	a1, -1840(s0)
8021154c: 13 85 45 02  	addi	a0, a1, 36
80211550: 7d 76        	lui	a2, 1048575
80211552: 1b 06 86 36  	addiw	a2, a2, 872
80211556: 22 96        	add	a2, a2, s0
80211558: 08 e2        	sd	a0, 0(a2)
8021155a: 63 7c b5 00  	bgeu	a0, a1, 0x80211572 <.LBB136_1595+0x12>
8021155e: 09 a0        	j	0x80211560 <.LBB136_1595>

0000000080211560 <.LBB136_1595>:
80211560: 17 c5 00 00  	auipc	a0, 12
80211564: 13 05 05 f2  	addi	a0, a0, -224
80211568: 81 45        	mv	a1, zero
8021156a: 97 f0 fe ff  	auipc	ra, 1048559
8021156e: e7 80 60 b3  	jalr	-1226(ra)
80211572: 7d 75        	lui	a0, 1048575
80211574: 1b 05 85 36  	addiw	a0, a0, 872
80211578: 22 95        	add	a0, a0, s0
8021157a: 0c 61        	ld	a1, 0(a0)
8021157c: 7d 55        	addi	a0, zero, -1
8021157e: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80211580: 6d 8d        	and	a0, a0, a1
80211582: 13 96 c5 00  	slli	a2, a1, 12
80211586: fd 76        	lui	a3, 1048575
80211588: 9b 86 06 36  	addiw	a3, a3, 864
8021158c: a2 96        	add	a3, a3, s0
8021158e: 90 e2        	sd	a2, 0(a3)
80211590: 63 0c b5 00  	beq	a0, a1, 0x802115a8 <.LBB136_1596+0x12>
80211594: 09 a0        	j	0x80211596 <.LBB136_1596>

0000000080211596 <.LBB136_1596>:
80211596: 17 c5 00 00  	auipc	a0, 12
8021159a: 13 05 a5 ee  	addi	a0, a0, -278
8021159e: 81 45        	mv	a1, zero
802115a0: 97 f0 fe ff  	auipc	ra, 1048559
802115a4: e7 80 00 b0  	jalr	-1280(ra)
802115a8: 7d 75        	lui	a0, 1048575
802115aa: 1b 05 05 36  	addiw	a0, a0, 864
802115ae: 22 95        	add	a0, a0, s0
802115b0: 08 61        	ld	a0, 0(a0)
802115b2: 23 34 a4 d4  	sd	a0, -696(s0)
;                                 first_address = region.descriptor.address + offset;
802115b6: 83 35 84 fd  	ld	a1, -40(s0)
802115ba: 8c 61        	ld	a1, 0(a1)
802115bc: 2e 95        	add	a0, a0, a1
802115be: 7d 76        	lui	a2, 1048575
802115c0: 1b 06 86 35  	addiw	a2, a2, 856
802115c4: 22 96        	add	a2, a2, s0
802115c6: 08 e2        	sd	a0, 0(a2)
802115c8: 63 7c b5 00  	bgeu	a0, a1, 0x802115e0 <.LBB136_1597+0x12>
802115cc: 09 a0        	j	0x802115ce <.LBB136_1597>

00000000802115ce <.LBB136_1597>:
802115ce: 17 c5 00 00  	auipc	a0, 12
802115d2: 13 05 25 eb  	addi	a0, a0, -334
802115d6: 81 45        	mv	a1, zero
802115d8: 97 f0 fe ff  	auipc	ra, 1048559
802115dc: e7 80 80 ac  	jalr	-1336(ra)
802115e0: 7d 75        	lui	a0, 1048575
802115e2: 1b 05 85 35  	addiw	a0, a0, 856
802115e6: 22 95        	add	a0, a0, s0
802115e8: 08 61        	ld	a0, 0(a0)
802115ea: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
802115ee: 6f c0 ff f9  	j	0x8020e58c <.LBB136_1404+0x12e8>

00000000802115f2 <.LBB136_1598>:
;                             region_allocated_page_count += 1;
802115f2: 17 c5 00 00  	auipc	a0, 12
802115f6: 13 05 e5 e8  	addi	a0, a0, -370
802115fa: 81 45        	mv	a1, zero
802115fc: 97 f0 fe ff  	auipc	ra, 1048559
80211600: e7 80 40 aa  	jalr	-1372(ra)
80211604: 03 35 84 8c  	ld	a0, -1848(s0)
80211608: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
8021160c: 6f c0 9f fa  	j	0x8020e5b4 <.LBB136_1404+0x1310>

0000000080211610 <.LBB136_1599>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80211610: 17 c5 00 00  	auipc	a0, 12
80211614: 13 05 05 e7  	addi	a0, a0, -400
80211618: 81 45        	mv	a1, zero
8021161a: 97 f0 fe ff  	auipc	ra, 1048559
8021161e: e7 80 60 a8  	jalr	-1402(ra)
80211622: 83 35 04 8c  	ld	a1, -1856(s0)
80211626: 13 85 55 02  	addi	a0, a1, 37
8021162a: 7d 76        	lui	a2, 1048575
8021162c: 1b 06 06 35  	addiw	a2, a2, 848
80211630: 22 96        	add	a2, a2, s0
80211632: 08 e2        	sd	a0, 0(a2)
80211634: 63 7c b5 00  	bgeu	a0, a1, 0x8021164c <.LBB136_1600+0x12>
80211638: 09 a0        	j	0x8021163a <.LBB136_1600>

000000008021163a <.LBB136_1600>:
8021163a: 17 c5 00 00  	auipc	a0, 12
8021163e: 13 05 65 e4  	addi	a0, a0, -442
80211642: 81 45        	mv	a1, zero
80211644: 97 f0 fe ff  	auipc	ra, 1048559
80211648: e7 80 c0 a5  	jalr	-1444(ra)
8021164c: 7d 75        	lui	a0, 1048575
8021164e: 1b 05 05 35  	addiw	a0, a0, 848
80211652: 22 95        	add	a0, a0, s0
80211654: 0c 61        	ld	a1, 0(a0)
80211656: 7d 55        	addi	a0, zero, -1
80211658: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8021165a: 6d 8d        	and	a0, a0, a1
8021165c: 13 96 c5 00  	slli	a2, a1, 12
80211660: fd 76        	lui	a3, 1048575
80211662: 9b 86 86 34  	addiw	a3, a3, 840
80211666: a2 96        	add	a3, a3, s0
80211668: 90 e2        	sd	a2, 0(a3)
8021166a: 63 0c b5 00  	beq	a0, a1, 0x80211682 <.LBB136_1601+0x12>
8021166e: 09 a0        	j	0x80211670 <.LBB136_1601>

0000000080211670 <.LBB136_1601>:
80211670: 17 c5 00 00  	auipc	a0, 12
80211674: 13 05 05 e1  	addi	a0, a0, -496
80211678: 81 45        	mv	a1, zero
8021167a: 97 f0 fe ff  	auipc	ra, 1048559
8021167e: e7 80 60 a2  	jalr	-1498(ra)
80211682: 7d 75        	lui	a0, 1048575
80211684: 1b 05 85 34  	addiw	a0, a0, 840
80211688: 22 95        	add	a0, a0, s0
8021168a: 08 61        	ld	a0, 0(a0)
8021168c: 23 3c a4 d2  	sd	a0, -712(s0)
;                                 first_address = region.descriptor.address + offset;
80211690: 83 35 84 fd  	ld	a1, -40(s0)
80211694: 8c 61        	ld	a1, 0(a1)
80211696: 2e 95        	add	a0, a0, a1
80211698: 7d 76        	lui	a2, 1048575
8021169a: 1b 06 06 34  	addiw	a2, a2, 832
8021169e: 22 96        	add	a2, a2, s0
802116a0: 08 e2        	sd	a0, 0(a2)
802116a2: 63 7c b5 00  	bgeu	a0, a1, 0x802116ba <.LBB136_1602+0x12>
802116a6: 09 a0        	j	0x802116a8 <.LBB136_1602>

00000000802116a8 <.LBB136_1602>:
802116a8: 17 c5 00 00  	auipc	a0, 12
802116ac: 13 05 85 dd  	addi	a0, a0, -552
802116b0: 81 45        	mv	a1, zero
802116b2: 97 f0 fe ff  	auipc	ra, 1048559
802116b6: e7 80 e0 9e  	jalr	-1554(ra)
802116ba: 7d 75        	lui	a0, 1048575
802116bc: 1b 05 05 34  	addiw	a0, a0, 832
802116c0: 22 95        	add	a0, a0, s0
802116c2: 08 61        	ld	a0, 0(a0)
802116c4: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
802116c8: 6f c0 7f f4  	j	0x8020e60e <.LBB136_1404+0x136a>

00000000802116cc <.LBB136_1603>:
;                             region_allocated_page_count += 1;
802116cc: 17 c5 00 00  	auipc	a0, 12
802116d0: 13 05 45 db  	addi	a0, a0, -588
802116d4: 81 45        	mv	a1, zero
802116d6: 97 f0 fe ff  	auipc	ra, 1048559
802116da: e7 80 a0 9c  	jalr	-1590(ra)
802116de: 03 35 84 8b  	ld	a0, -1864(s0)
802116e2: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
802116e6: 6f c0 1f f5  	j	0x8020e636 <.LBB136_1404+0x1392>

00000000802116ea <.LBB136_1604>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802116ea: 17 c5 00 00  	auipc	a0, 12
802116ee: 13 05 65 d9  	addi	a0, a0, -618
802116f2: 81 45        	mv	a1, zero
802116f4: 97 f0 fe ff  	auipc	ra, 1048559
802116f8: e7 80 c0 9a  	jalr	-1620(ra)
802116fc: 83 35 04 8b  	ld	a1, -1872(s0)
80211700: 13 85 65 02  	addi	a0, a1, 38
80211704: 7d 76        	lui	a2, 1048575
80211706: 1b 06 86 33  	addiw	a2, a2, 824
8021170a: 22 96        	add	a2, a2, s0
8021170c: 08 e2        	sd	a0, 0(a2)
8021170e: 63 7c b5 00  	bgeu	a0, a1, 0x80211726 <.LBB136_1605+0x12>
80211712: 09 a0        	j	0x80211714 <.LBB136_1605>

0000000080211714 <.LBB136_1605>:
80211714: 17 c5 00 00  	auipc	a0, 12
80211718: 13 05 c5 d6  	addi	a0, a0, -660
8021171c: 81 45        	mv	a1, zero
8021171e: 97 f0 fe ff  	auipc	ra, 1048559
80211722: e7 80 20 98  	jalr	-1662(ra)
80211726: 7d 75        	lui	a0, 1048575
80211728: 1b 05 85 33  	addiw	a0, a0, 824
8021172c: 22 95        	add	a0, a0, s0
8021172e: 0c 61        	ld	a1, 0(a0)
80211730: 7d 55        	addi	a0, zero, -1
80211732: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80211734: 6d 8d        	and	a0, a0, a1
80211736: 13 96 c5 00  	slli	a2, a1, 12
8021173a: fd 76        	lui	a3, 1048575
8021173c: 9b 86 06 33  	addiw	a3, a3, 816
80211740: a2 96        	add	a3, a3, s0
80211742: 90 e2        	sd	a2, 0(a3)
80211744: 63 0c b5 00  	beq	a0, a1, 0x8021175c <.LBB136_1606+0x12>
80211748: 09 a0        	j	0x8021174a <.LBB136_1606>

000000008021174a <.LBB136_1606>:
8021174a: 17 c5 00 00  	auipc	a0, 12
8021174e: 13 05 65 d3  	addi	a0, a0, -714
80211752: 81 45        	mv	a1, zero
80211754: 97 f0 fe ff  	auipc	ra, 1048559
80211758: e7 80 c0 94  	jalr	-1716(ra)
8021175c: 7d 75        	lui	a0, 1048575
8021175e: 1b 05 05 33  	addiw	a0, a0, 816
80211762: 22 95        	add	a0, a0, s0
80211764: 08 61        	ld	a0, 0(a0)
80211766: 23 34 a4 d2  	sd	a0, -728(s0)
;                                 first_address = region.descriptor.address + offset;
8021176a: 83 35 84 fd  	ld	a1, -40(s0)
8021176e: 8c 61        	ld	a1, 0(a1)
80211770: 2e 95        	add	a0, a0, a1
80211772: 7d 76        	lui	a2, 1048575
80211774: 1b 06 86 32  	addiw	a2, a2, 808
80211778: 22 96        	add	a2, a2, s0
8021177a: 08 e2        	sd	a0, 0(a2)
8021177c: 63 7c b5 00  	bgeu	a0, a1, 0x80211794 <.LBB136_1607+0x12>
80211780: 09 a0        	j	0x80211782 <.LBB136_1607>

0000000080211782 <.LBB136_1607>:
80211782: 17 c5 00 00  	auipc	a0, 12
80211786: 13 05 e5 cf  	addi	a0, a0, -770
8021178a: 81 45        	mv	a1, zero
8021178c: 97 f0 fe ff  	auipc	ra, 1048559
80211790: e7 80 40 91  	jalr	-1772(ra)
80211794: 7d 75        	lui	a0, 1048575
80211796: 1b 05 85 32  	addiw	a0, a0, 808
8021179a: 22 95        	add	a0, a0, s0
8021179c: 08 61        	ld	a0, 0(a0)
8021179e: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
802117a2: 6f c0 ff ee  	j	0x8020e690 <.LBB136_1404+0x13ec>

00000000802117a6 <.LBB136_1608>:
;                             region_allocated_page_count += 1;
802117a6: 17 c5 00 00  	auipc	a0, 12
802117aa: 13 05 a5 cd  	addi	a0, a0, -806
802117ae: 81 45        	mv	a1, zero
802117b0: 97 f0 fe ff  	auipc	ra, 1048559
802117b4: e7 80 00 8f  	jalr	-1808(ra)
802117b8: 03 35 84 8a  	ld	a0, -1880(s0)
802117bc: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
802117c0: 6f c0 9f ef  	j	0x8020e6b8 <.LBB136_1404+0x1414>

00000000802117c4 <.LBB136_1609>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802117c4: 17 c5 00 00  	auipc	a0, 12
802117c8: 13 05 c5 cb  	addi	a0, a0, -836
802117cc: 81 45        	mv	a1, zero
802117ce: 97 f0 fe ff  	auipc	ra, 1048559
802117d2: e7 80 20 8d  	jalr	-1838(ra)
802117d6: 83 35 04 8a  	ld	a1, -1888(s0)
802117da: 13 85 75 02  	addi	a0, a1, 39
802117de: 7d 76        	lui	a2, 1048575
802117e0: 1b 06 06 32  	addiw	a2, a2, 800
802117e4: 22 96        	add	a2, a2, s0
802117e6: 08 e2        	sd	a0, 0(a2)
802117e8: 63 7c b5 00  	bgeu	a0, a1, 0x80211800 <.LBB136_1610+0x12>
802117ec: 09 a0        	j	0x802117ee <.LBB136_1610>

00000000802117ee <.LBB136_1610>:
802117ee: 17 c5 00 00  	auipc	a0, 12
802117f2: 13 05 25 c9  	addi	a0, a0, -878
802117f6: 81 45        	mv	a1, zero
802117f8: 97 f0 fe ff  	auipc	ra, 1048559
802117fc: e7 80 80 8a  	jalr	-1880(ra)
80211800: 7d 75        	lui	a0, 1048575
80211802: 1b 05 05 32  	addiw	a0, a0, 800
80211806: 22 95        	add	a0, a0, s0
80211808: 0c 61        	ld	a1, 0(a0)
8021180a: 7d 55        	addi	a0, zero, -1
8021180c: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8021180e: 6d 8d        	and	a0, a0, a1
80211810: 13 96 c5 00  	slli	a2, a1, 12
80211814: fd 76        	lui	a3, 1048575
80211816: 9b 86 86 31  	addiw	a3, a3, 792
8021181a: a2 96        	add	a3, a3, s0
8021181c: 90 e2        	sd	a2, 0(a3)
8021181e: 63 0c b5 00  	beq	a0, a1, 0x80211836 <.LBB136_1611+0x12>
80211822: 09 a0        	j	0x80211824 <.LBB136_1611>

0000000080211824 <.LBB136_1611>:
80211824: 17 c5 00 00  	auipc	a0, 12
80211828: 13 05 c5 c5  	addi	a0, a0, -932
8021182c: 81 45        	mv	a1, zero
8021182e: 97 f0 fe ff  	auipc	ra, 1048559
80211832: e7 80 20 87  	jalr	-1934(ra)
80211836: 7d 75        	lui	a0, 1048575
80211838: 1b 05 85 31  	addiw	a0, a0, 792
8021183c: 22 95        	add	a0, a0, s0
8021183e: 08 61        	ld	a0, 0(a0)
80211840: 23 3c a4 d0  	sd	a0, -744(s0)
;                                 first_address = region.descriptor.address + offset;
80211844: 83 35 84 fd  	ld	a1, -40(s0)
80211848: 8c 61        	ld	a1, 0(a1)
8021184a: 2e 95        	add	a0, a0, a1
8021184c: 7d 76        	lui	a2, 1048575
8021184e: 1b 06 06 31  	addiw	a2, a2, 784
80211852: 22 96        	add	a2, a2, s0
80211854: 08 e2        	sd	a0, 0(a2)
80211856: 63 7c b5 00  	bgeu	a0, a1, 0x8021186e <.LBB136_1612+0x12>
8021185a: 09 a0        	j	0x8021185c <.LBB136_1612>

000000008021185c <.LBB136_1612>:
8021185c: 17 c5 00 00  	auipc	a0, 12
80211860: 13 05 45 c2  	addi	a0, a0, -988
80211864: 81 45        	mv	a1, zero
80211866: 97 f0 fe ff  	auipc	ra, 1048559
8021186a: e7 80 a0 83  	jalr	-1990(ra)
8021186e: 7d 75        	lui	a0, 1048575
80211870: 1b 05 05 31  	addiw	a0, a0, 784
80211874: 22 95        	add	a0, a0, s0
80211876: 08 61        	ld	a0, 0(a0)
80211878: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
8021187c: 6f c0 7f e9  	j	0x8020e712 <.LBB136_1404+0x146e>

0000000080211880 <.LBB136_1613>:
;                             region_allocated_page_count += 1;
80211880: 17 c5 00 00  	auipc	a0, 12
80211884: 13 05 05 c0  	addi	a0, a0, -1024
80211888: 81 45        	mv	a1, zero
8021188a: 97 f0 fe ff  	auipc	ra, 1048559
8021188e: e7 80 60 81  	jalr	-2026(ra)
80211892: 03 35 84 89  	ld	a0, -1896(s0)
80211896: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
8021189a: 6f c0 1f ea  	j	0x8020e73a <.LBB136_1404+0x1496>

000000008021189e <.LBB136_1614>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8021189e: 17 c5 00 00  	auipc	a0, 12
802118a2: 13 05 25 be  	addi	a0, a0, -1054
802118a6: 81 45        	mv	a1, zero
802118a8: 97 e0 fe ff  	auipc	ra, 1048558
802118ac: e7 80 80 7f  	jalr	2040(ra)
802118b0: 83 35 04 89  	ld	a1, -1904(s0)
802118b4: 13 85 85 02  	addi	a0, a1, 40
802118b8: 7d 76        	lui	a2, 1048575
802118ba: 1b 06 86 30  	addiw	a2, a2, 776
802118be: 22 96        	add	a2, a2, s0
802118c0: 08 e2        	sd	a0, 0(a2)
802118c2: 63 7c b5 00  	bgeu	a0, a1, 0x802118da <.LBB136_1615+0x12>
802118c6: 09 a0        	j	0x802118c8 <.LBB136_1615>

00000000802118c8 <.LBB136_1615>:
802118c8: 17 c5 00 00  	auipc	a0, 12
802118cc: 13 05 85 bb  	addi	a0, a0, -1096
802118d0: 81 45        	mv	a1, zero
802118d2: 97 e0 fe ff  	auipc	ra, 1048558
802118d6: e7 80 e0 7c  	jalr	1998(ra)
802118da: 7d 75        	lui	a0, 1048575
802118dc: 1b 05 85 30  	addiw	a0, a0, 776
802118e0: 22 95        	add	a0, a0, s0
802118e2: 0c 61        	ld	a1, 0(a0)
802118e4: 7d 55        	addi	a0, zero, -1
802118e6: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802118e8: 6d 8d        	and	a0, a0, a1
802118ea: 13 96 c5 00  	slli	a2, a1, 12
802118ee: fd 76        	lui	a3, 1048575
802118f0: 9b 86 06 30  	addiw	a3, a3, 768
802118f4: a2 96        	add	a3, a3, s0
802118f6: 90 e2        	sd	a2, 0(a3)
802118f8: 63 0c b5 00  	beq	a0, a1, 0x80211910 <.LBB136_1616+0x12>
802118fc: 09 a0        	j	0x802118fe <.LBB136_1616>

00000000802118fe <.LBB136_1616>:
802118fe: 17 c5 00 00  	auipc	a0, 12
80211902: 13 05 25 b8  	addi	a0, a0, -1150
80211906: 81 45        	mv	a1, zero
80211908: 97 e0 fe ff  	auipc	ra, 1048558
8021190c: e7 80 80 79  	jalr	1944(ra)
80211910: 7d 75        	lui	a0, 1048575
80211912: 1b 05 05 30  	addiw	a0, a0, 768
80211916: 22 95        	add	a0, a0, s0
80211918: 08 61        	ld	a0, 0(a0)
8021191a: 23 34 a4 d0  	sd	a0, -760(s0)
;                                 first_address = region.descriptor.address + offset;
8021191e: 83 35 84 fd  	ld	a1, -40(s0)
80211922: 8c 61        	ld	a1, 0(a1)
80211924: 2e 95        	add	a0, a0, a1
80211926: 7d 76        	lui	a2, 1048575
80211928: 1b 06 86 2f  	addiw	a2, a2, 760
8021192c: 22 96        	add	a2, a2, s0
8021192e: 08 e2        	sd	a0, 0(a2)
80211930: 63 7c b5 00  	bgeu	a0, a1, 0x80211948 <.LBB136_1617+0x12>
80211934: 09 a0        	j	0x80211936 <.LBB136_1617>

0000000080211936 <.LBB136_1617>:
80211936: 17 c5 00 00  	auipc	a0, 12
8021193a: 13 05 a5 b4  	addi	a0, a0, -1206
8021193e: 81 45        	mv	a1, zero
80211940: 97 e0 fe ff  	auipc	ra, 1048558
80211944: e7 80 00 76  	jalr	1888(ra)
80211948: 7d 75        	lui	a0, 1048575
8021194a: 1b 05 85 2f  	addiw	a0, a0, 760
8021194e: 22 95        	add	a0, a0, s0
80211950: 08 61        	ld	a0, 0(a0)
80211952: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80211956: 6f c0 ff e3  	j	0x8020e794 <.LBB136_1404+0x14f0>

000000008021195a <.LBB136_1618>:
;                             region_allocated_page_count += 1;
8021195a: 17 c5 00 00  	auipc	a0, 12
8021195e: 13 05 65 b2  	addi	a0, a0, -1242
80211962: 81 45        	mv	a1, zero
80211964: 97 e0 fe ff  	auipc	ra, 1048558
80211968: e7 80 c0 73  	jalr	1852(ra)
8021196c: 03 35 84 88  	ld	a0, -1912(s0)
80211970: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80211974: 6f c0 9f e4  	j	0x8020e7bc <.LBB136_1404+0x1518>

0000000080211978 <.LBB136_1619>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80211978: 17 c5 00 00  	auipc	a0, 12
8021197c: 13 05 85 b0  	addi	a0, a0, -1272
80211980: 81 45        	mv	a1, zero
80211982: 97 e0 fe ff  	auipc	ra, 1048558
80211986: e7 80 e0 71  	jalr	1822(ra)
8021198a: 83 35 04 88  	ld	a1, -1920(s0)
8021198e: 13 85 95 02  	addi	a0, a1, 41
80211992: 7d 76        	lui	a2, 1048575
80211994: 1b 06 06 2f  	addiw	a2, a2, 752
80211998: 22 96        	add	a2, a2, s0
8021199a: 08 e2        	sd	a0, 0(a2)
8021199c: 63 7c b5 00  	bgeu	a0, a1, 0x802119b4 <.LBB136_1620+0x12>
802119a0: 09 a0        	j	0x802119a2 <.LBB136_1620>

00000000802119a2 <.LBB136_1620>:
802119a2: 17 c5 00 00  	auipc	a0, 12
802119a6: 13 05 e5 ad  	addi	a0, a0, -1314
802119aa: 81 45        	mv	a1, zero
802119ac: 97 e0 fe ff  	auipc	ra, 1048558
802119b0: e7 80 40 6f  	jalr	1780(ra)
802119b4: 7d 75        	lui	a0, 1048575
802119b6: 1b 05 05 2f  	addiw	a0, a0, 752
802119ba: 22 95        	add	a0, a0, s0
802119bc: 0c 61        	ld	a1, 0(a0)
802119be: 7d 55        	addi	a0, zero, -1
802119c0: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802119c2: 6d 8d        	and	a0, a0, a1
802119c4: 13 96 c5 00  	slli	a2, a1, 12
802119c8: fd 76        	lui	a3, 1048575
802119ca: 9b 86 86 2e  	addiw	a3, a3, 744
802119ce: a2 96        	add	a3, a3, s0
802119d0: 90 e2        	sd	a2, 0(a3)
802119d2: 63 0c b5 00  	beq	a0, a1, 0x802119ea <.LBB136_1621+0x12>
802119d6: 09 a0        	j	0x802119d8 <.LBB136_1621>

00000000802119d8 <.LBB136_1621>:
802119d8: 17 c5 00 00  	auipc	a0, 12
802119dc: 13 05 85 aa  	addi	a0, a0, -1368
802119e0: 81 45        	mv	a1, zero
802119e2: 97 e0 fe ff  	auipc	ra, 1048558
802119e6: e7 80 e0 6b  	jalr	1726(ra)
802119ea: 7d 75        	lui	a0, 1048575
802119ec: 1b 05 85 2e  	addiw	a0, a0, 744
802119f0: 22 95        	add	a0, a0, s0
802119f2: 08 61        	ld	a0, 0(a0)
802119f4: 23 3c a4 ce  	sd	a0, -776(s0)
;                                 first_address = region.descriptor.address + offset;
802119f8: 83 35 84 fd  	ld	a1, -40(s0)
802119fc: 8c 61        	ld	a1, 0(a1)
802119fe: 2e 95        	add	a0, a0, a1
80211a00: 7d 76        	lui	a2, 1048575
80211a02: 1b 06 06 2e  	addiw	a2, a2, 736
80211a06: 22 96        	add	a2, a2, s0
80211a08: 08 e2        	sd	a0, 0(a2)
80211a0a: 63 7c b5 00  	bgeu	a0, a1, 0x80211a22 <.LBB136_1622+0x12>
80211a0e: 09 a0        	j	0x80211a10 <.LBB136_1622>

0000000080211a10 <.LBB136_1622>:
80211a10: 17 c5 00 00  	auipc	a0, 12
80211a14: 13 05 05 a7  	addi	a0, a0, -1424
80211a18: 81 45        	mv	a1, zero
80211a1a: 97 e0 fe ff  	auipc	ra, 1048558
80211a1e: e7 80 60 68  	jalr	1670(ra)
80211a22: 7d 75        	lui	a0, 1048575
80211a24: 1b 05 05 2e  	addiw	a0, a0, 736
80211a28: 22 95        	add	a0, a0, s0
80211a2a: 08 61        	ld	a0, 0(a0)
80211a2c: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80211a30: 6f c0 7f de  	j	0x8020e816 <.LBB136_1404+0x1572>

0000000080211a34 <.LBB136_1623>:
;                             region_allocated_page_count += 1;
80211a34: 17 c5 00 00  	auipc	a0, 12
80211a38: 13 05 c5 a4  	addi	a0, a0, -1460
80211a3c: 81 45        	mv	a1, zero
80211a3e: 97 e0 fe ff  	auipc	ra, 1048558
80211a42: e7 80 20 66  	jalr	1634(ra)
80211a46: 03 35 84 87  	ld	a0, -1928(s0)
80211a4a: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80211a4e: 6f c0 1f df  	j	0x8020e83e <.LBB136_1404+0x159a>

0000000080211a52 <.LBB136_1624>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80211a52: 17 c5 00 00  	auipc	a0, 12
80211a56: 13 05 e5 a2  	addi	a0, a0, -1490
80211a5a: 81 45        	mv	a1, zero
80211a5c: 97 e0 fe ff  	auipc	ra, 1048558
80211a60: e7 80 40 64  	jalr	1604(ra)
80211a64: 83 35 04 87  	ld	a1, -1936(s0)
80211a68: 13 85 a5 02  	addi	a0, a1, 42
80211a6c: 7d 76        	lui	a2, 1048575
80211a6e: 1b 06 86 2d  	addiw	a2, a2, 728
80211a72: 22 96        	add	a2, a2, s0
80211a74: 08 e2        	sd	a0, 0(a2)
80211a76: 63 7c b5 00  	bgeu	a0, a1, 0x80211a8e <.LBB136_1625+0x12>
80211a7a: 09 a0        	j	0x80211a7c <.LBB136_1625>

0000000080211a7c <.LBB136_1625>:
80211a7c: 17 c5 00 00  	auipc	a0, 12
80211a80: 13 05 45 a0  	addi	a0, a0, -1532
80211a84: 81 45        	mv	a1, zero
80211a86: 97 e0 fe ff  	auipc	ra, 1048558
80211a8a: e7 80 a0 61  	jalr	1562(ra)
80211a8e: 7d 75        	lui	a0, 1048575
80211a90: 1b 05 85 2d  	addiw	a0, a0, 728
80211a94: 22 95        	add	a0, a0, s0
80211a96: 0c 61        	ld	a1, 0(a0)
80211a98: 7d 55        	addi	a0, zero, -1
80211a9a: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80211a9c: 6d 8d        	and	a0, a0, a1
80211a9e: 13 96 c5 00  	slli	a2, a1, 12
80211aa2: fd 76        	lui	a3, 1048575
80211aa4: 9b 86 06 2d  	addiw	a3, a3, 720
80211aa8: a2 96        	add	a3, a3, s0
80211aaa: 90 e2        	sd	a2, 0(a3)
80211aac: 63 0c b5 00  	beq	a0, a1, 0x80211ac4 <.LBB136_1626+0x12>
80211ab0: 09 a0        	j	0x80211ab2 <.LBB136_1626>

0000000080211ab2 <.LBB136_1626>:
80211ab2: 17 c5 00 00  	auipc	a0, 12
80211ab6: 13 05 e5 9c  	addi	a0, a0, -1586
80211aba: 81 45        	mv	a1, zero
80211abc: 97 e0 fe ff  	auipc	ra, 1048558
80211ac0: e7 80 40 5e  	jalr	1508(ra)
80211ac4: 7d 75        	lui	a0, 1048575
80211ac6: 1b 05 05 2d  	addiw	a0, a0, 720
80211aca: 22 95        	add	a0, a0, s0
80211acc: 08 61        	ld	a0, 0(a0)
80211ace: 23 34 a4 ce  	sd	a0, -792(s0)
;                                 first_address = region.descriptor.address + offset;
80211ad2: 83 35 84 fd  	ld	a1, -40(s0)
80211ad6: 8c 61        	ld	a1, 0(a1)
80211ad8: 2e 95        	add	a0, a0, a1
80211ada: 7d 76        	lui	a2, 1048575
80211adc: 1b 06 86 2c  	addiw	a2, a2, 712
80211ae0: 22 96        	add	a2, a2, s0
80211ae2: 08 e2        	sd	a0, 0(a2)
80211ae4: 63 7c b5 00  	bgeu	a0, a1, 0x80211afc <.LBB136_1627+0x12>
80211ae8: 09 a0        	j	0x80211aea <.LBB136_1627>

0000000080211aea <.LBB136_1627>:
80211aea: 17 c5 00 00  	auipc	a0, 12
80211aee: 13 05 65 99  	addi	a0, a0, -1642
80211af2: 81 45        	mv	a1, zero
80211af4: 97 e0 fe ff  	auipc	ra, 1048558
80211af8: e7 80 c0 5a  	jalr	1452(ra)
80211afc: 7d 75        	lui	a0, 1048575
80211afe: 1b 05 85 2c  	addiw	a0, a0, 712
80211b02: 22 95        	add	a0, a0, s0
80211b04: 08 61        	ld	a0, 0(a0)
80211b06: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80211b0a: 6f c0 ff d8  	j	0x8020e898 <.LBB136_1404+0x15f4>

0000000080211b0e <.LBB136_1628>:
;                             region_allocated_page_count += 1;
80211b0e: 17 c5 00 00  	auipc	a0, 12
80211b12: 13 05 25 97  	addi	a0, a0, -1678
80211b16: 81 45        	mv	a1, zero
80211b18: 97 e0 fe ff  	auipc	ra, 1048558
80211b1c: e7 80 80 58  	jalr	1416(ra)
80211b20: 03 35 84 86  	ld	a0, -1944(s0)
80211b24: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80211b28: 6f c0 9f d9  	j	0x8020e8c0 <.LBB136_1404+0x161c>

0000000080211b2c <.LBB136_1629>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80211b2c: 17 c5 00 00  	auipc	a0, 12
80211b30: 13 05 45 95  	addi	a0, a0, -1708
80211b34: 81 45        	mv	a1, zero
80211b36: 97 e0 fe ff  	auipc	ra, 1048558
80211b3a: e7 80 a0 56  	jalr	1386(ra)
80211b3e: 83 35 04 86  	ld	a1, -1952(s0)
80211b42: 13 85 b5 02  	addi	a0, a1, 43
80211b46: 7d 76        	lui	a2, 1048575
80211b48: 1b 06 06 2c  	addiw	a2, a2, 704
80211b4c: 22 96        	add	a2, a2, s0
80211b4e: 08 e2        	sd	a0, 0(a2)
80211b50: 63 7c b5 00  	bgeu	a0, a1, 0x80211b68 <.LBB136_1630+0x12>
80211b54: 09 a0        	j	0x80211b56 <.LBB136_1630>

0000000080211b56 <.LBB136_1630>:
80211b56: 17 c5 00 00  	auipc	a0, 12
80211b5a: 13 05 a5 92  	addi	a0, a0, -1750
80211b5e: 81 45        	mv	a1, zero
80211b60: 97 e0 fe ff  	auipc	ra, 1048558
80211b64: e7 80 00 54  	jalr	1344(ra)
80211b68: 7d 75        	lui	a0, 1048575
80211b6a: 1b 05 05 2c  	addiw	a0, a0, 704
80211b6e: 22 95        	add	a0, a0, s0
80211b70: 0c 61        	ld	a1, 0(a0)
80211b72: 7d 55        	addi	a0, zero, -1
80211b74: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80211b76: 6d 8d        	and	a0, a0, a1
80211b78: 13 96 c5 00  	slli	a2, a1, 12
80211b7c: fd 76        	lui	a3, 1048575
80211b7e: 9b 86 86 2b  	addiw	a3, a3, 696
80211b82: a2 96        	add	a3, a3, s0
80211b84: 90 e2        	sd	a2, 0(a3)
80211b86: 63 0c b5 00  	beq	a0, a1, 0x80211b9e <.LBB136_1631+0x12>
80211b8a: 09 a0        	j	0x80211b8c <.LBB136_1631>

0000000080211b8c <.LBB136_1631>:
80211b8c: 17 c5 00 00  	auipc	a0, 12
80211b90: 13 05 45 8f  	addi	a0, a0, -1804
80211b94: 81 45        	mv	a1, zero
80211b96: 97 e0 fe ff  	auipc	ra, 1048558
80211b9a: e7 80 a0 50  	jalr	1290(ra)
80211b9e: 7d 75        	lui	a0, 1048575
80211ba0: 1b 05 85 2b  	addiw	a0, a0, 696
80211ba4: 22 95        	add	a0, a0, s0
80211ba6: 08 61        	ld	a0, 0(a0)
80211ba8: 23 3c a4 cc  	sd	a0, -808(s0)
;                                 first_address = region.descriptor.address + offset;
80211bac: 83 35 84 fd  	ld	a1, -40(s0)
80211bb0: 8c 61        	ld	a1, 0(a1)
80211bb2: 2e 95        	add	a0, a0, a1
80211bb4: 7d 76        	lui	a2, 1048575
80211bb6: 1b 06 06 2b  	addiw	a2, a2, 688
80211bba: 22 96        	add	a2, a2, s0
80211bbc: 08 e2        	sd	a0, 0(a2)
80211bbe: 63 7c b5 00  	bgeu	a0, a1, 0x80211bd6 <.LBB136_1632+0x12>
80211bc2: 09 a0        	j	0x80211bc4 <.LBB136_1632>

0000000080211bc4 <.LBB136_1632>:
80211bc4: 17 c5 00 00  	auipc	a0, 12
80211bc8: 13 05 c5 8b  	addi	a0, a0, -1860
80211bcc: 81 45        	mv	a1, zero
80211bce: 97 e0 fe ff  	auipc	ra, 1048558
80211bd2: e7 80 20 4d  	jalr	1234(ra)
80211bd6: 7d 75        	lui	a0, 1048575
80211bd8: 1b 05 05 2b  	addiw	a0, a0, 688
80211bdc: 22 95        	add	a0, a0, s0
80211bde: 08 61        	ld	a0, 0(a0)
80211be0: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80211be4: 6f c0 7f d3  	j	0x8020e91a <.LBB136_1404+0x1676>

0000000080211be8 <.LBB136_1633>:
;                             region_allocated_page_count += 1;
80211be8: 17 c5 00 00  	auipc	a0, 12
80211bec: 13 05 85 89  	addi	a0, a0, -1896
80211bf0: 81 45        	mv	a1, zero
80211bf2: 97 e0 fe ff  	auipc	ra, 1048558
80211bf6: e7 80 e0 4a  	jalr	1198(ra)
80211bfa: 03 35 84 85  	ld	a0, -1960(s0)
80211bfe: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80211c02: 6f c0 1f d4  	j	0x8020e942 <.LBB136_1404+0x169e>

0000000080211c06 <.LBB136_1634>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80211c06: 17 c5 00 00  	auipc	a0, 12
80211c0a: 13 05 a5 87  	addi	a0, a0, -1926
80211c0e: 81 45        	mv	a1, zero
80211c10: 97 e0 fe ff  	auipc	ra, 1048558
80211c14: e7 80 00 49  	jalr	1168(ra)
80211c18: 83 35 04 85  	ld	a1, -1968(s0)
80211c1c: 13 85 c5 02  	addi	a0, a1, 44
80211c20: 7d 76        	lui	a2, 1048575
80211c22: 1b 06 86 2a  	addiw	a2, a2, 680
80211c26: 22 96        	add	a2, a2, s0
80211c28: 08 e2        	sd	a0, 0(a2)
80211c2a: 63 7c b5 00  	bgeu	a0, a1, 0x80211c42 <.LBB136_1635+0x12>
80211c2e: 09 a0        	j	0x80211c30 <.LBB136_1635>

0000000080211c30 <.LBB136_1635>:
80211c30: 17 c5 00 00  	auipc	a0, 12
80211c34: 13 05 05 85  	addi	a0, a0, -1968
80211c38: 81 45        	mv	a1, zero
80211c3a: 97 e0 fe ff  	auipc	ra, 1048558
80211c3e: e7 80 60 46  	jalr	1126(ra)
80211c42: 7d 75        	lui	a0, 1048575
80211c44: 1b 05 85 2a  	addiw	a0, a0, 680
80211c48: 22 95        	add	a0, a0, s0
80211c4a: 0c 61        	ld	a1, 0(a0)
80211c4c: 7d 55        	addi	a0, zero, -1
80211c4e: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80211c50: 6d 8d        	and	a0, a0, a1
80211c52: 13 96 c5 00  	slli	a2, a1, 12
80211c56: fd 76        	lui	a3, 1048575
80211c58: 9b 86 06 2a  	addiw	a3, a3, 672
80211c5c: a2 96        	add	a3, a3, s0
80211c5e: 90 e2        	sd	a2, 0(a3)
80211c60: 63 0c b5 00  	beq	a0, a1, 0x80211c78 <.LBB136_1636+0x12>
80211c64: 09 a0        	j	0x80211c66 <.LBB136_1636>

0000000080211c66 <.LBB136_1636>:
80211c66: 17 c5 00 00  	auipc	a0, 12
80211c6a: 13 05 a5 81  	addi	a0, a0, -2022
80211c6e: 81 45        	mv	a1, zero
80211c70: 97 e0 fe ff  	auipc	ra, 1048558
80211c74: e7 80 00 43  	jalr	1072(ra)
80211c78: 7d 75        	lui	a0, 1048575
80211c7a: 1b 05 05 2a  	addiw	a0, a0, 672
80211c7e: 22 95        	add	a0, a0, s0
80211c80: 08 61        	ld	a0, 0(a0)
80211c82: 23 34 a4 cc  	sd	a0, -824(s0)
;                                 first_address = region.descriptor.address + offset;
80211c86: 83 35 84 fd  	ld	a1, -40(s0)
80211c8a: 8c 61        	ld	a1, 0(a1)
80211c8c: 2e 95        	add	a0, a0, a1
80211c8e: 7d 76        	lui	a2, 1048575
80211c90: 1b 06 86 29  	addiw	a2, a2, 664
80211c94: 22 96        	add	a2, a2, s0
80211c96: 08 e2        	sd	a0, 0(a2)
80211c98: 63 7c b5 00  	bgeu	a0, a1, 0x80211cb0 <.LBB136_1637+0x12>
80211c9c: 09 a0        	j	0x80211c9e <.LBB136_1637>

0000000080211c9e <.LBB136_1637>:
80211c9e: 17 b5 00 00  	auipc	a0, 11
80211ca2: 13 05 25 7e  	addi	a0, a0, 2018
80211ca6: 81 45        	mv	a1, zero
80211ca8: 97 e0 fe ff  	auipc	ra, 1048558
80211cac: e7 80 80 3f  	jalr	1016(ra)
80211cb0: 7d 75        	lui	a0, 1048575
80211cb2: 1b 05 85 29  	addiw	a0, a0, 664
80211cb6: 22 95        	add	a0, a0, s0
80211cb8: 08 61        	ld	a0, 0(a0)
80211cba: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80211cbe: 6f c0 ff cd  	j	0x8020e99c <.LBB136_1404+0x16f8>

0000000080211cc2 <.LBB136_1638>:
;                             region_allocated_page_count += 1;
80211cc2: 17 b5 00 00  	auipc	a0, 11
80211cc6: 13 05 e5 7b  	addi	a0, a0, 1982
80211cca: 81 45        	mv	a1, zero
80211ccc: 97 e0 fe ff  	auipc	ra, 1048558
80211cd0: e7 80 40 3d  	jalr	980(ra)
80211cd4: 03 35 84 84  	ld	a0, -1976(s0)
80211cd8: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80211cdc: 6f c0 9f ce  	j	0x8020e9c4 <.LBB136_1404+0x1720>

0000000080211ce0 <.LBB136_1639>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80211ce0: 17 b5 00 00  	auipc	a0, 11
80211ce4: 13 05 05 7a  	addi	a0, a0, 1952
80211ce8: 81 45        	mv	a1, zero
80211cea: 97 e0 fe ff  	auipc	ra, 1048558
80211cee: e7 80 60 3b  	jalr	950(ra)
80211cf2: 83 35 04 84  	ld	a1, -1984(s0)
80211cf6: 13 85 d5 02  	addi	a0, a1, 45
80211cfa: 7d 76        	lui	a2, 1048575
80211cfc: 1b 06 06 29  	addiw	a2, a2, 656
80211d00: 22 96        	add	a2, a2, s0
80211d02: 08 e2        	sd	a0, 0(a2)
80211d04: 63 7c b5 00  	bgeu	a0, a1, 0x80211d1c <.LBB136_1640+0x12>
80211d08: 09 a0        	j	0x80211d0a <.LBB136_1640>

0000000080211d0a <.LBB136_1640>:
80211d0a: 17 b5 00 00  	auipc	a0, 11
80211d0e: 13 05 65 77  	addi	a0, a0, 1910
80211d12: 81 45        	mv	a1, zero
80211d14: 97 e0 fe ff  	auipc	ra, 1048558
80211d18: e7 80 c0 38  	jalr	908(ra)
80211d1c: 7d 75        	lui	a0, 1048575
80211d1e: 1b 05 05 29  	addiw	a0, a0, 656
80211d22: 22 95        	add	a0, a0, s0
80211d24: 0c 61        	ld	a1, 0(a0)
80211d26: 7d 55        	addi	a0, zero, -1
80211d28: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80211d2a: 6d 8d        	and	a0, a0, a1
80211d2c: 13 96 c5 00  	slli	a2, a1, 12
80211d30: fd 76        	lui	a3, 1048575
80211d32: 9b 86 86 28  	addiw	a3, a3, 648
80211d36: a2 96        	add	a3, a3, s0
80211d38: 90 e2        	sd	a2, 0(a3)
80211d3a: 63 0c b5 00  	beq	a0, a1, 0x80211d52 <.LBB136_1641+0x12>
80211d3e: 09 a0        	j	0x80211d40 <.LBB136_1641>

0000000080211d40 <.LBB136_1641>:
80211d40: 17 b5 00 00  	auipc	a0, 11
80211d44: 13 05 05 74  	addi	a0, a0, 1856
80211d48: 81 45        	mv	a1, zero
80211d4a: 97 e0 fe ff  	auipc	ra, 1048558
80211d4e: e7 80 60 35  	jalr	854(ra)
80211d52: 7d 75        	lui	a0, 1048575
80211d54: 1b 05 85 28  	addiw	a0, a0, 648
80211d58: 22 95        	add	a0, a0, s0
80211d5a: 08 61        	ld	a0, 0(a0)
80211d5c: 23 3c a4 ca  	sd	a0, -840(s0)
;                                 first_address = region.descriptor.address + offset;
80211d60: 83 35 84 fd  	ld	a1, -40(s0)
80211d64: 8c 61        	ld	a1, 0(a1)
80211d66: 2e 95        	add	a0, a0, a1
80211d68: 7d 76        	lui	a2, 1048575
80211d6a: 1b 06 06 28  	addiw	a2, a2, 640
80211d6e: 22 96        	add	a2, a2, s0
80211d70: 08 e2        	sd	a0, 0(a2)
80211d72: 63 7c b5 00  	bgeu	a0, a1, 0x80211d8a <.LBB136_1642+0x12>
80211d76: 09 a0        	j	0x80211d78 <.LBB136_1642>

0000000080211d78 <.LBB136_1642>:
80211d78: 17 b5 00 00  	auipc	a0, 11
80211d7c: 13 05 85 70  	addi	a0, a0, 1800
80211d80: 81 45        	mv	a1, zero
80211d82: 97 e0 fe ff  	auipc	ra, 1048558
80211d86: e7 80 e0 31  	jalr	798(ra)
80211d8a: 7d 75        	lui	a0, 1048575
80211d8c: 1b 05 05 28  	addiw	a0, a0, 640
80211d90: 22 95        	add	a0, a0, s0
80211d92: 08 61        	ld	a0, 0(a0)
80211d94: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80211d98: 6f c0 7f c8  	j	0x8020ea1e <.LBB136_1404+0x177a>

0000000080211d9c <.LBB136_1643>:
;                             region_allocated_page_count += 1;
80211d9c: 17 b5 00 00  	auipc	a0, 11
80211da0: 13 05 45 6e  	addi	a0, a0, 1764
80211da4: 81 45        	mv	a1, zero
80211da6: 97 e0 fe ff  	auipc	ra, 1048558
80211daa: e7 80 a0 2f  	jalr	762(ra)
80211dae: 03 35 84 83  	ld	a0, -1992(s0)
80211db2: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80211db6: 6f c0 1f c9  	j	0x8020ea46 <.LBB136_1404+0x17a2>

0000000080211dba <.LBB136_1644>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80211dba: 17 b5 00 00  	auipc	a0, 11
80211dbe: 13 05 65 6c  	addi	a0, a0, 1734
80211dc2: 81 45        	mv	a1, zero
80211dc4: 97 e0 fe ff  	auipc	ra, 1048558
80211dc8: e7 80 c0 2d  	jalr	732(ra)
80211dcc: 83 35 04 83  	ld	a1, -2000(s0)
80211dd0: 13 85 e5 02  	addi	a0, a1, 46
80211dd4: 7d 76        	lui	a2, 1048575
80211dd6: 1b 06 86 27  	addiw	a2, a2, 632
80211dda: 22 96        	add	a2, a2, s0
80211ddc: 08 e2        	sd	a0, 0(a2)
80211dde: 63 7c b5 00  	bgeu	a0, a1, 0x80211df6 <.LBB136_1645+0x12>
80211de2: 09 a0        	j	0x80211de4 <.LBB136_1645>

0000000080211de4 <.LBB136_1645>:
80211de4: 17 b5 00 00  	auipc	a0, 11
80211de8: 13 05 c5 69  	addi	a0, a0, 1692
80211dec: 81 45        	mv	a1, zero
80211dee: 97 e0 fe ff  	auipc	ra, 1048558
80211df2: e7 80 20 2b  	jalr	690(ra)
80211df6: 7d 75        	lui	a0, 1048575
80211df8: 1b 05 85 27  	addiw	a0, a0, 632
80211dfc: 22 95        	add	a0, a0, s0
80211dfe: 0c 61        	ld	a1, 0(a0)
80211e00: 7d 55        	addi	a0, zero, -1
80211e02: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80211e04: 6d 8d        	and	a0, a0, a1
80211e06: 13 96 c5 00  	slli	a2, a1, 12
80211e0a: fd 76        	lui	a3, 1048575
80211e0c: 9b 86 06 27  	addiw	a3, a3, 624
80211e10: a2 96        	add	a3, a3, s0
80211e12: 90 e2        	sd	a2, 0(a3)
80211e14: 63 0c b5 00  	beq	a0, a1, 0x80211e2c <.LBB136_1646+0x12>
80211e18: 09 a0        	j	0x80211e1a <.LBB136_1646>

0000000080211e1a <.LBB136_1646>:
80211e1a: 17 b5 00 00  	auipc	a0, 11
80211e1e: 13 05 65 66  	addi	a0, a0, 1638
80211e22: 81 45        	mv	a1, zero
80211e24: 97 e0 fe ff  	auipc	ra, 1048558
80211e28: e7 80 c0 27  	jalr	636(ra)
80211e2c: 7d 75        	lui	a0, 1048575
80211e2e: 1b 05 05 27  	addiw	a0, a0, 624
80211e32: 22 95        	add	a0, a0, s0
80211e34: 08 61        	ld	a0, 0(a0)
80211e36: 23 34 a4 ca  	sd	a0, -856(s0)
;                                 first_address = region.descriptor.address + offset;
80211e3a: 83 35 84 fd  	ld	a1, -40(s0)
80211e3e: 8c 61        	ld	a1, 0(a1)
80211e40: 2e 95        	add	a0, a0, a1
80211e42: 7d 76        	lui	a2, 1048575
80211e44: 1b 06 86 26  	addiw	a2, a2, 616
80211e48: 22 96        	add	a2, a2, s0
80211e4a: 08 e2        	sd	a0, 0(a2)
80211e4c: 63 7c b5 00  	bgeu	a0, a1, 0x80211e64 <.LBB136_1647+0x12>
80211e50: 09 a0        	j	0x80211e52 <.LBB136_1647>

0000000080211e52 <.LBB136_1647>:
80211e52: 17 b5 00 00  	auipc	a0, 11
80211e56: 13 05 e5 62  	addi	a0, a0, 1582
80211e5a: 81 45        	mv	a1, zero
80211e5c: 97 e0 fe ff  	auipc	ra, 1048558
80211e60: e7 80 40 24  	jalr	580(ra)
80211e64: 7d 75        	lui	a0, 1048575
80211e66: 1b 05 85 26  	addiw	a0, a0, 616
80211e6a: 22 95        	add	a0, a0, s0
80211e6c: 08 61        	ld	a0, 0(a0)
80211e6e: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80211e72: 6f c0 ff c2  	j	0x8020eaa0 <.LBB136_1404+0x17fc>

0000000080211e76 <.LBB136_1648>:
;                             region_allocated_page_count += 1;
80211e76: 17 b5 00 00  	auipc	a0, 11
80211e7a: 13 05 a5 60  	addi	a0, a0, 1546
80211e7e: 81 45        	mv	a1, zero
80211e80: 97 e0 fe ff  	auipc	ra, 1048558
80211e84: e7 80 00 22  	jalr	544(ra)
80211e88: 03 35 84 82  	ld	a0, -2008(s0)
80211e8c: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80211e90: 6f c0 9f c3  	j	0x8020eac8 <.LBB136_1404+0x1824>

0000000080211e94 <.LBB136_1649>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80211e94: 17 b5 00 00  	auipc	a0, 11
80211e98: 13 05 c5 5e  	addi	a0, a0, 1516
80211e9c: 81 45        	mv	a1, zero
80211e9e: 97 e0 fe ff  	auipc	ra, 1048558
80211ea2: e7 80 20 20  	jalr	514(ra)
80211ea6: 83 35 04 82  	ld	a1, -2016(s0)
80211eaa: 13 85 f5 02  	addi	a0, a1, 47
80211eae: 7d 76        	lui	a2, 1048575
80211eb0: 1b 06 06 26  	addiw	a2, a2, 608
80211eb4: 22 96        	add	a2, a2, s0
80211eb6: 08 e2        	sd	a0, 0(a2)
80211eb8: 63 7c b5 00  	bgeu	a0, a1, 0x80211ed0 <.LBB136_1650+0x12>
80211ebc: 09 a0        	j	0x80211ebe <.LBB136_1650>

0000000080211ebe <.LBB136_1650>:
80211ebe: 17 b5 00 00  	auipc	a0, 11
80211ec2: 13 05 25 5c  	addi	a0, a0, 1474
80211ec6: 81 45        	mv	a1, zero
80211ec8: 97 e0 fe ff  	auipc	ra, 1048558
80211ecc: e7 80 80 1d  	jalr	472(ra)
80211ed0: 7d 75        	lui	a0, 1048575
80211ed2: 1b 05 05 26  	addiw	a0, a0, 608
80211ed6: 22 95        	add	a0, a0, s0
80211ed8: 0c 61        	ld	a1, 0(a0)
80211eda: 7d 55        	addi	a0, zero, -1
80211edc: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80211ede: 6d 8d        	and	a0, a0, a1
80211ee0: 13 96 c5 00  	slli	a2, a1, 12
80211ee4: fd 76        	lui	a3, 1048575
80211ee6: 9b 86 86 25  	addiw	a3, a3, 600
80211eea: a2 96        	add	a3, a3, s0
80211eec: 90 e2        	sd	a2, 0(a3)
80211eee: 63 0c b5 00  	beq	a0, a1, 0x80211f06 <.LBB136_1651+0x12>
80211ef2: 09 a0        	j	0x80211ef4 <.LBB136_1651>

0000000080211ef4 <.LBB136_1651>:
80211ef4: 17 b5 00 00  	auipc	a0, 11
80211ef8: 13 05 c5 58  	addi	a0, a0, 1420
80211efc: 81 45        	mv	a1, zero
80211efe: 97 e0 fe ff  	auipc	ra, 1048558
80211f02: e7 80 20 1a  	jalr	418(ra)
80211f06: 7d 75        	lui	a0, 1048575
80211f08: 1b 05 85 25  	addiw	a0, a0, 600
80211f0c: 22 95        	add	a0, a0, s0
80211f0e: 08 61        	ld	a0, 0(a0)
80211f10: 23 3c a4 c8  	sd	a0, -872(s0)
;                                 first_address = region.descriptor.address + offset;
80211f14: 83 35 84 fd  	ld	a1, -40(s0)
80211f18: 8c 61        	ld	a1, 0(a1)
80211f1a: 2e 95        	add	a0, a0, a1
80211f1c: 7d 76        	lui	a2, 1048575
80211f1e: 1b 06 06 25  	addiw	a2, a2, 592
80211f22: 22 96        	add	a2, a2, s0
80211f24: 08 e2        	sd	a0, 0(a2)
80211f26: 63 7c b5 00  	bgeu	a0, a1, 0x80211f3e <.LBB136_1652+0x12>
80211f2a: 09 a0        	j	0x80211f2c <.LBB136_1652>

0000000080211f2c <.LBB136_1652>:
80211f2c: 17 b5 00 00  	auipc	a0, 11
80211f30: 13 05 45 55  	addi	a0, a0, 1364
80211f34: 81 45        	mv	a1, zero
80211f36: 97 e0 fe ff  	auipc	ra, 1048558
80211f3a: e7 80 a0 16  	jalr	362(ra)
80211f3e: 7d 75        	lui	a0, 1048575
80211f40: 1b 05 05 25  	addiw	a0, a0, 592
80211f44: 22 95        	add	a0, a0, s0
80211f46: 08 61        	ld	a0, 0(a0)
80211f48: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80211f4c: 6f c0 7f bd  	j	0x8020eb22 <.LBB136_1404+0x187e>

0000000080211f50 <.LBB136_1653>:
;                             region_allocated_page_count += 1;
80211f50: 17 b5 00 00  	auipc	a0, 11
80211f54: 13 05 05 53  	addi	a0, a0, 1328
80211f58: 81 45        	mv	a1, zero
80211f5a: 97 e0 fe ff  	auipc	ra, 1048558
80211f5e: e7 80 60 14  	jalr	326(ra)
80211f62: 03 35 84 81  	ld	a0, -2024(s0)
80211f66: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80211f6a: 6f c0 1f be  	j	0x8020eb4a <.LBB136_1404+0x18a6>

0000000080211f6e <.LBB136_1654>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80211f6e: 17 b5 00 00  	auipc	a0, 11
80211f72: 13 05 25 51  	addi	a0, a0, 1298
80211f76: 81 45        	mv	a1, zero
80211f78: 97 e0 fe ff  	auipc	ra, 1048558
80211f7c: e7 80 80 12  	jalr	296(ra)
80211f80: 83 35 04 81  	ld	a1, -2032(s0)
80211f84: 13 85 05 03  	addi	a0, a1, 48
80211f88: 7d 76        	lui	a2, 1048575
80211f8a: 1b 06 86 24  	addiw	a2, a2, 584
80211f8e: 22 96        	add	a2, a2, s0
80211f90: 08 e2        	sd	a0, 0(a2)
80211f92: 63 7c b5 00  	bgeu	a0, a1, 0x80211faa <.LBB136_1655+0x12>
80211f96: 09 a0        	j	0x80211f98 <.LBB136_1655>

0000000080211f98 <.LBB136_1655>:
80211f98: 17 b5 00 00  	auipc	a0, 11
80211f9c: 13 05 85 4e  	addi	a0, a0, 1256
80211fa0: 81 45        	mv	a1, zero
80211fa2: 97 e0 fe ff  	auipc	ra, 1048558
80211fa6: e7 80 e0 0f  	jalr	254(ra)
80211faa: 7d 75        	lui	a0, 1048575
80211fac: 1b 05 85 24  	addiw	a0, a0, 584
80211fb0: 22 95        	add	a0, a0, s0
80211fb2: 0c 61        	ld	a1, 0(a0)
80211fb4: 7d 55        	addi	a0, zero, -1
80211fb6: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80211fb8: 6d 8d        	and	a0, a0, a1
80211fba: 13 96 c5 00  	slli	a2, a1, 12
80211fbe: fd 76        	lui	a3, 1048575
80211fc0: 9b 86 06 24  	addiw	a3, a3, 576
80211fc4: a2 96        	add	a3, a3, s0
80211fc6: 90 e2        	sd	a2, 0(a3)
80211fc8: 63 0c b5 00  	beq	a0, a1, 0x80211fe0 <.LBB136_1656+0x12>
80211fcc: 09 a0        	j	0x80211fce <.LBB136_1656>

0000000080211fce <.LBB136_1656>:
80211fce: 17 b5 00 00  	auipc	a0, 11
80211fd2: 13 05 25 4b  	addi	a0, a0, 1202
80211fd6: 81 45        	mv	a1, zero
80211fd8: 97 e0 fe ff  	auipc	ra, 1048558
80211fdc: e7 80 80 0c  	jalr	200(ra)
80211fe0: 7d 75        	lui	a0, 1048575
80211fe2: 1b 05 05 24  	addiw	a0, a0, 576
80211fe6: 22 95        	add	a0, a0, s0
80211fe8: 08 61        	ld	a0, 0(a0)
80211fea: 23 34 a4 c8  	sd	a0, -888(s0)
;                                 first_address = region.descriptor.address + offset;
80211fee: 83 35 84 fd  	ld	a1, -40(s0)
80211ff2: 8c 61        	ld	a1, 0(a1)
80211ff4: 2e 95        	add	a0, a0, a1
80211ff6: 7d 76        	lui	a2, 1048575
80211ff8: 1b 06 86 23  	addiw	a2, a2, 568
80211ffc: 22 96        	add	a2, a2, s0
80211ffe: 08 e2        	sd	a0, 0(a2)
80212000: 63 7c b5 00  	bgeu	a0, a1, 0x80212018 <.LBB136_1657+0x12>
80212004: 09 a0        	j	0x80212006 <.LBB136_1657>

0000000080212006 <.LBB136_1657>:
80212006: 17 b5 00 00  	auipc	a0, 11
8021200a: 13 05 a5 47  	addi	a0, a0, 1146
8021200e: 81 45        	mv	a1, zero
80212010: 97 e0 fe ff  	auipc	ra, 1048558
80212014: e7 80 00 09  	jalr	144(ra)
80212018: 7d 75        	lui	a0, 1048575
8021201a: 1b 05 85 23  	addiw	a0, a0, 568
8021201e: 22 95        	add	a0, a0, s0
80212020: 08 61        	ld	a0, 0(a0)
80212022: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80212026: 6f c0 ff b7  	j	0x8020eba4 <.LBB136_1404+0x1900>

000000008021202a <.LBB136_1658>:
;                             region_allocated_page_count += 1;
8021202a: 17 b5 00 00  	auipc	a0, 11
8021202e: 13 05 65 45  	addi	a0, a0, 1110
80212032: 81 45        	mv	a1, zero
80212034: 97 e0 fe ff  	auipc	ra, 1048558
80212038: e7 80 c0 06  	jalr	108(ra)
8021203c: 03 35 84 80  	ld	a0, -2040(s0)
80212040: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80212044: 6f c0 9f b8  	j	0x8020ebcc <.LBB136_1404+0x1928>

0000000080212048 <.LBB136_1659>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80212048: 17 b5 00 00  	auipc	a0, 11
8021204c: 13 05 85 43  	addi	a0, a0, 1080
80212050: 81 45        	mv	a1, zero
80212052: 97 e0 fe ff  	auipc	ra, 1048558
80212056: e7 80 e0 04  	jalr	78(ra)
8021205a: 83 35 04 80  	ld	a1, -2048(s0)
8021205e: 13 85 15 03  	addi	a0, a1, 49
80212062: 7d 76        	lui	a2, 1048575
80212064: 1b 06 06 23  	addiw	a2, a2, 560
80212068: 22 96        	add	a2, a2, s0
8021206a: 08 e2        	sd	a0, 0(a2)
8021206c: 63 7c b5 00  	bgeu	a0, a1, 0x80212084 <.LBB136_1660+0x12>
80212070: 09 a0        	j	0x80212072 <.LBB136_1660>

0000000080212072 <.LBB136_1660>:
80212072: 17 b5 00 00  	auipc	a0, 11
80212076: 13 05 e5 40  	addi	a0, a0, 1038
8021207a: 81 45        	mv	a1, zero
8021207c: 97 e0 fe ff  	auipc	ra, 1048558
80212080: e7 80 40 02  	jalr	36(ra)
80212084: 7d 75        	lui	a0, 1048575
80212086: 1b 05 05 23  	addiw	a0, a0, 560
8021208a: 22 95        	add	a0, a0, s0
8021208c: 0c 61        	ld	a1, 0(a0)
8021208e: 7d 55        	addi	a0, zero, -1
80212090: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80212092: 6d 8d        	and	a0, a0, a1
80212094: 13 96 c5 00  	slli	a2, a1, 12
80212098: fd 76        	lui	a3, 1048575
8021209a: 9b 86 86 22  	addiw	a3, a3, 552
8021209e: a2 96        	add	a3, a3, s0
802120a0: 90 e2        	sd	a2, 0(a3)
802120a2: 63 0c b5 00  	beq	a0, a1, 0x802120ba <.LBB136_1661+0x12>
802120a6: 09 a0        	j	0x802120a8 <.LBB136_1661>

00000000802120a8 <.LBB136_1661>:
802120a8: 17 b5 00 00  	auipc	a0, 11
802120ac: 13 05 85 3d  	addi	a0, a0, 984
802120b0: 81 45        	mv	a1, zero
802120b2: 97 e0 fe ff  	auipc	ra, 1048558
802120b6: e7 80 e0 fe  	jalr	-18(ra)
802120ba: 7d 75        	lui	a0, 1048575
802120bc: 1b 05 85 22  	addiw	a0, a0, 552
802120c0: 22 95        	add	a0, a0, s0
802120c2: 08 61        	ld	a0, 0(a0)
802120c4: 23 3c a4 c6  	sd	a0, -904(s0)
;                                 first_address = region.descriptor.address + offset;
802120c8: 83 35 84 fd  	ld	a1, -40(s0)
802120cc: 8c 61        	ld	a1, 0(a1)
802120ce: 2e 95        	add	a0, a0, a1
802120d0: 7d 76        	lui	a2, 1048575
802120d2: 1b 06 06 22  	addiw	a2, a2, 544
802120d6: 22 96        	add	a2, a2, s0
802120d8: 08 e2        	sd	a0, 0(a2)
802120da: 63 7c b5 00  	bgeu	a0, a1, 0x802120f2 <.LBB136_1662+0x12>
802120de: 09 a0        	j	0x802120e0 <.LBB136_1662>

00000000802120e0 <.LBB136_1662>:
802120e0: 17 b5 00 00  	auipc	a0, 11
802120e4: 13 05 05 3a  	addi	a0, a0, 928
802120e8: 81 45        	mv	a1, zero
802120ea: 97 e0 fe ff  	auipc	ra, 1048558
802120ee: e7 80 60 fb  	jalr	-74(ra)
802120f2: 7d 75        	lui	a0, 1048575
802120f4: 1b 05 05 22  	addiw	a0, a0, 544
802120f8: 22 95        	add	a0, a0, s0
802120fa: 08 61        	ld	a0, 0(a0)
802120fc: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80212100: 6f c0 7f b2  	j	0x8020ec26 <.LBB136_1404+0x1982>

0000000080212104 <.LBB136_1663>:
;                             region_allocated_page_count += 1;
80212104: 17 b5 00 00  	auipc	a0, 11
80212108: 13 05 c5 37  	addi	a0, a0, 892
8021210c: 81 45        	mv	a1, zero
8021210e: 97 e0 fe ff  	auipc	ra, 1048558
80212112: e7 80 20 f9  	jalr	-110(ra)
80212116: 7d 75        	lui	a0, 1048575
80212118: 1b 05 85 7f  	addiw	a0, a0, 2040
8021211c: 22 95        	add	a0, a0, s0
8021211e: 08 61        	ld	a0, 0(a0)
80212120: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80212124: 6f c0 1f b3  	j	0x8020ec54 <.LBB136_1404+0x19b0>

0000000080212128 <.LBB136_1664>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80212128: 17 b5 00 00  	auipc	a0, 11
8021212c: 13 05 85 35  	addi	a0, a0, 856
80212130: 81 45        	mv	a1, zero
80212132: 97 e0 fe ff  	auipc	ra, 1048558
80212136: e7 80 e0 f6  	jalr	-146(ra)
8021213a: 7d 75        	lui	a0, 1048575
8021213c: 1b 05 05 7f  	addiw	a0, a0, 2032
80212140: 22 95        	add	a0, a0, s0
80212142: 0c 61        	ld	a1, 0(a0)
80212144: 13 85 25 03  	addi	a0, a1, 50
80212148: 7d 76        	lui	a2, 1048575
8021214a: 1b 06 86 21  	addiw	a2, a2, 536
8021214e: 22 96        	add	a2, a2, s0
80212150: 08 e2        	sd	a0, 0(a2)
80212152: 63 7c b5 00  	bgeu	a0, a1, 0x8021216a <.LBB136_1665+0x12>
80212156: 09 a0        	j	0x80212158 <.LBB136_1665>

0000000080212158 <.LBB136_1665>:
80212158: 17 b5 00 00  	auipc	a0, 11
8021215c: 13 05 85 32  	addi	a0, a0, 808
80212160: 81 45        	mv	a1, zero
80212162: 97 e0 fe ff  	auipc	ra, 1048558
80212166: e7 80 e0 f3  	jalr	-194(ra)
8021216a: 7d 75        	lui	a0, 1048575
8021216c: 1b 05 85 21  	addiw	a0, a0, 536
80212170: 22 95        	add	a0, a0, s0
80212172: 0c 61        	ld	a1, 0(a0)
80212174: 7d 55        	addi	a0, zero, -1
80212176: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80212178: 6d 8d        	and	a0, a0, a1
8021217a: 13 96 c5 00  	slli	a2, a1, 12
8021217e: fd 76        	lui	a3, 1048575
80212180: 9b 86 06 21  	addiw	a3, a3, 528
80212184: a2 96        	add	a3, a3, s0
80212186: 90 e2        	sd	a2, 0(a3)
80212188: 63 0c b5 00  	beq	a0, a1, 0x802121a0 <.LBB136_1666+0x12>
8021218c: 09 a0        	j	0x8021218e <.LBB136_1666>

000000008021218e <.LBB136_1666>:
8021218e: 17 b5 00 00  	auipc	a0, 11
80212192: 13 05 25 2f  	addi	a0, a0, 754
80212196: 81 45        	mv	a1, zero
80212198: 97 e0 fe ff  	auipc	ra, 1048558
8021219c: e7 80 80 f0  	jalr	-248(ra)
802121a0: 7d 75        	lui	a0, 1048575
802121a2: 1b 05 05 21  	addiw	a0, a0, 528
802121a6: 22 95        	add	a0, a0, s0
802121a8: 08 61        	ld	a0, 0(a0)
802121aa: 23 34 a4 c6  	sd	a0, -920(s0)
;                                 first_address = region.descriptor.address + offset;
802121ae: 83 35 84 fd  	ld	a1, -40(s0)
802121b2: 8c 61        	ld	a1, 0(a1)
802121b4: 2e 95        	add	a0, a0, a1
802121b6: 7d 76        	lui	a2, 1048575
802121b8: 1b 06 86 20  	addiw	a2, a2, 520
802121bc: 22 96        	add	a2, a2, s0
802121be: 08 e2        	sd	a0, 0(a2)
802121c0: 63 7c b5 00  	bgeu	a0, a1, 0x802121d8 <.LBB136_1667+0x12>
802121c4: 09 a0        	j	0x802121c6 <.LBB136_1667>

00000000802121c6 <.LBB136_1667>:
802121c6: 17 b5 00 00  	auipc	a0, 11
802121ca: 13 05 a5 2b  	addi	a0, a0, 698
802121ce: 81 45        	mv	a1, zero
802121d0: 97 e0 fe ff  	auipc	ra, 1048558
802121d4: e7 80 00 ed  	jalr	-304(ra)
802121d8: 7d 75        	lui	a0, 1048575
802121da: 1b 05 85 20  	addiw	a0, a0, 520
802121de: 22 95        	add	a0, a0, s0
802121e0: 08 61        	ld	a0, 0(a0)
802121e2: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
802121e6: 6f c0 df ac  	j	0x8020ecb2 <.LBB136_1404+0x1a0e>

00000000802121ea <.LBB136_1668>:
;                             region_allocated_page_count += 1;
802121ea: 17 b5 00 00  	auipc	a0, 11
802121ee: 13 05 65 29  	addi	a0, a0, 662
802121f2: 81 45        	mv	a1, zero
802121f4: 97 e0 fe ff  	auipc	ra, 1048558
802121f8: e7 80 c0 ea  	jalr	-340(ra)
802121fc: 7d 75        	lui	a0, 1048575
802121fe: 1b 05 85 7e  	addiw	a0, a0, 2024
80212202: 22 95        	add	a0, a0, s0
80212204: 08 61        	ld	a0, 0(a0)
80212206: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
8021220a: 6f c0 7f ad  	j	0x8020ece0 <.LBB136_1404+0x1a3c>

000000008021220e <.LBB136_1669>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8021220e: 17 b5 00 00  	auipc	a0, 11
80212212: 13 05 25 27  	addi	a0, a0, 626
80212216: 81 45        	mv	a1, zero
80212218: 97 e0 fe ff  	auipc	ra, 1048558
8021221c: e7 80 80 e8  	jalr	-376(ra)
80212220: 7d 75        	lui	a0, 1048575
80212222: 1b 05 05 7e  	addiw	a0, a0, 2016
80212226: 22 95        	add	a0, a0, s0
80212228: 0c 61        	ld	a1, 0(a0)
8021222a: 13 85 35 03  	addi	a0, a1, 51
8021222e: 7d 76        	lui	a2, 1048575
80212230: 1b 06 06 20  	addiw	a2, a2, 512
80212234: 22 96        	add	a2, a2, s0
80212236: 08 e2        	sd	a0, 0(a2)
80212238: 63 7c b5 00  	bgeu	a0, a1, 0x80212250 <.LBB136_1670+0x12>
8021223c: 09 a0        	j	0x8021223e <.LBB136_1670>

000000008021223e <.LBB136_1670>:
8021223e: 17 b5 00 00  	auipc	a0, 11
80212242: 13 05 25 24  	addi	a0, a0, 578
80212246: 81 45        	mv	a1, zero
80212248: 97 e0 fe ff  	auipc	ra, 1048558
8021224c: e7 80 80 e5  	jalr	-424(ra)
80212250: 7d 75        	lui	a0, 1048575
80212252: 1b 05 05 20  	addiw	a0, a0, 512
80212256: 22 95        	add	a0, a0, s0
80212258: 0c 61        	ld	a1, 0(a0)
8021225a: 7d 55        	addi	a0, zero, -1
8021225c: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8021225e: 6d 8d        	and	a0, a0, a1
80212260: 13 96 c5 00  	slli	a2, a1, 12
80212264: fd 76        	lui	a3, 1048575
80212266: 9b 86 86 1f  	addiw	a3, a3, 504
8021226a: a2 96        	add	a3, a3, s0
8021226c: 90 e2        	sd	a2, 0(a3)
8021226e: 63 0c b5 00  	beq	a0, a1, 0x80212286 <.LBB136_1671+0x12>
80212272: 09 a0        	j	0x80212274 <.LBB136_1671>

0000000080212274 <.LBB136_1671>:
80212274: 17 b5 00 00  	auipc	a0, 11
80212278: 13 05 c5 20  	addi	a0, a0, 524
8021227c: 81 45        	mv	a1, zero
8021227e: 97 e0 fe ff  	auipc	ra, 1048558
80212282: e7 80 20 e2  	jalr	-478(ra)
80212286: 7d 75        	lui	a0, 1048575
80212288: 1b 05 85 1f  	addiw	a0, a0, 504
8021228c: 22 95        	add	a0, a0, s0
8021228e: 08 61        	ld	a0, 0(a0)
80212290: 23 3c a4 c4  	sd	a0, -936(s0)
;                                 first_address = region.descriptor.address + offset;
80212294: 83 35 84 fd  	ld	a1, -40(s0)
80212298: 8c 61        	ld	a1, 0(a1)
8021229a: 2e 95        	add	a0, a0, a1
8021229c: 7d 76        	lui	a2, 1048575
8021229e: 1b 06 06 1f  	addiw	a2, a2, 496
802122a2: 22 96        	add	a2, a2, s0
802122a4: 08 e2        	sd	a0, 0(a2)
802122a6: 63 7c b5 00  	bgeu	a0, a1, 0x802122be <.LBB136_1672+0x12>
802122aa: 09 a0        	j	0x802122ac <.LBB136_1672>

00000000802122ac <.LBB136_1672>:
802122ac: 17 b5 00 00  	auipc	a0, 11
802122b0: 13 05 45 1d  	addi	a0, a0, 468
802122b4: 81 45        	mv	a1, zero
802122b6: 97 e0 fe ff  	auipc	ra, 1048558
802122ba: e7 80 a0 de  	jalr	-534(ra)
802122be: 7d 75        	lui	a0, 1048575
802122c0: 1b 05 05 1f  	addiw	a0, a0, 496
802122c4: 22 95        	add	a0, a0, s0
802122c6: 08 61        	ld	a0, 0(a0)
802122c8: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
802122cc: 6f c0 3f a7  	j	0x8020ed3e <.LBB136_1404+0x1a9a>

00000000802122d0 <.LBB136_1673>:
;                             region_allocated_page_count += 1;
802122d0: 17 b5 00 00  	auipc	a0, 11
802122d4: 13 05 05 1b  	addi	a0, a0, 432
802122d8: 81 45        	mv	a1, zero
802122da: 97 e0 fe ff  	auipc	ra, 1048558
802122de: e7 80 60 dc  	jalr	-570(ra)
802122e2: 7d 75        	lui	a0, 1048575
802122e4: 1b 05 85 7d  	addiw	a0, a0, 2008
802122e8: 22 95        	add	a0, a0, s0
802122ea: 08 61        	ld	a0, 0(a0)
802122ec: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
802122f0: 6f c0 df a7  	j	0x8020ed6c <.LBB136_1404+0x1ac8>

00000000802122f4 <.LBB136_1674>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802122f4: 17 b5 00 00  	auipc	a0, 11
802122f8: 13 05 c5 18  	addi	a0, a0, 396
802122fc: 81 45        	mv	a1, zero
802122fe: 97 e0 fe ff  	auipc	ra, 1048558
80212302: e7 80 20 da  	jalr	-606(ra)
80212306: 7d 75        	lui	a0, 1048575
80212308: 1b 05 05 7d  	addiw	a0, a0, 2000
8021230c: 22 95        	add	a0, a0, s0
8021230e: 0c 61        	ld	a1, 0(a0)
80212310: 13 85 45 03  	addi	a0, a1, 52
80212314: 7d 76        	lui	a2, 1048575
80212316: 1b 06 86 1e  	addiw	a2, a2, 488
8021231a: 22 96        	add	a2, a2, s0
8021231c: 08 e2        	sd	a0, 0(a2)
8021231e: 63 7c b5 00  	bgeu	a0, a1, 0x80212336 <.LBB136_1675+0x12>
80212322: 09 a0        	j	0x80212324 <.LBB136_1675>

0000000080212324 <.LBB136_1675>:
80212324: 17 b5 00 00  	auipc	a0, 11
80212328: 13 05 c5 15  	addi	a0, a0, 348
8021232c: 81 45        	mv	a1, zero
8021232e: 97 e0 fe ff  	auipc	ra, 1048558
80212332: e7 80 20 d7  	jalr	-654(ra)
80212336: 7d 75        	lui	a0, 1048575
80212338: 1b 05 85 1e  	addiw	a0, a0, 488
8021233c: 22 95        	add	a0, a0, s0
8021233e: 0c 61        	ld	a1, 0(a0)
80212340: 7d 55        	addi	a0, zero, -1
80212342: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80212344: 6d 8d        	and	a0, a0, a1
80212346: 13 96 c5 00  	slli	a2, a1, 12
8021234a: fd 76        	lui	a3, 1048575
8021234c: 9b 86 06 1e  	addiw	a3, a3, 480
80212350: a2 96        	add	a3, a3, s0
80212352: 90 e2        	sd	a2, 0(a3)
80212354: 63 0c b5 00  	beq	a0, a1, 0x8021236c <.LBB136_1676+0x12>
80212358: 09 a0        	j	0x8021235a <.LBB136_1676>

000000008021235a <.LBB136_1676>:
8021235a: 17 b5 00 00  	auipc	a0, 11
8021235e: 13 05 65 12  	addi	a0, a0, 294
80212362: 81 45        	mv	a1, zero
80212364: 97 e0 fe ff  	auipc	ra, 1048558
80212368: e7 80 c0 d3  	jalr	-708(ra)
8021236c: 7d 75        	lui	a0, 1048575
8021236e: 1b 05 05 1e  	addiw	a0, a0, 480
80212372: 22 95        	add	a0, a0, s0
80212374: 08 61        	ld	a0, 0(a0)
80212376: 23 34 a4 c4  	sd	a0, -952(s0)
;                                 first_address = region.descriptor.address + offset;
8021237a: 83 35 84 fd  	ld	a1, -40(s0)
8021237e: 8c 61        	ld	a1, 0(a1)
80212380: 2e 95        	add	a0, a0, a1
80212382: 7d 76        	lui	a2, 1048575
80212384: 1b 06 86 1d  	addiw	a2, a2, 472
80212388: 22 96        	add	a2, a2, s0
8021238a: 08 e2        	sd	a0, 0(a2)
8021238c: 63 7c b5 00  	bgeu	a0, a1, 0x802123a4 <.LBB136_1677+0x12>
80212390: 09 a0        	j	0x80212392 <.LBB136_1677>

0000000080212392 <.LBB136_1677>:
80212392: 17 b5 00 00  	auipc	a0, 11
80212396: 13 05 e5 0e  	addi	a0, a0, 238
8021239a: 81 45        	mv	a1, zero
8021239c: 97 e0 fe ff  	auipc	ra, 1048558
802123a0: e7 80 40 d0  	jalr	-764(ra)
802123a4: 7d 75        	lui	a0, 1048575
802123a6: 1b 05 85 1d  	addiw	a0, a0, 472
802123aa: 22 95        	add	a0, a0, s0
802123ac: 08 61        	ld	a0, 0(a0)
802123ae: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
802123b2: 6f c0 9f a1  	j	0x8020edca <.LBB136_1404+0x1b26>

00000000802123b6 <.LBB136_1678>:
;                             region_allocated_page_count += 1;
802123b6: 17 b5 00 00  	auipc	a0, 11
802123ba: 13 05 a5 0c  	addi	a0, a0, 202
802123be: 81 45        	mv	a1, zero
802123c0: 97 e0 fe ff  	auipc	ra, 1048558
802123c4: e7 80 00 ce  	jalr	-800(ra)
802123c8: 7d 75        	lui	a0, 1048575
802123ca: 1b 05 85 7c  	addiw	a0, a0, 1992
802123ce: 22 95        	add	a0, a0, s0
802123d0: 08 61        	ld	a0, 0(a0)
802123d2: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
802123d6: 6f c0 3f a2  	j	0x8020edf8 <.LBB136_1404+0x1b54>

00000000802123da <.LBB136_1679>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802123da: 17 b5 00 00  	auipc	a0, 11
802123de: 13 05 65 0a  	addi	a0, a0, 166
802123e2: 81 45        	mv	a1, zero
802123e4: 97 e0 fe ff  	auipc	ra, 1048558
802123e8: e7 80 c0 cb  	jalr	-836(ra)
802123ec: 7d 75        	lui	a0, 1048575
802123ee: 1b 05 05 7c  	addiw	a0, a0, 1984
802123f2: 22 95        	add	a0, a0, s0
802123f4: 0c 61        	ld	a1, 0(a0)
802123f6: 13 85 55 03  	addi	a0, a1, 53
802123fa: 7d 76        	lui	a2, 1048575
802123fc: 1b 06 06 1d  	addiw	a2, a2, 464
80212400: 22 96        	add	a2, a2, s0
80212402: 08 e2        	sd	a0, 0(a2)
80212404: 63 7c b5 00  	bgeu	a0, a1, 0x8021241c <.LBB136_1680+0x12>
80212408: 09 a0        	j	0x8021240a <.LBB136_1680>

000000008021240a <.LBB136_1680>:
8021240a: 17 b5 00 00  	auipc	a0, 11
8021240e: 13 05 65 07  	addi	a0, a0, 118
80212412: 81 45        	mv	a1, zero
80212414: 97 e0 fe ff  	auipc	ra, 1048558
80212418: e7 80 c0 c8  	jalr	-884(ra)
8021241c: 7d 75        	lui	a0, 1048575
8021241e: 1b 05 05 1d  	addiw	a0, a0, 464
80212422: 22 95        	add	a0, a0, s0
80212424: 0c 61        	ld	a1, 0(a0)
80212426: 7d 55        	addi	a0, zero, -1
80212428: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8021242a: 6d 8d        	and	a0, a0, a1
8021242c: 13 96 c5 00  	slli	a2, a1, 12
80212430: fd 76        	lui	a3, 1048575
80212432: 9b 86 86 1c  	addiw	a3, a3, 456
80212436: a2 96        	add	a3, a3, s0
80212438: 90 e2        	sd	a2, 0(a3)
8021243a: 63 0c b5 00  	beq	a0, a1, 0x80212452 <.LBB136_1681+0x12>
8021243e: 09 a0        	j	0x80212440 <.LBB136_1681>

0000000080212440 <.LBB136_1681>:
80212440: 17 b5 00 00  	auipc	a0, 11
80212444: 13 05 05 04  	addi	a0, a0, 64
80212448: 81 45        	mv	a1, zero
8021244a: 97 e0 fe ff  	auipc	ra, 1048558
8021244e: e7 80 60 c5  	jalr	-938(ra)
80212452: 7d 75        	lui	a0, 1048575
80212454: 1b 05 85 1c  	addiw	a0, a0, 456
80212458: 22 95        	add	a0, a0, s0
8021245a: 08 61        	ld	a0, 0(a0)
8021245c: 23 3c a4 c2  	sd	a0, -968(s0)
;                                 first_address = region.descriptor.address + offset;
80212460: 83 35 84 fd  	ld	a1, -40(s0)
80212464: 8c 61        	ld	a1, 0(a1)
80212466: 2e 95        	add	a0, a0, a1
80212468: 7d 76        	lui	a2, 1048575
8021246a: 1b 06 06 1c  	addiw	a2, a2, 448
8021246e: 22 96        	add	a2, a2, s0
80212470: 08 e2        	sd	a0, 0(a2)
80212472: 63 7c b5 00  	bgeu	a0, a1, 0x8021248a <.LBB136_1682+0x12>
80212476: 09 a0        	j	0x80212478 <.LBB136_1682>

0000000080212478 <.LBB136_1682>:
80212478: 17 b5 00 00  	auipc	a0, 11
8021247c: 13 05 85 00  	addi	a0, a0, 8
80212480: 81 45        	mv	a1, zero
80212482: 97 e0 fe ff  	auipc	ra, 1048558
80212486: e7 80 e0 c1  	jalr	-994(ra)
8021248a: 7d 75        	lui	a0, 1048575
8021248c: 1b 05 05 1c  	addiw	a0, a0, 448
80212490: 22 95        	add	a0, a0, s0
80212492: 08 61        	ld	a0, 0(a0)
80212494: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80212498: 6f c0 ff 9b  	j	0x8020ee56 <.LBB136_1404+0x1bb2>

000000008021249c <.LBB136_1683>:
;                             region_allocated_page_count += 1;
8021249c: 17 b5 00 00  	auipc	a0, 11
802124a0: 13 05 45 fe  	addi	a0, a0, -28
802124a4: 81 45        	mv	a1, zero
802124a6: 97 e0 fe ff  	auipc	ra, 1048558
802124aa: e7 80 a0 bf  	jalr	-1030(ra)
802124ae: 7d 75        	lui	a0, 1048575
802124b0: 1b 05 85 7b  	addiw	a0, a0, 1976
802124b4: 22 95        	add	a0, a0, s0
802124b6: 08 61        	ld	a0, 0(a0)
802124b8: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
802124bc: 6f c0 9f 9c  	j	0x8020ee84 <.LBB136_1404+0x1be0>

00000000802124c0 <.LBB136_1684>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802124c0: 17 b5 00 00  	auipc	a0, 11
802124c4: 13 05 05 fc  	addi	a0, a0, -64
802124c8: 81 45        	mv	a1, zero
802124ca: 97 e0 fe ff  	auipc	ra, 1048558
802124ce: e7 80 60 bd  	jalr	-1066(ra)
802124d2: 7d 75        	lui	a0, 1048575
802124d4: 1b 05 05 7b  	addiw	a0, a0, 1968
802124d8: 22 95        	add	a0, a0, s0
802124da: 0c 61        	ld	a1, 0(a0)
802124dc: 13 85 65 03  	addi	a0, a1, 54
802124e0: 7d 76        	lui	a2, 1048575
802124e2: 1b 06 86 1b  	addiw	a2, a2, 440
802124e6: 22 96        	add	a2, a2, s0
802124e8: 08 e2        	sd	a0, 0(a2)
802124ea: 63 7c b5 00  	bgeu	a0, a1, 0x80212502 <.LBB136_1685+0x12>
802124ee: 09 a0        	j	0x802124f0 <.LBB136_1685>

00000000802124f0 <.LBB136_1685>:
802124f0: 17 b5 00 00  	auipc	a0, 11
802124f4: 13 05 05 f9  	addi	a0, a0, -112
802124f8: 81 45        	mv	a1, zero
802124fa: 97 e0 fe ff  	auipc	ra, 1048558
802124fe: e7 80 60 ba  	jalr	-1114(ra)
80212502: 7d 75        	lui	a0, 1048575
80212504: 1b 05 85 1b  	addiw	a0, a0, 440
80212508: 22 95        	add	a0, a0, s0
8021250a: 0c 61        	ld	a1, 0(a0)
8021250c: 7d 55        	addi	a0, zero, -1
8021250e: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80212510: 6d 8d        	and	a0, a0, a1
80212512: 13 96 c5 00  	slli	a2, a1, 12
80212516: fd 76        	lui	a3, 1048575
80212518: 9b 86 06 1b  	addiw	a3, a3, 432
8021251c: a2 96        	add	a3, a3, s0
8021251e: 90 e2        	sd	a2, 0(a3)
80212520: 63 0c b5 00  	beq	a0, a1, 0x80212538 <.LBB136_1686+0x12>
80212524: 09 a0        	j	0x80212526 <.LBB136_1686>

0000000080212526 <.LBB136_1686>:
80212526: 17 b5 00 00  	auipc	a0, 11
8021252a: 13 05 a5 f5  	addi	a0, a0, -166
8021252e: 81 45        	mv	a1, zero
80212530: 97 e0 fe ff  	auipc	ra, 1048558
80212534: e7 80 00 b7  	jalr	-1168(ra)
80212538: 7d 75        	lui	a0, 1048575
8021253a: 1b 05 05 1b  	addiw	a0, a0, 432
8021253e: 22 95        	add	a0, a0, s0
80212540: 08 61        	ld	a0, 0(a0)
80212542: 23 34 a4 c2  	sd	a0, -984(s0)
;                                 first_address = region.descriptor.address + offset;
80212546: 83 35 84 fd  	ld	a1, -40(s0)
8021254a: 8c 61        	ld	a1, 0(a1)
8021254c: 2e 95        	add	a0, a0, a1
8021254e: 7d 76        	lui	a2, 1048575
80212550: 1b 06 86 1a  	addiw	a2, a2, 424
80212554: 22 96        	add	a2, a2, s0
80212556: 08 e2        	sd	a0, 0(a2)
80212558: 63 7c b5 00  	bgeu	a0, a1, 0x80212570 <.LBB136_1687+0x12>
8021255c: 09 a0        	j	0x8021255e <.LBB136_1687>

000000008021255e <.LBB136_1687>:
8021255e: 17 b5 00 00  	auipc	a0, 11
80212562: 13 05 25 f2  	addi	a0, a0, -222
80212566: 81 45        	mv	a1, zero
80212568: 97 e0 fe ff  	auipc	ra, 1048558
8021256c: e7 80 80 b3  	jalr	-1224(ra)
80212570: 7d 75        	lui	a0, 1048575
80212572: 1b 05 85 1a  	addiw	a0, a0, 424
80212576: 22 95        	add	a0, a0, s0
80212578: 08 61        	ld	a0, 0(a0)
8021257a: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
8021257e: 6f c0 5f 96  	j	0x8020eee2 <.LBB136_1404+0x1c3e>

0000000080212582 <.LBB136_1688>:
;                             region_allocated_page_count += 1;
80212582: 17 b5 00 00  	auipc	a0, 11
80212586: 13 05 e5 ef  	addi	a0, a0, -258
8021258a: 81 45        	mv	a1, zero
8021258c: 97 e0 fe ff  	auipc	ra, 1048558
80212590: e7 80 40 b1  	jalr	-1260(ra)
80212594: 7d 75        	lui	a0, 1048575
80212596: 1b 05 85 7a  	addiw	a0, a0, 1960
8021259a: 22 95        	add	a0, a0, s0
8021259c: 08 61        	ld	a0, 0(a0)
8021259e: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
802125a2: 6f c0 ff 96  	j	0x8020ef10 <.LBB136_1404+0x1c6c>

00000000802125a6 <.LBB136_1689>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802125a6: 17 b5 00 00  	auipc	a0, 11
802125aa: 13 05 a5 ed  	addi	a0, a0, -294
802125ae: 81 45        	mv	a1, zero
802125b0: 97 e0 fe ff  	auipc	ra, 1048558
802125b4: e7 80 00 af  	jalr	-1296(ra)
802125b8: 7d 75        	lui	a0, 1048575
802125ba: 1b 05 05 7a  	addiw	a0, a0, 1952
802125be: 22 95        	add	a0, a0, s0
802125c0: 0c 61        	ld	a1, 0(a0)
802125c2: 13 85 75 03  	addi	a0, a1, 55
802125c6: 7d 76        	lui	a2, 1048575
802125c8: 1b 06 06 1a  	addiw	a2, a2, 416
802125cc: 22 96        	add	a2, a2, s0
802125ce: 08 e2        	sd	a0, 0(a2)
802125d0: 63 7c b5 00  	bgeu	a0, a1, 0x802125e8 <.LBB136_1690+0x12>
802125d4: 09 a0        	j	0x802125d6 <.LBB136_1690>

00000000802125d6 <.LBB136_1690>:
802125d6: 17 b5 00 00  	auipc	a0, 11
802125da: 13 05 a5 ea  	addi	a0, a0, -342
802125de: 81 45        	mv	a1, zero
802125e0: 97 e0 fe ff  	auipc	ra, 1048558
802125e4: e7 80 00 ac  	jalr	-1344(ra)
802125e8: 7d 75        	lui	a0, 1048575
802125ea: 1b 05 05 1a  	addiw	a0, a0, 416
802125ee: 22 95        	add	a0, a0, s0
802125f0: 0c 61        	ld	a1, 0(a0)
802125f2: 7d 55        	addi	a0, zero, -1
802125f4: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802125f6: 6d 8d        	and	a0, a0, a1
802125f8: 13 96 c5 00  	slli	a2, a1, 12
802125fc: fd 76        	lui	a3, 1048575
802125fe: 9b 86 86 19  	addiw	a3, a3, 408
80212602: a2 96        	add	a3, a3, s0
80212604: 90 e2        	sd	a2, 0(a3)
80212606: 63 0c b5 00  	beq	a0, a1, 0x8021261e <.LBB136_1691+0x12>
8021260a: 09 a0        	j	0x8021260c <.LBB136_1691>

000000008021260c <.LBB136_1691>:
8021260c: 17 b5 00 00  	auipc	a0, 11
80212610: 13 05 45 e7  	addi	a0, a0, -396
80212614: 81 45        	mv	a1, zero
80212616: 97 e0 fe ff  	auipc	ra, 1048558
8021261a: e7 80 a0 a8  	jalr	-1398(ra)
8021261e: 7d 75        	lui	a0, 1048575
80212620: 1b 05 85 19  	addiw	a0, a0, 408
80212624: 22 95        	add	a0, a0, s0
80212626: 08 61        	ld	a0, 0(a0)
80212628: 23 3c a4 c0  	sd	a0, -1000(s0)
;                                 first_address = region.descriptor.address + offset;
8021262c: 83 35 84 fd  	ld	a1, -40(s0)
80212630: 8c 61        	ld	a1, 0(a1)
80212632: 2e 95        	add	a0, a0, a1
80212634: 7d 76        	lui	a2, 1048575
80212636: 1b 06 06 19  	addiw	a2, a2, 400
8021263a: 22 96        	add	a2, a2, s0
8021263c: 08 e2        	sd	a0, 0(a2)
8021263e: 63 7c b5 00  	bgeu	a0, a1, 0x80212656 <.LBB136_1692+0x12>
80212642: 09 a0        	j	0x80212644 <.LBB136_1692>

0000000080212644 <.LBB136_1692>:
80212644: 17 b5 00 00  	auipc	a0, 11
80212648: 13 05 c5 e3  	addi	a0, a0, -452
8021264c: 81 45        	mv	a1, zero
8021264e: 97 e0 fe ff  	auipc	ra, 1048558
80212652: e7 80 20 a5  	jalr	-1454(ra)
80212656: 7d 75        	lui	a0, 1048575
80212658: 1b 05 05 19  	addiw	a0, a0, 400
8021265c: 22 95        	add	a0, a0, s0
8021265e: 08 61        	ld	a0, 0(a0)
80212660: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80212664: 6f c0 bf 90  	j	0x8020ef6e <.LBB136_1404+0x1cca>

0000000080212668 <.LBB136_1693>:
;                             region_allocated_page_count += 1;
80212668: 17 b5 00 00  	auipc	a0, 11
8021266c: 13 05 85 e1  	addi	a0, a0, -488
80212670: 81 45        	mv	a1, zero
80212672: 97 e0 fe ff  	auipc	ra, 1048558
80212676: e7 80 e0 a2  	jalr	-1490(ra)
8021267a: 7d 75        	lui	a0, 1048575
8021267c: 1b 05 85 79  	addiw	a0, a0, 1944
80212680: 22 95        	add	a0, a0, s0
80212682: 08 61        	ld	a0, 0(a0)
80212684: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80212688: 6f c0 5f 91  	j	0x8020ef9c <.LBB136_1404+0x1cf8>

000000008021268c <.LBB136_1694>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8021268c: 17 b5 00 00  	auipc	a0, 11
80212690: 13 05 45 df  	addi	a0, a0, -524
80212694: 81 45        	mv	a1, zero
80212696: 97 e0 fe ff  	auipc	ra, 1048558
8021269a: e7 80 a0 a0  	jalr	-1526(ra)
8021269e: 7d 75        	lui	a0, 1048575
802126a0: 1b 05 05 79  	addiw	a0, a0, 1936
802126a4: 22 95        	add	a0, a0, s0
802126a6: 0c 61        	ld	a1, 0(a0)
802126a8: 13 85 85 03  	addi	a0, a1, 56
802126ac: 7d 76        	lui	a2, 1048575
802126ae: 1b 06 86 18  	addiw	a2, a2, 392
802126b2: 22 96        	add	a2, a2, s0
802126b4: 08 e2        	sd	a0, 0(a2)
802126b6: 63 7c b5 00  	bgeu	a0, a1, 0x802126ce <.LBB136_1695+0x12>
802126ba: 09 a0        	j	0x802126bc <.LBB136_1695>

00000000802126bc <.LBB136_1695>:
802126bc: 17 b5 00 00  	auipc	a0, 11
802126c0: 13 05 45 dc  	addi	a0, a0, -572
802126c4: 81 45        	mv	a1, zero
802126c6: 97 e0 fe ff  	auipc	ra, 1048558
802126ca: e7 80 a0 9d  	jalr	-1574(ra)
802126ce: 7d 75        	lui	a0, 1048575
802126d0: 1b 05 85 18  	addiw	a0, a0, 392
802126d4: 22 95        	add	a0, a0, s0
802126d6: 0c 61        	ld	a1, 0(a0)
802126d8: 7d 55        	addi	a0, zero, -1
802126da: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802126dc: 6d 8d        	and	a0, a0, a1
802126de: 13 96 c5 00  	slli	a2, a1, 12
802126e2: fd 76        	lui	a3, 1048575
802126e4: 9b 86 06 18  	addiw	a3, a3, 384
802126e8: a2 96        	add	a3, a3, s0
802126ea: 90 e2        	sd	a2, 0(a3)
802126ec: 63 0c b5 00  	beq	a0, a1, 0x80212704 <.LBB136_1696+0x12>
802126f0: 09 a0        	j	0x802126f2 <.LBB136_1696>

00000000802126f2 <.LBB136_1696>:
802126f2: 17 b5 00 00  	auipc	a0, 11
802126f6: 13 05 e5 d8  	addi	a0, a0, -626
802126fa: 81 45        	mv	a1, zero
802126fc: 97 e0 fe ff  	auipc	ra, 1048558
80212700: e7 80 40 9a  	jalr	-1628(ra)
80212704: 7d 75        	lui	a0, 1048575
80212706: 1b 05 05 18  	addiw	a0, a0, 384
8021270a: 22 95        	add	a0, a0, s0
8021270c: 08 61        	ld	a0, 0(a0)
8021270e: 23 34 a4 c0  	sd	a0, -1016(s0)
;                                 first_address = region.descriptor.address + offset;
80212712: 83 35 84 fd  	ld	a1, -40(s0)
80212716: 8c 61        	ld	a1, 0(a1)
80212718: 2e 95        	add	a0, a0, a1
8021271a: 7d 76        	lui	a2, 1048575
8021271c: 1b 06 86 17  	addiw	a2, a2, 376
80212720: 22 96        	add	a2, a2, s0
80212722: 08 e2        	sd	a0, 0(a2)
80212724: 63 7c b5 00  	bgeu	a0, a1, 0x8021273c <.LBB136_1697+0x12>
80212728: 09 a0        	j	0x8021272a <.LBB136_1697>

000000008021272a <.LBB136_1697>:
8021272a: 17 b5 00 00  	auipc	a0, 11
8021272e: 13 05 65 d5  	addi	a0, a0, -682
80212732: 81 45        	mv	a1, zero
80212734: 97 e0 fe ff  	auipc	ra, 1048558
80212738: e7 80 c0 96  	jalr	-1684(ra)
8021273c: 7d 75        	lui	a0, 1048575
8021273e: 1b 05 85 17  	addiw	a0, a0, 376
80212742: 22 95        	add	a0, a0, s0
80212744: 08 61        	ld	a0, 0(a0)
80212746: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
8021274a: 6f c0 1f 8b  	j	0x8020effa <.LBB136_1404+0x1d56>

000000008021274e <.LBB136_1698>:
;                             region_allocated_page_count += 1;
8021274e: 17 b5 00 00  	auipc	a0, 11
80212752: 13 05 25 d3  	addi	a0, a0, -718
80212756: 81 45        	mv	a1, zero
80212758: 97 e0 fe ff  	auipc	ra, 1048558
8021275c: e7 80 80 94  	jalr	-1720(ra)
80212760: 7d 75        	lui	a0, 1048575
80212762: 1b 05 85 78  	addiw	a0, a0, 1928
80212766: 22 95        	add	a0, a0, s0
80212768: 08 61        	ld	a0, 0(a0)
8021276a: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
8021276e: 6f c0 bf 8b  	j	0x8020f028 <.LBB136_1404+0x1d84>

0000000080212772 <.LBB136_1699>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80212772: 17 b5 00 00  	auipc	a0, 11
80212776: 13 05 e5 d0  	addi	a0, a0, -754
8021277a: 81 45        	mv	a1, zero
8021277c: 97 e0 fe ff  	auipc	ra, 1048558
80212780: e7 80 40 92  	jalr	-1756(ra)
80212784: 7d 75        	lui	a0, 1048575
80212786: 1b 05 05 78  	addiw	a0, a0, 1920
8021278a: 22 95        	add	a0, a0, s0
8021278c: 0c 61        	ld	a1, 0(a0)
8021278e: 13 85 95 03  	addi	a0, a1, 57
80212792: 7d 76        	lui	a2, 1048575
80212794: 1b 06 06 17  	addiw	a2, a2, 368
80212798: 22 96        	add	a2, a2, s0
8021279a: 08 e2        	sd	a0, 0(a2)
8021279c: 63 7c b5 00  	bgeu	a0, a1, 0x802127b4 <.LBB136_1700+0x12>
802127a0: 09 a0        	j	0x802127a2 <.LBB136_1700>

00000000802127a2 <.LBB136_1700>:
802127a2: 17 b5 00 00  	auipc	a0, 11
802127a6: 13 05 e5 cd  	addi	a0, a0, -802
802127aa: 81 45        	mv	a1, zero
802127ac: 97 e0 fe ff  	auipc	ra, 1048558
802127b0: e7 80 40 8f  	jalr	-1804(ra)
802127b4: 7d 75        	lui	a0, 1048575
802127b6: 1b 05 05 17  	addiw	a0, a0, 368
802127ba: 22 95        	add	a0, a0, s0
802127bc: 0c 61        	ld	a1, 0(a0)
802127be: 7d 55        	addi	a0, zero, -1
802127c0: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802127c2: 6d 8d        	and	a0, a0, a1
802127c4: 13 96 c5 00  	slli	a2, a1, 12
802127c8: fd 76        	lui	a3, 1048575
802127ca: 9b 86 86 16  	addiw	a3, a3, 360
802127ce: a2 96        	add	a3, a3, s0
802127d0: 90 e2        	sd	a2, 0(a3)
802127d2: 63 0c b5 00  	beq	a0, a1, 0x802127ea <.LBB136_1701+0x12>
802127d6: 09 a0        	j	0x802127d8 <.LBB136_1701>

00000000802127d8 <.LBB136_1701>:
802127d8: 17 b5 00 00  	auipc	a0, 11
802127dc: 13 05 85 ca  	addi	a0, a0, -856
802127e0: 81 45        	mv	a1, zero
802127e2: 97 e0 fe ff  	auipc	ra, 1048558
802127e6: e7 80 e0 8b  	jalr	-1858(ra)
802127ea: 7d 75        	lui	a0, 1048575
802127ec: 1b 05 85 16  	addiw	a0, a0, 360
802127f0: 22 95        	add	a0, a0, s0
802127f2: 08 61        	ld	a0, 0(a0)
802127f4: 23 3c a4 be  	sd	a0, -1032(s0)
;                                 first_address = region.descriptor.address + offset;
802127f8: 83 35 84 fd  	ld	a1, -40(s0)
802127fc: 8c 61        	ld	a1, 0(a1)
802127fe: 2e 95        	add	a0, a0, a1
80212800: 7d 76        	lui	a2, 1048575
80212802: 1b 06 06 16  	addiw	a2, a2, 352
80212806: 22 96        	add	a2, a2, s0
80212808: 08 e2        	sd	a0, 0(a2)
8021280a: 63 7c b5 00  	bgeu	a0, a1, 0x80212822 <.LBB136_1702+0x12>
8021280e: 09 a0        	j	0x80212810 <.LBB136_1702>

0000000080212810 <.LBB136_1702>:
80212810: 17 b5 00 00  	auipc	a0, 11
80212814: 13 05 05 c7  	addi	a0, a0, -912
80212818: 81 45        	mv	a1, zero
8021281a: 97 e0 fe ff  	auipc	ra, 1048558
8021281e: e7 80 60 88  	jalr	-1914(ra)
80212822: 7d 75        	lui	a0, 1048575
80212824: 1b 05 05 16  	addiw	a0, a0, 352
80212828: 22 95        	add	a0, a0, s0
8021282a: 08 61        	ld	a0, 0(a0)
8021282c: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80212830: 6f c0 7f 85  	j	0x8020f086 <.LBB136_1404+0x1de2>

0000000080212834 <.LBB136_1703>:
;                             region_allocated_page_count += 1;
80212834: 17 b5 00 00  	auipc	a0, 11
80212838: 13 05 c5 c4  	addi	a0, a0, -948
8021283c: 81 45        	mv	a1, zero
8021283e: 97 e0 fe ff  	auipc	ra, 1048558
80212842: e7 80 20 86  	jalr	-1950(ra)
80212846: 7d 75        	lui	a0, 1048575
80212848: 1b 05 85 77  	addiw	a0, a0, 1912
8021284c: 22 95        	add	a0, a0, s0
8021284e: 08 61        	ld	a0, 0(a0)
80212850: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80212854: 6f c0 1f 86  	j	0x8020f0b4 <.LBB136_1404+0x1e10>

0000000080212858 <.LBB136_1704>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80212858: 17 b5 00 00  	auipc	a0, 11
8021285c: 13 05 85 c2  	addi	a0, a0, -984
80212860: 81 45        	mv	a1, zero
80212862: 97 e0 fe ff  	auipc	ra, 1048558
80212866: e7 80 e0 83  	jalr	-1986(ra)
8021286a: 7d 75        	lui	a0, 1048575
8021286c: 1b 05 05 77  	addiw	a0, a0, 1904
80212870: 22 95        	add	a0, a0, s0
80212872: 0c 61        	ld	a1, 0(a0)
80212874: 13 85 a5 03  	addi	a0, a1, 58
80212878: 7d 76        	lui	a2, 1048575
8021287a: 1b 06 86 15  	addiw	a2, a2, 344
8021287e: 22 96        	add	a2, a2, s0
80212880: 08 e2        	sd	a0, 0(a2)
80212882: 63 7c b5 00  	bgeu	a0, a1, 0x8021289a <.LBB136_1705+0x12>
80212886: 09 a0        	j	0x80212888 <.LBB136_1705>

0000000080212888 <.LBB136_1705>:
80212888: 17 b5 00 00  	auipc	a0, 11
8021288c: 13 05 85 bf  	addi	a0, a0, -1032
80212890: 81 45        	mv	a1, zero
80212892: 97 e0 fe ff  	auipc	ra, 1048558
80212896: e7 80 e0 80  	jalr	-2034(ra)
8021289a: 7d 75        	lui	a0, 1048575
8021289c: 1b 05 85 15  	addiw	a0, a0, 344
802128a0: 22 95        	add	a0, a0, s0
802128a2: 0c 61        	ld	a1, 0(a0)
802128a4: 7d 55        	addi	a0, zero, -1
802128a6: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
802128a8: 6d 8d        	and	a0, a0, a1
802128aa: 13 96 c5 00  	slli	a2, a1, 12
802128ae: fd 76        	lui	a3, 1048575
802128b0: 9b 86 06 15  	addiw	a3, a3, 336
802128b4: a2 96        	add	a3, a3, s0
802128b6: 90 e2        	sd	a2, 0(a3)
802128b8: 63 0c b5 00  	beq	a0, a1, 0x802128d0 <.LBB136_1706+0x12>
802128bc: 09 a0        	j	0x802128be <.LBB136_1706>

00000000802128be <.LBB136_1706>:
802128be: 17 b5 00 00  	auipc	a0, 11
802128c2: 13 05 25 bc  	addi	a0, a0, -1086
802128c6: 81 45        	mv	a1, zero
802128c8: 97 d0 fe ff  	auipc	ra, 1048557
802128cc: e7 80 80 7d  	jalr	2008(ra)
802128d0: 7d 75        	lui	a0, 1048575
802128d2: 1b 05 05 15  	addiw	a0, a0, 336
802128d6: 22 95        	add	a0, a0, s0
802128d8: 08 61        	ld	a0, 0(a0)
802128da: 23 34 a4 be  	sd	a0, -1048(s0)
;                                 first_address = region.descriptor.address + offset;
802128de: 83 35 84 fd  	ld	a1, -40(s0)
802128e2: 8c 61        	ld	a1, 0(a1)
802128e4: 2e 95        	add	a0, a0, a1
802128e6: 7d 76        	lui	a2, 1048575
802128e8: 1b 06 86 14  	addiw	a2, a2, 328
802128ec: 22 96        	add	a2, a2, s0
802128ee: 08 e2        	sd	a0, 0(a2)
802128f0: 63 7c b5 00  	bgeu	a0, a1, 0x80212908 <.LBB136_1707+0x12>
802128f4: 09 a0        	j	0x802128f6 <.LBB136_1707>

00000000802128f6 <.LBB136_1707>:
802128f6: 17 b5 00 00  	auipc	a0, 11
802128fa: 13 05 a5 b8  	addi	a0, a0, -1142
802128fe: 81 45        	mv	a1, zero
80212900: 97 d0 fe ff  	auipc	ra, 1048557
80212904: e7 80 00 7a  	jalr	1952(ra)
80212908: 7d 75        	lui	a0, 1048575
8021290a: 1b 05 85 14  	addiw	a0, a0, 328
8021290e: 22 95        	add	a0, a0, s0
80212910: 08 61        	ld	a0, 0(a0)
80212912: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80212916: 6f c0 cf ff  	j	0x8020f112 <.LBB136_1404+0x1e6e>

000000008021291a <.LBB136_1708>:
;                             region_allocated_page_count += 1;
8021291a: 17 b5 00 00  	auipc	a0, 11
8021291e: 13 05 65 b6  	addi	a0, a0, -1178
80212922: 81 45        	mv	a1, zero
80212924: 97 d0 fe ff  	auipc	ra, 1048557
80212928: e7 80 c0 77  	jalr	1916(ra)
8021292c: 7d 75        	lui	a0, 1048575
8021292e: 1b 05 85 76  	addiw	a0, a0, 1896
80212932: 22 95        	add	a0, a0, s0
80212934: 08 61        	ld	a0, 0(a0)
80212936: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
8021293a: 6f c0 7f 80  	j	0x8020f140 <.LBB136_1404+0x1e9c>

000000008021293e <.LBB136_1709>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8021293e: 17 b5 00 00  	auipc	a0, 11
80212942: 13 05 25 b4  	addi	a0, a0, -1214
80212946: 81 45        	mv	a1, zero
80212948: 97 d0 fe ff  	auipc	ra, 1048557
8021294c: e7 80 80 75  	jalr	1880(ra)
80212950: 7d 75        	lui	a0, 1048575
80212952: 1b 05 05 76  	addiw	a0, a0, 1888
80212956: 22 95        	add	a0, a0, s0
80212958: 0c 61        	ld	a1, 0(a0)
8021295a: 13 85 b5 03  	addi	a0, a1, 59
8021295e: 7d 76        	lui	a2, 1048575
80212960: 1b 06 06 14  	addiw	a2, a2, 320
80212964: 22 96        	add	a2, a2, s0
80212966: 08 e2        	sd	a0, 0(a2)
80212968: 63 7c b5 00  	bgeu	a0, a1, 0x80212980 <.LBB136_1710+0x12>
8021296c: 09 a0        	j	0x8021296e <.LBB136_1710>

000000008021296e <.LBB136_1710>:
8021296e: 17 b5 00 00  	auipc	a0, 11
80212972: 13 05 25 b1  	addi	a0, a0, -1262
80212976: 81 45        	mv	a1, zero
80212978: 97 d0 fe ff  	auipc	ra, 1048557
8021297c: e7 80 80 72  	jalr	1832(ra)
80212980: 7d 75        	lui	a0, 1048575
80212982: 1b 05 05 14  	addiw	a0, a0, 320
80212986: 22 95        	add	a0, a0, s0
80212988: 0c 61        	ld	a1, 0(a0)
8021298a: 7d 55        	addi	a0, zero, -1
8021298c: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
8021298e: 6d 8d        	and	a0, a0, a1
80212990: 13 96 c5 00  	slli	a2, a1, 12
80212994: fd 76        	lui	a3, 1048575
80212996: 9b 86 86 13  	addiw	a3, a3, 312
8021299a: a2 96        	add	a3, a3, s0
8021299c: 90 e2        	sd	a2, 0(a3)
8021299e: 63 0c b5 00  	beq	a0, a1, 0x802129b6 <.LBB136_1711+0x12>
802129a2: 09 a0        	j	0x802129a4 <.LBB136_1711>

00000000802129a4 <.LBB136_1711>:
802129a4: 17 b5 00 00  	auipc	a0, 11
802129a8: 13 05 c5 ad  	addi	a0, a0, -1316
802129ac: 81 45        	mv	a1, zero
802129ae: 97 d0 fe ff  	auipc	ra, 1048557
802129b2: e7 80 20 6f  	jalr	1778(ra)
802129b6: 7d 75        	lui	a0, 1048575
802129b8: 1b 05 85 13  	addiw	a0, a0, 312
802129bc: 22 95        	add	a0, a0, s0
802129be: 08 61        	ld	a0, 0(a0)
802129c0: 23 3c a4 bc  	sd	a0, -1064(s0)
;                                 first_address = region.descriptor.address + offset;
802129c4: 83 35 84 fd  	ld	a1, -40(s0)
802129c8: 8c 61        	ld	a1, 0(a1)
802129ca: 2e 95        	add	a0, a0, a1
802129cc: 7d 76        	lui	a2, 1048575
802129ce: 1b 06 06 13  	addiw	a2, a2, 304
802129d2: 22 96        	add	a2, a2, s0
802129d4: 08 e2        	sd	a0, 0(a2)
802129d6: 63 7c b5 00  	bgeu	a0, a1, 0x802129ee <.LBB136_1712+0x12>
802129da: 09 a0        	j	0x802129dc <.LBB136_1712>

00000000802129dc <.LBB136_1712>:
802129dc: 17 b5 00 00  	auipc	a0, 11
802129e0: 13 05 45 aa  	addi	a0, a0, -1372
802129e4: 81 45        	mv	a1, zero
802129e6: 97 d0 fe ff  	auipc	ra, 1048557
802129ea: e7 80 a0 6b  	jalr	1722(ra)
802129ee: 7d 75        	lui	a0, 1048575
802129f0: 1b 05 05 13  	addiw	a0, a0, 304
802129f4: 22 95        	add	a0, a0, s0
802129f6: 08 61        	ld	a0, 0(a0)
802129f8: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
802129fc: 6f c0 2f fa  	j	0x8020f19e <.LBB136_1404+0x1efa>

0000000080212a00 <.LBB136_1713>:
;                             region_allocated_page_count += 1;
80212a00: 17 b5 00 00  	auipc	a0, 11
80212a04: 13 05 05 a8  	addi	a0, a0, -1408
80212a08: 81 45        	mv	a1, zero
80212a0a: 97 d0 fe ff  	auipc	ra, 1048557
80212a0e: e7 80 60 69  	jalr	1686(ra)
80212a12: 7d 75        	lui	a0, 1048575
80212a14: 1b 05 85 75  	addiw	a0, a0, 1880
80212a18: 22 95        	add	a0, a0, s0
80212a1a: 08 61        	ld	a0, 0(a0)
80212a1c: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80212a20: 6f c0 cf fa  	j	0x8020f1cc <.LBB136_1404+0x1f28>

0000000080212a24 <.LBB136_1714>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80212a24: 17 b5 00 00  	auipc	a0, 11
80212a28: 13 05 c5 a5  	addi	a0, a0, -1444
80212a2c: 81 45        	mv	a1, zero
80212a2e: 97 d0 fe ff  	auipc	ra, 1048557
80212a32: e7 80 20 67  	jalr	1650(ra)
80212a36: 7d 75        	lui	a0, 1048575
80212a38: 1b 05 05 75  	addiw	a0, a0, 1872
80212a3c: 22 95        	add	a0, a0, s0
80212a3e: 0c 61        	ld	a1, 0(a0)
80212a40: 13 85 c5 03  	addi	a0, a1, 60
80212a44: 7d 76        	lui	a2, 1048575
80212a46: 1b 06 86 12  	addiw	a2, a2, 296
80212a4a: 22 96        	add	a2, a2, s0
80212a4c: 08 e2        	sd	a0, 0(a2)
80212a4e: 63 7c b5 00  	bgeu	a0, a1, 0x80212a66 <.LBB136_1715+0x12>
80212a52: 09 a0        	j	0x80212a54 <.LBB136_1715>

0000000080212a54 <.LBB136_1715>:
80212a54: 17 b5 00 00  	auipc	a0, 11
80212a58: 13 05 c5 a2  	addi	a0, a0, -1492
80212a5c: 81 45        	mv	a1, zero
80212a5e: 97 d0 fe ff  	auipc	ra, 1048557
80212a62: e7 80 20 64  	jalr	1602(ra)
80212a66: 7d 75        	lui	a0, 1048575
80212a68: 1b 05 85 12  	addiw	a0, a0, 296
80212a6c: 22 95        	add	a0, a0, s0
80212a6e: 0c 61        	ld	a1, 0(a0)
80212a70: 7d 55        	addi	a0, zero, -1
80212a72: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80212a74: 6d 8d        	and	a0, a0, a1
80212a76: 13 96 c5 00  	slli	a2, a1, 12
80212a7a: fd 76        	lui	a3, 1048575
80212a7c: 9b 86 06 12  	addiw	a3, a3, 288
80212a80: a2 96        	add	a3, a3, s0
80212a82: 90 e2        	sd	a2, 0(a3)
80212a84: 63 0c b5 00  	beq	a0, a1, 0x80212a9c <.LBB136_1716+0x12>
80212a88: 09 a0        	j	0x80212a8a <.LBB136_1716>

0000000080212a8a <.LBB136_1716>:
80212a8a: 17 b5 00 00  	auipc	a0, 11
80212a8e: 13 05 65 9f  	addi	a0, a0, -1546
80212a92: 81 45        	mv	a1, zero
80212a94: 97 d0 fe ff  	auipc	ra, 1048557
80212a98: e7 80 c0 60  	jalr	1548(ra)
80212a9c: 7d 75        	lui	a0, 1048575
80212a9e: 1b 05 05 12  	addiw	a0, a0, 288
80212aa2: 22 95        	add	a0, a0, s0
80212aa4: 08 61        	ld	a0, 0(a0)
80212aa6: 23 34 a4 bc  	sd	a0, -1080(s0)
;                                 first_address = region.descriptor.address + offset;
80212aaa: 83 35 84 fd  	ld	a1, -40(s0)
80212aae: 8c 61        	ld	a1, 0(a1)
80212ab0: 2e 95        	add	a0, a0, a1
80212ab2: 7d 76        	lui	a2, 1048575
80212ab4: 1b 06 86 11  	addiw	a2, a2, 280
80212ab8: 22 96        	add	a2, a2, s0
80212aba: 08 e2        	sd	a0, 0(a2)
80212abc: 63 7c b5 00  	bgeu	a0, a1, 0x80212ad4 <.LBB136_1717+0x12>
80212ac0: 09 a0        	j	0x80212ac2 <.LBB136_1717>

0000000080212ac2 <.LBB136_1717>:
80212ac2: 17 b5 00 00  	auipc	a0, 11
80212ac6: 13 05 e5 9b  	addi	a0, a0, -1602
80212aca: 81 45        	mv	a1, zero
80212acc: 97 d0 fe ff  	auipc	ra, 1048557
80212ad0: e7 80 40 5d  	jalr	1492(ra)
80212ad4: 7d 75        	lui	a0, 1048575
80212ad6: 1b 05 85 11  	addiw	a0, a0, 280
80212ada: 22 95        	add	a0, a0, s0
80212adc: 08 61        	ld	a0, 0(a0)
80212ade: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80212ae2: 6f c0 8f f4  	j	0x8020f22a <.LBB136_1404+0x1f86>

0000000080212ae6 <.LBB136_1718>:
;                             region_allocated_page_count += 1;
80212ae6: 17 b5 00 00  	auipc	a0, 11
80212aea: 13 05 a5 99  	addi	a0, a0, -1638
80212aee: 81 45        	mv	a1, zero
80212af0: 97 d0 fe ff  	auipc	ra, 1048557
80212af4: e7 80 00 5b  	jalr	1456(ra)
80212af8: 7d 75        	lui	a0, 1048575
80212afa: 1b 05 85 74  	addiw	a0, a0, 1864
80212afe: 22 95        	add	a0, a0, s0
80212b00: 08 61        	ld	a0, 0(a0)
80212b02: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80212b06: 6f c0 2f f5  	j	0x8020f258 <.LBB136_1404+0x1fb4>

0000000080212b0a <.LBB136_1719>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80212b0a: 17 b5 00 00  	auipc	a0, 11
80212b0e: 13 05 65 97  	addi	a0, a0, -1674
80212b12: 81 45        	mv	a1, zero
80212b14: 97 d0 fe ff  	auipc	ra, 1048557
80212b18: e7 80 c0 58  	jalr	1420(ra)
80212b1c: 7d 75        	lui	a0, 1048575
80212b1e: 1b 05 05 74  	addiw	a0, a0, 1856
80212b22: 22 95        	add	a0, a0, s0
80212b24: 0c 61        	ld	a1, 0(a0)
80212b26: 13 85 d5 03  	addi	a0, a1, 61
80212b2a: 7d 76        	lui	a2, 1048575
80212b2c: 1b 06 06 11  	addiw	a2, a2, 272
80212b30: 22 96        	add	a2, a2, s0
80212b32: 08 e2        	sd	a0, 0(a2)
80212b34: 63 7c b5 00  	bgeu	a0, a1, 0x80212b4c <.LBB136_1720+0x12>
80212b38: 09 a0        	j	0x80212b3a <.LBB136_1720>

0000000080212b3a <.LBB136_1720>:
80212b3a: 17 b5 00 00  	auipc	a0, 11
80212b3e: 13 05 65 94  	addi	a0, a0, -1722
80212b42: 81 45        	mv	a1, zero
80212b44: 97 d0 fe ff  	auipc	ra, 1048557
80212b48: e7 80 c0 55  	jalr	1372(ra)
80212b4c: 7d 75        	lui	a0, 1048575
80212b4e: 1b 05 05 11  	addiw	a0, a0, 272
80212b52: 22 95        	add	a0, a0, s0
80212b54: 0c 61        	ld	a1, 0(a0)
80212b56: 7d 55        	addi	a0, zero, -1
80212b58: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80212b5a: 6d 8d        	and	a0, a0, a1
80212b5c: 13 96 c5 00  	slli	a2, a1, 12
80212b60: fd 76        	lui	a3, 1048575
80212b62: 9b 86 86 10  	addiw	a3, a3, 264
80212b66: a2 96        	add	a3, a3, s0
80212b68: 90 e2        	sd	a2, 0(a3)
80212b6a: 63 0c b5 00  	beq	a0, a1, 0x80212b82 <.LBB136_1721+0x12>
80212b6e: 09 a0        	j	0x80212b70 <.LBB136_1721>

0000000080212b70 <.LBB136_1721>:
80212b70: 17 b5 00 00  	auipc	a0, 11
80212b74: 13 05 05 91  	addi	a0, a0, -1776
80212b78: 81 45        	mv	a1, zero
80212b7a: 97 d0 fe ff  	auipc	ra, 1048557
80212b7e: e7 80 60 52  	jalr	1318(ra)
80212b82: 7d 75        	lui	a0, 1048575
80212b84: 1b 05 85 10  	addiw	a0, a0, 264
80212b88: 22 95        	add	a0, a0, s0
80212b8a: 08 61        	ld	a0, 0(a0)
80212b8c: 23 3c a4 ba  	sd	a0, -1096(s0)
;                                 first_address = region.descriptor.address + offset;
80212b90: 83 35 84 fd  	ld	a1, -40(s0)
80212b94: 8c 61        	ld	a1, 0(a1)
80212b96: 2e 95        	add	a0, a0, a1
80212b98: 7d 76        	lui	a2, 1048575
80212b9a: 1b 06 06 10  	addiw	a2, a2, 256
80212b9e: 22 96        	add	a2, a2, s0
80212ba0: 08 e2        	sd	a0, 0(a2)
80212ba2: 63 7c b5 00  	bgeu	a0, a1, 0x80212bba <.LBB136_1722+0x12>
80212ba6: 09 a0        	j	0x80212ba8 <.LBB136_1722>

0000000080212ba8 <.LBB136_1722>:
80212ba8: 17 b5 00 00  	auipc	a0, 11
80212bac: 13 05 85 8d  	addi	a0, a0, -1832
80212bb0: 81 45        	mv	a1, zero
80212bb2: 97 d0 fe ff  	auipc	ra, 1048557
80212bb6: e7 80 e0 4e  	jalr	1262(ra)
80212bba: 7d 75        	lui	a0, 1048575
80212bbc: 1b 05 05 10  	addiw	a0, a0, 256
80212bc0: 22 95        	add	a0, a0, s0
80212bc2: 08 61        	ld	a0, 0(a0)
80212bc4: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80212bc8: 6f c0 ef ee  	j	0x8020f2b6 <.LBB136_1404+0x2012>

0000000080212bcc <.LBB136_1723>:
;                             region_allocated_page_count += 1;
80212bcc: 17 b5 00 00  	auipc	a0, 11
80212bd0: 13 05 45 8b  	addi	a0, a0, -1868
80212bd4: 81 45        	mv	a1, zero
80212bd6: 97 d0 fe ff  	auipc	ra, 1048557
80212bda: e7 80 a0 4c  	jalr	1226(ra)
80212bde: 7d 75        	lui	a0, 1048575
80212be0: 1b 05 85 73  	addiw	a0, a0, 1848
80212be4: 22 95        	add	a0, a0, s0
80212be6: 08 61        	ld	a0, 0(a0)
80212be8: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80212bec: 6f c0 8f ef  	j	0x8020f2e4 <.LBB136_1404+0x2040>

0000000080212bf0 <.LBB136_1724>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80212bf0: 17 b5 00 00  	auipc	a0, 11
80212bf4: 13 05 05 89  	addi	a0, a0, -1904
80212bf8: 81 45        	mv	a1, zero
80212bfa: 97 d0 fe ff  	auipc	ra, 1048557
80212bfe: e7 80 60 4a  	jalr	1190(ra)
80212c02: 7d 75        	lui	a0, 1048575
80212c04: 1b 05 05 73  	addiw	a0, a0, 1840
80212c08: 22 95        	add	a0, a0, s0
80212c0a: 0c 61        	ld	a1, 0(a0)
80212c0c: 13 85 e5 03  	addi	a0, a1, 62
80212c10: 7d 76        	lui	a2, 1048575
80212c12: 1b 06 86 0f  	addiw	a2, a2, 248
80212c16: 22 96        	add	a2, a2, s0
80212c18: 08 e2        	sd	a0, 0(a2)
80212c1a: 63 7c b5 00  	bgeu	a0, a1, 0x80212c32 <.LBB136_1725+0x12>
80212c1e: 09 a0        	j	0x80212c20 <.LBB136_1725>

0000000080212c20 <.LBB136_1725>:
80212c20: 17 b5 00 00  	auipc	a0, 11
80212c24: 13 05 05 86  	addi	a0, a0, -1952
80212c28: 81 45        	mv	a1, zero
80212c2a: 97 d0 fe ff  	auipc	ra, 1048557
80212c2e: e7 80 60 47  	jalr	1142(ra)
80212c32: 7d 75        	lui	a0, 1048575
80212c34: 1b 05 85 0f  	addiw	a0, a0, 248
80212c38: 22 95        	add	a0, a0, s0
80212c3a: 0c 61        	ld	a1, 0(a0)
80212c3c: 7d 55        	addi	a0, zero, -1
80212c3e: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80212c40: 6d 8d        	and	a0, a0, a1
80212c42: 13 96 c5 00  	slli	a2, a1, 12
80212c46: fd 76        	lui	a3, 1048575
80212c48: 9b 86 06 0f  	addiw	a3, a3, 240
80212c4c: a2 96        	add	a3, a3, s0
80212c4e: 90 e2        	sd	a2, 0(a3)
80212c50: 63 0c b5 00  	beq	a0, a1, 0x80212c68 <.LBB136_1726+0x12>
80212c54: 09 a0        	j	0x80212c56 <.LBB136_1726>

0000000080212c56 <.LBB136_1726>:
80212c56: 17 b5 00 00  	auipc	a0, 11
80212c5a: 13 05 a5 82  	addi	a0, a0, -2006
80212c5e: 81 45        	mv	a1, zero
80212c60: 97 d0 fe ff  	auipc	ra, 1048557
80212c64: e7 80 00 44  	jalr	1088(ra)
80212c68: 7d 75        	lui	a0, 1048575
80212c6a: 1b 05 05 0f  	addiw	a0, a0, 240
80212c6e: 22 95        	add	a0, a0, s0
80212c70: 08 61        	ld	a0, 0(a0)
80212c72: 23 34 a4 ba  	sd	a0, -1112(s0)
;                                 first_address = region.descriptor.address + offset;
80212c76: 83 35 84 fd  	ld	a1, -40(s0)
80212c7a: 8c 61        	ld	a1, 0(a1)
80212c7c: 2e 95        	add	a0, a0, a1
80212c7e: 7d 76        	lui	a2, 1048575
80212c80: 1b 06 86 0e  	addiw	a2, a2, 232
80212c84: 22 96        	add	a2, a2, s0
80212c86: 08 e2        	sd	a0, 0(a2)
80212c88: 63 7c b5 00  	bgeu	a0, a1, 0x80212ca0 <.LBB136_1727+0x12>
80212c8c: 09 a0        	j	0x80212c8e <.LBB136_1727>

0000000080212c8e <.LBB136_1727>:
80212c8e: 17 a5 00 00  	auipc	a0, 10
80212c92: 13 05 25 7f  	addi	a0, a0, 2034
80212c96: 81 45        	mv	a1, zero
80212c98: 97 d0 fe ff  	auipc	ra, 1048557
80212c9c: e7 80 80 40  	jalr	1032(ra)
80212ca0: 7d 75        	lui	a0, 1048575
80212ca2: 1b 05 85 0e  	addiw	a0, a0, 232
80212ca6: 22 95        	add	a0, a0, s0
80212ca8: 08 61        	ld	a0, 0(a0)
80212caa: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80212cae: 6f c0 4f e9  	j	0x8020f342 <.LBB136_1404+0x209e>

0000000080212cb2 <.LBB136_1728>:
;                             region_allocated_page_count += 1;
80212cb2: 17 a5 00 00  	auipc	a0, 10
80212cb6: 13 05 e5 7c  	addi	a0, a0, 1998
80212cba: 81 45        	mv	a1, zero
80212cbc: 97 d0 fe ff  	auipc	ra, 1048557
80212cc0: e7 80 40 3e  	jalr	996(ra)
80212cc4: 7d 75        	lui	a0, 1048575
80212cc6: 1b 05 85 72  	addiw	a0, a0, 1832
80212cca: 22 95        	add	a0, a0, s0
80212ccc: 08 61        	ld	a0, 0(a0)
80212cce: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80212cd2: 6f c0 ef e9  	j	0x8020f370 <.LBB136_1404+0x20cc>

0000000080212cd6 <.LBB136_1729>:
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80212cd6: 17 a5 00 00  	auipc	a0, 10
80212cda: 13 05 a5 7a  	addi	a0, a0, 1962
80212cde: 81 45        	mv	a1, zero
80212ce0: 97 d0 fe ff  	auipc	ra, 1048557
80212ce4: e7 80 00 3c  	jalr	960(ra)
80212ce8: 7d 75        	lui	a0, 1048575
80212cea: 1b 05 05 72  	addiw	a0, a0, 1824
80212cee: 22 95        	add	a0, a0, s0
80212cf0: 0c 61        	ld	a1, 0(a0)
80212cf2: 13 85 f5 03  	addi	a0, a1, 63
80212cf6: 7d 76        	lui	a2, 1048575
80212cf8: 1b 06 06 0e  	addiw	a2, a2, 224
80212cfc: 22 96        	add	a2, a2, s0
80212cfe: 08 e2        	sd	a0, 0(a2)
80212d00: 63 7c b5 00  	bgeu	a0, a1, 0x80212d18 <.LBB136_1730+0x12>
80212d04: 09 a0        	j	0x80212d06 <.LBB136_1730>

0000000080212d06 <.LBB136_1730>:
80212d06: 17 a5 00 00  	auipc	a0, 10
80212d0a: 13 05 a5 77  	addi	a0, a0, 1914
80212d0e: 81 45        	mv	a1, zero
80212d10: 97 d0 fe ff  	auipc	ra, 1048557
80212d14: e7 80 00 39  	jalr	912(ra)
80212d18: 7d 75        	lui	a0, 1048575
80212d1a: 1b 05 05 0e  	addiw	a0, a0, 224
80212d1e: 22 95        	add	a0, a0, s0
80212d20: 0c 61        	ld	a1, 0(a0)
80212d22: 7d 55        	addi	a0, zero, -1
80212d24: 31 81        	srli	a0, a0, 12
;                                 const offset = (bit + (start_index * @bitSizeOf(u64))) * kernel.arch.page_size;
80212d26: 6d 8d        	and	a0, a0, a1
80212d28: 13 96 c5 00  	slli	a2, a1, 12
80212d2c: fd 76        	lui	a3, 1048575
80212d2e: 9b 86 86 0d  	addiw	a3, a3, 216
80212d32: a2 96        	add	a3, a3, s0
80212d34: 90 e2        	sd	a2, 0(a3)
80212d36: 63 0c b5 00  	beq	a0, a1, 0x80212d4e <.LBB136_1731+0x12>
80212d3a: 09 a0        	j	0x80212d3c <.LBB136_1731>

0000000080212d3c <.LBB136_1731>:
80212d3c: 17 a5 00 00  	auipc	a0, 10
80212d40: 13 05 45 74  	addi	a0, a0, 1860
80212d44: 81 45        	mv	a1, zero
80212d46: 97 d0 fe ff  	auipc	ra, 1048557
80212d4a: e7 80 a0 35  	jalr	858(ra)
80212d4e: 7d 75        	lui	a0, 1048575
80212d50: 1b 05 85 0d  	addiw	a0, a0, 216
80212d54: 22 95        	add	a0, a0, s0
80212d56: 08 61        	ld	a0, 0(a0)
80212d58: 23 3c a4 b8  	sd	a0, -1128(s0)
;                                 first_address = region.descriptor.address + offset;
80212d5c: 83 35 84 fd  	ld	a1, -40(s0)
80212d60: 8c 61        	ld	a1, 0(a1)
80212d62: 2e 95        	add	a0, a0, a1
80212d64: 7d 76        	lui	a2, 1048575
80212d66: 1b 06 06 0d  	addiw	a2, a2, 208
80212d6a: 22 96        	add	a2, a2, s0
80212d6c: 08 e2        	sd	a0, 0(a2)
80212d6e: 63 7c b5 00  	bgeu	a0, a1, 0x80212d86 <.LBB136_1732+0x12>
80212d72: 09 a0        	j	0x80212d74 <.LBB136_1732>

0000000080212d74 <.LBB136_1732>:
80212d74: 17 a5 00 00  	auipc	a0, 10
80212d78: 13 05 c5 70  	addi	a0, a0, 1804
80212d7c: 81 45        	mv	a1, zero
80212d7e: 97 d0 fe ff  	auipc	ra, 1048557
80212d82: e7 80 20 32  	jalr	802(ra)
80212d86: 7d 75        	lui	a0, 1048575
80212d88: 1b 05 05 0d  	addiw	a0, a0, 208
80212d8c: 22 95        	add	a0, a0, s0
80212d8e: 08 61        	ld	a0, 0(a0)
80212d90: 23 3c a4 fa  	sd	a0, -72(s0)
;                             if (first_address == 0) {
80212d94: 6f c0 8f e3  	j	0x8020f3cc <.LBB136_1404+0x2128>

0000000080212d98 <.LBB136_1733>:
;                             region_allocated_page_count += 1;
80212d98: 17 a5 00 00  	auipc	a0, 10
80212d9c: 13 05 85 6e  	addi	a0, a0, 1768
80212da0: 81 45        	mv	a1, zero
80212da2: 97 d0 fe ff  	auipc	ra, 1048557
80212da6: e7 80 e0 2f  	jalr	766(ra)
80212daa: 7d 75        	lui	a0, 1048575
80212dac: 1b 05 85 71  	addiw	a0, a0, 1816
80212db0: 22 95        	add	a0, a0, s0
80212db2: 08 61        	ld	a0, 0(a0)
80212db4: 23 34 a4 fc  	sd	a0, -56(s0)
;                         if (!bit_set) {
80212db8: 6f c0 2f e4  	j	0x8020f3fa <.LBB136_1404+0x2156>

0000000080212dbc <.LBB136_1734>:
;                 region.allocated_page_count += region_allocated_page_count;
80212dbc: 17 a5 00 00  	auipc	a0, 10
80212dc0: 13 05 45 6c  	addi	a0, a0, 1732
80212dc4: 81 45        	mv	a1, zero
80212dc6: 97 d0 fe ff  	auipc	ra, 1048557
80212dca: e7 80 a0 2d  	jalr	730(ra)
80212dce: 7d 75        	lui	a0, 1048575
80212dd0: 1b 05 05 71  	addiw	a0, a0, 1808
80212dd4: 22 95        	add	a0, a0, s0
80212dd6: 08 61        	ld	a0, 0(a0)
80212dd8: fd 75        	lui	a1, 1048575
80212dda: 9b 85 85 70  	addiw	a1, a1, 1800
80212dde: a2 95        	add	a1, a1, s0
80212de0: 8c 61        	ld	a1, 0(a1)
80212de2: 88 e1        	sd	a0, 0(a1)
;                 kernel.assert(@src(), result != 0);
80212de4: 03 35 04 b9  	ld	a0, -1136(s0)
80212de8: b3 35 a0 00  	snez	a1, a0

0000000080212dec <.LBB136_1735>:
80212dec: 17 b5 00 00  	auipc	a0, 11
80212df0: 13 05 45 7a  	addi	a0, a0, 1956
80212df4: 97 d0 fe ff  	auipc	ra, 1048557
80212df8: e7 80 80 41  	jalr	1048(ra)
80212dfc: 83 35 04 b4  	ld	a1, -1216(s0)
;                 return result;
80212e00: 03 35 04 b9  	ld	a0, -1136(s0)
80212e04: 05 46        	addi	a2, zero, 1
80212e06: 23 84 c5 00  	sb	a2, 8(a1)
80212e0a: 88 e1        	sd	a0, 0(a1)
80212e0c: 13 01 01 78  	addi	sp, sp, 1920
80212e10: 03 34 01 7e  	ld	s0, 2016(sp)
80212e14: 83 30 81 7e  	ld	ra, 2024(sp)
80212e18: 13 01 01 7f  	addi	sp, sp, 2032
80212e1c: 82 80        	ret

0000000080212e1e <.LBB136_1736>:
;             kernel.assert(@src(), region.allocated_page_count + page_count > region.descriptor.page_count);
80212e1e: 17 a5 00 00  	auipc	a0, 10
80212e22: 13 05 25 66  	addi	a0, a0, 1634
80212e26: 81 45        	mv	a1, zero
80212e28: 97 d0 fe ff  	auipc	ra, 1048557
80212e2c: e7 80 80 27  	jalr	632(ra)
80212e30: 7d 75        	lui	a0, 1048575
80212e32: 1b 05 05 70  	addiw	a0, a0, 1792
80212e36: 22 95        	add	a0, a0, s0
80212e38: 0c 61        	ld	a1, 0(a0)
80212e3a: 03 35 84 fd  	ld	a0, -40(s0)
80212e3e: 08 65        	ld	a0, 8(a0)
80212e40: b3 35 b5 00  	sltu	a1, a0, a1

0000000080212e44 <.LBB136_1737>:
80212e44: 17 b5 00 00  	auipc	a0, 11
80212e48: 13 05 45 77  	addi	a0, a0, 1908
80212e4c: 97 d0 fe ff  	auipc	ra, 1048557
80212e50: e7 80 00 3c  	jalr	960(ra)
;             kernel.assert(@src(), first_address != 0);
80212e54: 03 35 84 fb  	ld	a0, -72(s0)
80212e58: b3 35 a0 00  	snez	a1, a0

0000000080212e5c <.LBB136_1738>:
80212e5c: 17 b5 00 00  	auipc	a0, 11
80212e60: 13 05 45 78  	addi	a0, a0, 1924
80212e64: 97 d0 fe ff  	auipc	ra, 1048557
80212e68: e7 80 80 3a  	jalr	936(ra)
;             const original_allocated_page_count = region.allocated_page_count - region_allocated_page_count;
80212e6c: 03 35 84 fd  	ld	a0, -40(s0)
80212e70: 08 69        	ld	a0, 16(a0)
80212e72: 83 35 84 fc  	ld	a1, -56(s0)
80212e76: b3 05 b5 40  	sub	a1, a0, a1
80212e7a: 7d 76        	lui	a2, 1048575
80212e7c: 1b 06 86 0c  	addiw	a2, a2, 200
80212e80: 22 96        	add	a2, a2, s0
80212e82: 0c e2        	sd	a1, 0(a2)
80212e84: 63 7c b5 00  	bgeu	a0, a1, 0x80212e9c <.LBB136_1739+0x12>
80212e88: 09 a0        	j	0x80212e8a <.LBB136_1739>

0000000080212e8a <.LBB136_1739>:
80212e8a: 17 a5 00 00  	auipc	a0, 10
80212e8e: 13 05 65 5f  	addi	a0, a0, 1526
80212e92: 81 45        	mv	a1, zero
80212e94: 97 d0 fe ff  	auipc	ra, 1048557
80212e98: e7 80 c0 20  	jalr	524(ra)
80212e9c: 7d 75        	lui	a0, 1048575
80212e9e: 1b 05 85 0c  	addiw	a0, a0, 200
80212ea2: 22 95        	add	a0, a0, s0
80212ea4: 08 61        	ld	a0, 0(a0)
80212ea6: 23 34 a4 b6  	sd	a0, -1176(s0)
80212eaa: fd 75        	lui	a1, 1048575
80212eac: 9b 85 05 0c  	addiw	a1, a1, 192
80212eb0: a2 95        	add	a1, a1, s0
80212eb2: 88 e1        	sd	a0, 0(a1)
80212eb4: 81 45        	mv	a1, zero
80212eb6: 05 45        	addi	a0, zero, 1
;             var byte = original_allocated_page_count / @bitSizeOf(u64);
80212eb8: 63 1c b5 00  	bne	a0, a1, 0x80212ed0 <.LBB136_1740+0x12>
80212ebc: 09 a0        	j	0x80212ebe <.LBB136_1740>

0000000080212ebe <.LBB136_1740>:
80212ebe: 17 a5 00 00  	auipc	a0, 10
80212ec2: 13 05 25 41  	addi	a0, a0, 1042
80212ec6: 81 45        	mv	a1, zero
80212ec8: 97 d0 fe ff  	auipc	ra, 1048557
80212ecc: e7 80 80 1d  	jalr	472(ra)
80212ed0: 7d 75        	lui	a0, 1048575
80212ed2: 1b 05 05 0c  	addiw	a0, a0, 192
80212ed6: 22 95        	add	a0, a0, s0
80212ed8: 08 61        	ld	a0, 0(a0)
80212eda: 19 81        	srli	a0, a0, 6
80212edc: 23 30 a4 b6  	sd	a0, -1184(s0)
;             var bit = original_allocated_page_count % @bitSizeOf(u64);
80212ee0: 03 35 84 b6  	ld	a0, -1176(s0)
80212ee4: fd 75        	lui	a1, 1048575
80212ee6: 9b 85 85 0b  	addiw	a1, a1, 184
80212eea: a2 95        	add	a1, a1, s0
80212eec: 88 e1        	sd	a0, 0(a1)
80212eee: 01 45        	mv	a0, zero
80212ef0: 63 11 a5 04  	bne	a0, a0, 0x80212f32 <.LBB136_1742>
80212ef4: 09 a0        	j	0x80212ef6 <.LBB136_1740+0x38>
80212ef6: 7d 75        	lui	a0, 1048575
80212ef8: 1b 05 85 0b  	addiw	a0, a0, 184
80212efc: 22 95        	add	a0, a0, s0
80212efe: 08 61        	ld	a0, 0(a0)
80212f00: 13 75 f5 03  	andi	a0, a0, 63
80212f04: 23 3c a4 b4  	sd	a0, -1192(s0)
;             kernel.assert(@src(), region_allocated_page_count > 0);
80212f08: 03 35 84 fc  	ld	a0, -56(s0)
80212f0c: b3 35 a0 00  	snez	a1, a0

0000000080212f10 <.LBB136_1741>:
80212f10: 17 b5 00 00  	auipc	a0, 11
80212f14: 13 05 85 6f  	addi	a0, a0, 1784
80212f18: 97 d0 fe ff  	auipc	ra, 1048557
80212f1c: e7 80 40 2f  	jalr	756(ra)
;             if (bit > 0) {
80212f20: 03 35 84 b5  	ld	a0, -1192(s0)
80212f24: 81 45        	mv	a1, zero
80212f26: 63 04 b5 00  	beq	a0, a1, 0x80212f2e <.LBB136_1741+0x1e>
80212f2a: 6f c0 6f d7  	j	0x8020f4a0 <.LBB136_1404+0x21fc>
80212f2e: 6f c0 2f db  	j	0x8020f4e0 <.LBB136_1404+0x223c>

0000000080212f32 <.LBB136_1742>:
;             var bit = original_allocated_page_count % @bitSizeOf(u64);
80212f32: 17 a5 00 00  	auipc	a0, 10
80212f36: 13 05 e5 3a  	addi	a0, a0, 942
80212f3a: 81 45        	mv	a1, zero
80212f3c: 97 d0 fe ff  	auipc	ra, 1048557
80212f40: e7 80 40 16  	jalr	356(ra)

0000000080212f44 <.LBB136_1743>:
;                     region.bitset[byte] &= (~(@as(u64, 1) << @intCast(u6, bit)));
80212f44: 17 a5 00 00  	auipc	a0, 10
80212f48: 13 05 c5 3b  	addi	a0, a0, 956
80212f4c: 81 45        	mv	a1, zero
80212f4e: 97 d0 fe ff  	auipc	ra, 1048557
80212f52: e7 80 20 15  	jalr	338(ra)
80212f56: 7d 75        	lui	a0, 1048575
80212f58: 1b 05 85 6f  	addiw	a0, a0, 1784
80212f5c: 22 95        	add	a0, a0, s0
80212f5e: 0c 61        	ld	a1, 0(a0)
80212f60: 7d 75        	lui	a0, 1048575
80212f62: 1b 05 05 6f  	addiw	a0, a0, 1776
80212f66: 22 95        	add	a0, a0, s0
80212f68: 08 61        	ld	a0, 0(a0)
80212f6a: 08 61        	ld	a0, 0(a0)
80212f6c: 8e 05        	slli	a1, a1, 3
80212f6e: 2e 95        	add	a0, a0, a1
80212f70: fd 75        	lui	a1, 1048575
80212f72: 9b 85 05 0a  	addiw	a1, a1, 160
80212f76: a2 95        	add	a1, a1, s0
80212f78: 88 e1        	sd	a0, 0(a1)
80212f7a: 08 61        	ld	a0, 0(a0)
80212f7c: fd 75        	lui	a1, 1048575
80212f7e: 9b 85 85 0a  	addiw	a1, a1, 168
80212f82: a2 95        	add	a1, a1, s0
80212f84: 88 e1        	sd	a0, 0(a1)
80212f86: 03 35 84 b5  	ld	a0, -1192(s0)
80212f8a: fd 75        	lui	a1, 1048575
80212f8c: 9b 85 05 0b  	addiw	a1, a1, 176
80212f90: a2 95        	add	a1, a1, s0
80212f92: 88 e1        	sd	a0, 0(a1)
80212f94: 93 75 f5 03  	andi	a1, a0, 63
80212f98: 63 15 b5 04  	bne	a0, a1, 0x80212fe2 <.LBB136_1744>
80212f9c: 09 a0        	j	0x80212f9e <.LBB136_1743+0x5a>
80212f9e: 7d 75        	lui	a0, 1048575
80212fa0: 1b 05 05 0a  	addiw	a0, a0, 160
80212fa4: 22 95        	add	a0, a0, s0
80212fa6: 0c 61        	ld	a1, 0(a0)
80212fa8: 7d 75        	lui	a0, 1048575
80212faa: 1b 05 85 0a  	addiw	a0, a0, 168
80212fae: 22 95        	add	a0, a0, s0
80212fb0: 08 61        	ld	a0, 0(a0)
80212fb2: 7d 76        	lui	a2, 1048575
80212fb4: 1b 06 06 0b  	addiw	a2, a2, 176
80212fb8: 22 96        	add	a2, a2, s0
80212fba: 14 62        	ld	a3, 0(a2)
80212fbc: 05 46        	addi	a2, zero, 1
;                     region.bitset[byte] &= (~(@as(u64, 1) << @intCast(u6, bit)));
80212fbe: 33 16 d6 00  	sll	a2, a2, a3
80212fc2: 13 46 f6 ff  	not	a2, a2
80212fc6: 71 8d        	and	a0, a0, a2
80212fc8: 88 e1        	sd	a0, 0(a1)
;                     region_allocated_page_count -= 1;
80212fca: 03 35 84 fc  	ld	a0, -56(s0)
80212fce: 93 05 f5 ff  	addi	a1, a0, -1
80212fd2: 7d 76        	lui	a2, 1048575
80212fd4: 1b 06 86 09  	addiw	a2, a2, 152
80212fd8: 22 96        	add	a2, a2, s0
80212fda: 0c e2        	sd	a1, 0(a2)
80212fdc: 63 6c b5 00  	bltu	a0, a1, 0x80212ff4 <.LBB136_1745>
80212fe0: 1d a0        	j	0x80213006 <.LBB136_1745+0x12>

0000000080212fe2 <.LBB136_1744>:
;                     region.bitset[byte] &= (~(@as(u64, 1) << @intCast(u6, bit)));
80212fe2: 17 a5 00 00  	auipc	a0, 10
80212fe6: 13 05 e5 30  	addi	a0, a0, 782
80212fea: 81 45        	mv	a1, zero
80212fec: 97 d0 fe ff  	auipc	ra, 1048557
80212ff0: e7 80 40 0b  	jalr	180(ra)

0000000080212ff4 <.LBB136_1745>:
;                     region_allocated_page_count -= 1;
80212ff4: 17 a5 00 00  	auipc	a0, 10
80212ff8: 13 05 c5 48  	addi	a0, a0, 1164
80212ffc: 81 45        	mv	a1, zero
80212ffe: 97 d0 fe ff  	auipc	ra, 1048557
80213002: e7 80 20 0a  	jalr	162(ra)
80213006: 7d 75        	lui	a0, 1048575
80213008: 1b 05 85 09  	addiw	a0, a0, 152
8021300c: 22 95        	add	a0, a0, s0
8021300e: 08 61        	ld	a0, 0(a0)
80213010: 23 34 a4 fc  	sd	a0, -56(s0)
;                 while (bit < @bitSizeOf(u64)) : (bit += 1) {
80213014: 83 35 84 b5  	ld	a1, -1192(s0)
80213018: 13 85 15 00  	addi	a0, a1, 1
8021301c: 7d 76        	lui	a2, 1048575
8021301e: 1b 06 06 09  	addiw	a2, a2, 144
80213022: 22 96        	add	a2, a2, s0
80213024: 08 e2        	sd	a0, 0(a2)
80213026: 63 7c b5 00  	bgeu	a0, a1, 0x8021303e <.LBB136_1746+0x12>
8021302a: 09 a0        	j	0x8021302c <.LBB136_1746>

000000008021302c <.LBB136_1746>:
8021302c: 17 a5 00 00  	auipc	a0, 10
80213030: 13 05 45 45  	addi	a0, a0, 1108
80213034: 81 45        	mv	a1, zero
80213036: 97 d0 fe ff  	auipc	ra, 1048557
8021303a: e7 80 a0 06  	jalr	106(ra)
8021303e: 7d 75        	lui	a0, 1048575
80213040: 1b 05 05 09  	addiw	a0, a0, 144
80213044: 22 95        	add	a0, a0, s0
80213046: 08 61        	ld	a0, 0(a0)
80213048: 23 3c a4 b4  	sd	a0, -1192(s0)
8021304c: 6f c0 6f c5  	j	0x8020f4a2 <.LBB136_1404+0x21fe>

0000000080213050 <std.log.scoped(Virtual).debug>:
;         pub fn debug(
80213050: 41 11        	addi	sp, sp, -16
;             log(.debug, scope, format, args);
80213052: 06 e4        	sd	ra, 8(sp)
80213054: 22 e0        	sd	s0, 0(sp)
80213056: 00 08        	addi	s0, sp, 16
80213058: 97 20 00 00  	auipc	ra, 2
8021305c: e7 80 80 18  	jalr	392(ra)
;         ) void {
80213060: 02 64        	ld	s0, 0(sp)
80213062: a2 60        	ld	ra, 8(sp)
80213064: 41 01        	addi	sp, sp, 16
80213066: 82 80        	ret

0000000080213068 <std.log.scoped(Virtual).debug.52>:
;         pub fn debug(
80213068: 41 11        	addi	sp, sp, -16
;             log(.debug, scope, format, args);
8021306a: 06 e4        	sd	ra, 8(sp)
8021306c: 22 e0        	sd	s0, 0(sp)
8021306e: 00 08        	addi	s0, sp, 16
80213070: 97 20 00 00  	auipc	ra, 2
80213074: e7 80 00 1a  	jalr	416(ra)
;         ) void {
80213078: 02 64        	ld	s0, 0(sp)
8021307a: a2 60        	ld	ra, 8(sp)
8021307c: 41 01        	addi	sp, sp, 16
8021307e: 82 80        	ret

0000000080213080 <std.log.scoped(Virtual).debug.53>:
;         pub fn debug(
80213080: 01 11        	addi	sp, sp, -32
;             log(.debug, scope, format, args);
80213082: 06 ec        	sd	ra, 24(sp)
80213084: 22 e8        	sd	s0, 16(sp)
80213086: 00 10        	addi	s0, sp, 32
80213088: 0c 65        	ld	a1, 8(a0)
8021308a: 23 34 b4 fe  	sd	a1, -24(s0)
8021308e: 0c 61        	ld	a1, 0(a0)
80213090: 23 30 b4 fe  	sd	a1, -32(s0)
80213094: 97 20 00 00  	auipc	ra, 2
80213098: e7 80 c0 1a  	jalr	428(ra)
;         ) void {
8021309c: 42 64        	ld	s0, 16(sp)
8021309e: e2 60        	ld	ra, 24(sp)
802130a0: 05 61        	addi	sp, sp, 32
802130a2: 82 80        	ret

00000000802130a4 <arch.riscv64.virtual.enablePaging>:
; pub fn enablePaging() void {
802130a4: 79 71        	addi	sp, sp, -48
;     arch.SATP.write(arch.MAKE_SATP(@ptrToInt(kernel_init_pagetable)));
802130a6: 06 f4        	sd	ra, 40(sp)
802130a8: 22 f0        	sd	s0, 32(sp)
802130aa: 00 18        	addi	s0, sp, 48

00000000802130ac <.LBB140_1>:
802130ac: 17 15 66 00  	auipc	a0, 1633
802130b0: 13 05 c5 f8  	addi	a0, a0, -116
802130b4: 08 61        	ld	a0, 0(a0)
802130b6: 23 3c a4 fc  	sd	a0, -40(s0)
;     return (SATP_SV39 | (pagetable >> 12));
802130ba: 31 81        	srli	a0, a0, 12
802130bc: fd 55        	addi	a1, zero, -1
802130be: fe 15        	slli	a1, a1, 63
802130c0: 4d 8d        	or	a0, a0, a1
802130c2: 23 30 a4 fe  	sd	a0, -32(s0)
802130c6: 23 34 a4 fe  	sd	a0, -24(s0)
;             asm volatile ("csrw " ++ reg_name ++ ", %[arg1]"
802130ca: 73 10 05 18  	csrw	satp, a0
;     asm volatile ("sfence.vma zero, zero");
802130ce: 73 00 00 12  	sfence.vma
; pub fn enablePaging() void {
802130d2: 02 74        	ld	s0, 32(sp)
802130d4: a2 70        	ld	ra, 40(sp)
802130d6: 45 61        	addi	sp, sp, 48
802130d8: 82 80        	ret

00000000802130da <std.log.scoped(Virtual).debug.54>:
;         pub fn debug(
802130da: 41 11        	addi	sp, sp, -16
;             log(.debug, scope, format, args);
802130dc: 06 e4        	sd	ra, 8(sp)
802130de: 22 e0        	sd	s0, 0(sp)
802130e0: 00 08        	addi	s0, sp, 16
802130e2: 97 20 00 00  	auipc	ra, 2
802130e6: e7 80 20 1a  	jalr	418(ra)
;         ) void {
802130ea: 02 64        	ld	s0, 0(sp)
802130ec: a2 60        	ld	ra, 8(sp)
802130ee: 41 01        	addi	sp, sp, 16
802130f0: 82 80        	ret

00000000802130f2 <std.log.scoped(Virtual).debug.55>:
;         pub fn debug(
802130f2: 01 11        	addi	sp, sp, -32
;             log(.debug, scope, format, args);
802130f4: 06 ec        	sd	ra, 24(sp)
802130f6: 22 e8        	sd	s0, 16(sp)
802130f8: 00 10        	addi	s0, sp, 32
802130fa: 0c 61        	ld	a1, 0(a0)
802130fc: 23 34 b4 fe  	sd	a1, -24(s0)
80213100: 97 20 00 00  	auipc	ra, 2
80213104: e7 80 40 1b  	jalr	436(ra)
;         ) void {
80213108: 42 64        	ld	s0, 16(sp)
8021310a: e2 60        	ld	ra, 24(sp)
8021310c: 05 61        	addi	sp, sp, 32
8021310e: 82 80        	ret

0000000080213110 <std.log.log.56>:
; fn log(
80213110: 01 11        	addi	sp, sp, -32
80213112: 06 ec        	sd	ra, 24(sp)
80213114: 22 e8        	sd	s0, 16(sp)
80213116: 00 10        	addi	s0, sp, 32
80213118: 0d 45        	addi	a0, zero, 3
;         break :blk level;
8021311a: a3 07 a4 fe  	sb	a0, -17(s0)
8021311e: 09 a0        	j	0x80213120 <std.log.log.56+0x10>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80213120: 03 45 f4 fe  	lbu	a0, -17(s0)
80213124: 8d 45        	addi	a1, zero, 3
80213126: 63 18 b5 00  	bne	a0, a1, 0x80213136 <std.log.log.56+0x26>
8021312a: 09 a0        	j	0x8021312c <std.log.log.56+0x1c>
;             root.log(message_level, scope, format, args);
8021312c: 97 20 00 00  	auipc	ra, 2
80213130: e7 80 60 1c  	jalr	454(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80213134: 11 a0        	j	0x80213138 <std.log.log.56+0x28>
80213136: 09 a0        	j	0x80213138 <std.log.log.56+0x28>
; ) void {
80213138: 42 64        	ld	s0, 16(sp)
8021313a: e2 60        	ld	ra, 24(sp)
8021313c: 05 61        	addi	sp, sp, 32
8021313e: 82 80        	ret

0000000080213140 <std.mem.readIntForeign.57>:
; pub fn readIntForeign(comptime T: type, bytes: *const [@divExact(@typeInfo(T).Int.bits, 8)]u8) T {
80213140: 79 71        	addi	sp, sp, -48
80213142: 06 f4        	sd	ra, 40(sp)
80213144: 22 f0        	sd	s0, 32(sp)
80213146: 00 18        	addi	s0, sp, 48
80213148: 23 3c a4 fc  	sd	a0, -40(s0)
;     return @byteSwap(T, readIntNative(T, bytes));
8021314c: 23 30 a4 fe  	sd	a0, -32(s0)
80213150: 97 20 00 00  	auipc	ra, 2
80213154: e7 80 00 20  	jalr	512(ra)
80213158: 93 55 85 01  	srli	a1, a0, 24
8021315c: 37 06 ff 00  	lui	a2, 4080
80213160: 6d 8e        	and	a2, a2, a1
80213162: 93 55 85 00  	srli	a1, a0, 8
80213166: 13 07 f0 0f  	addi	a4, zero, 255
8021316a: 93 16 87 01  	slli	a3, a4, 24
8021316e: f5 8d        	and	a1, a1, a3
80213170: d1 8d        	or	a1, a1, a2
80213172: 13 56 85 02  	srli	a2, a0, 40
80213176: c1 66        	lui	a3, 16
80213178: 9b 86 06 f0  	addiw	a3, a3, -256
8021317c: 75 8e        	and	a2, a2, a3
8021317e: 93 56 85 03  	srli	a3, a0, 56
80213182: 55 8e        	or	a2, a2, a3
80213184: d1 8d        	or	a1, a1, a2
80213186: 13 16 85 00  	slli	a2, a0, 8
8021318a: 93 16 07 02  	slli	a3, a4, 32
8021318e: f1 8e        	and	a3, a3, a2
80213190: 13 16 85 01  	slli	a2, a0, 24
80213194: 93 17 87 02  	slli	a5, a4, 40
80213198: 7d 8e        	and	a2, a2, a5
8021319a: 55 8e        	or	a2, a2, a3
8021319c: 93 16 85 02  	slli	a3, a0, 40
802131a0: 42 17        	slli	a4, a4, 48
802131a2: f9 8e        	and	a3, a3, a4
802131a4: 62 15        	slli	a0, a0, 56
802131a6: 55 8d        	or	a0, a0, a3
802131a8: 51 8d        	or	a0, a0, a2
802131aa: 4d 8d        	or	a0, a0, a1
802131ac: 23 34 a4 fe  	sd	a0, -24(s0)
802131b0: 02 74        	ld	s0, 32(sp)
802131b2: a2 70        	ld	ra, 40(sp)
802131b4: 45 61        	addi	sp, sp, 48
802131b6: 82 80        	ret

00000000802131b8 <panic.panic.58>:
; pub fn panic(comptime format: []const u8, args: anytype) noreturn {
802131b8: 39 71        	addi	sp, sp, -64
802131ba: 06 fc        	sd	ra, 56(sp)
802131bc: 22 f8        	sd	s0, 48(sp)
802131be: 80 00        	addi	s0, sp, 64
802131c0: 23 30 a4 fc  	sd	a0, -64(s0)
;     kernel.arch.disable_interrupts();
802131c4: 97 d0 fe ff  	auipc	ra, 1048557
802131c8: e7 80 00 30  	jalr	768(ra)
802131cc: 03 35 04 fc  	ld	a0, -64(s0)

00000000802131d0 <.LBB145_2>:
;     kernel.arch.Writer.should_lock = true;
802131d0: 17 16 66 00  	auipc	a2, 1633
802131d4: 13 06 06 e3  	addi	a2, a2, -464
802131d8: 85 45        	addi	a1, zero, 1
802131da: 23 00 b6 00  	sb	a1, 0(a2)
;     log.err(format, args);
802131de: 0c 61        	ld	a1, 0(a0)
802131e0: 23 34 b4 fc  	sd	a1, -56(s0)
802131e4: 0c 65        	ld	a1, 8(a0)
802131e6: 23 38 b4 fc  	sd	a1, -48(s0)
802131ea: 0c 69        	ld	a1, 16(a0)
802131ec: 23 3c b4 fc  	sd	a1, -40(s0)
802131f0: 0c 6d        	ld	a1, 24(a0)
802131f2: 23 30 b4 fe  	sd	a1, -32(s0)
802131f6: 0c 71        	ld	a1, 32(a0)
802131f8: 23 34 b4 fe  	sd	a1, -24(s0)
802131fc: 97 20 00 00  	auipc	ra, 2
80213200: e7 80 c0 1c  	jalr	460(ra)
;     while (true) {}
80213204: 09 a0        	j	0x80213206 <.LBB145_2+0x36>
80213206: 01 a0        	j	0x80213206 <.LBB145_2+0x36>

0000000080213208 <arch.riscv64.virtual.map_pages>:
; fn map_pages(pagetable: pagetable_t, virtual_addr: usize, physical_addr: usize, page_count: usize, permission: usize, allow_remap: bool) void {
80213208: 6d 71        	addi	sp, sp, -272
8021320a: 06 e6        	sd	ra, 264(sp)
8021320c: 22 e2        	sd	s0, 256(sp)
8021320e: 00 0a        	addi	s0, sp, 272
80213210: 23 34 a4 f6  	sd	a0, -152(s0)
80213214: 23 30 b4 f6  	sd	a1, -160(s0)
80213218: 23 3c c4 f4  	sd	a2, -168(s0)
8021321c: 23 38 d4 f4  	sd	a3, -176(s0)
80213220: 23 34 e4 f4  	sd	a4, -184(s0)
80213224: 13 f5 17 00  	andi	a0, a5, 1
80213228: a3 03 a4 f4  	sb	a0, -185(s0)
;     kernel.assert(@src(), page_count != 0);
8021322c: b3 35 d0 00  	snez	a1, a3

0000000080213230 <.LBB146_33>:
80213230: 17 b5 00 00  	auipc	a0, 11
80213234: 13 05 85 48  	addi	a0, a0, 1160
80213238: 97 d0 fe ff  	auipc	ra, 1048557
8021323c: e7 80 40 fd  	jalr	-44(ra)
;     kernel.assert(@src(), kernel.is_aligned(virtual_addr, page_size));
80213240: 03 35 04 f6  	ld	a0, -160(s0)
80213244: 23 38 a4 f2  	sd	a0, -208(s0)
80213248: 23 34 a4 fc  	sd	a0, -56(s0)
8021324c: 05 65        	lui	a0, 1
8021324e: 23 30 a4 fc  	sd	a0, -64(s0)
80213252: 7d 35        	addiw	a0, a0, -1
80213254: 23 3c a4 f2  	sd	a0, -200(s0)
80213258: 01 45        	mv	a0, zero
;     return n & (alignment - 1) == 0;
8021325a: 63 0c a5 00  	beq	a0, a0, 0x80213272 <.LBB146_34+0x12>
8021325e: 09 a0        	j	0x80213260 <.LBB146_34>

0000000080213260 <.LBB146_34>:
80213260: 17 a5 00 00  	auipc	a0, 10
80213264: 13 05 05 22  	addi	a0, a0, 544
80213268: 81 45        	mv	a1, zero
8021326a: 97 d0 fe ff  	auipc	ra, 1048557
8021326e: e7 80 60 e3  	jalr	-458(ra)
80213272: 03 35 04 f3  	ld	a0, -208(s0)
80213276: 83 35 84 f3  	ld	a1, -200(s0)
8021327a: 6d 8d        	and	a0, a0, a1
8021327c: 93 35 15 00  	seqz	a1, a0
80213280: a3 0b b4 fc  	sb	a1, -41(s0)

0000000080213284 <.LBB146_35>:
;     kernel.assert(@src(), kernel.is_aligned(virtual_addr, page_size));
80213284: 17 b5 00 00  	auipc	a0, 11
80213288: 13 05 c5 45  	addi	a0, a0, 1116
8021328c: 97 d0 fe ff  	auipc	ra, 1048557
80213290: e7 80 00 f8  	jalr	-128(ra)
;     kernel.assert(@src(), kernel.is_aligned(physical_addr, page_size));
80213294: 03 35 84 f5  	ld	a0, -168(s0)
80213298: 23 30 a4 f2  	sd	a0, -224(s0)
8021329c: 23 38 a4 fa  	sd	a0, -80(s0)
802132a0: 05 65        	lui	a0, 1
802132a2: 23 34 a4 fa  	sd	a0, -88(s0)
802132a6: 7d 35        	addiw	a0, a0, -1
802132a8: 23 34 a4 f2  	sd	a0, -216(s0)
802132ac: 01 45        	mv	a0, zero
;     return n & (alignment - 1) == 0;
802132ae: 63 0c a5 00  	beq	a0, a0, 0x802132c6 <.LBB146_36+0x12>
802132b2: 09 a0        	j	0x802132b4 <.LBB146_36>

00000000802132b4 <.LBB146_36>:
802132b4: 17 a5 00 00  	auipc	a0, 10
802132b8: 13 05 c5 1c  	addi	a0, a0, 460
802132bc: 81 45        	mv	a1, zero
802132be: 97 d0 fe ff  	auipc	ra, 1048557
802132c2: e7 80 20 de  	jalr	-542(ra)
802132c6: 03 35 04 f2  	ld	a0, -224(s0)
802132ca: 83 35 84 f2  	ld	a1, -216(s0)
802132ce: 6d 8d        	and	a0, a0, a1
802132d0: 93 35 15 00  	seqz	a1, a0
802132d4: a3 0f b4 fa  	sb	a1, -65(s0)

00000000802132d8 <.LBB146_37>:
;     kernel.assert(@src(), kernel.is_aligned(physical_addr, page_size));
802132d8: 17 b5 00 00  	auipc	a0, 11
802132dc: 13 05 05 43  	addi	a0, a0, 1072
802132e0: 97 d0 fe ff  	auipc	ra, 1048557
802132e4: e7 80 c0 f2  	jalr	-212(ra)
;     if (permission & ~(arch.PTE_FLAG_MASK) != 0) {
802132e8: 03 35 84 f4  	ld	a0, -184(s0)
802132ec: 13 75 05 c0  	andi	a0, a0, -1024
802132f0: 81 45        	mv	a1, zero
802132f2: 63 0c b5 00  	beq	a0, a1, 0x8021330a <.LBB146_38+0x12>
802132f6: 09 a0        	j	0x802132f8 <.LBB146_38>

00000000802132f8 <.LBB146_38>:
;         @panic("illegal permission");
802132f8: 17 b5 00 00  	auipc	a0, 11
802132fc: 13 05 85 43  	addi	a0, a0, 1080
80213300: 81 45        	mv	a1, zero
80213302: 97 d0 fe ff  	auipc	ra, 1048557
80213306: e7 80 e0 d9  	jalr	-610(ra)
;     if (permission & ~(arch.PTE_FLAG_MASK) != 0) {
8021330a: 09 a0        	j	0x8021330c <.LBB146_38+0x14>
8021330c: 01 45        	mv	a0, zero
;     var page_i: u64 = 0;
8021330e: 23 30 a4 fa  	sd	a0, -96(s0)
;     var virtual_page = virtual_addr;
80213312: 03 35 04 f6  	ld	a0, -160(s0)
80213316: 23 3c a4 f8  	sd	a0, -104(s0)
;     var physical_page = physical_addr;
8021331a: 03 35 84 f5  	ld	a0, -168(s0)
8021331e: 23 38 a4 f8  	sd	a0, -112(s0)
;     while (page_i < page_count) : ({
80213322: 09 a0        	j	0x80213324 <.LBB146_38+0x2c>
80213324: 03 35 04 fa  	ld	a0, -96(s0)
80213328: 83 35 04 f5  	ld	a1, -176(s0)
8021332c: 63 70 b5 0a  	bgeu	a0, a1, 0x802133cc <.LBB146_40+0x34>
80213330: 09 a0        	j	0x80213332 <.LBB146_38+0x3a>
;         const optional_pte = walk(pagetable, virtual_page, true);
80213332: 83 35 84 f6  	ld	a1, -152(s0)
80213336: 03 36 84 f9  	ld	a2, -104(s0)
8021333a: 13 05 04 f8  	addi	a0, s0, -128
8021333e: 85 46        	addi	a3, zero, 1
80213340: 97 20 00 00  	auipc	ra, 2
80213344: e7 80 e0 0b  	jalr	190(ra)
;         if (optional_pte) |pte| {
80213348: 03 45 84 f8  	lbu	a0, -120(s0)
8021334c: 81 45        	mv	a1, zero
8021334e: 63 05 b5 04  	beq	a0, a1, 0x80213398 <.LBB146_40>
80213352: 09 a0        	j	0x80213354 <.LBB146_38+0x5c>
80213354: 03 35 04 f8  	ld	a0, -128(s0)
80213358: 23 3c a4 f0  	sd	a0, -232(s0)
8021335c: 23 3c a4 f6  	sd	a0, -136(s0)
80213360: 81 45        	mv	a1, zero
;             if ((@intToPtr(*usize, pte).* & arch.PTE_VALID != 0) and !allow_remap) {
80213362: 63 09 b5 06  	beq	a0, a1, 0x802133d4 <.LBB146_41>
80213366: 41 a0        	j	0x802133e6 <.LBB146_41+0x12>
80213368: 03 05 74 f4  	lb	a0, -185(s0)
8021336c: 13 45 15 00  	xori	a0, a0, 1
80213370: 23 38 a4 f0  	sd	a0, -240(s0)
80213374: 09 a0        	j	0x80213376 <.LBB146_38+0x7e>
80213376: 03 35 04 f1  	ld	a0, -240(s0)
8021337a: 05 89        	andi	a0, a0, 1
8021337c: 81 45        	mv	a1, zero
8021337e: 63 0c b5 00  	beq	a0, a1, 0x80213396 <.LBB146_39+0x12>
80213382: 09 a0        	j	0x80213384 <.LBB146_39>

0000000080213384 <.LBB146_39>:
;                 @panic("mapping pages failed 1");
80213384: 17 b5 00 00  	auipc	a0, 11
80213388: 13 05 c5 3b  	addi	a0, a0, 956
8021338c: 81 45        	mv	a1, zero
8021338e: 97 d0 fe ff  	auipc	ra, 1048557
80213392: e7 80 20 d1  	jalr	-750(ra)
;             if ((@intToPtr(*usize, pte).* & arch.PTE_VALID != 0) and !allow_remap) {
80213396: 11 a8        	j	0x802133aa <.LBB146_40+0x12>

0000000080213398 <.LBB146_40>:
;             @panic("mapping pages failed 2");
80213398: 17 b5 00 00  	auipc	a0, 11
8021339c: 13 05 85 3b  	addi	a0, a0, 952
802133a0: 81 45        	mv	a1, zero
802133a2: 97 d0 fe ff  	auipc	ra, 1048557
802133a6: e7 80 e0 cf  	jalr	-770(ra)
;             @intToPtr(*usize, pte).* = arch.PA_TO_PTE(physical_page) | permission | arch.PTE_VALID;
802133aa: 03 35 84 f7  	ld	a0, -136(s0)
802133ae: 23 34 a4 f0  	sd	a0, -248(s0)
802133b2: 81 45        	mv	a1, zero
802133b4: 63 05 b5 06  	beq	a0, a1, 0x8021341e <.LBB146_43>
802133b8: a5 a8        	j	0x80213430 <.LBB146_43+0x12>
;         virtual_page += arch.page_size;
802133ba: 83 35 84 f9  	ld	a1, -104(s0)
802133be: 05 65        	lui	a0, 1
802133c0: 2e 95        	add	a0, a0, a1
802133c2: 23 30 a4 f0  	sd	a0, -256(s0)
802133c6: 63 6b b5 0a  	bltu	a0, a1, 0x8021347c <.LBB146_45>
802133ca: d1 a0        	j	0x8021348e <.LBB146_45+0x12>
; fn map_pages(pagetable: pagetable_t, virtual_addr: usize, physical_addr: usize, page_count: usize, permission: usize, allow_remap: bool) void {
802133cc: 12 64        	ld	s0, 256(sp)
802133ce: b2 60        	ld	ra, 264(sp)
802133d0: 51 61        	addi	sp, sp, 272
802133d2: 82 80        	ret

00000000802133d4 <.LBB146_41>:
;             if ((@intToPtr(*usize, pte).* & arch.PTE_VALID != 0) and !allow_remap) {
802133d4: 17 a5 00 00  	auipc	a0, 10
802133d8: 13 05 45 12  	addi	a0, a0, 292
802133dc: 81 45        	mv	a1, zero
802133de: 97 d0 fe ff  	auipc	ra, 1048557
802133e2: e7 80 20 cc  	jalr	-830(ra)
802133e6: 03 35 84 f1  	ld	a0, -232(s0)
802133ea: 1d 89        	andi	a0, a0, 7
802133ec: 81 45        	mv	a1, zero
802133ee: 63 0c b5 00  	beq	a0, a1, 0x80213406 <.LBB146_42+0x12>
802133f2: 09 a0        	j	0x802133f4 <.LBB146_42>

00000000802133f4 <.LBB146_42>:
802133f4: 17 a5 00 00  	auipc	a0, 10
802133f8: 13 05 45 25  	addi	a0, a0, 596
802133fc: 81 45        	mv	a1, zero
802133fe: 97 d0 fe ff  	auipc	ra, 1048557
80213402: e7 80 20 ca  	jalr	-862(ra)
80213406: 03 35 84 f1  	ld	a0, -232(s0)
8021340a: 03 45 05 00  	lbu	a0, 0(a0)
8021340e: 05 89        	andi	a0, a0, 1
80213410: 81 45        	mv	a1, zero
80213412: 2a 86        	mv	a2, a0
80213414: 23 38 c4 f0  	sd	a2, -240(s0)
80213418: e3 18 b5 f4  	bne	a0, a1, 0x80213368 <.LBB146_38+0x70>
8021341c: a9 bf        	j	0x80213376 <.LBB146_38+0x7e>

000000008021341e <.LBB146_43>:
;             @intToPtr(*usize, pte).* = arch.PA_TO_PTE(physical_page) | permission | arch.PTE_VALID;
8021341e: 17 a5 00 00  	auipc	a0, 10
80213422: 13 05 a5 0d  	addi	a0, a0, 218
80213426: 81 45        	mv	a1, zero
80213428: 97 d0 fe ff  	auipc	ra, 1048557
8021342c: e7 80 80 c7  	jalr	-904(ra)
80213430: 03 35 84 f0  	ld	a0, -248(s0)
80213434: 1d 89        	andi	a0, a0, 7
80213436: 81 45        	mv	a1, zero
80213438: 63 0c b5 00  	beq	a0, a1, 0x80213450 <.LBB146_44+0x12>
8021343c: 09 a0        	j	0x8021343e <.LBB146_44>

000000008021343e <.LBB146_44>:
8021343e: 17 a5 00 00  	auipc	a0, 10
80213442: 13 05 a5 20  	addi	a0, a0, 522
80213446: 81 45        	mv	a1, zero
80213448: 97 d0 fe ff  	auipc	ra, 1048557
8021344c: e7 80 80 c5  	jalr	-936(ra)
80213450: 83 35 84 f0  	ld	a1, -248(s0)
80213454: 23 38 b4 f6  	sd	a1, -144(s0)
80213458: 03 35 04 f9  	ld	a0, -112(s0)
8021345c: 23 3c a4 fc  	sd	a0, -40(s0)
;     const pte = (pa >> 12) << 10;
80213460: 09 81        	srli	a0, a0, 2
80213462: 13 75 05 c0  	andi	a0, a0, -1024
80213466: 23 30 a4 fe  	sd	a0, -32(s0)
;     return pte;
8021346a: 23 34 a4 fe  	sd	a0, -24(s0)
;             @intToPtr(*usize, pte).* = arch.PA_TO_PTE(physical_page) | permission | arch.PTE_VALID;
8021346e: 03 36 84 f4  	ld	a2, -184(s0)
80213472: 51 8d        	or	a0, a0, a2
80213474: 13 65 15 00  	ori	a0, a0, 1
80213478: 88 e1        	sd	a0, 0(a1)
;         if (optional_pte) |pte| {
8021347a: 81 b7        	j	0x802133ba <.LBB146_40+0x22>

000000008021347c <.LBB146_45>:
;         virtual_page += arch.page_size;
8021347c: 17 a5 00 00  	auipc	a0, 10
80213480: 13 05 45 00  	addi	a0, a0, 4
80213484: 81 45        	mv	a1, zero
80213486: 97 d0 fe ff  	auipc	ra, 1048557
8021348a: e7 80 a0 c1  	jalr	-998(ra)
8021348e: 03 35 04 f0  	ld	a0, -256(s0)
80213492: 23 3c a4 f8  	sd	a0, -104(s0)
;         physical_page += arch.page_size;
80213496: 83 35 04 f9  	ld	a1, -112(s0)
8021349a: 05 65        	lui	a0, 1
8021349c: 2e 95        	add	a0, a0, a1
8021349e: 23 3c a4 ee  	sd	a0, -264(s0)
802134a2: 63 7c b5 00  	bgeu	a0, a1, 0x802134ba <.LBB146_46+0x12>
802134a6: 09 a0        	j	0x802134a8 <.LBB146_46>

00000000802134a8 <.LBB146_46>:
802134a8: 17 a5 00 00  	auipc	a0, 10
802134ac: 13 05 85 fd  	addi	a0, a0, -40
802134b0: 81 45        	mv	a1, zero
802134b2: 97 d0 fe ff  	auipc	ra, 1048557
802134b6: e7 80 e0 be  	jalr	-1042(ra)
802134ba: 03 35 84 ef  	ld	a0, -264(s0)
802134be: 23 38 a4 f8  	sd	a0, -112(s0)
;         page_i += 1;
802134c2: 83 35 04 fa  	ld	a1, -96(s0)
802134c6: 13 85 15 00  	addi	a0, a1, 1
802134ca: 23 38 a4 ee  	sd	a0, -272(s0)
802134ce: 63 7c b5 00  	bgeu	a0, a1, 0x802134e6 <.LBB146_47+0x12>
802134d2: 09 a0        	j	0x802134d4 <.LBB146_47>

00000000802134d4 <.LBB146_47>:
802134d4: 17 a5 00 00  	auipc	a0, 10
802134d8: 13 05 c5 fa  	addi	a0, a0, -84
802134dc: 81 45        	mv	a1, zero
802134de: 97 d0 fe ff  	auipc	ra, 1048557
802134e2: e7 80 20 bc  	jalr	-1086(ra)
802134e6: 03 35 04 ef  	ld	a0, -272(s0)
802134ea: 23 30 a4 fa  	sd	a0, -96(s0)
;     while (page_i < page_count) : ({
802134ee: 1d bd        	j	0x80213324 <.LBB146_38+0x2c>

00000000802134f0 <std.log.log.59>:
; fn log(
802134f0: 01 11        	addi	sp, sp, -32
802134f2: 06 ec        	sd	ra, 24(sp)
802134f4: 22 e8        	sd	s0, 16(sp)
802134f6: 00 10        	addi	s0, sp, 32
802134f8: 0d 45        	addi	a0, zero, 3
;         break :blk level;
802134fa: a3 07 a4 fe  	sb	a0, -17(s0)
802134fe: 09 a0        	j	0x80213500 <std.log.log.59+0x10>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80213500: 03 45 f4 fe  	lbu	a0, -17(s0)
80213504: 8d 45        	addi	a1, zero, 3
80213506: 63 18 b5 00  	bne	a0, a1, 0x80213516 <std.log.log.59+0x26>
8021350a: 09 a0        	j	0x8021350c <std.log.log.59+0x1c>
;             root.log(message_level, scope, format, args);
8021350c: 97 20 00 00  	auipc	ra, 2
80213510: e7 80 e0 2e  	jalr	750(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80213514: 11 a0        	j	0x80213518 <std.log.log.59+0x28>
80213516: 09 a0        	j	0x80213518 <std.log.log.59+0x28>
; ) void {
80213518: 42 64        	ld	s0, 16(sp)
8021351a: e2 60        	ld	ra, 24(sp)
8021351c: 05 61        	addi	sp, sp, 32
8021351e: 82 80        	ret

0000000080213520 <std.log.log.60>:
; fn log(
80213520: 79 71        	addi	sp, sp, -48
;     args: anytype,
80213522: 06 f4        	sd	ra, 40(sp)
80213524: 22 f0        	sd	s0, 32(sp)
80213526: 00 18        	addi	s0, sp, 48
80213528: 23 3c a4 fc  	sd	a0, -40(s0)
8021352c: 0d 45        	addi	a0, zero, 3
;         break :blk level;
8021352e: a3 07 a4 fe  	sb	a0, -17(s0)
80213532: 09 a0        	j	0x80213534 <std.log.log.60+0x14>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80213534: 03 45 f4 fe  	lbu	a0, -17(s0)
80213538: 8d 45        	addi	a1, zero, 3
8021353a: 63 1d b5 00  	bne	a0, a1, 0x80213554 <std.log.log.60+0x34>
8021353e: 09 a0        	j	0x80213540 <std.log.log.60+0x20>
;             root.log(message_level, scope, format, args);
80213540: 03 35 84 fd  	ld	a0, -40(s0)
80213544: 0c 61        	ld	a1, 0(a0)
80213546: 23 30 b4 fe  	sd	a1, -32(s0)
8021354a: 97 20 00 00  	auipc	ra, 2
8021354e: e7 80 e0 30  	jalr	782(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80213552: 11 a0        	j	0x80213556 <std.log.log.60+0x36>
80213554: 09 a0        	j	0x80213556 <std.log.log.60+0x36>
; ) void {
80213556: 02 74        	ld	s0, 32(sp)
80213558: a2 70        	ld	ra, 40(sp)
8021355a: 45 61        	addi	sp, sp, 48
8021355c: 82 80        	ret

000000008021355e <panic.panic.61>:
; pub fn panic(comptime format: []const u8, args: anytype) noreturn {
8021355e: 39 71        	addi	sp, sp, -64
80213560: 06 fc        	sd	ra, 56(sp)
80213562: 22 f8        	sd	s0, 48(sp)
80213564: 80 00        	addi	s0, sp, 64
80213566: 23 30 a4 fc  	sd	a0, -64(s0)
;     kernel.arch.disable_interrupts();
8021356a: 97 d0 fe ff  	auipc	ra, 1048557
8021356e: e7 80 a0 f5  	jalr	-166(ra)
80213572: 03 35 04 fc  	ld	a0, -64(s0)

0000000080213576 <.LBB149_2>:
;     kernel.arch.Writer.should_lock = true;
80213576: 17 16 66 00  	auipc	a2, 1633
8021357a: 13 06 a6 a8  	addi	a2, a2, -1398
8021357e: 85 45        	addi	a1, zero, 1
80213580: 23 00 b6 00  	sb	a1, 0(a2)
;     log.err(format, args);
80213584: 0c 61        	ld	a1, 0(a0)
80213586: 23 34 b4 fc  	sd	a1, -56(s0)
8021358a: 0c 65        	ld	a1, 8(a0)
8021358c: 23 38 b4 fc  	sd	a1, -48(s0)
80213590: 0c 69        	ld	a1, 16(a0)
80213592: 23 3c b4 fc  	sd	a1, -40(s0)
80213596: 0c 6d        	ld	a1, 24(a0)
80213598: 23 30 b4 fe  	sd	a1, -32(s0)
8021359c: 0c 71        	ld	a1, 32(a0)
8021359e: 23 34 b4 fe  	sd	a1, -24(s0)
802135a2: 97 20 00 00  	auipc	ra, 2
802135a6: e7 80 c0 31  	jalr	796(ra)
;     while (true) {}
802135aa: 09 a0        	j	0x802135ac <.LBB149_2+0x36>
802135ac: 01 a0        	j	0x802135ac <.LBB149_2+0x36>

00000000802135ae <arch.riscv64.virtual.AddressSpace.physical_to_virtual>:
;     pub fn physical_to_virtual(physical: u64) u64 {
802135ae: 01 11        	addi	sp, sp, -32
802135b0: 06 ec        	sd	ra, 24(sp)
802135b2: 22 e8        	sd	s0, 16(sp)
802135b4: 00 10        	addi	s0, sp, 32
802135b6: 23 30 a4 fe  	sd	a0, -32(s0)
;         return physical;
802135ba: 23 34 a4 fe  	sd	a0, -24(s0)
802135be: 42 64        	ld	s0, 16(sp)
802135c0: e2 60        	ld	ra, 24(sp)
802135c2: 05 61        	addi	sp, sp, 32
802135c4: 82 80        	ret

00000000802135c6 <arch.riscv64.virtio_common.Queue.pop_used>:
;     pub fn pop_used(self: *volatile @This()) ?*volatile Descriptor {
802135c6: 1d 71        	addi	sp, sp, -96
802135c8: 86 ec        	sd	ra, 88(sp)
802135ca: a2 e8        	sd	s0, 80(sp)
802135cc: 80 10        	addi	s0, sp, 96
802135ce: 23 38 a4 fc  	sd	a0, -48(s0)
;         if (self.last_seen_used == self.used.index) return null;
802135d2: 48 41        	lw	a0, 4(a0)
802135d4: 83 35 04 fd  	ld	a1, -48(s0)
802135d8: 8c 6d        	ld	a1, 24(a1)
802135da: 83 d5 25 00  	lhu	a1, 2(a1)
802135de: 63 1a b5 00  	bne	a0, a1, 0x802135f2 <arch.riscv64.virtio_common.Queue.pop_used+0x2c>
802135e2: 09 a0        	j	0x802135e4 <arch.riscv64.virtio_common.Queue.pop_used+0x1e>
802135e4: 01 45        	mv	a0, zero
;         if (self.last_seen_used == self.used.index) return null;
802135e6: 23 34 a4 fe  	sd	a0, -24(s0)
802135ea: 46 64        	ld	s0, 80(sp)
802135ec: e6 60        	ld	ra, 88(sp)
802135ee: 25 61        	addi	sp, sp, 96
802135f0: 82 80        	ret
802135f2: 09 a0        	j	0x802135f4 <arch.riscv64.virtio_common.Queue.pop_used+0x2e>
;         const id = self.used.ring[self.last_seen_used % ring_size].id;
802135f4: 03 35 04 fd  	ld	a0, -48(s0)
802135f8: 08 6d        	ld	a0, 24(a0)
802135fa: 11 05        	addi	a0, a0, 4
802135fc: 23 30 a4 fc  	sd	a0, -64(s0)
80213600: 03 35 04 fd  	ld	a0, -48(s0)
80213604: 03 65 45 00  	lwu	a0, 4(a0)
80213608: 23 34 a4 fc  	sd	a0, -56(s0)
8021360c: 01 45        	mv	a0, zero
8021360e: 63 1e a5 00  	bne	a0, a0, 0x8021362a <.LBB151_10>
80213612: 09 a0        	j	0x80213614 <arch.riscv64.virtio_common.Queue.pop_used+0x4e>
80213614: 03 35 84 fc  	ld	a0, -56(s0)
80213618: 13 75 f5 07  	andi	a0, a0, 127
8021361c: 23 3c a4 fa  	sd	a0, -72(s0)
80213620: 93 05 00 08  	addi	a1, zero, 128
80213624: 63 65 b5 02  	bltu	a0, a1, 0x8021364e <.LBB151_11+0x12>
80213628: 11 a8        	j	0x8021363c <.LBB151_11>

000000008021362a <.LBB151_10>:
8021362a: 17 a5 00 00  	auipc	a0, 10
8021362e: 13 05 65 cb  	addi	a0, a0, -842
80213632: 81 45        	mv	a1, zero
80213634: 97 d0 fe ff  	auipc	ra, 1048557
80213638: e7 80 c0 a6  	jalr	-1428(ra)

000000008021363c <.LBB151_11>:
8021363c: 17 a5 00 00  	auipc	a0, 10
80213640: 13 05 45 cc  	addi	a0, a0, -828
80213644: 81 45        	mv	a1, zero
80213646: 97 d0 fe ff  	auipc	ra, 1048557
8021364a: e7 80 a0 a5  	jalr	-1446(ra)
8021364e: 03 35 04 fc  	ld	a0, -64(s0)
80213652: 83 35 84 fb  	ld	a1, -72(s0)
80213656: 8e 05        	slli	a1, a1, 3
80213658: 2e 95        	add	a0, a0, a1
8021365a: 08 41        	lw	a0, 0(a0)
8021365c: 23 22 a4 fe  	sw	a0, -28(s0)
;         self.last_seen_used += 1;
80213660: 03 35 04 fd  	ld	a0, -48(s0)
80213664: 93 05 45 00  	addi	a1, a0, 4
80213668: 23 34 b4 fa  	sd	a1, -88(s0)
8021366c: 4c 41        	lw	a1, 4(a0)
8021366e: 1b 85 15 00  	addiw	a0, a1, 1
80213672: 23 38 a4 fa  	sd	a0, -80(s0)
80213676: 63 7c b5 00  	bgeu	a0, a1, 0x8021368e <.LBB151_12+0x12>
8021367a: 09 a0        	j	0x8021367c <.LBB151_12>

000000008021367c <.LBB151_12>:
8021367c: 17 a5 00 00  	auipc	a0, 10
80213680: 13 05 45 e0  	addi	a0, a0, -508
80213684: 81 45        	mv	a1, zero
80213686: 97 d0 fe ff  	auipc	ra, 1048557
8021368a: e7 80 a0 a1  	jalr	-1510(ra)
8021368e: 03 35 04 fb  	ld	a0, -80(s0)
80213692: 83 35 84 fa  	ld	a1, -88(s0)
80213696: 88 c1        	sw	a0, 0(a1)
;         const used = &self.descriptors[id];
80213698: 03 35 04 fd  	ld	a0, -48(s0)
8021369c: 83 65 44 fe  	lwu	a1, -28(s0)
802136a0: 08 65        	ld	a0, 8(a0)
802136a2: 92 05        	slli	a1, a1, 4
802136a4: 2e 95        	add	a0, a0, a1
802136a6: 23 3c a4 fc  	sd	a0, -40(s0)
;         return used;
802136aa: 23 34 a4 fe  	sd	a0, -24(s0)
802136ae: 46 64        	ld	s0, 80(sp)
802136b0: e6 60        	ld	ra, 88(sp)
802136b2: 25 61        	addi	sp, sp, 96
802136b4: 82 80        	ret

00000000802136b6 <arch.riscv64.virtio_common.Queue.get_descriptor>:
;     pub fn get_descriptor(self: *volatile @This(), descriptor_id: u16) ?*volatile Descriptor {
802136b6: 79 71        	addi	sp, sp, -48
802136b8: 06 f4        	sd	ra, 40(sp)
802136ba: 22 f0        	sd	s0, 32(sp)
802136bc: 00 18        	addi	s0, sp, 48
802136be: 23 38 b4 fc  	sd	a1, -48(s0)
802136c2: 2a 86        	mv	a2, a0
802136c4: 03 35 04 fd  	ld	a0, -48(s0)
802136c8: c1 65        	lui	a1, 16
802136ca: fd 35        	addiw	a1, a1, -1
802136cc: e9 8d        	and	a1, a1, a0
802136ce: 23 30 c4 fe  	sd	a2, -32(s0)
802136d2: 23 1f a4 fc  	sh	a0, -34(s0)
802136d6: 13 05 f0 07  	addi	a0, zero, 127
;         if (descriptor_id < ring_size) return &self.descriptors[descriptor_id] else return null;
802136da: 63 60 b5 02  	bltu	a0, a1, 0x802136fa <arch.riscv64.virtio_common.Queue.get_descriptor+0x44>
802136de: 09 a0        	j	0x802136e0 <arch.riscv64.virtio_common.Queue.get_descriptor+0x2a>
802136e0: 03 35 04 fe  	ld	a0, -32(s0)
802136e4: 83 55 e4 fd  	lhu	a1, -34(s0)
802136e8: 08 65        	ld	a0, 8(a0)
802136ea: 92 05        	slli	a1, a1, 4
802136ec: 2e 95        	add	a0, a0, a1
802136ee: 23 34 a4 fe  	sd	a0, -24(s0)
802136f2: 02 74        	ld	s0, 32(sp)
802136f4: a2 70        	ld	ra, 40(sp)
802136f6: 45 61        	addi	sp, sp, 48
802136f8: 82 80        	ret
802136fa: 01 45        	mv	a0, zero
;         if (descriptor_id < ring_size) return &self.descriptors[descriptor_id] else return null;
802136fc: 23 34 a4 fe  	sd	a0, -24(s0)
80213700: 02 74        	ld	s0, 32(sp)
80213702: a2 70        	ld	ra, 40(sp)
80213704: 45 61        	addi	sp, sp, 48
80213706: 82 80        	ret

0000000080213708 <std.log.log.62>:
; fn log(
80213708: 01 11        	addi	sp, sp, -32
8021370a: 06 ec        	sd	ra, 24(sp)
8021370c: 22 e8        	sd	s0, 16(sp)
8021370e: 00 10        	addi	s0, sp, 32
80213710: 0d 45        	addi	a0, zero, 3
;         break :blk level;
80213712: a3 07 a4 fe  	sb	a0, -17(s0)
80213716: 09 a0        	j	0x80213718 <std.log.log.62+0x10>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80213718: 03 45 f4 fe  	lbu	a0, -17(s0)
8021371c: 8d 45        	addi	a1, zero, 3
8021371e: 63 18 b5 00  	bne	a0, a1, 0x8021372e <std.log.log.62+0x26>
80213722: 09 a0        	j	0x80213724 <std.log.log.62+0x1c>
;             root.log(message_level, scope, format, args);
80213724: 97 20 00 00  	auipc	ra, 2
80213728: e7 80 00 1d  	jalr	464(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
8021372c: 11 a0        	j	0x80213730 <std.log.log.62+0x28>
8021372e: 09 a0        	j	0x80213730 <std.log.log.62+0x28>
; ) void {
80213730: 42 64        	ld	s0, 16(sp)
80213732: e2 60        	ld	ra, 24(sp)
80213734: 05 61        	addi	sp, sp, 32
80213736: 82 80        	ret

0000000080213738 <arch.riscv64.virtio_common.gpu.handle_ex>:
;     fn handle_ex(header: *volatile ControlHeader, request_descriptor: *volatile Descriptor, comptime initializing: bool) void {
80213738: 19 71        	addi	sp, sp, -128
8021373a: 86 fc        	sd	ra, 120(sp)
8021373c: a2 f8        	sd	s0, 112(sp)
8021373e: 00 01        	addi	s0, sp, 128
80213740: 23 30 a4 fa  	sd	a0, -96(s0)
80213744: 23 3c b4 f8  	sd	a1, -104(s0)
;         const control_header = @intToPtr(*ControlHeader, kernel.arch.Virtual.AddressSpace.physical_to_virtual(request_descriptor.address));
80213748: 88 61        	ld	a0, 0(a1)
8021374a: 97 00 00 00  	auipc	ra, 0
8021374e: e7 80 40 e6  	jalr	-412(ra)
80213752: aa 85        	mv	a1, a0
80213754: 23 38 b4 f8  	sd	a1, -112(s0)
80213758: 81 45        	mv	a1, zero
8021375a: 63 02 b5 10  	beq	a0, a1, 0x8021385e <.LBB154_24>
8021375e: 09 aa        	j	0x80213870 <.LBB154_24+0x12>
;             else => kernel.panic("Header not implemented: {s}", .{@tagName(header.type)}),
80213760: 03 35 04 fa  	ld	a0, -96(s0)
80213764: 08 41        	lw	a0, 0(a0)
80213766: 97 20 00 00  	auipc	ra, 2
8021376a: e7 80 c0 1e  	jalr	492(ra)
8021376e: 0c 61        	ld	a1, 0(a0)
80213770: 23 3c b4 fc  	sd	a1, -40(s0)
80213774: 08 65        	ld	a0, 8(a0)
80213776: 23 30 a4 fe  	sd	a0, -32(s0)
8021377a: 13 05 84 fd  	addi	a0, s0, -40
8021377e: 97 20 00 00  	auipc	ra, 2
80213782: e7 80 80 50  	jalr	1288(ra)
;                 if (control_header.type != ControlType.resp_ok_nodata) {
80213786: 03 35 84 fe  	ld	a0, -24(s0)
8021378a: 08 41        	lw	a0, 0(a0)
8021378c: 85 65        	lui	a1, 1
8021378e: 9b 85 05 10  	addiw	a1, a1, 256
80213792: 63 03 b5 04  	beq	a0, a1, 0x802137d8 <arch.riscv64.virtio_common.gpu.handle_ex+0xa0>
80213796: 09 a0        	j	0x80213798 <arch.riscv64.virtio_common.gpu.handle_ex+0x60>
;                     kernel.panic("Unable to process {s} request successfully: {s}", .{ @tagName(header.type), @tagName(control_header.type) });
80213798: 03 35 04 fa  	ld	a0, -96(s0)
8021379c: 08 41        	lw	a0, 0(a0)
8021379e: 97 20 00 00  	auipc	ra, 2
802137a2: e7 80 40 1b  	jalr	436(ra)
802137a6: 0c 61        	ld	a1, 0(a0)
802137a8: 23 3c b4 fa  	sd	a1, -72(s0)
802137ac: 08 65        	ld	a0, 8(a0)
802137ae: 23 30 a4 fc  	sd	a0, -64(s0)
802137b2: 03 35 84 fe  	ld	a0, -24(s0)
802137b6: 08 41        	lw	a0, 0(a0)
802137b8: 97 20 00 00  	auipc	ra, 2
802137bc: e7 80 a0 19  	jalr	410(ra)
802137c0: 0c 61        	ld	a1, 0(a0)
802137c2: 23 34 b4 fc  	sd	a1, -56(s0)
802137c6: 08 65        	ld	a0, 8(a0)
802137c8: 23 38 a4 fc  	sd	a0, -48(s0)
802137cc: 13 05 84 fb  	addi	a0, s0, -72
802137d0: 97 20 00 00  	auipc	ra, 2
802137d4: e7 80 40 4f  	jalr	1268(ra)
;                 if (control_header.type != ControlType.resp_ok_nodata) {
802137d8: 09 a8        	j	0x802137ea <arch.riscv64.virtio_common.gpu.handle_ex+0xb2>
;                 display_info = @ptrCast(*ResponseDisplayInfo, control_header).*;
802137da: 03 35 84 fe  	ld	a0, -24(s0)
802137de: 23 34 a4 f8  	sd	a0, -120(s0)
802137e2: 81 45        	mv	a1, zero
802137e4: 63 1e b5 0e  	bne	a0, a1, 0x802138e0 <.LBB154_26+0x12>
802137e8: dd a0        	j	0x802138ce <.LBB154_26>
;                 log.debug("Processed {s} successfully", .{@tagName(header.type)});
802137ea: 03 35 04 fa  	ld	a0, -96(s0)
802137ee: 08 41        	lw	a0, 0(a0)
802137f0: 97 20 00 00  	auipc	ra, 2
802137f4: e7 80 20 16  	jalr	354(ra)
802137f8: 0c 61        	ld	a1, 0(a0)
802137fa: 23 34 b4 fa  	sd	a1, -88(s0)
802137fe: 08 65        	ld	a0, 8(a0)
80213800: 23 38 a4 fa  	sd	a0, -80(s0)
80213804: 13 05 84 fa  	addi	a0, s0, -88
80213808: 97 20 00 00  	auipc	ra, 2
8021380c: e7 80 60 50  	jalr	1286(ra)
;         switch (header.type) {
80213810: 09 a0        	j	0x80213812 <arch.riscv64.virtio_common.gpu.handle_ex+0xda>
;         if (header.type == ControlType.cmd_transfer_to_host_2d) transfered = true;
80213812: 03 35 04 fa  	ld	a0, -96(s0)
80213816: 08 41        	lw	a0, 0(a0)
80213818: 93 05 50 10  	addi	a1, zero, 261
8021381c: 63 1b b5 00  	bne	a0, a1, 0x80213832 <.LBB154_22+0x10>
80213820: 09 a0        	j	0x80213822 <.LBB154_22>

0000000080213822 <.LBB154_22>:
80213822: 97 15 66 00  	auipc	a1, 1633
80213826: 93 85 65 85  	addi	a1, a1, -1962
8021382a: 05 45        	addi	a0, zero, 1
8021382c: 23 80 a5 00  	sb	a0, 0(a1)
80213830: 11 a0        	j	0x80213834 <.LBB154_22+0x12>
80213832: 09 a0        	j	0x80213834 <.LBB154_22+0x12>
;         if (header.type == ControlType.cmd_resource_flush) flushed = true;
80213834: 03 35 04 fa  	ld	a0, -96(s0)
80213838: 08 41        	lw	a0, 0(a0)
8021383a: 93 05 40 10  	addi	a1, zero, 260
8021383e: 63 1b b5 00  	bne	a0, a1, 0x80213854 <.LBB154_23+0x10>
80213842: 09 a0        	j	0x80213844 <.LBB154_23>

0000000080213844 <.LBB154_23>:
80213844: 97 15 66 00  	auipc	a1, 1633
80213848: 93 85 55 83  	addi	a1, a1, -1995
8021384c: 05 45        	addi	a0, zero, 1
8021384e: 23 80 a5 00  	sb	a0, 0(a1)
80213852: 11 a0        	j	0x80213856 <.LBB154_23+0x12>
80213854: 09 a0        	j	0x80213856 <.LBB154_23+0x12>
;     fn handle_ex(header: *volatile ControlHeader, request_descriptor: *volatile Descriptor, comptime initializing: bool) void {
80213856: 46 74        	ld	s0, 112(sp)
80213858: e6 70        	ld	ra, 120(sp)
8021385a: 09 61        	addi	sp, sp, 128
8021385c: 82 80        	ret

000000008021385e <.LBB154_24>:
;         const control_header = @intToPtr(*ControlHeader, kernel.arch.Virtual.AddressSpace.physical_to_virtual(request_descriptor.address));
8021385e: 17 a5 00 00  	auipc	a0, 10
80213862: 13 05 a5 c9  	addi	a0, a0, -870
80213866: 81 45        	mv	a1, zero
80213868: 97 d0 fe ff  	auipc	ra, 1048557
8021386c: e7 80 80 83  	jalr	-1992(ra)
80213870: 03 35 04 f9  	ld	a0, -112(s0)
80213874: 1d 89        	andi	a0, a0, 7
80213876: 81 45        	mv	a1, zero
80213878: 63 0c b5 00  	beq	a0, a1, 0x80213890 <.LBB154_25+0x12>
8021387c: 09 a0        	j	0x8021387e <.LBB154_25>

000000008021387e <.LBB154_25>:
8021387e: 17 a5 00 00  	auipc	a0, 10
80213882: 13 05 a5 dc  	addi	a0, a0, -566
80213886: 81 45        	mv	a1, zero
80213888: 97 d0 fe ff  	auipc	ra, 1048557
8021388c: e7 80 80 81  	jalr	-2024(ra)
80213890: 03 35 04 f9  	ld	a0, -112(s0)
80213894: 23 34 a4 fe  	sd	a0, -24(s0)
;         switch (header.type) {
80213898: 03 35 04 fa  	ld	a0, -96(s0)
8021389c: 03 65 05 00  	lwu	a0, 0(a0)
802138a0: 23 30 a4 f8  	sd	a0, -128(s0)
802138a4: 93 05 00 10  	addi	a1, zero, 256
802138a8: e3 09 b5 f2  	beq	a0, a1, 0x802137da <arch.riscv64.virtio_common.gpu.handle_ex+0xa2>
802138ac: 09 a0        	j	0x802138ae <.LBB154_25+0x30>
802138ae: 03 35 04 f8  	ld	a0, -128(s0)
802138b2: 01 25        	sext.w	a0, a0
802138b4: 93 05 10 10  	addi	a1, zero, 257
;         switch (header.type) {
802138b8: e3 07 b5 ec  	beq	a0, a1, 0x80213786 <arch.riscv64.virtio_common.gpu.handle_ex+0x4e>
802138bc: 09 a0        	j	0x802138be <.LBB154_25+0x40>
802138be: 03 35 04 f8  	ld	a0, -128(s0)
802138c2: 1b 05 d5 ef  	addiw	a0, a0, -259
802138c6: 91 45        	addi	a1, zero, 4
802138c8: e3 6f b5 ea  	bltu	a0, a1, 0x80213786 <arch.riscv64.virtio_common.gpu.handle_ex+0x4e>
802138cc: 51 bd        	j	0x80213760 <arch.riscv64.virtio_common.gpu.handle_ex+0x28>

00000000802138ce <.LBB154_26>:
;                 display_info = @ptrCast(*ResponseDisplayInfo, control_header).*;
802138ce: 17 a5 00 00  	auipc	a0, 10
802138d2: 13 05 a5 c2  	addi	a0, a0, -982
802138d6: 81 45        	mv	a1, zero
802138d8: 97 c0 fe ff  	auipc	ra, 1048556
802138dc: e7 80 80 7c  	jalr	1992(ra)
802138e0: 83 35 84 f8  	ld	a1, -120(s0)

00000000802138e4 <.LBB154_27>:
802138e4: 17 45 05 00  	auipc	a0, 84
802138e8: 13 05 c5 d4  	addi	a0, a0, -692
802138ec: 13 06 80 19  	addi	a2, zero, 408
802138f0: 97 90 00 00  	auipc	ra, 9
802138f4: e7 80 e0 43  	jalr	1086(ra)

00000000802138f8 <.LBB154_28>:
;                     if (initializing) received_display_info = true;
802138f8: 97 05 66 00  	auipc	a1, 1632
802138fc: 93 85 05 77  	addi	a1, a1, 1904
80213900: 05 45        	addi	a0, zero, 1
80213902: 23 80 a5 00  	sb	a0, 0(a1)
;         switch (header.type) {
80213906: 31 b7        	j	0x80213812 <arch.riscv64.virtio_common.gpu.handle_ex+0xda>

0000000080213908 <std.mem.copy.63>:
; pub fn copy(comptime T: type, dest: []T, source: []const T) void {
80213908: 39 71        	addi	sp, sp, -64
8021390a: 06 fc        	sd	ra, 56(sp)
8021390c: 22 f8        	sd	s0, 48(sp)
8021390e: 80 00        	addi	s0, sp, 64
80213910: 23 38 b4 fc  	sd	a1, -48(s0)
80213914: 23 34 a4 fc  	sd	a0, -56(s0)
;     assert(dest.len >= source.len);
80213918: 08 65        	ld	a0, 8(a0)
8021391a: 8c 65        	ld	a1, 8(a1)
8021391c: 33 35 b5 00  	sltu	a0, a0, a1
80213920: 13 45 15 00  	xori	a0, a0, 1
80213924: 97 d0 fe ff  	auipc	ra, 1048557
80213928: e7 80 60 83  	jalr	-1994(ra)
8021392c: 83 35 04 fd  	ld	a1, -48(s0)
80213930: 01 45        	mv	a0, zero
;     for (source) |s, i|
80213932: 23 34 a4 fe  	sd	a0, -24(s0)
80213936: 88 65        	ld	a0, 8(a1)
80213938: 23 3c a4 fc  	sd	a0, -40(s0)
8021393c: 09 a0        	j	0x8021393e <std.mem.copy.63+0x36>
8021393e: 83 35 84 fd  	ld	a1, -40(s0)
80213942: 03 35 84 fe  	ld	a0, -24(s0)
80213946: 23 30 a4 fc  	sd	a0, -64(s0)
8021394a: 63 79 b5 02  	bgeu	a0, a1, 0x8021397c <std.mem.copy.63+0x74>
8021394e: 09 a0        	j	0x80213950 <std.mem.copy.63+0x48>
80213950: 03 35 04 fc  	ld	a0, -64(s0)
80213954: 03 36 84 fc  	ld	a2, -56(s0)
80213958: 83 35 04 fd  	ld	a1, -48(s0)
8021395c: 8c 61        	ld	a1, 0(a1)
8021395e: aa 95        	add	a1, a1, a0
80213960: 83 85 05 00  	lb	a1, 0(a1)
80213964: a3 03 b4 fe  	sb	a1, -25(s0)
;         dest[i] = s;
80213968: 83 36 84 fe  	ld	a3, -24(s0)
8021396c: 10 62        	ld	a2, 0(a2)
8021396e: 36 96        	add	a2, a2, a3
80213970: 23 00 b6 00  	sb	a1, 0(a2)
;     for (source) |s, i|
80213974: 05 05        	addi	a0, a0, 1
80213976: 23 34 a4 fe  	sd	a0, -24(s0)
8021397a: d1 b7        	j	0x8021393e <std.mem.copy.63+0x36>
; pub fn copy(comptime T: type, dest: []T, source: []const T) void {
8021397c: 42 74        	ld	s0, 48(sp)
8021397e: e2 70        	ld	ra, 56(sp)
80213980: 21 61        	addi	sp, sp, 64
80213982: 82 80        	ret

0000000080213984 <arch.riscv64.virtio_common.Queue.push_descriptor>:
;     fn push_descriptor(self: *volatile @This(), p_descriptor_index: *u16) *volatile Descriptor {
80213984: 1d 71        	addi	sp, sp, -96
80213986: 86 ec        	sd	ra, 88(sp)
80213988: a2 e8        	sd	s0, 80(sp)
8021398a: 80 10        	addi	s0, sp, 96
8021398c: 23 3c a4 fc  	sd	a0, -40(s0)
80213990: 23 38 b4 fc  	sd	a1, -48(s0)
;         p_descriptor_index.* = @intCast(u16, self.num);
80213994: 23 30 b4 fc  	sd	a1, -64(s0)
80213998: 08 41        	lw	a0, 0(a0)
8021399a: 23 34 a4 fc  	sd	a0, -56(s0)
8021399e: c1 65        	lui	a1, 16
802139a0: fd 35        	addiw	a1, a1, -1
802139a2: e9 8d        	and	a1, a1, a0
802139a4: 63 0f b5 02  	beq	a0, a1, 0x802139e2 <arch.riscv64.virtio_common.Queue.push_descriptor+0x5e>
802139a8: 85 a8        	j	0x80213a18 <.LBB156_10>
;         while (self.num >= ring_size) : (self.num -= ring_size) {}
802139aa: 03 35 84 fd  	ld	a0, -40(s0)
802139ae: 08 41        	lw	a0, 0(a0)
802139b0: 93 05 00 08  	addi	a1, zero, 128
802139b4: 63 6f b5 00  	bltu	a0, a1, 0x802139d2 <arch.riscv64.virtio_common.Queue.push_descriptor+0x4e>
802139b8: 09 a0        	j	0x802139ba <arch.riscv64.virtio_common.Queue.push_descriptor+0x36>
802139ba: 03 35 84 fd  	ld	a0, -40(s0)
802139be: 23 38 a4 fa  	sd	a0, -80(s0)
802139c2: 08 41        	lw	a0, 0(a0)
802139c4: 9b 05 05 f8  	addiw	a1, a0, -128
802139c8: 23 3c b4 fa  	sd	a1, -72(s0)
802139cc: 63 6e b5 06  	bltu	a0, a1, 0x80213a48 <.LBB156_12>
802139d0: 69 a0        	j	0x80213a5a <.LBB156_12+0x12>
;         return descriptor;
802139d2: 03 35 04 fe  	ld	a0, -32(s0)
802139d6: 23 34 a4 fe  	sd	a0, -24(s0)
802139da: 46 64        	ld	s0, 80(sp)
802139dc: e6 60        	ld	ra, 88(sp)
802139de: 25 61        	addi	sp, sp, 96
802139e0: 82 80        	ret
;         p_descriptor_index.* = @intCast(u16, self.num);
802139e2: 03 35 84 fc  	ld	a0, -56(s0)
802139e6: 83 35 04 fc  	ld	a1, -64(s0)
802139ea: 23 90 a5 00  	sh	a0, 0(a1)
;         const descriptor = &self.descriptors[self.num];
802139ee: 03 35 84 fd  	ld	a0, -40(s0)
802139f2: 83 65 05 00  	lwu	a1, 0(a0)
802139f6: 08 65        	ld	a0, 8(a0)
802139f8: 92 05        	slli	a1, a1, 4
802139fa: 2e 95        	add	a0, a0, a1
802139fc: 23 30 a4 fe  	sd	a0, -32(s0)
;         self.num += 1;
80213a00: 03 35 84 fd  	ld	a0, -40(s0)
80213a04: 23 30 a4 fa  	sd	a0, -96(s0)
80213a08: 0c 41        	lw	a1, 0(a0)
80213a0a: 1b 85 15 00  	addiw	a0, a1, 1
80213a0e: 23 34 a4 fa  	sd	a0, -88(s0)
80213a12: 63 6c b5 00  	bltu	a0, a1, 0x80213a2a <.LBB156_11>
80213a16: 1d a0        	j	0x80213a3c <.LBB156_11+0x12>

0000000080213a18 <.LBB156_10>:
;         p_descriptor_index.* = @intCast(u16, self.num);
80213a18: 17 a5 00 00  	auipc	a0, 10
80213a1c: 13 05 85 8d  	addi	a0, a0, -1832
80213a20: 81 45        	mv	a1, zero
80213a22: 97 c0 fe ff  	auipc	ra, 1048556
80213a26: e7 80 e0 67  	jalr	1662(ra)

0000000080213a2a <.LBB156_11>:
;         self.num += 1;
80213a2a: 17 a5 00 00  	auipc	a0, 10
80213a2e: 13 05 65 a5  	addi	a0, a0, -1450
80213a32: 81 45        	mv	a1, zero
80213a34: 97 c0 fe ff  	auipc	ra, 1048556
80213a38: e7 80 c0 66  	jalr	1644(ra)
80213a3c: 03 35 84 fa  	ld	a0, -88(s0)
80213a40: 83 35 04 fa  	ld	a1, -96(s0)
80213a44: 88 c1        	sw	a0, 0(a1)
;         while (self.num >= ring_size) : (self.num -= ring_size) {}
80213a46: 95 b7        	j	0x802139aa <arch.riscv64.virtio_common.Queue.push_descriptor+0x26>

0000000080213a48 <.LBB156_12>:
80213a48: 17 a5 00 00  	auipc	a0, 10
80213a4c: 13 05 85 a3  	addi	a0, a0, -1480
80213a50: 81 45        	mv	a1, zero
80213a52: 97 c0 fe ff  	auipc	ra, 1048556
80213a56: e7 80 e0 64  	jalr	1614(ra)
80213a5a: 03 35 84 fb  	ld	a0, -72(s0)
80213a5e: 83 35 04 fb  	ld	a1, -80(s0)
80213a62: 88 c1        	sw	a0, 0(a1)
80213a64: 99 b7        	j	0x802139aa <arch.riscv64.virtio_common.Queue.push_descriptor+0x26>

0000000080213a66 <arch.riscv64.virtio_common.Queue.push_available>:
;     fn push_available(self: *volatile @This(), descriptor: u16) void {
80213a66: 5d 71        	addi	sp, sp, -80
80213a68: 86 e4        	sd	ra, 72(sp)
80213a6a: a2 e0        	sd	s0, 64(sp)
80213a6c: 80 08        	addi	s0, sp, 80
80213a6e: 23 34 a4 fe  	sd	a0, -24(s0)
80213a72: 23 13 b4 fe  	sh	a1, -26(s0)
;         self.available.ring[self.available.index % ring_size] = descriptor;
80213a76: 08 69        	ld	a0, 16(a0)
80213a78: 11 05        	addi	a0, a0, 4
80213a7a: 23 38 a4 fc  	sd	a0, -48(s0)
80213a7e: 03 35 84 fe  	ld	a0, -24(s0)
80213a82: 08 69        	ld	a0, 16(a0)
80213a84: 03 55 25 00  	lhu	a0, 2(a0)
80213a88: 23 3c a4 fc  	sd	a0, -40(s0)
80213a8c: 01 45        	mv	a0, zero
80213a8e: 63 1e a5 00  	bne	a0, a0, 0x80213aaa <.LBB157_7>
80213a92: 09 a0        	j	0x80213a94 <arch.riscv64.virtio_common.Queue.push_available+0x2e>
80213a94: 03 35 84 fd  	ld	a0, -40(s0)
80213a98: 13 75 f5 07  	andi	a0, a0, 127
80213a9c: 23 34 a4 fc  	sd	a0, -56(s0)
80213aa0: 93 05 00 08  	addi	a1, zero, 128
80213aa4: 63 65 b5 02  	bltu	a0, a1, 0x80213ace <.LBB157_8+0x12>
80213aa8: 11 a8        	j	0x80213abc <.LBB157_8>

0000000080213aaa <.LBB157_7>:
80213aaa: 17 a5 00 00  	auipc	a0, 10
80213aae: 13 05 65 83  	addi	a0, a0, -1994
80213ab2: 81 45        	mv	a1, zero
80213ab4: 97 c0 fe ff  	auipc	ra, 1048556
80213ab8: e7 80 c0 5e  	jalr	1516(ra)

0000000080213abc <.LBB157_8>:
80213abc: 17 a5 00 00  	auipc	a0, 10
80213ac0: 13 05 45 84  	addi	a0, a0, -1980
80213ac4: 81 45        	mv	a1, zero
80213ac6: 97 c0 fe ff  	auipc	ra, 1048556
80213aca: e7 80 a0 5d  	jalr	1498(ra)
80213ace: 03 35 04 fd  	ld	a0, -48(s0)
80213ad2: 83 35 84 fc  	ld	a1, -56(s0)
80213ad6: 86 05        	slli	a1, a1, 1
80213ad8: aa 95        	add	a1, a1, a0
80213ada: 03 15 64 fe  	lh	a0, -26(s0)
80213ade: 23 90 a5 00  	sh	a0, 0(a1)
;         self.available.index += 1;
80213ae2: 03 35 84 fe  	ld	a0, -24(s0)
80213ae6: 08 69        	ld	a0, 16(a0)
80213ae8: 93 05 25 00  	addi	a1, a0, 2
80213aec: 23 3c b4 fa  	sd	a1, -72(s0)
80213af0: 03 55 25 00  	lhu	a0, 2(a0)
80213af4: 93 05 15 00  	addi	a1, a0, 1
80213af8: 23 30 b4 fc  	sd	a1, -64(s0)
80213afc: 41 65        	lui	a0, 16
80213afe: 7d 35        	addiw	a0, a0, -1
80213b00: 6d 8d        	and	a0, a0, a1
80213b02: 63 0c b5 00  	beq	a0, a1, 0x80213b1a <.LBB157_9+0x12>
80213b06: 09 a0        	j	0x80213b08 <.LBB157_9>

0000000080213b08 <.LBB157_9>:
80213b08: 17 a5 00 00  	auipc	a0, 10
80213b0c: 13 05 85 97  	addi	a0, a0, -1672
80213b10: 81 45        	mv	a1, zero
80213b12: 97 c0 fe ff  	auipc	ra, 1048556
80213b16: e7 80 e0 58  	jalr	1422(ra)
80213b1a: 03 35 04 fc  	ld	a0, -64(s0)
80213b1e: 83 35 84 fb  	ld	a1, -72(s0)
80213b22: 23 90 a5 00  	sh	a0, 0(a1)
;     fn push_available(self: *volatile @This(), descriptor: u16) void {
80213b26: 06 64        	ld	s0, 64(sp)
80213b28: a6 60        	ld	ra, 72(sp)
80213b2a: 61 61        	addi	sp, sp, 80
80213b2c: 82 80        	ret

0000000080213b2e <std.log.log.64>:
; fn log(
80213b2e: 01 11        	addi	sp, sp, -32
80213b30: 06 ec        	sd	ra, 24(sp)
80213b32: 22 e8        	sd	s0, 16(sp)
80213b34: 00 10        	addi	s0, sp, 32
80213b36: 0d 45        	addi	a0, zero, 3
;         break :blk level;
80213b38: a3 07 a4 fe  	sb	a0, -17(s0)
80213b3c: 09 a0        	j	0x80213b3e <std.log.log.64+0x10>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80213b3e: 03 45 f4 fe  	lbu	a0, -17(s0)
80213b42: 8d 45        	addi	a1, zero, 3
80213b44: 63 18 b5 00  	bne	a0, a1, 0x80213b54 <std.log.log.64+0x26>
80213b48: 09 a0        	j	0x80213b4a <std.log.log.64+0x1c>
;             root.log(message_level, scope, format, args);
80213b4a: 97 20 00 00  	auipc	ra, 2
80213b4e: e7 80 80 1e  	jalr	488(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80213b52: 11 a0        	j	0x80213b56 <std.log.log.64+0x28>
80213b54: 09 a0        	j	0x80213b56 <std.log.log.64+0x28>
; ) void {
80213b56: 42 64        	ld	s0, 16(sp)
80213b58: e2 60        	ld	ra, 24(sp)
80213b5a: 05 61        	addi	sp, sp, 32
80213b5c: 82 80        	ret

0000000080213b5e <std.log.log.65>:
; fn log(
80213b5e: 39 71        	addi	sp, sp, -64
;     args: anytype,
80213b60: 06 fc        	sd	ra, 56(sp)
80213b62: 22 f8        	sd	s0, 48(sp)
80213b64: 80 00        	addi	s0, sp, 64
80213b66: 23 30 a4 fc  	sd	a0, -64(s0)
80213b6a: 0d 45        	addi	a0, zero, 3
;         break :blk level;
80213b6c: a3 07 a4 fe  	sb	a0, -17(s0)
80213b70: 09 a0        	j	0x80213b72 <std.log.log.65+0x14>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80213b72: 03 45 f4 fe  	lbu	a0, -17(s0)
80213b76: 8d 45        	addi	a1, zero, 3
80213b78: 63 16 b5 02  	bne	a0, a1, 0x80213ba4 <std.log.log.65+0x46>
80213b7c: 09 a0        	j	0x80213b7e <std.log.log.65+0x20>
;             root.log(message_level, scope, format, args);
80213b7e: 03 35 04 fc  	ld	a0, -64(s0)
80213b82: 0c 6d        	ld	a1, 24(a0)
80213b84: 23 30 b4 fe  	sd	a1, -32(s0)
80213b88: 0c 69        	ld	a1, 16(a0)
80213b8a: 23 3c b4 fc  	sd	a1, -40(s0)
80213b8e: 0c 65        	ld	a1, 8(a0)
80213b90: 23 38 b4 fc  	sd	a1, -48(s0)
80213b94: 0c 61        	ld	a1, 0(a0)
80213b96: 23 34 b4 fc  	sd	a1, -56(s0)
80213b9a: 97 20 00 00  	auipc	ra, 2
80213b9e: e7 80 60 1f  	jalr	502(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80213ba2: 11 a0        	j	0x80213ba6 <std.log.log.65+0x48>
80213ba4: 09 a0        	j	0x80213ba6 <std.log.log.65+0x48>
; ) void {
80213ba6: 42 74        	ld	s0, 48(sp)
80213ba8: e2 70        	ld	ra, 56(sp)
80213baa: 21 61        	addi	sp, sp, 64
80213bac: 82 80        	ret

0000000080213bae <std.log.log.66>:
; fn log(
80213bae: 01 11        	addi	sp, sp, -32
80213bb0: 06 ec        	sd	ra, 24(sp)
80213bb2: 22 e8        	sd	s0, 16(sp)
80213bb4: 00 10        	addi	s0, sp, 32
80213bb6: 0d 45        	addi	a0, zero, 3
;         break :blk level;
80213bb8: a3 07 a4 fe  	sb	a0, -17(s0)
80213bbc: 09 a0        	j	0x80213bbe <std.log.log.66+0x10>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80213bbe: 03 45 f4 fe  	lbu	a0, -17(s0)
80213bc2: 8d 45        	addi	a1, zero, 3
80213bc4: 63 18 b5 00  	bne	a0, a1, 0x80213bd4 <std.log.log.66+0x26>
80213bc8: 09 a0        	j	0x80213bca <std.log.log.66+0x1c>
;             root.log(message_level, scope, format, args);
80213bca: 97 20 00 00  	auipc	ra, 2
80213bce: e7 80 e0 23  	jalr	574(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80213bd2: 11 a0        	j	0x80213bd6 <std.log.log.66+0x28>
80213bd4: 09 a0        	j	0x80213bd6 <std.log.log.66+0x28>
; ) void {
80213bd6: 42 64        	ld	s0, 16(sp)
80213bd8: e2 60        	ld	ra, 24(sp)
80213bda: 05 61        	addi	sp, sp, 32
80213bdc: 82 80        	ret

0000000080213bde <std.log.log.67>:
; fn log(
80213bde: 79 71        	addi	sp, sp, -48
;     args: anytype,
80213be0: 06 f4        	sd	ra, 40(sp)
80213be2: 22 f0        	sd	s0, 32(sp)
80213be4: 00 18        	addi	s0, sp, 48
80213be6: 23 3c a4 fc  	sd	a0, -40(s0)
80213bea: 0d 45        	addi	a0, zero, 3
;         break :blk level;
80213bec: a3 07 a4 fe  	sb	a0, -17(s0)
80213bf0: 09 a0        	j	0x80213bf2 <std.log.log.67+0x14>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80213bf2: 03 45 f4 fe  	lbu	a0, -17(s0)
80213bf6: 8d 45        	addi	a1, zero, 3
80213bf8: 63 1d b5 00  	bne	a0, a1, 0x80213c12 <std.log.log.67+0x34>
80213bfc: 09 a0        	j	0x80213bfe <std.log.log.67+0x20>
;             root.log(message_level, scope, format, args);
80213bfe: 03 35 84 fd  	ld	a0, -40(s0)
80213c02: 0c 61        	ld	a1, 0(a0)
80213c04: 23 30 b4 fe  	sd	a1, -32(s0)
80213c08: 97 20 00 00  	auipc	ra, 2
80213c0c: e7 80 e0 25  	jalr	606(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80213c10: 11 a0        	j	0x80213c14 <std.log.log.67+0x36>
80213c12: 09 a0        	j	0x80213c14 <std.log.log.67+0x36>
; ) void {
80213c14: 02 74        	ld	s0, 32(sp)
80213c16: a2 70        	ld	ra, 40(sp)
80213c18: 45 61        	addi	sp, sp, 48
80213c1a: 82 80        	ret

0000000080213c1c <std.log.log.68>:
; fn log(
80213c1c: 01 11        	addi	sp, sp, -32
;     args: anytype,
80213c1e: 06 ec        	sd	ra, 24(sp)
80213c20: 22 e8        	sd	s0, 16(sp)
80213c22: 00 10        	addi	s0, sp, 32
80213c24: 23 30 a4 fe  	sd	a0, -32(s0)
80213c28: 0d 45        	addi	a0, zero, 3
;         break :blk level;
80213c2a: a3 07 a4 fe  	sb	a0, -17(s0)
80213c2e: 09 a0        	j	0x80213c30 <std.log.log.68+0x14>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80213c30: 03 45 f4 fe  	lbu	a0, -17(s0)
80213c34: 8d 45        	addi	a1, zero, 3
80213c36: 63 1a b5 02  	bne	a0, a1, 0x80213c6a <std.log.log.68+0x4e>
80213c3a: 09 a0        	j	0x80213c3c <std.log.log.68+0x20>
;             root.log(message_level, scope, format, args);
80213c3c: 03 35 04 fe  	ld	a0, -32(s0)
80213c40: 03 46 05 00  	lbu	a2, 0(a0)
80213c44: 83 45 15 00  	lbu	a1, 1(a0)
80213c48: a2 05        	slli	a1, a1, 8
80213c4a: 4d 8e        	or	a2, a2, a1
80213c4c: 83 46 25 00  	lbu	a3, 2(a0)
80213c50: 83 05 35 00  	lb	a1, 3(a0)
80213c54: a2 05        	slli	a1, a1, 8
80213c56: d5 8d        	or	a1, a1, a3
80213c58: c2 05        	slli	a1, a1, 16
80213c5a: d1 8d        	or	a1, a1, a2
80213c5c: 23 24 b4 fe  	sw	a1, -24(s0)
80213c60: 97 20 00 00  	auipc	ra, 2
80213c64: e7 80 c0 26  	jalr	620(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80213c68: 11 a0        	j	0x80213c6c <std.log.log.68+0x50>
80213c6a: 09 a0        	j	0x80213c6c <std.log.log.68+0x50>
; ) void {
80213c6c: 42 64        	ld	s0, 16(sp)
80213c6e: e2 60        	ld	ra, 24(sp)
80213c70: 05 61        	addi	sp, sp, 32
80213c72: 82 80        	ret

0000000080213c74 <log.0.69>:
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80213c74: 4d 71        	addi	sp, sp, -336
80213c76: 86 e6        	sd	ra, 328(sp)
80213c78: a2 e2        	sd	s0, 320(sp)
80213c7a: 80 0a        	addi	s0, sp, 336
80213c7c: aa 85        	mv	a1, a0
80213c7e: 01 45        	mv	a0, zero
80213c80: 23 3c a4 ea  	sd	a0, -328(s0)
80213c84: 23 3c a4 ec  	sd	a0, -296(s0)
80213c88: 13 05 04 ef  	addi	a0, s0, -272
80213c8c: 23 30 a4 ee  	sd	a0, -288(s0)
80213c90: 13 05 00 02  	addi	a0, zero, 32
80213c94: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80213c98: 03 e6 05 00  	lwu	a2, 0(a1)
80213c9c: 03 e5 45 00  	lwu	a0, 4(a1)
80213ca0: 02 15        	slli	a0, a0, 32
80213ca2: 51 8d        	or	a0, a0, a2
80213ca4: 23 38 a4 ec  	sd	a0, -304(s0)
80213ca8: 13 05 84 ed  	addi	a0, s0, -296
80213cac: 97 20 00 00  	auipc	ra, 2
80213cb0: e7 80 00 2a  	jalr	672(ra)
80213cb4: 83 35 84 eb  	ld	a1, -328(s0)
80213cb8: 23 17 a4 ec  	sh	a0, -306(s0)
80213cbc: 41 66        	lui	a2, 16
80213cbe: 7d 36        	addiw	a2, a2, -1
80213cc0: 71 8d        	and	a0, a0, a2
80213cc2: 23 30 a4 ec  	sd	a0, -320(s0)
80213cc6: 63 0b b5 00  	beq	a0, a1, 0x80213cdc <log.0.69+0x68>
80213cca: 09 a0        	j	0x80213ccc <log.0.69+0x58>
80213ccc: 83 35 04 ec  	ld	a1, -320(s0)
80213cd0: 13 05 84 ed  	addi	a0, s0, -296
80213cd4: 97 d0 fe ff  	auipc	ra, 1048557
80213cd8: e7 80 a0 91  	jalr	-1766(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80213cdc: 16 64        	ld	s0, 320(sp)
80213cde: b6 60        	ld	ra, 328(sp)
80213ce0: 71 61        	addi	sp, sp, 336
80213ce2: 82 80        	ret

0000000080213ce4 <std.log.log.70>:
; fn log(
80213ce4: 01 11        	addi	sp, sp, -32
80213ce6: 06 ec        	sd	ra, 24(sp)
80213ce8: 22 e8        	sd	s0, 16(sp)
80213cea: 00 10        	addi	s0, sp, 32
80213cec: 0d 45        	addi	a0, zero, 3
;         break :blk level;
80213cee: a3 07 a4 fe  	sb	a0, -17(s0)
80213cf2: 09 a0        	j	0x80213cf4 <std.log.log.70+0x10>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80213cf4: 03 45 f4 fe  	lbu	a0, -17(s0)
80213cf8: 8d 45        	addi	a1, zero, 3
80213cfa: 63 18 b5 00  	bne	a0, a1, 0x80213d0a <std.log.log.70+0x26>
80213cfe: 09 a0        	j	0x80213d00 <std.log.log.70+0x1c>
;             root.log(message_level, scope, format, args);
80213d00: 97 20 00 00  	auipc	ra, 2
80213d04: e7 80 00 2a  	jalr	672(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80213d08: 11 a0        	j	0x80213d0c <std.log.log.70+0x28>
80213d0a: 09 a0        	j	0x80213d0c <std.log.log.70+0x28>
; ) void {
80213d0c: 42 64        	ld	s0, 16(sp)
80213d0e: e2 60        	ld	ra, 24(sp)
80213d10: 05 61        	addi	sp, sp, 32
80213d12: 82 80        	ret

0000000080213d14 <std.log.log.71>:
; fn log(
80213d14: 01 11        	addi	sp, sp, -32
80213d16: 06 ec        	sd	ra, 24(sp)
80213d18: 22 e8        	sd	s0, 16(sp)
80213d1a: 00 10        	addi	s0, sp, 32
80213d1c: 0d 45        	addi	a0, zero, 3
;         break :blk level;
80213d1e: a3 07 a4 fe  	sb	a0, -17(s0)
80213d22: 09 a0        	j	0x80213d24 <std.log.log.71+0x10>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80213d24: 03 45 f4 fe  	lbu	a0, -17(s0)
80213d28: 8d 45        	addi	a1, zero, 3
80213d2a: 63 18 b5 00  	bne	a0, a1, 0x80213d3a <std.log.log.71+0x26>
80213d2e: 09 a0        	j	0x80213d30 <std.log.log.71+0x1c>
;             root.log(message_level, scope, format, args);
80213d30: 97 20 00 00  	auipc	ra, 2
80213d34: e7 80 e0 2c  	jalr	718(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80213d38: 11 a0        	j	0x80213d3c <std.log.log.71+0x28>
80213d3a: 09 a0        	j	0x80213d3c <std.log.log.71+0x28>
; ) void {
80213d3c: 42 64        	ld	s0, 16(sp)
80213d3e: e2 60        	ld	ra, 24(sp)
80213d40: 05 61        	addi	sp, sp, 32
80213d42: 82 80        	ret

0000000080213d44 <log.0.72>:
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80213d44: 4d 71        	addi	sp, sp, -336
80213d46: 86 e6        	sd	ra, 328(sp)
80213d48: a2 e2        	sd	s0, 320(sp)
80213d4a: 80 0a        	addi	s0, sp, 336
80213d4c: aa 85        	mv	a1, a0
80213d4e: 01 45        	mv	a0, zero
80213d50: 23 38 a4 ea  	sd	a0, -336(s0)
80213d54: 23 3c a4 ec  	sd	a0, -296(s0)
80213d58: 13 05 04 ef  	addi	a0, s0, -272
80213d5c: 23 30 a4 ee  	sd	a0, -288(s0)
80213d60: 13 05 00 02  	addi	a0, zero, 32
80213d64: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80213d68: 88 61        	ld	a0, 0(a1)
80213d6a: 23 34 a4 ec  	sd	a0, -312(s0)
80213d6e: 88 65        	ld	a0, 8(a1)
80213d70: 23 38 a4 ec  	sd	a0, -304(s0)
80213d74: 13 05 84 ed  	addi	a0, s0, -296
80213d78: 97 20 00 00  	auipc	ra, 2
80213d7c: e7 80 40 2e  	jalr	740(ra)
80213d80: 83 35 04 eb  	ld	a1, -336(s0)
80213d84: 23 13 a4 ec  	sh	a0, -314(s0)
80213d88: 41 66        	lui	a2, 16
80213d8a: 7d 36        	addiw	a2, a2, -1
80213d8c: 71 8d        	and	a0, a0, a2
80213d8e: 23 3c a4 ea  	sd	a0, -328(s0)
80213d92: 63 0b b5 00  	beq	a0, a1, 0x80213da8 <log.0.72+0x64>
80213d96: 09 a0        	j	0x80213d98 <log.0.72+0x54>
80213d98: 83 35 84 eb  	ld	a1, -328(s0)
80213d9c: 13 05 84 ed  	addi	a0, s0, -296
80213da0: 97 d0 fe ff  	auipc	ra, 1048557
80213da4: e7 80 e0 84  	jalr	-1970(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80213da8: 16 64        	ld	s0, 320(sp)
80213daa: b6 60        	ld	ra, 328(sp)
80213dac: 71 61        	addi	sp, sp, 336
80213dae: 82 80        	ret

0000000080213db0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.73>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80213db0: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
80213db2: 06 f4        	sd	ra, 40(sp)
80213db4: 22 f0        	sd	s0, 32(sp)
80213db6: 00 18        	addi	s0, sp, 48
80213db8: 23 38 a4 fc  	sd	a0, -48(s0)
80213dbc: 90 65        	ld	a2, 8(a1)
80213dbe: 23 30 c4 fe  	sd	a2, -32(s0)
80213dc2: 90 61        	ld	a2, 0(a1)
80213dc4: 23 3c c4 fc  	sd	a2, -40(s0)
80213dc8: 97 20 00 00  	auipc	ra, 2
80213dcc: e7 80 40 2e  	jalr	740(ra)
80213dd0: aa 85        	mv	a1, a0
80213dd2: 41 65        	lui	a0, 16
80213dd4: 7d 35        	addiw	a0, a0, -1
80213dd6: 6d 8d        	and	a0, a0, a1
80213dd8: 23 17 b4 fe  	sh	a1, -18(s0)
80213ddc: 81 45        	mv	a1, zero
80213dde: 63 0a b5 00  	beq	a0, a1, 0x80213df2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.73+0x42>
80213de2: 09 a0        	j	0x80213de4 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.73+0x34>
80213de4: 03 35 04 fd  	ld	a0, -48(s0)
80213de8: 97 d0 fe ff  	auipc	ra, 1048557
80213dec: e7 80 a0 ab  	jalr	-1350(ra)
80213df0: 11 a0        	j	0x80213df4 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.73+0x44>
80213df2: 09 a0        	j	0x80213df4 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.73+0x44>
80213df4: 03 15 e4 fe  	lh	a0, -18(s0)
80213df8: 02 74        	ld	s0, 32(sp)
80213dfa: a2 70        	ld	ra, 40(sp)
80213dfc: 45 61        	addi	sp, sp, 48
80213dfe: 82 80        	ret

0000000080213e00 <std.fmt.format.74>:
; pub fn format(
80213e00: 01 11        	addi	sp, sp, -32
;             try writer.writeAll(fmt[start_index..end_index]);
80213e02: 06 ec        	sd	ra, 24(sp)
80213e04: 22 e8        	sd	s0, 16(sp)
80213e06: 00 10        	addi	s0, sp, 32

0000000080213e08 <.LBB168_1>:
80213e08: 97 b5 00 00  	auipc	a1, 11
80213e0c: 93 85 85 af  	addi	a1, a1, -1288
80213e10: 97 d0 fe ff  	auipc	ra, 1048557
80213e14: e7 80 20 ca  	jalr	-862(ra)
80213e18: 23 16 a4 fe  	sh	a0, -20(s0)
80213e1c: 01 45        	mv	a0, zero
; ) !void {
80213e1e: 23 17 a4 fe  	sh	a0, -18(s0)
80213e22: 42 64        	ld	s0, 16(sp)
80213e24: e2 60        	ld	ra, 24(sp)
80213e26: 05 61        	addi	sp, sp, 32
80213e28: 82 80        	ret

0000000080213e2a <std.target.Arch.endian>:
;             pub fn endian(arch: Arch) std.builtin.Endian {
80213e2a: 01 11        	addi	sp, sp, -32
80213e2c: 06 ec        	sd	ra, 24(sp)
80213e2e: 22 e8        	sd	s0, 16(sp)
80213e30: 00 10        	addi	s0, sp, 32
80213e32: aa 85        	mv	a1, a0
80213e34: 13 f5 f5 03  	andi	a0, a1, 63
80213e38: 23 07 a4 fe  	sb	a0, -18(s0)
80213e3c: 23 30 b4 fe  	sd	a1, -32(s0)
80213e40: 93 05 00 02  	addi	a1, zero, 32
;                 return switch (arch) {
80213e44: 63 0a b5 1a  	beq	a0, a1, 0x80213ff8 <std.target.Arch.endian+0x1ce>
80213e48: 09 a0        	j	0x80213e4a <std.target.Arch.endian+0x20>
80213e4a: 03 35 04 fe  	ld	a0, -32(s0)
80213e4e: 7d 05        	addi	a0, a0, 31
80213e50: 13 75 f5 03  	andi	a0, a0, 63
80213e54: bd 45        	addi	a1, zero, 15
80213e56: 63 6d b5 18  	bltu	a0, a1, 0x80213ff0 <std.target.Arch.endian+0x1c6>
80213e5a: 09 a0        	j	0x80213e5c <std.target.Arch.endian+0x32>
80213e5c: 03 35 04 fe  	ld	a0, -32(s0)
80213e60: 13 75 f5 03  	andi	a0, a0, 63
80213e64: 93 05 00 03  	addi	a1, zero, 48
;                 return switch (arch) {
80213e68: 63 08 b5 18  	beq	a0, a1, 0x80213ff8 <std.target.Arch.endian+0x1ce>
80213e6c: 09 a0        	j	0x80213e6e <std.target.Arch.endian+0x44>
80213e6e: 03 35 04 fe  	ld	a0, -32(s0)
80213e72: 3d 05        	addi	a0, a0, 15
80213e74: 13 75 f5 03  	andi	a0, a0, 63
80213e78: a1 45        	addi	a1, zero, 8
80213e7a: 63 6b b5 16  	bltu	a0, a1, 0x80213ff0 <std.target.Arch.endian+0x1c6>
80213e7e: 09 a0        	j	0x80213e80 <std.target.Arch.endian+0x56>
80213e80: 03 35 04 fe  	ld	a0, -32(s0)
80213e84: 13 75 f5 03  	andi	a0, a0, 63
80213e88: 81 45        	mv	a1, zero
;                 return switch (arch) {
80213e8a: 63 03 b5 16  	beq	a0, a1, 0x80213ff0 <std.target.Arch.endian+0x1c6>
80213e8e: 09 a0        	j	0x80213e90 <std.target.Arch.endian+0x66>
80213e90: 03 35 04 fe  	ld	a0, -32(s0)
80213e94: 13 75 f5 03  	andi	a0, a0, 63
80213e98: 85 45        	addi	a1, zero, 1
;                 return switch (arch) {
80213e9a: 63 0f b5 14  	beq	a0, a1, 0x80213ff8 <std.target.Arch.endian+0x1ce>
80213e9e: 09 a0        	j	0x80213ea0 <std.target.Arch.endian+0x76>
80213ea0: 03 35 04 fe  	ld	a0, -32(s0)
80213ea4: 13 75 f5 03  	andi	a0, a0, 63
80213ea8: 89 45        	addi	a1, zero, 2
;                 return switch (arch) {
80213eaa: 63 03 b5 14  	beq	a0, a1, 0x80213ff0 <std.target.Arch.endian+0x1c6>
80213eae: 09 a0        	j	0x80213eb0 <std.target.Arch.endian+0x86>
80213eb0: 03 35 04 fe  	ld	a0, -32(s0)
80213eb4: 13 75 f5 03  	andi	a0, a0, 63
80213eb8: 8d 45        	addi	a1, zero, 3
;                 return switch (arch) {
80213eba: 63 0f b5 12  	beq	a0, a1, 0x80213ff8 <std.target.Arch.endian+0x1ce>
80213ebe: 09 a0        	j	0x80213ec0 <std.target.Arch.endian+0x96>
80213ec0: 03 35 04 fe  	ld	a0, -32(s0)
80213ec4: 13 75 f5 03  	andi	a0, a0, 63
80213ec8: 91 45        	addi	a1, zero, 4
;                 return switch (arch) {
80213eca: 63 03 b5 12  	beq	a0, a1, 0x80213ff0 <std.target.Arch.endian+0x1c6>
80213ece: 09 a0        	j	0x80213ed0 <std.target.Arch.endian+0xa6>
80213ed0: 03 35 04 fe  	ld	a0, -32(s0)
80213ed4: 13 75 f5 03  	andi	a0, a0, 63
80213ed8: 95 45        	addi	a1, zero, 5
;                 return switch (arch) {
80213eda: 63 0f b5 10  	beq	a0, a1, 0x80213ff8 <std.target.Arch.endian+0x1ce>
80213ede: 09 a0        	j	0x80213ee0 <std.target.Arch.endian+0xb6>
80213ee0: 03 35 04 fe  	ld	a0, -32(s0)
80213ee4: 13 05 a5 03  	addi	a0, a0, 58
80213ee8: 13 75 f5 03  	andi	a0, a0, 63
80213eec: 89 45        	addi	a1, zero, 2
80213eee: 63 61 b5 10  	bltu	a0, a1, 0x80213ff0 <std.target.Arch.endian+0x1c6>
80213ef2: 09 a0        	j	0x80213ef4 <std.target.Arch.endian+0xca>
80213ef4: 03 35 04 fe  	ld	a0, -32(s0)
80213ef8: 13 75 f5 03  	andi	a0, a0, 63
80213efc: a1 45        	addi	a1, zero, 8
;                 return switch (arch) {
80213efe: 63 0d b5 0e  	beq	a0, a1, 0x80213ff8 <std.target.Arch.endian+0x1ce>
80213f02: 09 a0        	j	0x80213f04 <std.target.Arch.endian+0xda>
80213f04: 03 35 04 fe  	ld	a0, -32(s0)
80213f08: 13 05 75 03  	addi	a0, a0, 55
80213f0c: 13 75 f5 03  	andi	a0, a0, 63
80213f10: 89 45        	addi	a1, zero, 2
80213f12: 63 6f b5 0c  	bltu	a0, a1, 0x80213ff0 <std.target.Arch.endian+0x1c6>
80213f16: 09 a0        	j	0x80213f18 <std.target.Arch.endian+0xee>
80213f18: 03 35 04 fe  	ld	a0, -32(s0)
80213f1c: 13 05 55 03  	addi	a0, a0, 53
80213f20: 13 75 f5 03  	andi	a0, a0, 63
80213f24: 89 45        	addi	a1, zero, 2
80213f26: 63 69 b5 0c  	bltu	a0, a1, 0x80213ff8 <std.target.Arch.endian+0x1ce>
80213f2a: 09 a0        	j	0x80213f2c <std.target.Arch.endian+0x102>
80213f2c: 03 35 04 fe  	ld	a0, -32(s0)
80213f30: 13 75 f5 03  	andi	a0, a0, 63
80213f34: b5 45        	addi	a1, zero, 13
;                 return switch (arch) {
80213f36: 63 0d b5 0a  	beq	a0, a1, 0x80213ff0 <std.target.Arch.endian+0x1c6>
80213f3a: 09 a0        	j	0x80213f3c <std.target.Arch.endian+0x112>
80213f3c: 03 35 04 fe  	ld	a0, -32(s0)
80213f40: 13 75 f5 03  	andi	a0, a0, 63
80213f44: b9 45        	addi	a1, zero, 14
;                 return switch (arch) {
80213f46: 63 09 b5 0a  	beq	a0, a1, 0x80213ff8 <std.target.Arch.endian+0x1ce>
80213f4a: 09 a0        	j	0x80213f4c <std.target.Arch.endian+0x122>
80213f4c: 03 35 04 fe  	ld	a0, -32(s0)
80213f50: 13 05 15 03  	addi	a0, a0, 49
80213f54: 13 75 f5 03  	andi	a0, a0, 63
80213f58: 89 45        	addi	a1, zero, 2
80213f5a: 63 6b b5 08  	bltu	a0, a1, 0x80213ff0 <std.target.Arch.endian+0x1c6>
80213f5e: 09 a0        	j	0x80213f60 <std.target.Arch.endian+0x136>
80213f60: 03 35 04 fe  	ld	a0, -32(s0)
80213f64: 13 75 f5 03  	andi	a0, a0, 63
80213f68: c5 45        	addi	a1, zero, 17
;                 return switch (arch) {
80213f6a: 63 07 b5 08  	beq	a0, a1, 0x80213ff8 <std.target.Arch.endian+0x1ce>
80213f6e: 09 a0        	j	0x80213f70 <std.target.Arch.endian+0x146>
80213f70: 03 35 04 fe  	ld	a0, -32(s0)
80213f74: 13 75 f5 03  	andi	a0, a0, 63
80213f78: c9 45        	addi	a1, zero, 18
;                 return switch (arch) {
80213f7a: 63 0b b5 06  	beq	a0, a1, 0x80213ff0 <std.target.Arch.endian+0x1c6>
80213f7e: 09 a0        	j	0x80213f80 <std.target.Arch.endian+0x156>
80213f80: 03 35 04 fe  	ld	a0, -32(s0)
80213f84: 13 75 f5 03  	andi	a0, a0, 63
80213f88: cd 45        	addi	a1, zero, 19
;                 return switch (arch) {
80213f8a: 63 07 b5 06  	beq	a0, a1, 0x80213ff8 <std.target.Arch.endian+0x1ce>
80213f8e: 09 a0        	j	0x80213f90 <std.target.Arch.endian+0x166>
80213f90: 03 35 04 fe  	ld	a0, -32(s0)
80213f94: 13 05 c5 02  	addi	a0, a0, 44
80213f98: 13 75 f5 03  	andi	a0, a0, 63
80213f9c: 95 45        	addi	a1, zero, 5
80213f9e: 63 69 b5 04  	bltu	a0, a1, 0x80213ff0 <std.target.Arch.endian+0x1c6>
80213fa2: 09 a0        	j	0x80213fa4 <std.target.Arch.endian+0x17a>
80213fa4: 03 35 04 fe  	ld	a0, -32(s0)
80213fa8: 13 05 75 02  	addi	a0, a0, 39
80213fac: 13 75 f5 03  	andi	a0, a0, 63
80213fb0: 89 45        	addi	a1, zero, 2
80213fb2: 63 63 b5 04  	bltu	a0, a1, 0x80213ff8 <std.target.Arch.endian+0x1ce>
80213fb6: 09 a0        	j	0x80213fb8 <std.target.Arch.endian+0x18e>
80213fb8: 03 35 04 fe  	ld	a0, -32(s0)
80213fbc: 13 75 f5 03  	andi	a0, a0, 63
80213fc0: ed 45        	addi	a1, zero, 27
;                 return switch (arch) {
80213fc2: 63 07 b5 02  	beq	a0, a1, 0x80213ff0 <std.target.Arch.endian+0x1c6>
80213fc6: 09 a0        	j	0x80213fc8 <std.target.Arch.endian+0x19e>
80213fc8: 03 35 04 fe  	ld	a0, -32(s0)
80213fcc: 13 05 45 02  	addi	a0, a0, 36
80213fd0: 13 75 f5 03  	andi	a0, a0, 63
80213fd4: 89 45        	addi	a1, zero, 2
80213fd6: 63 61 b5 02  	bltu	a0, a1, 0x80213ff8 <std.target.Arch.endian+0x1ce>
80213fda: 09 a0        	j	0x80213fdc <std.target.Arch.endian+0x1b2>
80213fdc: 03 35 04 fe  	ld	a0, -32(s0)
80213fe0: 13 05 25 02  	addi	a0, a0, 34
80213fe4: 93 75 f5 03  	andi	a1, a0, 63
80213fe8: 05 45        	addi	a0, zero, 1
80213fea: 63 6b b5 00  	bltu	a0, a1, 0x80214000 <.LBB169_29>
80213fee: 09 a0        	j	0x80213ff0 <std.target.Arch.endian+0x1c6>
80213ff0: 05 45        	addi	a0, zero, 1
;                     => .Little,
80213ff2: a3 07 a4 fe  	sb	a0, -17(s0)
;                 return switch (arch) {
80213ff6: 31 a8        	j	0x80214012 <.LBB169_29+0x12>
80213ff8: 01 45        	mv	a0, zero
;                     => .Big,
80213ffa: a3 07 a4 fe  	sb	a0, -17(s0)
;                 return switch (arch) {
80213ffe: 11 a8        	j	0x80214012 <.LBB169_29+0x12>

0000000080214000 <.LBB169_29>:
80214000: 17 95 00 00  	auipc	a0, 9
80214004: 13 05 05 49  	addi	a0, a0, 1168
80214008: 81 45        	mv	a1, zero
8021400a: 97 c0 fe ff  	auipc	ra, 1048556
8021400e: e7 80 60 09  	jalr	150(ra)
80214012: 03 05 f4 fe  	lb	a0, -17(s0)
80214016: 42 64        	ld	s0, 16(sp)
80214018: e2 60        	ld	ra, 24(sp)
8021401a: 05 61        	addi	sp, sp, 32
8021401c: 82 80        	ret

000000008021401e <std.mem.readIntSliceNative>:
; pub fn readIntSliceNative(comptime T: type, bytes: []const u8) T {
8021401e: 79 71        	addi	sp, sp, -48
80214020: 06 f4        	sd	ra, 40(sp)
80214022: 22 f0        	sd	s0, 32(sp)
80214024: 00 18        	addi	s0, sp, 48
80214026: 23 38 a4 fc  	sd	a0, -48(s0)
;     assert(bytes.len >= n);
8021402a: 0c 65        	ld	a1, 8(a0)
8021402c: 0d 45        	addi	a0, zero, 3
8021402e: 33 35 b5 00  	sltu	a0, a0, a1
80214032: 97 c0 fe ff  	auipc	ra, 1048556
80214036: e7 80 80 12  	jalr	296(ra)
8021403a: 03 35 04 fd  	ld	a0, -48(s0)
;     return readIntNative(T, bytes[0..n]);
8021403e: 08 65        	ld	a0, 8(a0)
80214040: 23 3c a4 fc  	sd	a0, -40(s0)
80214044: 81 45        	mv	a1, zero
80214046: 05 45        	addi	a0, zero, 1
80214048: 63 1c b5 00  	bne	a0, a1, 0x80214060 <.LBB170_5+0x12>
8021404c: 09 a0        	j	0x8021404e <.LBB170_5>

000000008021404e <.LBB170_5>:
8021404e: 17 95 00 00  	auipc	a0, 9
80214052: 13 05 25 2b  	addi	a0, a0, 690
80214056: 81 45        	mv	a1, zero
80214058: 97 c0 fe ff  	auipc	ra, 1048556
8021405c: e7 80 80 04  	jalr	72(ra)
80214060: 83 35 84 fd  	ld	a1, -40(s0)
80214064: 0d 45        	addi	a0, zero, 3
;     return readIntNative(T, bytes[0..n]);
80214066: 63 6c b5 00  	bltu	a0, a1, 0x8021407e <.LBB170_6+0x12>
8021406a: 09 a0        	j	0x8021406c <.LBB170_6>

000000008021406c <.LBB170_6>:
8021406c: 17 95 00 00  	auipc	a0, 9
80214070: 13 05 45 29  	addi	a0, a0, 660
80214074: 81 45        	mv	a1, zero
80214076: 97 c0 fe ff  	auipc	ra, 1048556
8021407a: e7 80 a0 02  	jalr	42(ra)
8021407e: 03 35 04 fd  	ld	a0, -48(s0)
80214082: 08 61        	ld	a0, 0(a0)
80214084: 23 30 a4 fe  	sd	a0, -32(s0)
80214088: 97 10 00 00  	auipc	ra, 1
8021408c: e7 80 c0 cc  	jalr	-820(ra)
80214090: 23 26 a4 fe  	sw	a0, -20(s0)
80214094: 02 74        	ld	s0, 32(sp)
80214096: a2 70        	ld	ra, 40(sp)
80214098: 45 61        	addi	sp, sp, 48
8021409a: 82 80        	ret

000000008021409c <std.mem.readIntSliceNative.75>:
; pub fn readIntSliceNative(comptime T: type, bytes: []const u8) T {
8021409c: 79 71        	addi	sp, sp, -48
8021409e: 06 f4        	sd	ra, 40(sp)
802140a0: 22 f0        	sd	s0, 32(sp)
802140a2: 00 18        	addi	s0, sp, 48
802140a4: 23 38 a4 fc  	sd	a0, -48(s0)
;     assert(bytes.len >= n);
802140a8: 0c 65        	ld	a1, 8(a0)
802140aa: 1d 45        	addi	a0, zero, 7
802140ac: 33 35 b5 00  	sltu	a0, a0, a1
802140b0: 97 c0 fe ff  	auipc	ra, 1048556
802140b4: e7 80 a0 0a  	jalr	170(ra)
802140b8: 03 35 04 fd  	ld	a0, -48(s0)
;     return readIntNative(T, bytes[0..n]);
802140bc: 08 65        	ld	a0, 8(a0)
802140be: 23 3c a4 fc  	sd	a0, -40(s0)
802140c2: 81 45        	mv	a1, zero
802140c4: 05 45        	addi	a0, zero, 1
802140c6: 63 1c b5 00  	bne	a0, a1, 0x802140de <.LBB171_5+0x12>
802140ca: 09 a0        	j	0x802140cc <.LBB171_5>

00000000802140cc <.LBB171_5>:
802140cc: 17 95 00 00  	auipc	a0, 9
802140d0: 13 05 45 23  	addi	a0, a0, 564
802140d4: 81 45        	mv	a1, zero
802140d6: 97 c0 fe ff  	auipc	ra, 1048556
802140da: e7 80 a0 fc  	jalr	-54(ra)
802140de: 83 35 84 fd  	ld	a1, -40(s0)
802140e2: 1d 45        	addi	a0, zero, 7
;     return readIntNative(T, bytes[0..n]);
802140e4: 63 6c b5 00  	bltu	a0, a1, 0x802140fc <.LBB171_6+0x12>
802140e8: 09 a0        	j	0x802140ea <.LBB171_6>

00000000802140ea <.LBB171_6>:
802140ea: 17 95 00 00  	auipc	a0, 9
802140ee: 13 05 65 21  	addi	a0, a0, 534
802140f2: 81 45        	mv	a1, zero
802140f4: 97 c0 fe ff  	auipc	ra, 1048556
802140f8: e7 80 c0 fa  	jalr	-84(ra)
802140fc: 03 35 04 fd  	ld	a0, -48(s0)
80214100: 08 61        	ld	a0, 0(a0)
80214102: 23 30 a4 fe  	sd	a0, -32(s0)
80214106: 97 10 00 00  	auipc	ra, 1
8021410a: e7 80 a0 24  	jalr	586(ra)
8021410e: 23 34 a4 fe  	sd	a0, -24(s0)
80214112: 02 74        	ld	s0, 32(sp)
80214114: a2 70        	ld	ra, 40(sp)
80214116: 45 61        	addi	sp, sp, 48
80214118: 82 80        	ret

000000008021411a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.76>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021411a: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
8021411c: 06 f4        	sd	ra, 40(sp)
8021411e: 22 f0        	sd	s0, 32(sp)
80214120: 00 18        	addi	s0, sp, 48
80214122: 23 38 a4 fc  	sd	a0, -48(s0)
80214126: 90 65        	ld	a2, 8(a1)
80214128: 23 30 c4 fe  	sd	a2, -32(s0)
8021412c: 90 61        	ld	a2, 0(a1)
8021412e: 23 3c c4 fc  	sd	a2, -40(s0)
80214132: 97 20 00 00  	auipc	ra, 2
80214136: e7 80 20 0b  	jalr	178(ra)
8021413a: aa 85        	mv	a1, a0
8021413c: 41 65        	lui	a0, 16
8021413e: 7d 35        	addiw	a0, a0, -1
80214140: 6d 8d        	and	a0, a0, a1
80214142: 23 17 b4 fe  	sh	a1, -18(s0)
80214146: 81 45        	mv	a1, zero
80214148: 63 0a b5 00  	beq	a0, a1, 0x8021415c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.76+0x42>
8021414c: 09 a0        	j	0x8021414e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.76+0x34>
8021414e: 03 35 04 fd  	ld	a0, -48(s0)
80214152: 97 c0 fe ff  	auipc	ra, 1048556
80214156: e7 80 00 75  	jalr	1872(ra)
8021415a: 11 a0        	j	0x8021415e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.76+0x44>
8021415c: 09 a0        	j	0x8021415e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.76+0x44>
8021415e: 03 15 e4 fe  	lh	a0, -18(s0)
80214162: 02 74        	ld	s0, 32(sp)
80214164: a2 70        	ld	ra, 40(sp)
80214166: 45 61        	addi	sp, sp, 48
80214168: 82 80        	ret

000000008021416a <arch.riscv64.device_tree.Parser.read_cstr_advancing_it>:
;         fn read_cstr_advancing_it(self: *@This()) []const u8 {
8021416a: 31 71        	addi	sp, sp, -192
8021416c: 06 fd        	sd	ra, 184(sp)
8021416e: 22 f9        	sd	s0, 176(sp)
80214170: 80 01        	addi	s0, sp, 192
80214172: 23 38 b4 f8  	sd	a1, -112(s0)
80214176: aa 85        	mv	a1, a0
80214178: 03 35 04 f9  	ld	a0, -112(s0)
8021417c: 23 3c b4 f8  	sd	a1, -104(s0)
80214180: 23 3c a4 fa  	sd	a0, -72(s0)
;             const cstr_len = std.mem.len(@ptrCast([*:0]const u8, self.slice[self.i..].ptr));
80214184: aa 85        	mv	a1, a0
80214186: 23 30 b4 fa  	sd	a1, -96(s0)
8021418a: 0c 69        	ld	a1, 16(a0)
8021418c: 23 34 b4 fa  	sd	a1, -88(s0)
80214190: 08 65        	ld	a0, 8(a0)
80214192: 23 38 a4 fa  	sd	a0, -80(s0)
80214196: 63 7c b5 00  	bgeu	a0, a1, 0x802141ae <.LBB173_17+0x12>
8021419a: 09 a0        	j	0x8021419c <.LBB173_17>

000000008021419c <.LBB173_17>:
8021419c: 17 95 00 00  	auipc	a0, 9
802141a0: 13 05 45 16  	addi	a0, a0, 356
802141a4: 81 45        	mv	a1, zero
802141a6: 97 c0 fe ff  	auipc	ra, 1048556
802141aa: e7 80 a0 ef  	jalr	-262(ra)
802141ae: 81 45        	mv	a1, zero
802141b0: 05 45        	addi	a0, zero, 1
;             const cstr_len = std.mem.len(@ptrCast([*:0]const u8, self.slice[self.i..].ptr));
802141b2: 63 1c b5 00  	bne	a0, a1, 0x802141ca <.LBB173_18+0x12>
802141b6: 09 a0        	j	0x802141b8 <.LBB173_18>

00000000802141b8 <.LBB173_18>:
802141b8: 17 95 00 00  	auipc	a0, 9
802141bc: 13 05 85 14  	addi	a0, a0, 328
802141c0: 81 45        	mv	a1, zero
802141c2: 97 c0 fe ff  	auipc	ra, 1048556
802141c6: e7 80 e0 ed  	jalr	-290(ra)
802141ca: 83 35 04 fb  	ld	a1, -80(s0)
802141ce: 03 36 84 fa  	ld	a2, -88(s0)
802141d2: 03 35 04 fa  	ld	a0, -96(s0)
802141d6: 08 61        	ld	a0, 0(a0)
802141d8: 32 95        	add	a0, a0, a2
802141da: 23 34 a4 f8  	sd	a0, -120(s0)
802141de: 91 8d        	sub	a1, a1, a2
802141e0: 23 30 a4 fe  	sd	a0, -32(s0)
802141e4: 23 34 b4 fe  	sd	a1, -24(s0)
802141e8: 81 45        	mv	a1, zero
802141ea: 63 1c b5 00  	bne	a0, a1, 0x80214202 <.LBB173_19+0x12>
802141ee: 09 a0        	j	0x802141f0 <.LBB173_19>

00000000802141f0 <.LBB173_19>:
802141f0: 17 95 00 00  	auipc	a0, 9
802141f4: 13 05 85 30  	addi	a0, a0, 776
802141f8: 81 45        	mv	a1, zero
802141fa: 97 c0 fe ff  	auipc	ra, 1048556
802141fe: e7 80 60 ea  	jalr	-346(ra)
80214202: 03 35 84 f8  	ld	a0, -120(s0)
80214206: 23 3c a4 fc  	sd	a0, -40(s0)
8021420a: 97 20 00 00  	auipc	ra, 2
8021420e: e7 80 20 09  	jalr	146(ra)
80214212: 23 38 a4 fc  	sd	a0, -48(s0)
;             const cstr = self.slice[self.i .. self.i + cstr_len];
80214216: 83 35 84 fb  	ld	a1, -72(s0)
8021421a: 23 38 b4 f6  	sd	a1, -144(s0)
8021421e: 8c 69        	ld	a1, 16(a1)
80214220: 23 3c b4 f6  	sd	a1, -136(s0)
80214224: 2e 95        	add	a0, a0, a1
80214226: 23 30 a4 f8  	sd	a0, -128(s0)
8021422a: 63 7c b5 00  	bgeu	a0, a1, 0x80214242 <.LBB173_20+0x12>
8021422e: 09 a0        	j	0x80214230 <.LBB173_20>

0000000080214230 <.LBB173_20>:
80214230: 17 95 00 00  	auipc	a0, 9
80214234: 13 05 05 25  	addi	a0, a0, 592
80214238: 81 45        	mv	a1, zero
8021423a: 97 c0 fe ff  	auipc	ra, 1048556
8021423e: e7 80 60 e6  	jalr	-410(ra)
80214242: 03 35 04 f8  	ld	a0, -128(s0)
80214246: 83 35 84 f7  	ld	a1, -136(s0)
8021424a: 03 36 04 f7  	ld	a2, -144(s0)
8021424e: 10 66        	ld	a2, 8(a2)
80214250: 23 34 c4 f6  	sd	a2, -152(s0)
80214254: 63 7c b5 00  	bgeu	a0, a1, 0x8021426c <.LBB173_21+0x12>
80214258: 09 a0        	j	0x8021425a <.LBB173_21>

000000008021425a <.LBB173_21>:
8021425a: 17 95 00 00  	auipc	a0, 9
8021425e: 13 05 65 0a  	addi	a0, a0, 166
80214262: 81 45        	mv	a1, zero
80214264: 97 c0 fe ff  	auipc	ra, 1048556
80214268: e7 80 c0 e3  	jalr	-452(ra)
8021426c: 03 35 84 f6  	ld	a0, -152(s0)
80214270: 83 35 04 f8  	ld	a1, -128(s0)
80214274: 63 7c b5 00  	bgeu	a0, a1, 0x8021428c <.LBB173_22+0x12>
80214278: 09 a0        	j	0x8021427a <.LBB173_22>

000000008021427a <.LBB173_22>:
8021427a: 17 95 00 00  	auipc	a0, 9
8021427e: 13 05 65 08  	addi	a0, a0, 134
80214282: 81 45        	mv	a1, zero
80214284: 97 c0 fe ff  	auipc	ra, 1048556
80214288: e7 80 c0 e1  	jalr	-484(ra)
8021428c: 03 35 04 f8  	ld	a0, -128(s0)
80214290: 03 36 84 f7  	ld	a2, -136(s0)
80214294: 83 35 04 f7  	ld	a1, -144(s0)
80214298: 8c 61        	ld	a1, 0(a1)
8021429a: b2 95        	add	a1, a1, a2
8021429c: 11 8d        	sub	a0, a0, a2
8021429e: 23 30 b4 fc  	sd	a1, -64(s0)
802142a2: 23 34 a4 fc  	sd	a0, -56(s0)
;             self.i += cstr_len + 1;
802142a6: 03 35 84 fb  	ld	a0, -72(s0)
802142aa: 93 05 05 01  	addi	a1, a0, 16
802142ae: 23 38 b4 f4  	sd	a1, -176(s0)
802142b2: 08 69        	ld	a0, 16(a0)
802142b4: 23 3c a4 f4  	sd	a0, -168(s0)
802142b8: 83 35 04 fd  	ld	a1, -48(s0)
802142bc: 13 85 15 00  	addi	a0, a1, 1
802142c0: 23 30 a4 f6  	sd	a0, -160(s0)
802142c4: 63 7c b5 00  	bgeu	a0, a1, 0x802142dc <.LBB173_23+0x12>
802142c8: 09 a0        	j	0x802142ca <.LBB173_23>

00000000802142ca <.LBB173_23>:
802142ca: 17 95 00 00  	auipc	a0, 9
802142ce: 13 05 65 1b  	addi	a0, a0, 438
802142d2: 81 45        	mv	a1, zero
802142d4: 97 c0 fe ff  	auipc	ra, 1048556
802142d8: e7 80 c0 dc  	jalr	-564(ra)
802142dc: 83 35 84 f5  	ld	a1, -168(s0)
802142e0: 03 35 04 f6  	ld	a0, -160(s0)
802142e4: 2e 95        	add	a0, a0, a1
802142e6: 23 34 a4 f4  	sd	a0, -184(s0)
802142ea: 63 7c b5 00  	bgeu	a0, a1, 0x80214302 <.LBB173_24+0x12>
802142ee: 09 a0        	j	0x802142f0 <.LBB173_24>

00000000802142f0 <.LBB173_24>:
802142f0: 17 95 00 00  	auipc	a0, 9
802142f4: 13 05 05 19  	addi	a0, a0, 400
802142f8: 81 45        	mv	a1, zero
802142fa: 97 c0 fe ff  	auipc	ra, 1048556
802142fe: e7 80 60 da  	jalr	-602(ra)
80214302: 83 35 84 f9  	ld	a1, -104(s0)
80214306: 03 35 84 f4  	ld	a0, -184(s0)
8021430a: 03 36 04 f5  	ld	a2, -176(s0)
8021430e: 08 e2        	sd	a0, 0(a2)
;             return cstr;
80214310: 03 35 84 fc  	ld	a0, -56(s0)
80214314: 88 e5        	sd	a0, 8(a1)
80214316: 03 35 04 fc  	ld	a0, -64(s0)
8021431a: 88 e1        	sd	a0, 0(a1)
8021431c: 4a 74        	ld	s0, 176(sp)
8021431e: ea 70        	ld	ra, 184(sp)
80214320: 29 61        	addi	sp, sp, 192
80214322: 82 80        	ret

0000000080214324 <std.mem.eql>:
; pub fn eql(comptime T: type, a: []const T, b: []const T) bool {
80214324: 5d 71        	addi	sp, sp, -80
80214326: 86 e4        	sd	ra, 72(sp)
80214328: a2 e0        	sd	s0, 64(sp)
8021432a: 80 08        	addi	s0, sp, 80
8021432c: 23 34 b4 fc  	sd	a1, -56(s0)
80214330: 23 38 a4 fc  	sd	a0, -48(s0)
;     if (a.len != b.len) return false;
80214334: 08 65        	ld	a0, 8(a0)
80214336: 8c 65        	ld	a1, 8(a1)
80214338: 63 0a b5 00  	beq	a0, a1, 0x8021434c <std.mem.eql+0x28>
8021433c: 09 a0        	j	0x8021433e <std.mem.eql+0x1a>
8021433e: 01 45        	mv	a0, zero
;     if (a.len != b.len) return false;
80214340: a3 07 a4 fe  	sb	a0, -17(s0)
80214344: 06 64        	ld	s0, 64(sp)
80214346: a6 60        	ld	ra, 72(sp)
80214348: 61 61        	addi	sp, sp, 80
8021434a: 82 80        	ret
8021434c: 09 a0        	j	0x8021434e <std.mem.eql+0x2a>
;     if (a.ptr == b.ptr) return true;
8021434e: 83 35 84 fc  	ld	a1, -56(s0)
80214352: 03 35 04 fd  	ld	a0, -48(s0)
80214356: 08 61        	ld	a0, 0(a0)
80214358: 8c 61        	ld	a1, 0(a1)
8021435a: 63 1a b5 00  	bne	a0, a1, 0x8021436e <std.mem.eql+0x4a>
8021435e: 09 a0        	j	0x80214360 <std.mem.eql+0x3c>
80214360: 05 45        	addi	a0, zero, 1
;     if (a.ptr == b.ptr) return true;
80214362: a3 07 a4 fe  	sb	a0, -17(s0)
80214366: 06 64        	ld	s0, 64(sp)
80214368: a6 60        	ld	ra, 72(sp)
8021436a: 61 61        	addi	sp, sp, 80
8021436c: 82 80        	ret
8021436e: 09 a0        	j	0x80214370 <std.mem.eql+0x4c>
80214370: 03 35 04 fd  	ld	a0, -48(s0)
80214374: 81 45        	mv	a1, zero
;     for (a) |item, index| {
80214376: 23 30 b4 fe  	sd	a1, -32(s0)
8021437a: 08 65        	ld	a0, 8(a0)
8021437c: 23 30 a4 fc  	sd	a0, -64(s0)
80214380: 09 a0        	j	0x80214382 <std.mem.eql+0x5e>
80214382: 83 35 04 fc  	ld	a1, -64(s0)
80214386: 03 35 04 fe  	ld	a0, -32(s0)
8021438a: 23 3c a4 fa  	sd	a0, -72(s0)
8021438e: 63 75 b5 04  	bgeu	a0, a1, 0x802143d8 <std.mem.eql+0xb4>
80214392: 09 a0        	j	0x80214394 <std.mem.eql+0x70>
80214394: 83 35 84 fc  	ld	a1, -56(s0)
80214398: 03 36 84 fb  	ld	a2, -72(s0)
8021439c: 03 35 04 fd  	ld	a0, -48(s0)
802143a0: 08 61        	ld	a0, 0(a0)
802143a2: 32 95        	add	a0, a0, a2
802143a4: 03 05 05 00  	lb	a0, 0(a0)
802143a8: a3 0f a4 fc  	sb	a0, -33(s0)
;         if (b[index] != item) return false;
802143ac: 03 35 04 fe  	ld	a0, -32(s0)
802143b0: 23 38 a4 fa  	sd	a0, -80(s0)
802143b4: 8c 65        	ld	a1, 8(a1)
802143b6: 63 61 b5 04  	bltu	a0, a1, 0x802143f8 <.LBB174_15+0x12>
802143ba: 35 a0        	j	0x802143e6 <.LBB174_15>
802143bc: 01 45        	mv	a0, zero
;         if (b[index] != item) return false;
802143be: a3 07 a4 fe  	sb	a0, -17(s0)
802143c2: 06 64        	ld	s0, 64(sp)
802143c4: a6 60        	ld	ra, 72(sp)
802143c6: 61 61        	addi	sp, sp, 80
802143c8: 82 80        	ret
802143ca: 09 a0        	j	0x802143cc <std.mem.eql+0xa8>
;     for (a) |item, index| {
802143cc: 03 35 84 fb  	ld	a0, -72(s0)
802143d0: 05 05        	addi	a0, a0, 1
802143d2: 23 30 a4 fe  	sd	a0, -32(s0)
802143d6: 75 b7        	j	0x80214382 <std.mem.eql+0x5e>
802143d8: 05 45        	addi	a0, zero, 1
;     return true;
802143da: a3 07 a4 fe  	sb	a0, -17(s0)
802143de: 06 64        	ld	s0, 64(sp)
802143e0: a6 60        	ld	ra, 72(sp)
802143e2: 61 61        	addi	sp, sp, 80
802143e4: 82 80        	ret

00000000802143e6 <.LBB174_15>:
;         if (b[index] != item) return false;
802143e6: 17 95 00 00  	auipc	a0, 9
802143ea: 13 05 a5 f1  	addi	a0, a0, -230
802143ee: 81 45        	mv	a1, zero
802143f0: 97 c0 fe ff  	auipc	ra, 1048556
802143f4: e7 80 00 cb  	jalr	-848(ra)
802143f8: 83 35 04 fb  	ld	a1, -80(s0)
802143fc: 03 35 84 fc  	ld	a0, -56(s0)
80214400: 08 61        	ld	a0, 0(a0)
80214402: 2e 95        	add	a0, a0, a1
80214404: 03 45 05 00  	lbu	a0, 0(a0)
80214408: 83 45 f4 fd  	lbu	a1, -33(s0)
8021440c: e3 18 b5 fa  	bne	a0, a1, 0x802143bc <std.mem.eql+0x98>
80214410: 6d bf        	j	0x802143ca <std.mem.eql+0xa6>

0000000080214412 <std.log.scoped(PANIC).err.77>:
;         pub fn err(
80214412: 01 11        	addi	sp, sp, -32
;             log(.err, scope, format, args);
80214414: 06 ec        	sd	ra, 24(sp)
80214416: 22 e8        	sd	s0, 16(sp)
80214418: 00 10        	addi	s0, sp, 32
8021441a: 0c 41        	lw	a1, 0(a0)
8021441c: 23 24 b4 fe  	sw	a1, -24(s0)
80214420: 97 20 00 00  	auipc	ra, 2
80214424: e7 80 00 ea  	jalr	-352(ra)
;         ) void {
80214428: 42 64        	ld	s0, 16(sp)
8021442a: e2 60        	ld	ra, 24(sp)
8021442c: 05 61        	addi	sp, sp, 32
8021442e: 82 80        	ret

0000000080214430 <std.mem.len>:
; pub fn len(value: anytype) usize {
80214430: 79 71        	addi	sp, sp, -48
80214432: 06 f4        	sd	ra, 40(sp)
80214434: 22 f0        	sd	s0, 32(sp)
80214436: 00 18        	addi	s0, sp, 48
80214438: 23 3c a4 fc  	sd	a0, -40(s0)
;                 indexOfSentinel(info.child, sentinel, value)
8021443c: 23 30 a4 fe  	sd	a0, -32(s0)
80214440: 97 20 00 00  	auipc	ra, 2
80214444: e7 80 e0 ea  	jalr	-338(ra)
80214448: 23 34 a4 fe  	sd	a0, -24(s0)
;     return switch (@typeInfo(@TypeOf(value))) {
8021444c: 02 74        	ld	s0, 32(sp)
8021444e: a2 70        	ld	ra, 40(sp)
80214450: 45 61        	addi	sp, sp, 48
80214452: 82 80        	ret

0000000080214454 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.78>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80214454: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
80214456: 06 f4        	sd	ra, 40(sp)
80214458: 22 f0        	sd	s0, 32(sp)
8021445a: 00 18        	addi	s0, sp, 48
8021445c: 23 38 a4 fc  	sd	a0, -48(s0)
80214460: 90 65        	ld	a2, 8(a1)
80214462: 23 30 c4 fe  	sd	a2, -32(s0)
80214466: 90 61        	ld	a2, 0(a1)
80214468: 23 3c c4 fc  	sd	a2, -40(s0)
8021446c: 97 20 00 00  	auipc	ra, 2
80214470: e7 80 a0 ee  	jalr	-278(ra)
80214474: aa 85        	mv	a1, a0
80214476: 41 65        	lui	a0, 16
80214478: 7d 35        	addiw	a0, a0, -1
8021447a: 6d 8d        	and	a0, a0, a1
8021447c: 23 17 b4 fe  	sh	a1, -18(s0)
80214480: 81 45        	mv	a1, zero
80214482: 63 0a b5 00  	beq	a0, a1, 0x80214496 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.78+0x42>
80214486: 09 a0        	j	0x80214488 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.78+0x34>
80214488: 03 35 04 fd  	ld	a0, -48(s0)
8021448c: 97 c0 fe ff  	auipc	ra, 1048556
80214490: e7 80 60 41  	jalr	1046(ra)
80214494: 11 a0        	j	0x80214498 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.78+0x44>
80214496: 09 a0        	j	0x80214498 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.78+0x44>
80214498: 03 15 e4 fe  	lh	a0, -18(s0)
8021449c: 02 74        	ld	s0, 32(sp)
8021449e: a2 70        	ld	ra, 40(sp)
802144a0: 45 61        	addi	sp, sp, 48
802144a2: 82 80        	ret

00000000802144a4 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.79>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
802144a4: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
802144a6: 06 ec        	sd	ra, 24(sp)
802144a8: 22 e8        	sd	s0, 16(sp)
802144aa: 00 10        	addi	s0, sp, 32
802144ac: 23 30 a4 fe  	sd	a0, -32(s0)
802144b0: 90 41        	lw	a2, 0(a1)
802144b2: 23 24 c4 fe  	sw	a2, -24(s0)
802144b6: 97 20 00 00  	auipc	ra, 2
802144ba: e7 80 60 ef  	jalr	-266(ra)
802144be: aa 85        	mv	a1, a0
802144c0: 41 65        	lui	a0, 16
802144c2: 7d 35        	addiw	a0, a0, -1
802144c4: 6d 8d        	and	a0, a0, a1
802144c6: 23 17 b4 fe  	sh	a1, -18(s0)
802144ca: 81 45        	mv	a1, zero
802144cc: 63 0a b5 00  	beq	a0, a1, 0x802144e0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.79+0x3c>
802144d0: 09 a0        	j	0x802144d2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.79+0x2e>
802144d2: 03 35 04 fe  	ld	a0, -32(s0)
802144d6: 97 c0 fe ff  	auipc	ra, 1048556
802144da: e7 80 c0 3c  	jalr	972(ra)
802144de: 11 a0        	j	0x802144e2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.79+0x3e>
802144e0: 09 a0        	j	0x802144e2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.79+0x3e>
802144e2: 03 15 e4 fe  	lh	a0, -18(s0)
802144e6: 42 64        	ld	s0, 16(sp)
802144e8: e2 60        	ld	ra, 24(sp)
802144ea: 05 61        	addi	sp, sp, 32
802144ec: 82 80        	ret

00000000802144ee <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.80>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
802144ee: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
802144f0: 06 ec        	sd	ra, 24(sp)
802144f2: 22 e8        	sd	s0, 16(sp)
802144f4: 00 10        	addi	s0, sp, 32
802144f6: 23 30 a4 fe  	sd	a0, -32(s0)
802144fa: 90 41        	lw	a2, 0(a1)
802144fc: 23 24 c4 fe  	sw	a2, -24(s0)
80214500: 97 20 00 00  	auipc	ra, 2
80214504: e7 80 c0 ef  	jalr	-260(ra)
80214508: aa 85        	mv	a1, a0
8021450a: 41 65        	lui	a0, 16
8021450c: 7d 35        	addiw	a0, a0, -1
8021450e: 6d 8d        	and	a0, a0, a1
80214510: 23 17 b4 fe  	sh	a1, -18(s0)
80214514: 81 45        	mv	a1, zero
80214516: 63 0a b5 00  	beq	a0, a1, 0x8021452a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.80+0x3c>
8021451a: 09 a0        	j	0x8021451c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.80+0x2e>
8021451c: 03 35 04 fe  	ld	a0, -32(s0)
80214520: 97 c0 fe ff  	auipc	ra, 1048556
80214524: e7 80 20 38  	jalr	898(ra)
80214528: 11 a0        	j	0x8021452c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.80+0x3e>
8021452a: 09 a0        	j	0x8021452c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.80+0x3e>
8021452c: 03 15 e4 fe  	lh	a0, -18(s0)
80214530: 42 64        	ld	s0, 16(sp)
80214532: e2 60        	ld	ra, 24(sp)
80214534: 05 61        	addi	sp, sp, 32
80214536: 82 80        	ret

0000000080214538 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.81>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80214538: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
8021453a: 06 f4        	sd	ra, 40(sp)
8021453c: 22 f0        	sd	s0, 32(sp)
8021453e: 00 18        	addi	s0, sp, 48
80214540: 23 38 a4 fc  	sd	a0, -48(s0)
80214544: 90 65        	ld	a2, 8(a1)
80214546: 23 30 c4 fe  	sd	a2, -32(s0)
8021454a: 90 61        	ld	a2, 0(a1)
8021454c: 23 3c c4 fc  	sd	a2, -40(s0)
80214550: 97 20 00 00  	auipc	ra, 2
80214554: e7 80 c0 ef  	jalr	-260(ra)
80214558: aa 85        	mv	a1, a0
8021455a: 41 65        	lui	a0, 16
8021455c: 7d 35        	addiw	a0, a0, -1
8021455e: 6d 8d        	and	a0, a0, a1
80214560: 23 17 b4 fe  	sh	a1, -18(s0)
80214564: 81 45        	mv	a1, zero
80214566: 63 0a b5 00  	beq	a0, a1, 0x8021457a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.81+0x42>
8021456a: 09 a0        	j	0x8021456c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.81+0x34>
8021456c: 03 35 04 fd  	ld	a0, -48(s0)
80214570: 97 c0 fe ff  	auipc	ra, 1048556
80214574: e7 80 20 33  	jalr	818(ra)
80214578: 11 a0        	j	0x8021457c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.81+0x44>
8021457a: 09 a0        	j	0x8021457c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.81+0x44>
8021457c: 03 15 e4 fe  	lh	a0, -18(s0)
80214580: 02 74        	ld	s0, 32(sp)
80214582: a2 70        	ld	ra, 40(sp)
80214584: 45 61        	addi	sp, sp, 48
80214586: 82 80        	ret

0000000080214588 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.82>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80214588: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
8021458a: 06 f4        	sd	ra, 40(sp)
8021458c: 22 f0        	sd	s0, 32(sp)
8021458e: 00 18        	addi	s0, sp, 48
80214590: 23 38 a4 fc  	sd	a0, -48(s0)
80214594: 90 65        	ld	a2, 8(a1)
80214596: 23 30 c4 fe  	sd	a2, -32(s0)
8021459a: 90 61        	ld	a2, 0(a1)
8021459c: 23 3c c4 fc  	sd	a2, -40(s0)
802145a0: 97 20 00 00  	auipc	ra, 2
802145a4: e7 80 20 f0  	jalr	-254(ra)
802145a8: aa 85        	mv	a1, a0
802145aa: 41 65        	lui	a0, 16
802145ac: 7d 35        	addiw	a0, a0, -1
802145ae: 6d 8d        	and	a0, a0, a1
802145b0: 23 17 b4 fe  	sh	a1, -18(s0)
802145b4: 81 45        	mv	a1, zero
802145b6: 63 0a b5 00  	beq	a0, a1, 0x802145ca <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.82+0x42>
802145ba: 09 a0        	j	0x802145bc <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.82+0x34>
802145bc: 03 35 04 fd  	ld	a0, -48(s0)
802145c0: 97 c0 fe ff  	auipc	ra, 1048556
802145c4: e7 80 20 2e  	jalr	738(ra)
802145c8: 11 a0        	j	0x802145cc <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.82+0x44>
802145ca: 09 a0        	j	0x802145cc <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.82+0x44>
802145cc: 03 15 e4 fe  	lh	a0, -18(s0)
802145d0: 02 74        	ld	s0, 32(sp)
802145d2: a2 70        	ld	ra, 40(sp)
802145d4: 45 61        	addi	sp, sp, 48
802145d6: 82 80        	ret

00000000802145d8 <arch.riscv64.device_tree.Parser.print_ident>:
;         fn print_ident(identation: u32, comptime format: []const u8, args: anytype) void {
802145d8: 13 01 01 d4  	addi	sp, sp, -704
802145dc: 23 3c 11 2a  	sd	ra, 696(sp)
802145e0: 23 38 81 2a  	sd	s0, 688(sp)
802145e4: 80 05        	addi	s0, sp, 704
802145e6: 23 38 b4 d6  	sd	a1, -656(s0)
802145ea: 23 2e a4 d6  	sw	a0, -644(s0)
802145ee: 01 45        	mv	a0, zero
;             var ident_it: u32 = 0;
802145f0: 23 2a a4 d8  	sw	a0, -620(s0)
;             while (ident_it < identation) : (ident_it += 1) {
802145f4: 09 a0        	j	0x802145f6 <arch.riscv64.device_tree.Parser.print_ident+0x1e>
802145f6: 03 25 44 d9  	lw	a0, -620(s0)
802145fa: 83 25 c4 d7  	lw	a1, -644(s0)
802145fe: 63 76 b5 06  	bgeu	a0, a1, 0x8021466a <.LBB182_10+0x4c>
80214602: 09 a0        	j	0x80214604 <arch.riscv64.device_tree.Parser.print_ident+0x2c>
80214604: 01 45        	mv	a0, zero
80214606: 23 30 a4 d6  	sd	a0, -672(s0)
8021460a: 23 34 a4 da  	sd	a0, -600(s0)
8021460e: 13 05 04 dc  	addi	a0, s0, -576
80214612: 23 38 a4 da  	sd	a0, -592(s0)
80214616: 13 05 00 02  	addi	a0, zero, 32
8021461a: 23 3c a4 da  	sd	a0, -584(s0)

000000008021461e <.LBB182_10>:
;     _ = writer.write(bytes) catch unreachable;
8021461e: 17 a6 00 00  	auipc	a2, 10
80214622: 13 06 26 2f  	addi	a2, a2, 754
80214626: 13 05 84 d9  	addi	a0, s0, -616
8021462a: 93 05 84 da  	addi	a1, s0, -600
8021462e: 97 c0 fe ff  	auipc	ra, 1048556
80214632: e7 80 e0 60  	jalr	1550(ra)
80214636: 83 35 04 d6  	ld	a1, -672(s0)
8021463a: 03 55 04 da  	lhu	a0, -608(s0)
8021463e: 23 34 a4 d6  	sd	a0, -664(s0)
80214642: 63 0b b5 00  	beq	a0, a1, 0x80214658 <.LBB182_10+0x3a>
80214646: 09 a0        	j	0x80214648 <.LBB182_10+0x2a>
80214648: 83 35 84 d6  	ld	a1, -664(s0)
8021464c: 13 05 84 da  	addi	a0, s0, -600
80214650: 97 c0 fe ff  	auipc	ra, 1048556
80214654: e7 80 e0 f9  	jalr	-98(ra)
;             while (ident_it < identation) : (ident_it += 1) {
80214658: 83 25 44 d9  	lw	a1, -620(s0)
8021465c: 1b 85 15 00  	addiw	a0, a1, 1
80214660: 23 3c a4 d4  	sd	a0, -680(s0)
80214664: 63 6f b5 06  	bltu	a0, a1, 0x802146e2 <.LBB182_11>
80214668: 71 a0        	j	0x802146f4 <.LBB182_11+0x12>
;             print(format, args);
8021466a: 83 35 04 d7  	ld	a1, -656(s0)
8021466e: 88 65        	ld	a0, 8(a1)
80214670: 23 34 a4 d8  	sd	a0, -632(s0)
80214674: 88 61        	ld	a0, 0(a1)
80214676: 23 30 a4 d8  	sd	a0, -640(s0)
8021467a: 01 45        	mv	a0, zero
8021467c: 23 34 a4 d4  	sd	a0, -696(s0)
80214680: 23 3c a4 ec  	sd	a0, -296(s0)
80214684: 13 05 04 ef  	addi	a0, s0, -272
80214688: 23 30 a4 ee  	sd	a0, -288(s0)
8021468c: 13 05 00 02  	addi	a0, zero, 32
80214690: 23 34 a4 ee  	sd	a0, -280(s0)
;     writer.print(format, args) catch unreachable;
80214694: 88 61        	ld	a0, 0(a1)
80214696: 23 34 a4 ec  	sd	a0, -312(s0)
8021469a: 88 65        	ld	a0, 8(a1)
8021469c: 23 38 a4 ec  	sd	a0, -304(s0)
802146a0: 13 05 84 ed  	addi	a0, s0, -296
802146a4: 97 40 00 00  	auipc	ra, 4
802146a8: e7 80 80 b7  	jalr	-1160(ra)
802146ac: 83 35 84 d4  	ld	a1, -696(s0)
802146b0: 23 13 a4 ec  	sh	a0, -314(s0)
802146b4: 41 66        	lui	a2, 16
802146b6: 7d 36        	addiw	a2, a2, -1
802146b8: 71 8d        	and	a0, a0, a2
802146ba: 23 38 a4 d4  	sd	a0, -688(s0)
802146be: 63 0b b5 00  	beq	a0, a1, 0x802146d4 <.LBB182_10+0xb6>
802146c2: 09 a0        	j	0x802146c4 <.LBB182_10+0xa6>
802146c4: 83 35 04 d5  	ld	a1, -688(s0)
802146c8: 13 05 84 ed  	addi	a0, s0, -296
802146cc: 97 c0 fe ff  	auipc	ra, 1048556
802146d0: e7 80 20 f2  	jalr	-222(ra)
;         fn print_ident(identation: u32, comptime format: []const u8, args: anytype) void {
802146d4: 03 34 01 2b  	ld	s0, 688(sp)
802146d8: 83 30 81 2b  	ld	ra, 696(sp)
802146dc: 13 01 01 2c  	addi	sp, sp, 704
802146e0: 82 80        	ret

00000000802146e2 <.LBB182_11>:
;             while (ident_it < identation) : (ident_it += 1) {
802146e2: 17 95 00 00  	auipc	a0, 9
802146e6: 13 05 e5 d9  	addi	a0, a0, -610
802146ea: 81 45        	mv	a1, zero
802146ec: 97 c0 fe ff  	auipc	ra, 1048556
802146f0: e7 80 40 9b  	jalr	-1612(ra)
802146f4: 03 35 84 d5  	ld	a0, -680(s0)
802146f8: 23 2a a4 d8  	sw	a0, -620(s0)
802146fc: ed bd        	j	0x802145f6 <arch.riscv64.device_tree.Parser.print_ident+0x1e>

00000000802146fe <__zig_tag_name_arch.riscv64.device_tree.Token>:
802146fe: 01 11        	addi	sp, sp, -32
80214700: 06 ec        	sd	ra, 24(sp)
80214702: 22 e8        	sd	s0, 16(sp)
80214704: 00 10        	addi	s0, sp, 32
80214706: 9b 05 f5 ff  	addiw	a1, a0, -1
8021470a: 7d 15        	addi	a0, a0, -1
8021470c: 02 15        	slli	a0, a0, 32
8021470e: 01 91        	srli	a0, a0, 32
80214710: 23 34 a4 fe  	sd	a0, -24(s0)
80214714: 21 45        	addi	a0, zero, 8
80214716: 63 6c b5 00  	bltu	a0, a1, 0x8021472e <.LBB183_9>
8021471a: 03 35 84 fe  	ld	a0, -24(s0)
8021471e: 0e 05        	slli	a0, a0, 3

0000000080214720 <.LBB183_8>:
80214720: 97 95 00 00  	auipc	a1, 9
80214724: 93 85 05 8e  	addi	a1, a1, -1824
80214728: 2e 95        	add	a0, a0, a1
8021472a: 08 61        	ld	a0, 0(a0)
8021472c: 02 85        	jr	a0

000000008021472e <.LBB183_9>:
8021472e: 17 95 00 00  	auipc	a0, 9
80214732: 13 05 25 53  	addi	a0, a0, 1330
80214736: 81 45        	mv	a1, zero
80214738: 97 c0 fe ff  	auipc	ra, 1048556
8021473c: e7 80 80 96  	jalr	-1688(ra)

0000000080214740 <.LBB183_3>:
80214740: 17 95 00 00  	auipc	a0, 9
80214744: 13 05 05 53  	addi	a0, a0, 1328
80214748: 42 64        	ld	s0, 16(sp)
8021474a: e2 60        	ld	ra, 24(sp)
8021474c: 05 61        	addi	sp, sp, 32
8021474e: 82 80        	ret

0000000080214750 <.LBB183_4>:
80214750: 17 95 00 00  	auipc	a0, 9
80214754: 13 05 05 53  	addi	a0, a0, 1328
80214758: 42 64        	ld	s0, 16(sp)
8021475a: e2 60        	ld	ra, 24(sp)
8021475c: 05 61        	addi	sp, sp, 32
8021475e: 82 80        	ret

0000000080214760 <.LBB183_5>:
80214760: 17 95 00 00  	auipc	a0, 9
80214764: 13 05 05 53  	addi	a0, a0, 1328
80214768: 42 64        	ld	s0, 16(sp)
8021476a: e2 60        	ld	ra, 24(sp)
8021476c: 05 61        	addi	sp, sp, 32
8021476e: 82 80        	ret

0000000080214770 <.LBB183_6>:
80214770: 17 95 00 00  	auipc	a0, 9
80214774: 13 05 05 53  	addi	a0, a0, 1328
80214778: 42 64        	ld	s0, 16(sp)
8021477a: e2 60        	ld	ra, 24(sp)
8021477c: 05 61        	addi	sp, sp, 32
8021477e: 82 80        	ret

0000000080214780 <.LBB183_7>:
80214780: 17 95 00 00  	auipc	a0, 9
80214784: 13 05 05 53  	addi	a0, a0, 1328
80214788: 42 64        	ld	s0, 16(sp)
8021478a: e2 60        	ld	ra, 24(sp)
8021478c: 05 61        	addi	sp, sp, 32
8021478e: 82 80        	ret

0000000080214790 <panic.panic.83>:
; pub fn panic(comptime format: []const u8, args: anytype) noreturn {
80214790: 79 71        	addi	sp, sp, -48
80214792: 06 f4        	sd	ra, 40(sp)
80214794: 22 f0        	sd	s0, 32(sp)
80214796: 00 18        	addi	s0, sp, 48
80214798: 23 3c a4 fc  	sd	a0, -40(s0)
;     kernel.arch.disable_interrupts();
8021479c: 97 c0 fe ff  	auipc	ra, 1048556
802147a0: e7 80 80 d2  	jalr	-728(ra)
802147a4: 03 35 84 fd  	ld	a0, -40(s0)

00000000802147a8 <.LBB184_2>:
;     kernel.arch.Writer.should_lock = true;
802147a8: 17 06 66 00  	auipc	a2, 1632
802147ac: 13 06 86 85  	addi	a2, a2, -1960
802147b0: 85 45        	addi	a1, zero, 1
802147b2: 23 00 b6 00  	sb	a1, 0(a2)
;     log.err(format, args);
802147b6: 0c 61        	ld	a1, 0(a0)
802147b8: 23 30 b4 fe  	sd	a1, -32(s0)
802147bc: 0c 65        	ld	a1, 8(a0)
802147be: 23 34 b4 fe  	sd	a1, -24(s0)
802147c2: 97 20 00 00  	auipc	ra, 2
802147c6: e7 80 60 d3  	jalr	-714(ra)
;     while (true) {}
802147ca: 09 a0        	j	0x802147cc <.LBB184_2+0x24>
802147cc: 01 a0        	j	0x802147cc <.LBB184_2+0x24>

00000000802147ce <arch.riscv64.device_tree.Parser.print_ident.84>:
;         fn print_ident(identation: u32, comptime format: []const u8, args: anytype) void {
802147ce: 13 01 01 d4  	addi	sp, sp, -704
802147d2: 23 3c 11 2a  	sd	ra, 696(sp)
802147d6: 23 38 81 2a  	sd	s0, 688(sp)
802147da: 80 05        	addi	s0, sp, 704
802147dc: 23 38 b4 d6  	sd	a1, -656(s0)
802147e0: 23 2e a4 d6  	sw	a0, -644(s0)
802147e4: 01 45        	mv	a0, zero
;             var ident_it: u32 = 0;
802147e6: 23 2a a4 d8  	sw	a0, -620(s0)
;             while (ident_it < identation) : (ident_it += 1) {
802147ea: 09 a0        	j	0x802147ec <arch.riscv64.device_tree.Parser.print_ident.84+0x1e>
802147ec: 03 25 44 d9  	lw	a0, -620(s0)
802147f0: 83 25 c4 d7  	lw	a1, -644(s0)
802147f4: 63 76 b5 06  	bgeu	a0, a1, 0x80214860 <.LBB185_10+0x4c>
802147f8: 09 a0        	j	0x802147fa <arch.riscv64.device_tree.Parser.print_ident.84+0x2c>
802147fa: 01 45        	mv	a0, zero
802147fc: 23 30 a4 d6  	sd	a0, -672(s0)
80214800: 23 34 a4 da  	sd	a0, -600(s0)
80214804: 13 05 04 dc  	addi	a0, s0, -576
80214808: 23 38 a4 da  	sd	a0, -592(s0)
8021480c: 13 05 00 02  	addi	a0, zero, 32
80214810: 23 3c a4 da  	sd	a0, -584(s0)

0000000080214814 <.LBB185_10>:
;     _ = writer.write(bytes) catch unreachable;
80214814: 17 a6 00 00  	auipc	a2, 10
80214818: 13 06 c6 10  	addi	a2, a2, 268
8021481c: 13 05 84 d9  	addi	a0, s0, -616
80214820: 93 05 84 da  	addi	a1, s0, -600
80214824: 97 c0 fe ff  	auipc	ra, 1048556
80214828: e7 80 80 41  	jalr	1048(ra)
8021482c: 83 35 04 d6  	ld	a1, -672(s0)
80214830: 03 55 04 da  	lhu	a0, -608(s0)
80214834: 23 34 a4 d6  	sd	a0, -664(s0)
80214838: 63 0b b5 00  	beq	a0, a1, 0x8021484e <.LBB185_10+0x3a>
8021483c: 09 a0        	j	0x8021483e <.LBB185_10+0x2a>
8021483e: 83 35 84 d6  	ld	a1, -664(s0)
80214842: 13 05 84 da  	addi	a0, s0, -600
80214846: 97 c0 fe ff  	auipc	ra, 1048556
8021484a: e7 80 80 da  	jalr	-600(ra)
;             while (ident_it < identation) : (ident_it += 1) {
8021484e: 83 25 44 d9  	lw	a1, -620(s0)
80214852: 1b 85 15 00  	addiw	a0, a1, 1
80214856: 23 3c a4 d4  	sd	a0, -680(s0)
8021485a: 63 6f b5 06  	bltu	a0, a1, 0x802148d8 <.LBB185_11>
8021485e: 71 a0        	j	0x802148ea <.LBB185_11+0x12>
;             print(format, args);
80214860: 83 35 04 d7  	ld	a1, -656(s0)
80214864: 88 65        	ld	a0, 8(a1)
80214866: 23 34 a4 d8  	sd	a0, -632(s0)
8021486a: 88 61        	ld	a0, 0(a1)
8021486c: 23 30 a4 d8  	sd	a0, -640(s0)
80214870: 01 45        	mv	a0, zero
80214872: 23 34 a4 d4  	sd	a0, -696(s0)
80214876: 23 3c a4 ec  	sd	a0, -296(s0)
8021487a: 13 05 04 ef  	addi	a0, s0, -272
8021487e: 23 30 a4 ee  	sd	a0, -288(s0)
80214882: 13 05 00 02  	addi	a0, zero, 32
80214886: 23 34 a4 ee  	sd	a0, -280(s0)
;     writer.print(format, args) catch unreachable;
8021488a: 88 61        	ld	a0, 0(a1)
8021488c: 23 34 a4 ec  	sd	a0, -312(s0)
80214890: 88 65        	ld	a0, 8(a1)
80214892: 23 38 a4 ec  	sd	a0, -304(s0)
80214896: 13 05 84 ed  	addi	a0, s0, -296
8021489a: 97 40 00 00  	auipc	ra, 4
8021489e: e7 80 60 a0  	jalr	-1530(ra)
802148a2: 83 35 84 d4  	ld	a1, -696(s0)
802148a6: 23 13 a4 ec  	sh	a0, -314(s0)
802148aa: 41 66        	lui	a2, 16
802148ac: 7d 36        	addiw	a2, a2, -1
802148ae: 71 8d        	and	a0, a0, a2
802148b0: 23 38 a4 d4  	sd	a0, -688(s0)
802148b4: 63 0b b5 00  	beq	a0, a1, 0x802148ca <.LBB185_10+0xb6>
802148b8: 09 a0        	j	0x802148ba <.LBB185_10+0xa6>
802148ba: 83 35 04 d5  	ld	a1, -688(s0)
802148be: 13 05 84 ed  	addi	a0, s0, -296
802148c2: 97 c0 fe ff  	auipc	ra, 1048556
802148c6: e7 80 c0 d2  	jalr	-724(ra)
;         fn print_ident(identation: u32, comptime format: []const u8, args: anytype) void {
802148ca: 03 34 01 2b  	ld	s0, 688(sp)
802148ce: 83 30 81 2b  	ld	ra, 696(sp)
802148d2: 13 01 01 2c  	addi	sp, sp, 704
802148d6: 82 80        	ret

00000000802148d8 <.LBB185_11>:
;             while (ident_it < identation) : (ident_it += 1) {
802148d8: 17 95 00 00  	auipc	a0, 9
802148dc: 13 05 85 ba  	addi	a0, a0, -1112
802148e0: 81 45        	mv	a1, zero
802148e2: 97 b0 fe ff  	auipc	ra, 1048555
802148e6: e7 80 e0 7b  	jalr	1982(ra)
802148ea: 03 35 84 d5  	ld	a0, -680(s0)
802148ee: 23 2a a4 d8  	sw	a0, -620(s0)
802148f2: ed bd        	j	0x802147ec <arch.riscv64.device_tree.Parser.print_ident.84+0x1e>

00000000802148f4 <arch.riscv64.device_tree.Parser.parse_int.86>:
;         fn parse_int(self: *@This(), comptime Int: type) Int {
802148f4: 1d 71        	addi	sp, sp, -96
802148f6: 86 ec        	sd	ra, 88(sp)
802148f8: a2 e8        	sd	s0, 80(sp)
802148fa: 80 10        	addi	s0, sp, 96
802148fc: 23 34 a4 fc  	sd	a0, -56(s0)
;             const int = read_big_endian(Int, self.slice[self.i..]);
80214900: aa 85        	mv	a1, a0
80214902: 23 38 b4 fa  	sd	a1, -80(s0)
80214906: 0c 69        	ld	a1, 16(a0)
80214908: 23 3c b4 fa  	sd	a1, -72(s0)
8021490c: 08 65        	ld	a0, 8(a0)
8021490e: 23 30 a4 fc  	sd	a0, -64(s0)
80214912: 63 7c b5 00  	bgeu	a0, a1, 0x8021492a <.LBB186_7+0x12>
80214916: 09 a0        	j	0x80214918 <.LBB186_7>

0000000080214918 <.LBB186_7>:
80214918: 17 95 00 00  	auipc	a0, 9
8021491c: 13 05 85 9e  	addi	a0, a0, -1560
80214920: 81 45        	mv	a1, zero
80214922: 97 b0 fe ff  	auipc	ra, 1048555
80214926: e7 80 e0 77  	jalr	1918(ra)
8021492a: 81 45        	mv	a1, zero
8021492c: 05 45        	addi	a0, zero, 1
;             const int = read_big_endian(Int, self.slice[self.i..]);
8021492e: 63 1c b5 00  	bne	a0, a1, 0x80214946 <.LBB186_8+0x12>
80214932: 09 a0        	j	0x80214934 <.LBB186_8>

0000000080214934 <.LBB186_8>:
80214934: 17 95 00 00  	auipc	a0, 9
80214938: 13 05 c5 9c  	addi	a0, a0, -1588
8021493c: 81 45        	mv	a1, zero
8021493e: 97 b0 fe ff  	auipc	ra, 1048555
80214942: e7 80 20 76  	jalr	1890(ra)
80214946: 03 35 04 fc  	ld	a0, -64(s0)
8021494a: 03 36 84 fb  	ld	a2, -72(s0)
8021494e: 83 35 04 fb  	ld	a1, -80(s0)
80214952: 8c 61        	ld	a1, 0(a1)
80214954: b2 95        	add	a1, a1, a2
80214956: 11 8d        	sub	a0, a0, a2
80214958: 23 3c b4 fc  	sd	a1, -40(s0)
8021495c: 23 30 a4 fe  	sd	a0, -32(s0)
80214960: 13 05 84 fd  	addi	a0, s0, -40
80214964: 97 30 ff ff  	auipc	ra, 1048563
80214968: e7 80 20 25  	jalr	594(ra)
8021496c: 23 38 a4 fc  	sd	a0, -48(s0)
;             self.i += @sizeOf(Int);
80214970: 03 35 84 fc  	ld	a0, -56(s0)
80214974: 93 05 05 01  	addi	a1, a0, 16
80214978: 23 30 b4 fa  	sd	a1, -96(s0)
8021497c: 0c 69        	ld	a1, 16(a0)
8021497e: 13 85 85 00  	addi	a0, a1, 8
80214982: 23 34 a4 fa  	sd	a0, -88(s0)
80214986: 63 7c b5 00  	bgeu	a0, a1, 0x8021499e <.LBB186_9+0x12>
8021498a: 09 a0        	j	0x8021498c <.LBB186_9>

000000008021498c <.LBB186_9>:
8021498c: 17 95 00 00  	auipc	a0, 9
80214990: 13 05 45 af  	addi	a0, a0, -1292
80214994: 81 45        	mv	a1, zero
80214996: 97 b0 fe ff  	auipc	ra, 1048555
8021499a: e7 80 a0 70  	jalr	1802(ra)
8021499e: 03 35 84 fa  	ld	a0, -88(s0)
802149a2: 83 35 04 fa  	ld	a1, -96(s0)
802149a6: 88 e1        	sd	a0, 0(a1)
;             return int;
802149a8: 03 35 04 fd  	ld	a0, -48(s0)
802149ac: 23 34 a4 fe  	sd	a0, -24(s0)
802149b0: 46 64        	ld	s0, 80(sp)
802149b2: e6 60        	ld	ra, 88(sp)
802149b4: 25 61        	addi	sp, sp, 96
802149b6: 82 80        	ret

00000000802149b8 <arch.riscv64.device_tree.Parser.parse_and_print_freq>:
;         fn parse_and_print_freq(self: *@This(), property_value_descriptor: Property.ValueDescriptor) void {
802149b8: 0d 71        	addi	sp, sp, -352
802149ba: 86 ee        	sd	ra, 344(sp)
802149bc: a2 ea        	sd	s0, 336(sp)
802149be: 80 12        	addi	s0, sp, 352
802149c0: 23 3c a4 ea  	sd	a0, -328(s0)
;             switch (property_value_descriptor.len) {
802149c4: 03 e5 05 00  	lwu	a0, 0(a1)
802149c8: 23 38 a4 ea  	sd	a0, -336(s0)
802149cc: 91 45        	addi	a1, zero, 4
802149ce: 63 0b b5 02  	beq	a0, a1, 0x80214a04 <.LBB187_9+0x10>
802149d2: 09 a0        	j	0x802149d4 <arch.riscv64.device_tree.Parser.parse_and_print_freq+0x1c>
802149d4: 03 35 04 eb  	ld	a0, -336(s0)
802149d8: 01 25        	sext.w	a0, a0
802149da: a1 45        	addi	a1, zero, 8
;             switch (property_value_descriptor.len) {
802149dc: 63 0c b5 00  	beq	a0, a1, 0x802149f4 <.LBB187_9>
802149e0: 09 a0        	j	0x802149e2 <.LBB187_8>

00000000802149e2 <.LBB187_8>:
;                 else => unreachable,
802149e2: 17 95 00 00  	auipc	a0, 9
802149e6: 13 05 e5 aa  	addi	a0, a0, -1362
802149ea: 81 45        	mv	a1, zero
802149ec: 97 b0 fe ff  	auipc	ra, 1048555
802149f0: e7 80 40 6b  	jalr	1716(ra)

00000000802149f4 <.LBB187_9>:
;                     TODO(@src());
802149f4: 17 a5 00 00  	auipc	a0, 10
802149f8: 13 05 c5 f4  	addi	a0, a0, -180
802149fc: 97 b0 fe ff  	auipc	ra, 1048555
80214a00: e7 80 60 7d  	jalr	2006(ra)
;                     const value = self.parse_int(u32);
80214a04: 03 35 84 eb  	ld	a0, -328(s0)
80214a08: 97 30 ff ff  	auipc	ra, 1048563
80214a0c: e7 80 80 4c  	jalr	1224(ra)
80214a10: 23 24 a4 ec  	sw	a0, -312(s0)
;                     print("{} Hz", .{value});
80214a14: 23 20 a4 ec  	sw	a0, -320(s0)
80214a18: 81 45        	mv	a1, zero
80214a1a: 23 30 b4 ea  	sd	a1, -352(s0)
80214a1e: 23 3c b4 ec  	sd	a1, -296(s0)
80214a22: 93 05 04 ef  	addi	a1, s0, -272
80214a26: 23 30 b4 ee  	sd	a1, -288(s0)
80214a2a: 93 05 00 02  	addi	a1, zero, 32
80214a2e: 23 34 b4 ee  	sd	a1, -280(s0)
;     writer.print(format, args) catch unreachable;
80214a32: 23 28 a4 ec  	sw	a0, -304(s0)
80214a36: 13 05 84 ed  	addi	a0, s0, -296
80214a3a: 93 05 04 ec  	addi	a1, s0, -320
80214a3e: 97 40 00 00  	auipc	ra, 4
80214a42: e7 80 00 c1  	jalr	-1008(ra)
80214a46: 83 35 04 ea  	ld	a1, -352(s0)
80214a4a: 23 17 a4 ec  	sh	a0, -306(s0)
80214a4e: 41 66        	lui	a2, 16
80214a50: 7d 36        	addiw	a2, a2, -1
80214a52: 71 8d        	and	a0, a0, a2
80214a54: 23 34 a4 ea  	sd	a0, -344(s0)
80214a58: 63 0b b5 00  	beq	a0, a1, 0x80214a6e <.LBB187_9+0x7a>
80214a5c: 09 a0        	j	0x80214a5e <.LBB187_9+0x6a>
80214a5e: 83 35 84 ea  	ld	a1, -344(s0)
80214a62: 13 05 84 ed  	addi	a0, s0, -296
80214a66: 97 c0 fe ff  	auipc	ra, 1048556
80214a6a: e7 80 80 b8  	jalr	-1144(ra)
;             switch (property_value_descriptor.len) {
80214a6e: 09 a0        	j	0x80214a70 <.LBB187_9+0x7c>
;         fn parse_and_print_freq(self: *@This(), property_value_descriptor: Property.ValueDescriptor) void {
80214a70: 56 64        	ld	s0, 336(sp)
80214a72: f6 60        	ld	ra, 344(sp)
80214a74: 35 61        	addi	sp, sp, 352
80214a76: 82 80        	ret

0000000080214a78 <arch.riscv64.device_tree.Parser.print_ident.119>:
;         fn print_ident(identation: u32, comptime format: []const u8, args: anytype) void {
80214a78: 13 01 01 d6  	addi	sp, sp, -672
80214a7c: 23 3c 11 28  	sd	ra, 664(sp)
80214a80: 23 38 81 28  	sd	s0, 656(sp)
80214a84: 00 15        	addi	s0, sp, 672
80214a86: 23 34 b4 d8  	sd	a1, -632(s0)
80214a8a: 23 2a a4 d8  	sw	a0, -620(s0)
80214a8e: 01 45        	mv	a0, zero
;             var ident_it: u32 = 0;
80214a90: 23 2e a4 d8  	sw	a0, -612(s0)
;             while (ident_it < identation) : (ident_it += 1) {
80214a94: 09 a0        	j	0x80214a96 <arch.riscv64.device_tree.Parser.print_ident.119+0x1e>
80214a96: 03 25 c4 d9  	lw	a0, -612(s0)
80214a9a: 83 25 44 d9  	lw	a1, -620(s0)
80214a9e: 63 76 b5 06  	bgeu	a0, a1, 0x80214b0a <.LBB188_10+0x4c>
80214aa2: 09 a0        	j	0x80214aa4 <arch.riscv64.device_tree.Parser.print_ident.119+0x2c>
80214aa4: 01 45        	mv	a0, zero
80214aa6: 23 3c a4 d6  	sd	a0, -648(s0)
80214aaa: 23 38 a4 da  	sd	a0, -592(s0)
80214aae: 13 05 84 dc  	addi	a0, s0, -568
80214ab2: 23 3c a4 da  	sd	a0, -584(s0)
80214ab6: 13 05 00 02  	addi	a0, zero, 32
80214aba: 23 30 a4 dc  	sd	a0, -576(s0)

0000000080214abe <.LBB188_10>:
;     _ = writer.write(bytes) catch unreachable;
80214abe: 17 a6 00 00  	auipc	a2, 10
80214ac2: 13 06 26 e7  	addi	a2, a2, -398
80214ac6: 13 05 04 da  	addi	a0, s0, -608
80214aca: 93 05 04 db  	addi	a1, s0, -592
80214ace: 97 c0 fe ff  	auipc	ra, 1048556
80214ad2: e7 80 e0 16  	jalr	366(ra)
80214ad6: 83 35 84 d7  	ld	a1, -648(s0)
80214ada: 03 55 84 da  	lhu	a0, -600(s0)
80214ade: 23 30 a4 d8  	sd	a0, -640(s0)
80214ae2: 63 0b b5 00  	beq	a0, a1, 0x80214af8 <.LBB188_10+0x3a>
80214ae6: 09 a0        	j	0x80214ae8 <.LBB188_10+0x2a>
80214ae8: 83 35 04 d8  	ld	a1, -640(s0)
80214aec: 13 05 04 db  	addi	a0, s0, -592
80214af0: 97 c0 fe ff  	auipc	ra, 1048556
80214af4: e7 80 e0 af  	jalr	-1282(ra)
;             while (ident_it < identation) : (ident_it += 1) {
80214af8: 83 25 c4 d9  	lw	a1, -612(s0)
80214afc: 1b 85 15 00  	addiw	a0, a1, 1
80214b00: 23 38 a4 d6  	sd	a0, -656(s0)
80214b04: 63 69 b5 06  	bltu	a0, a1, 0x80214b76 <.LBB188_11>
80214b08: 41 a0        	j	0x80214b88 <.LBB188_11+0x12>
;             print(format, args);
80214b0a: 83 35 84 d8  	ld	a1, -632(s0)
80214b0e: 88 41        	lw	a0, 0(a1)
80214b10: 23 2c a4 d8  	sw	a0, -616(s0)
80214b14: 01 45        	mv	a0, zero
80214b16: 23 30 a4 d6  	sd	a0, -672(s0)
80214b1a: 23 3c a4 ec  	sd	a0, -296(s0)
80214b1e: 13 05 04 ef  	addi	a0, s0, -272
80214b22: 23 30 a4 ee  	sd	a0, -288(s0)
80214b26: 13 05 00 02  	addi	a0, zero, 32
80214b2a: 23 34 a4 ee  	sd	a0, -280(s0)
;     writer.print(format, args) catch unreachable;
80214b2e: 88 41        	lw	a0, 0(a1)
80214b30: 23 28 a4 ec  	sw	a0, -304(s0)
80214b34: 13 05 84 ed  	addi	a0, s0, -296
80214b38: 97 40 00 00  	auipc	ra, 4
80214b3c: e7 80 c0 88  	jalr	-1908(ra)
80214b40: 83 35 04 d6  	ld	a1, -672(s0)
80214b44: 23 17 a4 ec  	sh	a0, -306(s0)
80214b48: 41 66        	lui	a2, 16
80214b4a: 7d 36        	addiw	a2, a2, -1
80214b4c: 71 8d        	and	a0, a0, a2
80214b4e: 23 34 a4 d6  	sd	a0, -664(s0)
80214b52: 63 0b b5 00  	beq	a0, a1, 0x80214b68 <.LBB188_10+0xaa>
80214b56: 09 a0        	j	0x80214b58 <.LBB188_10+0x9a>
80214b58: 83 35 84 d6  	ld	a1, -664(s0)
80214b5c: 13 05 84 ed  	addi	a0, s0, -296
80214b60: 97 c0 fe ff  	auipc	ra, 1048556
80214b64: e7 80 e0 a8  	jalr	-1394(ra)
;         fn print_ident(identation: u32, comptime format: []const u8, args: anytype) void {
80214b68: 03 34 01 29  	ld	s0, 656(sp)
80214b6c: 83 30 81 29  	ld	ra, 664(sp)
80214b70: 13 01 01 2a  	addi	sp, sp, 672
80214b74: 82 80        	ret

0000000080214b76 <.LBB188_11>:
;             while (ident_it < identation) : (ident_it += 1) {
80214b76: 17 95 00 00  	auipc	a0, 9
80214b7a: 13 05 a5 90  	addi	a0, a0, -1782
80214b7e: 81 45        	mv	a1, zero
80214b80: 97 b0 fe ff  	auipc	ra, 1048555
80214b84: e7 80 00 52  	jalr	1312(ra)
80214b88: 03 35 04 d7  	ld	a0, -656(s0)
80214b8c: 23 2e a4 d8  	sw	a0, -612(s0)
80214b90: 19 b7        	j	0x80214a96 <arch.riscv64.device_tree.Parser.print_ident.119+0x1e>

0000000080214b92 <std.fmt.format.120>:
; pub fn format(
80214b92: 01 11        	addi	sp, sp, -32
;             try writer.writeAll(fmt[start_index..end_index]);
80214b94: 06 ec        	sd	ra, 24(sp)
80214b96: 22 e8        	sd	s0, 16(sp)
80214b98: 00 10        	addi	s0, sp, 32

0000000080214b9a <.LBB189_1>:
80214b9a: 97 a5 00 00  	auipc	a1, 10
80214b9e: 93 85 e5 dc  	addi	a1, a1, -562
80214ba2: 97 c0 fe ff  	auipc	ra, 1048556
80214ba6: e7 80 00 f1  	jalr	-240(ra)
80214baa: 23 16 a4 fe  	sh	a0, -20(s0)
80214bae: 01 45        	mv	a0, zero
; ) !void {
80214bb0: 23 17 a4 fe  	sh	a0, -18(s0)
80214bb4: 42 64        	ld	s0, 16(sp)
80214bb6: e2 60        	ld	ra, 24(sp)
80214bb8: 05 61        	addi	sp, sp, 32
80214bba: 82 80        	ret

0000000080214bbc <log.0.121>:
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80214bbc: 29 71        	addi	sp, sp, -320
80214bbe: 06 fe        	sd	ra, 312(sp)
80214bc0: 22 fa        	sd	s0, 304(sp)
80214bc2: 80 02        	addi	s0, sp, 320
80214bc4: 01 45        	mv	a0, zero
80214bc6: 23 30 a4 ec  	sd	a0, -320(s0)
80214bca: 23 3c a4 ec  	sd	a0, -296(s0)
80214bce: 13 05 04 ef  	addi	a0, s0, -272
80214bd2: 23 30 a4 ee  	sd	a0, -288(s0)
80214bd6: 13 05 00 02  	addi	a0, zero, 32
80214bda: 23 34 a4 ee  	sd	a0, -280(s0)
80214bde: 13 05 84 ed  	addi	a0, s0, -296
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80214be2: 97 20 00 00  	auipc	ra, 2
80214be6: e7 80 a0 3f  	jalr	1018(ra)
80214bea: 83 35 04 ec  	ld	a1, -320(s0)
80214bee: 23 1b a4 ec  	sh	a0, -298(s0)
80214bf2: 41 66        	lui	a2, 16
80214bf4: 7d 36        	addiw	a2, a2, -1
80214bf6: 71 8d        	and	a0, a0, a2
80214bf8: 23 34 a4 ec  	sd	a0, -312(s0)
80214bfc: 63 0b b5 00  	beq	a0, a1, 0x80214c12 <log.0.121+0x56>
80214c00: 09 a0        	j	0x80214c02 <log.0.121+0x46>
80214c02: 83 35 84 ec  	ld	a1, -312(s0)
80214c06: 13 05 84 ed  	addi	a0, s0, -296
80214c0a: 97 c0 fe ff  	auipc	ra, 1048556
80214c0e: e7 80 40 9e  	jalr	-1564(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80214c12: 52 74        	ld	s0, 304(sp)
80214c14: f2 70        	ld	ra, 312(sp)
80214c16: 31 61        	addi	sp, sp, 320
80214c18: 82 80        	ret

0000000080214c1a <panic.panic.122>:
; pub fn panic(comptime format: []const u8, args: anytype) noreturn {
80214c1a: 01 11        	addi	sp, sp, -32
80214c1c: 06 ec        	sd	ra, 24(sp)
80214c1e: 22 e8        	sd	s0, 16(sp)
80214c20: 00 10        	addi	s0, sp, 32
80214c22: 23 30 a4 fe  	sd	a0, -32(s0)
;     kernel.arch.disable_interrupts();
80214c26: 97 c0 fe ff  	auipc	ra, 1048556
80214c2a: e7 80 e0 89  	jalr	-1890(ra)
80214c2e: 03 35 04 fe  	ld	a0, -32(s0)

0000000080214c32 <.LBB191_2>:
;     kernel.arch.Writer.should_lock = true;
80214c32: 17 f6 65 00  	auipc	a2, 1631
80214c36: 13 06 e6 3c  	addi	a2, a2, 974
80214c3a: 85 45        	addi	a1, zero, 1
80214c3c: 23 00 b6 00  	sb	a1, 0(a2)
;     log.err(format, args);
80214c40: 0c 41        	lw	a1, 0(a0)
80214c42: 23 24 b4 fe  	sw	a1, -24(s0)
80214c46: 97 20 00 00  	auipc	ra, 2
80214c4a: e7 80 a0 3d  	jalr	986(ra)
;     while (true) {}
80214c4e: 09 a0        	j	0x80214c50 <.LBB191_2+0x1e>
80214c50: 01 a0        	j	0x80214c50 <.LBB191_2+0x1e>

0000000080214c52 <arch.riscv64.device_tree.Parser.skip_node>:
;         pub fn skip_node(self: *@This()) void {
80214c52: 79 71        	addi	sp, sp, -48
80214c54: 06 f4        	sd	ra, 40(sp)
80214c56: 22 f0        	sd	s0, 32(sp)
80214c58: 00 18        	addi	s0, sp, 48
80214c5a: 23 30 a4 fe  	sd	a0, -32(s0)
;             while (true) {
80214c5e: 09 a0        	j	0x80214c60 <arch.riscv64.device_tree.Parser.skip_node+0xe>
80214c60: 09 a0        	j	0x80214c62 <arch.riscv64.device_tree.Parser.skip_node+0x10>
;                 const skip_token = self.parse_token();
80214c62: 03 35 04 fe  	ld	a0, -32(s0)
80214c66: 97 30 ff ff  	auipc	ra, 1048563
80214c6a: e7 80 c0 fc  	jalr	-52(ra)
80214c6e: 23 26 a4 fe  	sw	a0, -20(s0)
;                 switch (skip_token) {
80214c72: 02 15        	slli	a0, a0, 32
80214c74: 01 91        	srli	a0, a0, 32
80214c76: 23 3c a4 fc  	sd	a0, -40(s0)
80214c7a: 85 45        	addi	a1, zero, 1
80214c7c: 63 0c b5 02  	beq	a0, a1, 0x80214cb4 <arch.riscv64.device_tree.Parser.skip_node+0x62>
80214c80: 09 a0        	j	0x80214c82 <arch.riscv64.device_tree.Parser.skip_node+0x30>
80214c82: 03 35 84 fd  	ld	a0, -40(s0)
80214c86: 01 25        	sext.w	a0, a0
80214c88: 89 45        	addi	a1, zero, 2
;                 switch (skip_token) {
80214c8a: 63 04 b5 02  	beq	a0, a1, 0x80214cb2 <arch.riscv64.device_tree.Parser.skip_node+0x60>
80214c8e: 09 a0        	j	0x80214c90 <arch.riscv64.device_tree.Parser.skip_node+0x3e>
80214c90: 03 35 84 fd  	ld	a0, -40(s0)
80214c94: 01 25        	sext.w	a0, a0
80214c96: 8d 45        	addi	a1, zero, 3
;                 switch (skip_token) {
80214c98: 63 0b b5 02  	beq	a0, a1, 0x80214cce <arch.riscv64.device_tree.Parser.skip_node+0x7c>
80214c9c: 09 a0        	j	0x80214c9e <arch.riscv64.device_tree.Parser.skip_node+0x4c>
;                     else => kernel.panic("token unimplemented: {}\n", .{skip_token}),
80214c9e: 03 25 c4 fe  	lw	a0, -20(s0)
80214ca2: 23 24 a4 fe  	sw	a0, -24(s0)
80214ca6: 13 05 84 fe  	addi	a0, s0, -24
80214caa: 97 20 00 00  	auipc	ra, 2
80214cae: e7 80 e0 46  	jalr	1134(ra)
;                         break;
80214cb2: 35 a0        	j	0x80214cde <arch.riscv64.device_tree.Parser.skip_node+0x8c>
;                         self.skip_cstr();
80214cb4: 03 35 04 fe  	ld	a0, -32(s0)
80214cb8: 97 20 00 00  	auipc	ra, 2
80214cbc: e7 80 80 49  	jalr	1176(ra)
;                         self.skip_node();
80214cc0: 03 35 04 fe  	ld	a0, -32(s0)
80214cc4: 97 00 00 00  	auipc	ra, 0
80214cc8: e7 80 e0 f8  	jalr	-114(ra)
;                 switch (skip_token) {
80214ccc: 01 a8        	j	0x80214cdc <arch.riscv64.device_tree.Parser.skip_node+0x8a>
;                         self.skip_property();
80214cce: 03 35 04 fe  	ld	a0, -32(s0)
80214cd2: 97 00 00 00  	auipc	ra, 0
80214cd6: e7 80 40 01  	jalr	20(ra)
;                 switch (skip_token) {
80214cda: 09 a0        	j	0x80214cdc <arch.riscv64.device_tree.Parser.skip_node+0x8a>
;             while (true) {
80214cdc: 51 b7        	j	0x80214c60 <arch.riscv64.device_tree.Parser.skip_node+0xe>
;         pub fn skip_node(self: *@This()) void {
80214cde: 02 74        	ld	s0, 32(sp)
80214ce0: a2 70        	ld	ra, 40(sp)
80214ce2: 45 61        	addi	sp, sp, 48
80214ce4: 82 80        	ret

0000000080214ce6 <arch.riscv64.device_tree.Parser.skip_property>:
;         fn skip_property(self: *@This()) void {
80214ce6: 79 71        	addi	sp, sp, -48
80214ce8: 06 f4        	sd	ra, 40(sp)
80214cea: 22 f0        	sd	s0, 32(sp)
80214cec: 00 18        	addi	s0, sp, 48
80214cee: aa 85        	mv	a1, a0
80214cf0: 23 30 b4 fe  	sd	a1, -32(s0)
80214cf4: 13 05 84 fe  	addi	a0, s0, -24
;             const descriptor = self.parse_property_value_descriptor();
80214cf8: 23 3c a4 fc  	sd	a0, -40(s0)
80214cfc: 97 30 ff ff  	auipc	ra, 1048563
80214d00: e7 80 40 0a  	jalr	164(ra)
80214d04: 83 35 84 fd  	ld	a1, -40(s0)
;             self.skip_property_value(descriptor);
80214d08: 03 35 04 fe  	ld	a0, -32(s0)
80214d0c: 97 20 00 00  	auipc	ra, 2
80214d10: e7 80 60 5b  	jalr	1462(ra)
;         fn skip_property(self: *@This()) void {
80214d14: 02 74        	ld	s0, 32(sp)
80214d16: a2 70        	ld	ra, 40(sp)
80214d18: 45 61        	addi	sp, sp, 48
80214d1a: 82 80        	ret

0000000080214d1c <panic.panic.123>:
; pub fn panic(comptime format: []const u8, args: anytype) noreturn {
80214d1c: 01 11        	addi	sp, sp, -32
80214d1e: 06 ec        	sd	ra, 24(sp)
80214d20: 22 e8        	sd	s0, 16(sp)
80214d22: 00 10        	addi	s0, sp, 32
80214d24: 23 30 a4 fe  	sd	a0, -32(s0)
;     kernel.arch.disable_interrupts();
80214d28: 97 b0 fe ff  	auipc	ra, 1048555
80214d2c: e7 80 c0 79  	jalr	1948(ra)
80214d30: 03 35 04 fe  	ld	a0, -32(s0)

0000000080214d34 <.LBB194_2>:
;     kernel.arch.Writer.should_lock = true;
80214d34: 17 f6 65 00  	auipc	a2, 1631
80214d38: 13 06 c6 2c  	addi	a2, a2, 716
80214d3c: 85 45        	addi	a1, zero, 1
80214d3e: 23 00 b6 00  	sb	a1, 0(a2)
;     log.err(format, args);
80214d42: 0c 41        	lw	a1, 0(a0)
80214d44: 23 24 b4 fe  	sw	a1, -24(s0)
80214d48: 97 20 00 00  	auipc	ra, 2
80214d4c: e7 80 00 64  	jalr	1600(ra)
;     while (true) {}
80214d50: 09 a0        	j	0x80214d52 <.LBB194_2+0x1e>
80214d52: 01 a0        	j	0x80214d52 <.LBB194_2+0x1e>

0000000080214d54 <std.mem.readIntNative.124>:
; pub fn readIntNative(comptime T: type, bytes: *const [@divExact(@typeInfo(T).Int.bits, 8)]u8) T {
80214d54: 79 71        	addi	sp, sp, -48
80214d56: 06 f4        	sd	ra, 40(sp)
80214d58: 22 f0        	sd	s0, 32(sp)
80214d5a: 00 18        	addi	s0, sp, 48
80214d5c: 23 30 a4 fe  	sd	a0, -32(s0)
;     return @ptrCast(*align(1) const T, bytes).*;
80214d60: aa 85        	mv	a1, a0
80214d62: 23 3c b4 fc  	sd	a1, -40(s0)
80214d66: 81 45        	mv	a1, zero
80214d68: 63 1c b5 00  	bne	a0, a1, 0x80214d80 <.LBB195_3+0x12>
80214d6c: 09 a0        	j	0x80214d6e <.LBB195_3>

0000000080214d6e <.LBB195_3>:
80214d6e: 17 85 00 00  	auipc	a0, 8
80214d72: 13 05 a5 78  	addi	a0, a0, 1930
80214d76: 81 45        	mv	a1, zero
80214d78: 97 b0 fe ff  	auipc	ra, 1048555
80214d7c: e7 80 80 32  	jalr	808(ra)
80214d80: 03 35 84 fd  	ld	a0, -40(s0)
80214d84: 03 46 05 00  	lbu	a2, 0(a0)
80214d88: 83 45 15 00  	lbu	a1, 1(a0)
80214d8c: a2 05        	slli	a1, a1, 8
80214d8e: d1 8d        	or	a1, a1, a2
80214d90: 03 46 25 00  	lbu	a2, 2(a0)
80214d94: 03 05 35 00  	lb	a0, 3(a0)
80214d98: 22 05        	slli	a0, a0, 8
80214d9a: 51 8d        	or	a0, a0, a2
80214d9c: 42 05        	slli	a0, a0, 16
80214d9e: 4d 8d        	or	a0, a0, a1
80214da0: 23 26 a4 fe  	sw	a0, -20(s0)
80214da4: 02 74        	ld	s0, 32(sp)
80214da6: a2 70        	ld	ra, 40(sp)
80214da8: 45 61        	addi	sp, sp, 48
80214daa: 82 80        	ret

0000000080214dac <arch.riscv64.device_tree.find_property.125>:
; pub fn find_property(self: *@This(), main_node: []const u8, property_name: []const u8, comptime search_type: SearchType, maybe_intermediate_nodes: ?[]const []const u8, comptime maybe_intermediate_search_types: ?[]const SearchType) ?StructureBlock.Parser.Property {
80214dac: 35 71        	addi	sp, sp, -160
80214dae: 06 ed        	sd	ra, 152(sp)
80214db0: 22 e9        	sd	s0, 144(sp)
80214db2: 00 11        	addi	s0, sp, 160
80214db4: 23 34 e4 f6  	sd	a4, -152(s0)
80214db8: 23 38 d4 f6  	sd	a3, -144(s0)
80214dbc: 23 34 c4 f8  	sd	a2, -120(s0)
80214dc0: 23 3c a4 f6  	sd	a0, -136(s0)
80214dc4: 23 38 b4 f8  	sd	a1, -112(s0)
80214dc8: 13 05 04 fd  	addi	a0, s0, -48
;     var parser = self.get_node_finding_parser();
80214dcc: 23 30 a4 f8  	sd	a0, -128(s0)
80214dd0: 97 70 ff ff  	auipc	ra, 1048567
80214dd4: e7 80 20 65  	jalr	1618(ra)
80214dd8: 83 35 04 f8  	ld	a1, -128(s0)
80214ddc: 03 36 84 f8  	ld	a2, -120(s0)
80214de0: 13 05 84 fb  	addi	a0, s0, -72
80214de4: 85 46        	addi	a3, zero, 1
;     if (parser.find_node_from_current_offset(main_node, search_type)) |_| {
80214de6: 97 70 ff ff  	auipc	ra, 1048567
80214dea: e7 80 60 74  	jalr	1862(ra)
80214dee: 03 45 84 fc  	lbu	a0, -56(s0)
80214df2: 81 45        	mv	a1, zero
80214df4: 63 0b b5 04  	beq	a0, a1, 0x80214e4a <arch.riscv64.device_tree.find_property.125+0x9e>
80214df8: 09 a0        	j	0x80214dfa <arch.riscv64.device_tree.find_property.125+0x4e>
80214dfa: 03 35 84 f6  	ld	a0, -152(s0)
80214dfe: 83 35 04 fc  	ld	a1, -64(s0)
80214e02: 23 38 b4 fa  	sd	a1, -80(s0)
80214e06: 83 35 84 fb  	ld	a1, -72(s0)
80214e0a: 23 34 b4 fa  	sd	a1, -88(s0)
;         if (maybe_intermediate_nodes) |intermediate_nodes| {
80214e0e: 03 45 05 01  	lbu	a0, 16(a0)
80214e12: 81 45        	mv	a1, zero
80214e14: 63 11 b5 02  	bne	a0, a1, 0x80214e36 <arch.riscv64.device_tree.find_property.125+0x8a>
80214e18: 09 a0        	j	0x80214e1a <arch.riscv64.device_tree.find_property.125+0x6e>
;             return parser.find_property_in_current_node(property_name);
80214e1a: 03 36 04 f7  	ld	a2, -144(s0)
80214e1e: 03 35 84 f7  	ld	a0, -136(s0)
80214e22: 93 05 04 fd  	addi	a1, s0, -48
80214e26: 97 80 ff ff  	auipc	ra, 1048568
80214e2a: e7 80 40 8d  	jalr	-1836(ra)
80214e2e: 4a 64        	ld	s0, 144(sp)
80214e30: ea 60        	ld	ra, 152(sp)
80214e32: 0d 61        	addi	sp, sp, 160
80214e34: 82 80        	ret
;         if (maybe_intermediate_nodes) |intermediate_nodes| {
80214e36: 03 35 84 f6  	ld	a0, -152(s0)
80214e3a: 0c 65        	ld	a1, 8(a0)
80214e3c: 23 30 b4 fa  	sd	a1, -96(s0)
80214e40: 08 61        	ld	a0, 0(a0)
80214e42: 23 3c a4 f8  	sd	a0, -104(s0)
80214e46: 09 a0        	j	0x80214e48 <arch.riscv64.device_tree.find_property.125+0x9c>
;     if (parser.find_node_from_current_offset(main_node, search_type)) |_| {
80214e48: 11 a0        	j	0x80214e4c <arch.riscv64.device_tree.find_property.125+0xa0>
80214e4a: 09 a0        	j	0x80214e4c <arch.riscv64.device_tree.find_property.125+0xa0>
80214e4c: 83 35 84 f7  	ld	a1, -136(s0)

0000000080214e50 <.LBB196_7>:
80214e50: 17 a5 00 00  	auipc	a0, 10
80214e54: 13 05 85 b3  	addi	a0, a0, -1224
;     return null;
80214e58: 10 71        	ld	a2, 32(a0)
80214e5a: 90 f1        	sd	a2, 32(a1)
80214e5c: 10 6d        	ld	a2, 24(a0)
80214e5e: 90 ed        	sd	a2, 24(a1)
80214e60: 10 69        	ld	a2, 16(a0)
80214e62: 90 e9        	sd	a2, 16(a1)
80214e64: 10 65        	ld	a2, 8(a0)
80214e66: 90 e5        	sd	a2, 8(a1)
80214e68: 08 61        	ld	a0, 0(a0)
80214e6a: 88 e1        	sd	a0, 0(a1)
80214e6c: 4a 64        	ld	s0, 144(sp)
80214e6e: ea 60        	ld	ra, 152(sp)
80214e70: 0d 61        	addi	sp, sp, 160
80214e72: 82 80        	ret

0000000080214e74 <arch.riscv64.device_tree.find_node>:
; pub fn find_node(self: *@This(), node: []const u8, comptime search_type: SearchType) ?FindNodeResult {
80214e74: 19 71        	addi	sp, sp, -128
80214e76: 86 fc        	sd	ra, 120(sp)
80214e78: a2 f8        	sd	s0, 112(sp)
80214e7a: 00 01        	addi	s0, sp, 128
80214e7c: 23 38 c4 f8  	sd	a2, -112(s0)
80214e80: 23 30 a4 f8  	sd	a0, -128(s0)
80214e84: 23 30 b4 fa  	sd	a1, -96(s0)
80214e88: 13 05 04 fd  	addi	a0, s0, -48
;     var parser = self.get_node_finding_parser();
80214e8c: 23 34 a4 f8  	sd	a0, -120(s0)
80214e90: 97 70 ff ff  	auipc	ra, 1048567
80214e94: e7 80 20 59  	jalr	1426(ra)
80214e98: 83 35 84 f8  	ld	a1, -120(s0)
80214e9c: 03 36 04 f9  	ld	a2, -112(s0)
80214ea0: 13 05 84 fb  	addi	a0, s0, -72
80214ea4: 81 46        	mv	a3, zero
;     if (parser.find_node_from_current_offset(node, search_type)) |node_name| {
80214ea6: 23 3c d4 f8  	sd	a3, -104(s0)
80214eaa: 97 70 ff ff  	auipc	ra, 1048567
80214eae: e7 80 20 68  	jalr	1666(ra)
80214eb2: 83 35 84 f9  	ld	a1, -104(s0)
80214eb6: 03 45 84 fc  	lbu	a0, -56(s0)
80214eba: 63 00 b5 06  	beq	a0, a1, 0x80214f1a <arch.riscv64.device_tree.find_node+0xa6>
80214ebe: 09 a0        	j	0x80214ec0 <arch.riscv64.device_tree.find_node+0x4c>
80214ec0: 83 35 04 f8  	ld	a1, -128(s0)
80214ec4: 03 35 04 fc  	ld	a0, -64(s0)
80214ec8: 23 38 a4 fa  	sd	a0, -80(s0)
80214ecc: 03 35 84 fb  	ld	a0, -72(s0)
80214ed0: 23 34 a4 fa  	sd	a0, -88(s0)
80214ed4: 05 48        	addi	a6, zero, 1
;         return FindNodeResult{
80214ed6: 23 88 05 03  	sb	a6, 48(a1)
;             .parser = parser,
80214eda: 83 37 04 fd  	ld	a5, -48(s0)
80214ede: 9c e1        	sd	a5, 0(a1)
80214ee0: 03 37 84 fd  	ld	a4, -40(s0)
80214ee4: 98 e5        	sd	a4, 8(a1)
80214ee6: 83 36 04 fe  	ld	a3, -32(s0)
80214eea: 94 e9        	sd	a3, 16(a1)
80214eec: 03 36 84 fe  	ld	a2, -24(s0)
80214ef0: 90 ed        	sd	a2, 24(a1)
;             .name = node_name,
80214ef2: 03 35 84 fa  	ld	a0, -88(s0)
80214ef6: 88 f1        	sd	a0, 32(a1)
80214ef8: 83 38 04 fb  	ld	a7, -80(s0)
80214efc: 23 b4 15 03  	sd	a7, 40(a1)
;         return FindNodeResult{
80214f00: 23 88 05 03  	sb	a6, 48(a1)
80214f04: 9c e1        	sd	a5, 0(a1)
80214f06: 98 e5        	sd	a4, 8(a1)
80214f08: 94 e9        	sd	a3, 16(a1)
80214f0a: 90 ed        	sd	a2, 24(a1)
80214f0c: 88 f1        	sd	a0, 32(a1)
80214f0e: 88 75        	ld	a0, 40(a1)
80214f10: 88 f5        	sd	a0, 40(a1)
80214f12: 46 74        	ld	s0, 112(sp)
80214f14: e6 70        	ld	ra, 120(sp)
80214f16: 09 61        	addi	sp, sp, 128
80214f18: 82 80        	ret
;     if (parser.find_node_from_current_offset(node, search_type)) |node_name| {
80214f1a: 09 a0        	j	0x80214f1c <arch.riscv64.device_tree.find_node+0xa8>
80214f1c: 83 35 04 f8  	ld	a1, -128(s0)

0000000080214f20 <.LBB197_4>:
80214f20: 17 a5 00 00  	auipc	a0, 10
80214f24: 13 05 05 a9  	addi	a0, a0, -1392
;     return null;
80214f28: 10 79        	ld	a2, 48(a0)
80214f2a: 90 f9        	sd	a2, 48(a1)
80214f2c: 10 75        	ld	a2, 40(a0)
80214f2e: 90 f5        	sd	a2, 40(a1)
80214f30: 10 71        	ld	a2, 32(a0)
80214f32: 90 f1        	sd	a2, 32(a1)
80214f34: 10 6d        	ld	a2, 24(a0)
80214f36: 90 ed        	sd	a2, 24(a1)
80214f38: 10 69        	ld	a2, 16(a0)
80214f3a: 90 e9        	sd	a2, 16(a1)
80214f3c: 10 65        	ld	a2, 8(a0)
80214f3e: 90 e5        	sd	a2, 8(a1)
80214f40: 08 61        	ld	a0, 0(a0)
80214f42: 88 e1        	sd	a0, 0(a1)
80214f44: 46 74        	ld	s0, 112(sp)
80214f46: e6 70        	ld	ra, 120(sp)
80214f48: 09 61        	addi	sp, sp, 128
80214f4a: 82 80        	ret

0000000080214f4c <arch.riscv64.device_tree.Parser.get_subnode>:
;         pub fn get_subnode(self: *@This()) ?[]const u8 {
80214f4c: 39 71        	addi	sp, sp, -64
80214f4e: 06 fc        	sd	ra, 56(sp)
80214f50: 22 f8        	sd	s0, 48(sp)
80214f52: 80 00        	addi	s0, sp, 64
80214f54: 23 34 a4 fc  	sd	a0, -56(s0)
80214f58: 23 38 b4 fc  	sd	a1, -48(s0)
;             while (true) {
80214f5c: 09 a0        	j	0x80214f5e <arch.riscv64.device_tree.Parser.get_subnode+0x12>
80214f5e: 09 a0        	j	0x80214f60 <arch.riscv64.device_tree.Parser.get_subnode+0x14>
;                 const token = self.parse_token();
80214f60: 03 35 04 fd  	ld	a0, -48(s0)
80214f64: 97 30 ff ff  	auipc	ra, 1048563
80214f68: e7 80 e0 cc  	jalr	-818(ra)
80214f6c: 23 26 a4 fe  	sw	a0, -20(s0)
;                 switch (token) {
80214f70: 02 15        	slli	a0, a0, 32
80214f72: 01 91        	srli	a0, a0, 32
80214f74: 23 30 a4 fc  	sd	a0, -64(s0)
80214f78: 85 45        	addi	a1, zero, 1
80214f7a: 63 0a b5 02  	beq	a0, a1, 0x80214fae <.LBB198_11+0x12>
80214f7e: 09 a0        	j	0x80214f80 <arch.riscv64.device_tree.Parser.get_subnode+0x34>
80214f80: 03 35 04 fc  	ld	a0, -64(s0)
80214f84: 01 25        	sext.w	a0, a0
80214f86: 89 45        	addi	a1, zero, 2
;                 switch (token) {
80214f88: 63 0a b5 04  	beq	a0, a1, 0x80214fdc <.LBB198_11+0x40>
80214f8c: 09 a0        	j	0x80214f8e <arch.riscv64.device_tree.Parser.get_subnode+0x42>
80214f8e: 03 35 04 fc  	ld	a0, -64(s0)
80214f92: 01 25        	sext.w	a0, a0
80214f94: 8d 45        	addi	a1, zero, 3
;                 switch (token) {
80214f96: 63 04 b5 04  	beq	a0, a1, 0x80214fde <.LBB198_11+0x42>
80214f9a: 09 a0        	j	0x80214f9c <.LBB198_11>

0000000080214f9c <.LBB198_11>:
;                     else => unreachable,
80214f9c: 17 85 00 00  	auipc	a0, 8
80214fa0: 13 05 45 4f  	addi	a0, a0, 1268
80214fa4: 81 45        	mv	a1, zero
80214fa6: 97 b0 fe ff  	auipc	ra, 1048555
80214faa: e7 80 a0 0f  	jalr	250(ra)
;                         const node_name = self.parse_begin_node();
80214fae: 83 35 04 fd  	ld	a1, -48(s0)
80214fb2: 13 05 84 fd  	addi	a0, s0, -40
80214fb6: 97 30 ff ff  	auipc	ra, 1048563
80214fba: e7 80 80 cf  	jalr	-776(ra)
80214fbe: 83 35 84 fc  	ld	a1, -56(s0)
80214fc2: 05 45        	addi	a0, zero, 1
;                         return node_name;
80214fc4: 23 88 a5 00  	sb	a0, 16(a1)
80214fc8: 03 35 84 fd  	ld	a0, -40(s0)
80214fcc: 88 e1        	sd	a0, 0(a1)
80214fce: 03 35 04 fe  	ld	a0, -32(s0)
80214fd2: 88 e5        	sd	a0, 8(a1)
80214fd4: 42 74        	ld	s0, 48(sp)
80214fd6: e2 70        	ld	ra, 56(sp)
80214fd8: 21 61        	addi	sp, sp, 64
80214fda: 82 80        	ret
;                     .end_node => break,
80214fdc: 09 a8        	j	0x80214fee <.LBB198_11+0x52>
;                     .property => self.skip_property(),
80214fde: 03 35 04 fd  	ld	a0, -48(s0)
80214fe2: 97 00 00 00  	auipc	ra, 0
80214fe6: e7 80 40 d0  	jalr	-764(ra)
;                 switch (token) {
80214fea: 09 a0        	j	0x80214fec <.LBB198_11+0x50>
;             while (true) {
80214fec: 8d bf        	j	0x80214f5e <arch.riscv64.device_tree.Parser.get_subnode+0x12>
80214fee: 83 35 84 fc  	ld	a1, -56(s0)

0000000080214ff2 <.LBB198_12>:
80214ff2: 17 a5 00 00  	auipc	a0, 10
80214ff6: 13 05 65 9f  	addi	a0, a0, -1546
;             return null;
80214ffa: 10 69        	ld	a2, 16(a0)
80214ffc: 90 e9        	sd	a2, 16(a1)
80214ffe: 10 65        	ld	a2, 8(a0)
80215000: 90 e5        	sd	a2, 8(a1)
80215002: 08 61        	ld	a0, 0(a0)
80215004: 88 e1        	sd	a0, 0(a1)
80215006: 42 74        	ld	s0, 48(sp)
80215008: e2 70        	ld	ra, 56(sp)
8021500a: 21 61        	addi	sp, sp, 64
8021500c: 82 80        	ret

000000008021500e <std.log.scoped(memory_map).debug>:
;         pub fn debug(
8021500e: 01 11        	addi	sp, sp, -32
;             log(.debug, scope, format, args);
80215010: 06 ec        	sd	ra, 24(sp)
80215012: 22 e8        	sd	s0, 16(sp)
80215014: 00 10        	addi	s0, sp, 32
80215016: 0c 65        	ld	a1, 8(a0)
80215018: 23 34 b4 fe  	sd	a1, -24(s0)
8021501c: 0c 61        	ld	a1, 0(a0)
8021501e: 23 30 b4 fe  	sd	a1, -32(s0)
80215022: 97 20 00 00  	auipc	ra, 2
80215026: e7 80 40 38  	jalr	900(ra)
;         ) void {
8021502a: 42 64        	ld	s0, 16(sp)
8021502c: e2 60        	ld	ra, 24(sp)
8021502e: 05 61        	addi	sp, sp, 32
80215030: 82 80        	ret

0000000080215032 <std.log.scoped(memory_map).debug.126>:
;         pub fn debug(
80215032: 41 11        	addi	sp, sp, -16
;             log(.debug, scope, format, args);
80215034: 06 e4        	sd	ra, 8(sp)
80215036: 22 e0        	sd	s0, 0(sp)
80215038: 00 08        	addi	s0, sp, 16
8021503a: 97 20 00 00  	auipc	ra, 2
8021503e: e7 80 00 3b  	jalr	944(ra)
;         ) void {
80215042: 02 64        	ld	s0, 0(sp)
80215044: a2 60        	ld	ra, 8(sp)
80215046: 41 01        	addi	sp, sp, 16
80215048: 82 80        	ret

000000008021504a <std.log.scoped(memory_map).debug.127>:
;         pub fn debug(
8021504a: 79 71        	addi	sp, sp, -48
;             log(.debug, scope, format, args);
8021504c: 06 f4        	sd	ra, 40(sp)
8021504e: 22 f0        	sd	s0, 32(sp)
80215050: 00 18        	addi	s0, sp, 48
80215052: 0c 69        	ld	a1, 16(a0)
80215054: 23 34 b4 fe  	sd	a1, -24(s0)
80215058: 0c 65        	ld	a1, 8(a0)
8021505a: 23 30 b4 fe  	sd	a1, -32(s0)
8021505e: 0c 61        	ld	a1, 0(a0)
80215060: 23 3c b4 fc  	sd	a1, -40(s0)
80215064: 97 20 00 00  	auipc	ra, 2
80215068: e7 80 60 3b  	jalr	950(ra)
;         ) void {
8021506c: 02 74        	ld	s0, 32(sp)
8021506e: a2 70        	ld	ra, 40(sp)
80215070: 45 61        	addi	sp, sp, 48
80215072: 82 80        	ret

0000000080215074 <std.log.scoped(memory_map).debug.128>:
;         pub fn debug(
80215074: 41 11        	addi	sp, sp, -16
;             log(.debug, scope, format, args);
80215076: 06 e4        	sd	ra, 8(sp)
80215078: 22 e0        	sd	s0, 0(sp)
8021507a: 00 08        	addi	s0, sp, 16
8021507c: 97 20 00 00  	auipc	ra, 2
80215080: e7 80 80 3e  	jalr	1000(ra)
;         ) void {
80215084: 02 64        	ld	s0, 0(sp)
80215086: a2 60        	ld	ra, 8(sp)
80215088: 41 01        	addi	sp, sp, 16
8021508a: 82 80        	ret

000000008021508c <std.log.scoped(memory_map).debug.129>:
;         pub fn debug(
8021508c: 79 71        	addi	sp, sp, -48
;             log(.debug, scope, format, args);
8021508e: 06 f4        	sd	ra, 40(sp)
80215090: 22 f0        	sd	s0, 32(sp)
80215092: 00 18        	addi	s0, sp, 48
80215094: 0c 69        	ld	a1, 16(a0)
80215096: 23 34 b4 fe  	sd	a1, -24(s0)
8021509a: 0c 65        	ld	a1, 8(a0)
8021509c: 23 30 b4 fe  	sd	a1, -32(s0)
802150a0: 0c 61        	ld	a1, 0(a0)
802150a2: 23 3c b4 fc  	sd	a1, -40(s0)
802150a6: 97 20 00 00  	auipc	ra, 2
802150aa: e7 80 e0 3e  	jalr	1006(ra)
;         ) void {
802150ae: 02 74        	ld	s0, 32(sp)
802150b0: a2 70        	ld	ra, 40(sp)
802150b2: 45 61        	addi	sp, sp, 48
802150b4: 82 80        	ret

00000000802150b6 <std.log.log.130>:
; fn log(
802150b6: 01 11        	addi	sp, sp, -32
802150b8: 06 ec        	sd	ra, 24(sp)
802150ba: 22 e8        	sd	s0, 16(sp)
802150bc: 00 10        	addi	s0, sp, 32
802150be: 0d 45        	addi	a0, zero, 3
;         break :blk level;
802150c0: a3 07 a4 fe  	sb	a0, -17(s0)
802150c4: 09 a0        	j	0x802150c6 <std.log.log.130+0x10>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
802150c6: 03 45 f4 fe  	lbu	a0, -17(s0)
802150ca: 8d 45        	addi	a1, zero, 3
802150cc: 63 18 b5 00  	bne	a0, a1, 0x802150dc <std.log.log.130+0x26>
802150d0: 09 a0        	j	0x802150d2 <std.log.log.130+0x1c>
;             root.log(message_level, scope, format, args);
802150d2: 97 20 00 00  	auipc	ra, 2
802150d6: e7 80 c0 40  	jalr	1036(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
802150da: 11 a0        	j	0x802150de <std.log.log.130+0x28>
802150dc: 09 a0        	j	0x802150de <std.log.log.130+0x28>
; ) void {
802150de: 42 64        	ld	s0, 16(sp)
802150e0: e2 60        	ld	ra, 24(sp)
802150e2: 05 61        	addi	sp, sp, 32
802150e4: 82 80        	ret

00000000802150e6 <std.log.log.131>:
; fn log(
802150e6: 39 71        	addi	sp, sp, -64
;     args: anytype,
802150e8: 06 fc        	sd	ra, 56(sp)
802150ea: 22 f8        	sd	s0, 48(sp)
802150ec: 80 00        	addi	s0, sp, 64
802150ee: 23 34 a4 fc  	sd	a0, -56(s0)
802150f2: 0d 45        	addi	a0, zero, 3
;         break :blk level;
802150f4: a3 07 a4 fe  	sb	a0, -17(s0)
802150f8: 09 a0        	j	0x802150fa <std.log.log.131+0x14>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
802150fa: 03 45 f4 fe  	lbu	a0, -17(s0)
802150fe: 8d 45        	addi	a1, zero, 3
80215100: 63 13 b5 02  	bne	a0, a1, 0x80215126 <std.log.log.131+0x40>
80215104: 09 a0        	j	0x80215106 <std.log.log.131+0x20>
;             root.log(message_level, scope, format, args);
80215106: 03 35 84 fc  	ld	a0, -56(s0)
8021510a: 0c 69        	ld	a1, 16(a0)
8021510c: 23 30 b4 fe  	sd	a1, -32(s0)
80215110: 0c 65        	ld	a1, 8(a0)
80215112: 23 3c b4 fc  	sd	a1, -40(s0)
80215116: 0c 61        	ld	a1, 0(a0)
80215118: 23 38 b4 fc  	sd	a1, -48(s0)
8021511c: 97 20 00 00  	auipc	ra, 2
80215120: e7 80 00 42  	jalr	1056(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80215124: 11 a0        	j	0x80215128 <std.log.log.131+0x42>
80215126: 09 a0        	j	0x80215128 <std.log.log.131+0x42>
; ) void {
80215128: 42 74        	ld	s0, 48(sp)
8021512a: e2 70        	ld	ra, 56(sp)
8021512c: 21 61        	addi	sp, sp, 64
8021512e: 82 80        	ret

0000000080215130 <std.log.log.132>:
; fn log(
80215130: 01 11        	addi	sp, sp, -32
80215132: 06 ec        	sd	ra, 24(sp)
80215134: 22 e8        	sd	s0, 16(sp)
80215136: 00 10        	addi	s0, sp, 32
80215138: 0d 45        	addi	a0, zero, 3
;         break :blk level;
8021513a: a3 07 a4 fe  	sb	a0, -17(s0)
8021513e: 09 a0        	j	0x80215140 <std.log.log.132+0x10>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80215140: 03 45 f4 fe  	lbu	a0, -17(s0)
80215144: 8d 45        	addi	a1, zero, 3
80215146: 63 18 b5 00  	bne	a0, a1, 0x80215156 <std.log.log.132+0x26>
8021514a: 09 a0        	j	0x8021514c <std.log.log.132+0x1c>
;             root.log(message_level, scope, format, args);
8021514c: 97 20 00 00  	auipc	ra, 2
80215150: e7 80 20 46  	jalr	1122(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80215154: 11 a0        	j	0x80215158 <std.log.log.132+0x28>
80215156: 09 a0        	j	0x80215158 <std.log.log.132+0x28>
; ) void {
80215158: 42 64        	ld	s0, 16(sp)
8021515a: e2 60        	ld	ra, 24(sp)
8021515c: 05 61        	addi	sp, sp, 32
8021515e: 82 80        	ret

0000000080215160 <std.log.log.133>:
; fn log(
80215160: 39 71        	addi	sp, sp, -64
;     args: anytype,
80215162: 06 fc        	sd	ra, 56(sp)
80215164: 22 f8        	sd	s0, 48(sp)
80215166: 80 00        	addi	s0, sp, 64
80215168: 23 30 a4 fc  	sd	a0, -64(s0)
8021516c: 0d 45        	addi	a0, zero, 3
;         break :blk level;
8021516e: a3 07 a4 fe  	sb	a0, -17(s0)
80215172: 09 a0        	j	0x80215174 <std.log.log.133+0x14>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80215174: 03 45 f4 fe  	lbu	a0, -17(s0)
80215178: 8d 45        	addi	a1, zero, 3
8021517a: 63 16 b5 02  	bne	a0, a1, 0x802151a6 <std.log.log.133+0x46>
8021517e: 09 a0        	j	0x80215180 <std.log.log.133+0x20>
;             root.log(message_level, scope, format, args);
80215180: 03 35 04 fc  	ld	a0, -64(s0)
80215184: 0c 6d        	ld	a1, 24(a0)
80215186: 23 30 b4 fe  	sd	a1, -32(s0)
8021518a: 0c 69        	ld	a1, 16(a0)
8021518c: 23 3c b4 fc  	sd	a1, -40(s0)
80215190: 0c 65        	ld	a1, 8(a0)
80215192: 23 38 b4 fc  	sd	a1, -48(s0)
80215196: 0c 61        	ld	a1, 0(a0)
80215198: 23 34 b4 fc  	sd	a1, -56(s0)
8021519c: 97 20 00 00  	auipc	ra, 2
802151a0: e7 80 00 47  	jalr	1136(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
802151a4: 11 a0        	j	0x802151a8 <std.log.log.133+0x48>
802151a6: 09 a0        	j	0x802151a8 <std.log.log.133+0x48>
; ) void {
802151a8: 42 74        	ld	s0, 48(sp)
802151aa: e2 70        	ld	ra, 56(sp)
802151ac: 21 61        	addi	sp, sp, 64
802151ae: 82 80        	ret

00000000802151b0 <std.log.scoped(Physical).debug.134>:
;         pub fn debug(
802151b0: 79 71        	addi	sp, sp, -48
;             log(.debug, scope, format, args);
802151b2: 06 f4        	sd	ra, 40(sp)
802151b4: 22 f0        	sd	s0, 32(sp)
802151b6: 00 18        	addi	s0, sp, 48
802151b8: 0c 6d        	ld	a1, 24(a0)
802151ba: 23 34 b4 fe  	sd	a1, -24(s0)
802151be: 0c 69        	ld	a1, 16(a0)
802151c0: 23 30 b4 fe  	sd	a1, -32(s0)
802151c4: 0c 65        	ld	a1, 8(a0)
802151c6: 23 3c b4 fc  	sd	a1, -40(s0)
802151ca: 0c 61        	ld	a1, 0(a0)
802151cc: 23 38 b4 fc  	sd	a1, -48(s0)
802151d0: 97 20 00 00  	auipc	ra, 2
802151d4: e7 80 40 4b  	jalr	1204(ra)
;         ) void {
802151d8: 02 74        	ld	s0, 32(sp)
802151da: a2 70        	ld	ra, 40(sp)
802151dc: 45 61        	addi	sp, sp, 48
802151de: 82 80        	ret

00000000802151e0 <std.log.log.135>:
; fn log(
802151e0: 01 11        	addi	sp, sp, -32
802151e2: 06 ec        	sd	ra, 24(sp)
802151e4: 22 e8        	sd	s0, 16(sp)
802151e6: 00 10        	addi	s0, sp, 32
802151e8: 0d 45        	addi	a0, zero, 3
;         break :blk level;
802151ea: a3 07 a4 fe  	sb	a0, -17(s0)
802151ee: 09 a0        	j	0x802151f0 <std.log.log.135+0x10>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
802151f0: 03 45 f4 fe  	lbu	a0, -17(s0)
802151f4: 8d 45        	addi	a1, zero, 3
802151f6: 63 18 b5 00  	bne	a0, a1, 0x80215206 <std.log.log.135+0x26>
802151fa: 09 a0        	j	0x802151fc <std.log.log.135+0x1c>
;             root.log(message_level, scope, format, args);
802151fc: 97 20 00 00  	auipc	ra, 2
80215200: e7 80 80 4d  	jalr	1240(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80215204: 11 a0        	j	0x80215208 <std.log.log.135+0x28>
80215206: 09 a0        	j	0x80215208 <std.log.log.135+0x28>
; ) void {
80215208: 42 64        	ld	s0, 16(sp)
8021520a: e2 60        	ld	ra, 24(sp)
8021520c: 05 61        	addi	sp, sp, 32
8021520e: 82 80        	ret

0000000080215210 <std.log.log.136>:
; fn log(
80215210: 01 11        	addi	sp, sp, -32
80215212: 06 ec        	sd	ra, 24(sp)
80215214: 22 e8        	sd	s0, 16(sp)
80215216: 00 10        	addi	s0, sp, 32
80215218: 0d 45        	addi	a0, zero, 3
;         break :blk level;
8021521a: a3 07 a4 fe  	sb	a0, -17(s0)
8021521e: 09 a0        	j	0x80215220 <std.log.log.136+0x10>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80215220: 03 45 f4 fe  	lbu	a0, -17(s0)
80215224: 8d 45        	addi	a1, zero, 3
80215226: 63 18 b5 00  	bne	a0, a1, 0x80215236 <std.log.log.136+0x26>
8021522a: 09 a0        	j	0x8021522c <std.log.log.136+0x1c>
;             root.log(message_level, scope, format, args);
8021522c: 97 20 00 00  	auipc	ra, 2
80215230: e7 80 60 50  	jalr	1286(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80215234: 11 a0        	j	0x80215238 <std.log.log.136+0x28>
80215236: 09 a0        	j	0x80215238 <std.log.log.136+0x28>
; ) void {
80215238: 42 64        	ld	s0, 16(sp)
8021523a: e2 60        	ld	ra, 24(sp)
8021523c: 05 61        	addi	sp, sp, 32
8021523e: 82 80        	ret

0000000080215240 <std.log.log.137>:
; fn log(
80215240: 79 71        	addi	sp, sp, -48
;     args: anytype,
80215242: 06 f4        	sd	ra, 40(sp)
80215244: 22 f0        	sd	s0, 32(sp)
80215246: 00 18        	addi	s0, sp, 48
80215248: 23 38 a4 fc  	sd	a0, -48(s0)
8021524c: 0d 45        	addi	a0, zero, 3
;         break :blk level;
8021524e: a3 07 a4 fe  	sb	a0, -17(s0)
80215252: 09 a0        	j	0x80215254 <std.log.log.137+0x14>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80215254: 03 45 f4 fe  	lbu	a0, -17(s0)
80215258: 8d 45        	addi	a1, zero, 3
8021525a: 63 10 b5 02  	bne	a0, a1, 0x8021527a <std.log.log.137+0x3a>
8021525e: 09 a0        	j	0x80215260 <std.log.log.137+0x20>
;             root.log(message_level, scope, format, args);
80215260: 03 35 04 fd  	ld	a0, -48(s0)
80215264: 0c 65        	ld	a1, 8(a0)
80215266: 23 30 b4 fe  	sd	a1, -32(s0)
8021526a: 0c 61        	ld	a1, 0(a0)
8021526c: 23 3c b4 fc  	sd	a1, -40(s0)
80215270: 97 20 00 00  	auipc	ra, 2
80215274: e7 80 00 52  	jalr	1312(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80215278: 11 a0        	j	0x8021527c <std.log.log.137+0x3c>
8021527a: 09 a0        	j	0x8021527c <std.log.log.137+0x3c>
; ) void {
8021527c: 02 74        	ld	s0, 32(sp)
8021527e: a2 70        	ld	ra, 40(sp)
80215280: 45 61        	addi	sp, sp, 48
80215282: 82 80        	ret

0000000080215284 <std.log.log.138>:
; fn log(
80215284: 01 11        	addi	sp, sp, -32
80215286: 06 ec        	sd	ra, 24(sp)
80215288: 22 e8        	sd	s0, 16(sp)
8021528a: 00 10        	addi	s0, sp, 32
8021528c: 0d 45        	addi	a0, zero, 3
;         break :blk level;
8021528e: a3 07 a4 fe  	sb	a0, -17(s0)
80215292: 09 a0        	j	0x80215294 <std.log.log.138+0x10>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80215294: 03 45 f4 fe  	lbu	a0, -17(s0)
80215298: 8d 45        	addi	a1, zero, 3
8021529a: 63 18 b5 00  	bne	a0, a1, 0x802152aa <std.log.log.138+0x26>
8021529e: 09 a0        	j	0x802152a0 <std.log.log.138+0x1c>
;             root.log(message_level, scope, format, args);
802152a0: 97 20 00 00  	auipc	ra, 2
802152a4: e7 80 c0 55  	jalr	1372(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
802152a8: 11 a0        	j	0x802152ac <std.log.log.138+0x28>
802152aa: 09 a0        	j	0x802152ac <std.log.log.138+0x28>
; ) void {
802152ac: 42 64        	ld	s0, 16(sp)
802152ae: e2 60        	ld	ra, 24(sp)
802152b0: 05 61        	addi	sp, sp, 32
802152b2: 82 80        	ret

00000000802152b4 <std.log.log.139>:
; fn log(
802152b4: 79 71        	addi	sp, sp, -48
;     args: anytype,
802152b6: 06 f4        	sd	ra, 40(sp)
802152b8: 22 f0        	sd	s0, 32(sp)
802152ba: 00 18        	addi	s0, sp, 48
802152bc: 23 3c a4 fc  	sd	a0, -40(s0)
802152c0: 0d 45        	addi	a0, zero, 3
;         break :blk level;
802152c2: a3 07 a4 fe  	sb	a0, -17(s0)
802152c6: 09 a0        	j	0x802152c8 <std.log.log.139+0x14>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
802152c8: 03 45 f4 fe  	lbu	a0, -17(s0)
802152cc: 8d 45        	addi	a1, zero, 3
802152ce: 63 1d b5 00  	bne	a0, a1, 0x802152e8 <std.log.log.139+0x34>
802152d2: 09 a0        	j	0x802152d4 <std.log.log.139+0x20>
;             root.log(message_level, scope, format, args);
802152d4: 03 35 84 fd  	ld	a0, -40(s0)
802152d8: 0c 61        	ld	a1, 0(a0)
802152da: 23 30 b4 fe  	sd	a1, -32(s0)
802152de: 97 20 00 00  	auipc	ra, 2
802152e2: e7 80 c0 57  	jalr	1404(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
802152e6: 11 a0        	j	0x802152ea <std.log.log.139+0x36>
802152e8: 09 a0        	j	0x802152ea <std.log.log.139+0x36>
; ) void {
802152ea: 02 74        	ld	s0, 32(sp)
802152ec: a2 70        	ld	ra, 40(sp)
802152ee: 45 61        	addi	sp, sp, 48
802152f0: 82 80        	ret

00000000802152f2 <log.0.140>:
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
802152f2: 29 71        	addi	sp, sp, -320
802152f4: 06 fe        	sd	ra, 312(sp)
802152f6: 22 fa        	sd	s0, 304(sp)
802152f8: 80 02        	addi	s0, sp, 320
802152fa: 01 45        	mv	a0, zero
802152fc: 23 30 a4 ec  	sd	a0, -320(s0)
80215300: 23 3c a4 ec  	sd	a0, -296(s0)
80215304: 13 05 04 ef  	addi	a0, s0, -272
80215308: 23 30 a4 ee  	sd	a0, -288(s0)
8021530c: 13 05 00 02  	addi	a0, zero, 32
80215310: 23 34 a4 ee  	sd	a0, -280(s0)
80215314: 13 05 84 ed  	addi	a0, s0, -296
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80215318: 97 20 00 00  	auipc	ra, 2
8021531c: e7 80 80 5a  	jalr	1448(ra)
80215320: 83 35 04 ec  	ld	a1, -320(s0)
80215324: 23 1b a4 ec  	sh	a0, -298(s0)
80215328: 41 66        	lui	a2, 16
8021532a: 7d 36        	addiw	a2, a2, -1
8021532c: 71 8d        	and	a0, a0, a2
8021532e: 23 34 a4 ec  	sd	a0, -312(s0)
80215332: 63 0b b5 00  	beq	a0, a1, 0x80215348 <log.0.140+0x56>
80215336: 09 a0        	j	0x80215338 <log.0.140+0x46>
80215338: 83 35 84 ec  	ld	a1, -312(s0)
8021533c: 13 05 84 ed  	addi	a0, s0, -296
80215340: 97 b0 fe ff  	auipc	ra, 1048555
80215344: e7 80 e0 2a  	jalr	686(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80215348: 52 74        	ld	s0, 304(sp)
8021534a: f2 70        	ld	ra, 312(sp)
8021534c: 31 61        	addi	sp, sp, 320
8021534e: 82 80        	ret

0000000080215350 <std.mem.readIntNative.141>:
; pub fn readIntNative(comptime T: type, bytes: *const [@divExact(@typeInfo(T).Int.bits, 8)]u8) T {
80215350: 79 71        	addi	sp, sp, -48
80215352: 06 f4        	sd	ra, 40(sp)
80215354: 22 f0        	sd	s0, 32(sp)
80215356: 00 18        	addi	s0, sp, 48
80215358: 23 30 a4 fe  	sd	a0, -32(s0)
;     return @ptrCast(*align(1) const T, bytes).*;
8021535c: aa 85        	mv	a1, a0
8021535e: 23 3c b4 fc  	sd	a1, -40(s0)
80215362: 81 45        	mv	a1, zero
80215364: 63 1c b5 00  	bne	a0, a1, 0x8021537c <.LBB215_3+0x12>
80215368: 09 a0        	j	0x8021536a <.LBB215_3>

000000008021536a <.LBB215_3>:
8021536a: 17 85 00 00  	auipc	a0, 8
8021536e: 13 05 e5 18  	addi	a0, a0, 398
80215372: 81 45        	mv	a1, zero
80215374: 97 b0 fe ff  	auipc	ra, 1048555
80215378: e7 80 c0 d2  	jalr	-724(ra)
8021537c: 03 35 84 fd  	ld	a0, -40(s0)
80215380: 03 46 05 00  	lbu	a2, 0(a0)
80215384: 83 45 15 00  	lbu	a1, 1(a0)
80215388: a2 05        	slli	a1, a1, 8
8021538a: 4d 8e        	or	a2, a2, a1
8021538c: 83 46 25 00  	lbu	a3, 2(a0)
80215390: 83 45 35 00  	lbu	a1, 3(a0)
80215394: a2 05        	slli	a1, a1, 8
80215396: d5 8d        	or	a1, a1, a3
80215398: c2 05        	slli	a1, a1, 16
8021539a: d1 8d        	or	a1, a1, a2
8021539c: 83 46 45 00  	lbu	a3, 4(a0)
802153a0: 03 46 55 00  	lbu	a2, 5(a0)
802153a4: 22 06        	slli	a2, a2, 8
802153a6: 55 8e        	or	a2, a2, a3
802153a8: 83 46 65 00  	lbu	a3, 6(a0)
802153ac: 03 45 75 00  	lbu	a0, 7(a0)
802153b0: 22 05        	slli	a0, a0, 8
802153b2: 55 8d        	or	a0, a0, a3
802153b4: 42 05        	slli	a0, a0, 16
802153b6: 51 8d        	or	a0, a0, a2
802153b8: 02 15        	slli	a0, a0, 32
802153ba: 4d 8d        	or	a0, a0, a1
802153bc: 23 34 a4 fe  	sd	a0, -24(s0)
802153c0: 02 74        	ld	s0, 32(sp)
802153c2: a2 70        	ld	ra, 40(sp)
802153c4: 45 61        	addi	sp, sp, 48
802153c6: 82 80        	ret

00000000802153c8 <std.log.scoped(PANIC).err.142>:
;         pub fn err(
802153c8: 39 71        	addi	sp, sp, -64
;             log(.err, scope, format, args);
802153ca: 06 fc        	sd	ra, 56(sp)
802153cc: 22 f8        	sd	s0, 48(sp)
802153ce: 80 00        	addi	s0, sp, 64
802153d0: 0c 71        	ld	a1, 32(a0)
802153d2: 23 34 b4 fe  	sd	a1, -24(s0)
802153d6: 0c 6d        	ld	a1, 24(a0)
802153d8: 23 30 b4 fe  	sd	a1, -32(s0)
802153dc: 0c 69        	ld	a1, 16(a0)
802153de: 23 3c b4 fc  	sd	a1, -40(s0)
802153e2: 0c 65        	ld	a1, 8(a0)
802153e4: 23 38 b4 fc  	sd	a1, -48(s0)
802153e8: 0c 61        	ld	a1, 0(a0)
802153ea: 23 34 b4 fc  	sd	a1, -56(s0)
802153ee: 97 20 00 00  	auipc	ra, 2
802153f2: e7 80 60 51  	jalr	1302(ra)
;         ) void {
802153f6: 42 74        	ld	s0, 48(sp)
802153f8: e2 70        	ld	ra, 56(sp)
802153fa: 21 61        	addi	sp, sp, 64
802153fc: 82 80        	ret

00000000802153fe <arch.riscv64.virtual.walk>:
; fn walk(pagetable: pagetable_t, virtual_addr: usize, alloc: bool) ?pte_t {
802153fe: 21 71        	addi	sp, sp, -448
80215400: 06 ff        	sd	ra, 440(sp)
80215402: 22 fb        	sd	s0, 432(sp)
80215404: 80 03        	addi	s0, sp, 448
80215406: 23 3c a4 ea  	sd	a0, -328(s0)
8021540a: 23 38 b4 ec  	sd	a1, -304(s0)
8021540e: 23 34 c4 ec  	sd	a2, -312(s0)
80215412: 13 f5 16 00  	andi	a0, a3, 1
80215416: a3 03 a4 ec  	sb	a0, -313(s0)
;     if (virtual_addr >= MAXVA) {
8021541a: 13 55 66 02  	srli	a0, a2, 38
8021541e: 81 45        	mv	a1, zero
80215420: 63 0c b5 00  	beq	a0, a1, 0x80215438 <.LBB217_45+0x12>
80215424: 09 a0        	j	0x80215426 <.LBB217_45>

0000000080215426 <.LBB217_45>:
;         @panic("walk: virtual_addr overflow");
80215426: 17 95 00 00  	auipc	a0, 9
8021542a: 13 05 a5 5e  	addi	a0, a0, 1514
8021542e: 81 45        	mv	a1, zero
80215430: 97 b0 fe ff  	auipc	ra, 1048555
80215434: e7 80 00 c7  	jalr	-912(ra)
;     if (virtual_addr >= MAXVA) {
80215438: 09 a0        	j	0x8021543a <.LBB217_45+0x14>
8021543a: 09 45        	addi	a0, zero, 2
;     var level: usize = 2;
8021543c: 23 38 a4 f0  	sd	a0, -240(s0)
;     var pg_iter: pagetable_t = pagetable;
80215440: 03 35 04 ed  	ld	a0, -304(s0)
80215444: 23 34 a4 f0  	sd	a0, -248(s0)
;     while (level > 0) : (level -= 1) {
80215448: 09 a0        	j	0x8021544a <.LBB217_45+0x24>
8021544a: 03 35 04 f1  	ld	a0, -240(s0)
8021544e: 81 45        	mv	a1, zero
80215450: 63 02 b5 24  	beq	a0, a1, 0x80215694 <.LBB217_53+0x52>
80215454: 09 a0        	j	0x80215456 <.LBB217_45+0x30>
;         const index = arch.PAGE_INDEX(level, virtual_addr);
80215456: 03 35 04 f1  	ld	a0, -240(s0)
8021545a: 83 35 84 ec  	ld	a1, -312(s0)
8021545e: 23 34 b4 ea  	sd	a1, -344(s0)
80215462: 23 30 a4 fa  	sd	a0, -96(s0)
80215466: 23 3c b4 f8  	sd	a1, -104(s0)
8021546a: 23 38 a4 fc  	sd	a0, -48(s0)
;     return @intCast(u6, PAGE_SHIFT + 9 * level);
8021546e: 93 15 35 00  	slli	a1, a0, 3
80215472: aa 95        	add	a1, a1, a0
80215474: 23 38 b4 ea  	sd	a1, -336(s0)
80215478: a5 45        	addi	a1, zero, 9
8021547a: 33 35 b5 02  	mulhu	a0, a0, a1
8021547e: 81 45        	mv	a1, zero
80215480: 63 0c b5 00  	beq	a0, a1, 0x80215498 <.LBB217_46+0x12>
80215484: 09 a0        	j	0x80215486 <.LBB217_46>

0000000080215486 <.LBB217_46>:
80215486: 17 85 00 00  	auipc	a0, 8
8021548a: 13 05 a5 ff  	addi	a0, a0, -6
8021548e: 81 45        	mv	a1, zero
80215490: 97 b0 fe ff  	auipc	ra, 1048555
80215494: e7 80 00 c1  	jalr	-1008(ra)
80215498: 83 35 04 eb  	ld	a1, -336(s0)
8021549c: 13 85 c5 00  	addi	a0, a1, 12
802154a0: 23 30 a4 ea  	sd	a0, -352(s0)
802154a4: 63 7c b5 00  	bgeu	a0, a1, 0x802154bc <.LBB217_47+0x12>
802154a8: 09 a0        	j	0x802154aa <.LBB217_47>

00000000802154aa <.LBB217_47>:
802154aa: 17 85 00 00  	auipc	a0, 8
802154ae: 13 05 65 fd  	addi	a0, a0, -42
802154b2: 81 45        	mv	a1, zero
802154b4: 97 b0 fe ff  	auipc	ra, 1048555
802154b8: e7 80 c0 be  	jalr	-1044(ra)
802154bc: 03 35 04 ea  	ld	a0, -352(s0)
802154c0: aa 85        	mv	a1, a0
802154c2: 23 3c b4 e8  	sd	a1, -360(s0)
802154c6: 93 75 f5 03  	andi	a1, a0, 63
802154ca: 63 0c b5 00  	beq	a0, a1, 0x802154e2 <.LBB217_48+0x12>
802154ce: 09 a0        	j	0x802154d0 <.LBB217_48>

00000000802154d0 <.LBB217_48>:
802154d0: 17 85 00 00  	auipc	a0, 8
802154d4: 13 05 05 e2  	addi	a0, a0, -480
802154d8: 81 45        	mv	a1, zero
802154da: 97 b0 fe ff  	auipc	ra, 1048555
802154de: e7 80 60 bc  	jalr	-1082(ra)
802154e2: 03 35 84 ea  	ld	a0, -344(s0)
802154e6: 83 35 84 e9  	ld	a1, -360(s0)
802154ea: 13 f6 f5 03  	andi	a2, a1, 63
802154ee: a3 0f c4 fc  	sb	a2, -33(s0)
;     const page_index = (virtual_address >> PAGE_INDEX_SHIFT(level)) & PAGE_INDEX_MASK;
802154f2: 33 55 b5 00  	srl	a0, a0, a1
802154f6: 93 75 f5 1f  	andi	a1, a0, 511
802154fa: 23 34 b4 fa  	sd	a1, -88(s0)
;     return page_index;
802154fe: 23 38 b4 fa  	sd	a1, -80(s0)
;         const index = arch.PAGE_INDEX(level, virtual_addr);
80215502: 23 30 b4 f0  	sd	a1, -256(s0)
;         const pte: *usize = &pg_iter[index];
80215506: 03 35 84 f0  	ld	a0, -248(s0)
8021550a: 8e 05        	slli	a1, a1, 3
8021550c: 2e 95        	add	a0, a0, a1
8021550e: 23 3c a4 ee  	sd	a0, -264(s0)
;         if (pte.* & arch.PTE_VALID != 0) {
80215512: 03 45 05 00  	lbu	a0, 0(a0)
80215516: 05 89        	andi	a0, a0, 1
80215518: 81 45        	mv	a1, zero
8021551a: 63 11 b5 14  	bne	a0, a1, 0x8021565c <.LBB217_53+0x1a>
8021551e: 09 a0        	j	0x80215520 <.LBB217_48+0x50>
;             if (alloc) {
80215520: 03 45 74 ec  	lbu	a0, -313(s0)
80215524: 81 45        	mv	a1, zero
80215526: 63 0c b5 10  	beq	a0, a1, 0x8021563e <.LBB217_52+0x70>
8021552a: 09 a0        	j	0x8021552c <.LBB217_48+0x5c>
8021552c: 13 05 84 ee  	addi	a0, s0, -280
80215530: 85 45        	addi	a1, zero, 1
;                 if (Physical.allocate1(1)) |page_physical| {
80215532: 97 80 ff ff  	auipc	ra, 1048568
80215536: e7 80 80 d2  	jalr	-728(ra)
8021553a: 03 45 04 ef  	lbu	a0, -272(s0)
8021553e: 81 45        	mv	a1, zero
80215540: 63 1c b5 00  	bne	a0, a1, 0x80215558 <.LBB217_49+0x12>
80215544: 09 a0        	j	0x80215546 <.LBB217_49>

0000000080215546 <.LBB217_49>:
;                     @panic("Out of memory");
80215546: 17 95 00 00  	auipc	a0, 9
8021554a: 13 05 a5 4d  	addi	a0, a0, 1242
8021554e: 81 45        	mv	a1, zero
80215550: 97 b0 fe ff  	auipc	ra, 1048555
80215554: e7 80 00 b5  	jalr	-1200(ra)
;                 if (Physical.allocate1(1)) |page_physical| {
80215558: 03 35 84 ee  	ld	a0, -280(s0)
8021555c: 23 30 a4 ee  	sd	a0, -288(s0)
;                     kernel.zero_a_page(kernel.arch.Virtual.AddressSpace.physical_to_virtual(page_physical));
80215560: 97 e0 ff ff  	auipc	ra, 1048574
80215564: e7 80 e0 04  	jalr	78(ra)
80215568: aa 85        	mv	a1, a0
8021556a: 23 3c b4 f0  	sd	a1, -232(s0)
8021556e: 23 38 b4 f4  	sd	a1, -176(s0)
80215572: 05 65        	lui	a0, 1
80215574: 23 34 a4 f4  	sd	a0, -184(s0)
80215578: 23 34 b4 e8  	sd	a1, -376(s0)
8021557c: 7d 35        	addiw	a0, a0, -1
8021557e: 23 38 a4 e8  	sd	a0, -368(s0)
80215582: 01 45        	mv	a0, zero
;     return n & (alignment - 1) == 0;
80215584: 63 0c a5 00  	beq	a0, a0, 0x8021559c <.LBB217_50+0x12>
80215588: 09 a0        	j	0x8021558a <.LBB217_50>

000000008021558a <.LBB217_50>:
8021558a: 17 85 00 00  	auipc	a0, 8
8021558e: 13 05 65 ef  	addi	a0, a0, -266
80215592: 81 45        	mv	a1, zero
80215594: 97 b0 fe ff  	auipc	ra, 1048555
80215598: e7 80 c0 b0  	jalr	-1268(ra)
8021559c: 03 35 84 e8  	ld	a0, -376(s0)
802155a0: 83 35 04 e9  	ld	a1, -368(s0)
802155a4: 6d 8d        	and	a0, a0, a1
802155a6: 93 35 15 00  	seqz	a1, a0
802155aa: a3 0f b4 f4  	sb	a1, -161(s0)

00000000802155ae <.LBB217_51>:
;     kernel.assert(@src(), is_aligned(page_address, kernel.arch.page_size));
802155ae: 17 95 00 00  	auipc	a0, 9
802155b2: 13 05 25 0e  	addi	a0, a0, 226
802155b6: 97 b0 fe ff  	auipc	ra, 1048555
802155ba: e7 80 60 c5  	jalr	-938(ra)
;     zero(@intToPtr([*]u8, page_address)[0..kernel.arch.page_size]);
802155be: 03 35 84 f1  	ld	a0, -232(s0)
802155c2: 23 30 a4 e8  	sd	a0, -384(s0)
802155c6: 81 45        	mv	a1, zero
802155c8: 63 1c b5 00  	bne	a0, a1, 0x802155e0 <.LBB217_52+0x12>
802155cc: 09 a0        	j	0x802155ce <.LBB217_52>

00000000802155ce <.LBB217_52>:
802155ce: 17 85 00 00  	auipc	a0, 8
802155d2: 13 05 a5 f2  	addi	a0, a0, -214
802155d6: 81 45        	mv	a1, zero
802155d8: 97 b0 fe ff  	auipc	ra, 1048555
802155dc: e7 80 80 ac  	jalr	-1336(ra)
802155e0: 03 35 04 e8  	ld	a0, -384(s0)
802155e4: 23 38 a4 f2  	sd	a0, -208(s0)
802155e8: 23 30 a4 f2  	sd	a0, -224(s0)
802155ec: 05 65        	lui	a0, 1
802155ee: 23 3c a4 e6  	sd	a0, -392(s0)
802155f2: 23 34 a4 f2  	sd	a0, -216(s0)
802155f6: 01 45        	mv	a0, zero
;     for (bytes) |*byte| byte.* = 0;
802155f8: 23 30 a4 f4  	sd	a0, -192(s0)
802155fc: 09 a0        	j	0x802155fe <.LBB217_52+0x30>
802155fe: 83 35 84 e7  	ld	a1, -392(s0)
80215602: 03 35 04 f4  	ld	a0, -192(s0)
80215606: 23 38 a4 e6  	sd	a0, -400(s0)
8021560a: 63 72 b5 02  	bgeu	a0, a1, 0x8021562e <.LBB217_52+0x60>
8021560e: 09 a0        	j	0x80215610 <.LBB217_52+0x42>
80215610: 03 35 04 e7  	ld	a0, -400(s0)
80215614: 83 35 04 f2  	ld	a1, -224(s0)
80215618: 33 86 a5 00  	add	a2, a1, a0
8021561c: 23 3c c4 f2  	sd	a2, -200(s0)
80215620: 81 45        	mv	a1, zero
80215622: 23 00 b6 00  	sb	a1, 0(a2)
80215626: 05 05        	addi	a0, a0, 1
80215628: 23 30 a4 f4  	sd	a0, -192(s0)
8021562c: c9 bf        	j	0x802155fe <.LBB217_52+0x30>
;                     pg_iter = @intToPtr([*]usize, page_physical);
8021562e: 03 35 04 ee  	ld	a0, -288(s0)
80215632: 23 34 a4 e6  	sd	a0, -408(s0)
80215636: 81 45        	mv	a1, zero
80215638: 63 07 b5 10  	beq	a0, a1, 0x80215746 <.LBB217_57>
8021563c: 31 aa        	j	0x80215758 <.LBB217_57+0x12>
8021563e: 83 35 84 eb  	ld	a1, -328(s0)

0000000080215642 <.LBB217_53>:
80215642: 17 f5 00 00  	auipc	a0, 15
80215646: 13 05 e5 73  	addi	a0, a0, 1854
;                 return null;
8021564a: 10 65        	ld	a2, 8(a0)
8021564c: 90 e5        	sd	a2, 8(a1)
8021564e: 08 61        	ld	a0, 0(a0)
80215650: 88 e1        	sd	a0, 0(a1)
80215652: 5a 74        	ld	s0, 432(sp)
80215654: fa 70        	ld	ra, 440(sp)
80215656: 39 61        	addi	sp, sp, 448
80215658: 82 80        	ret
;             if (alloc) {
8021565a: 1d a0        	j	0x80215680 <.LBB217_53+0x3e>
;             pg_iter = @intToPtr([*]usize, arch.PTE_TO_PA(pte.*));
8021565c: 03 35 84 ef  	ld	a0, -264(s0)
80215660: 08 61        	ld	a0, 0(a0)
80215662: 23 3c a4 fa  	sd	a0, -72(s0)
;     const pa = (pte >> 10) << 12;
80215666: 0a 05        	slli	a0, a0, 2
80215668: fd 75        	lui	a1, 1048575
8021566a: 6d 8d        	and	a0, a0, a1
8021566c: 23 30 a4 e6  	sd	a0, -416(s0)
80215670: 23 30 a4 fc  	sd	a0, -64(s0)
;     return pa;
80215674: 23 34 a4 fc  	sd	a0, -56(s0)
80215678: 81 45        	mv	a1, zero
;             pg_iter = @intToPtr([*]usize, arch.PTE_TO_PA(pte.*));
8021567a: 63 04 b5 12  	beq	a0, a1, 0x802157a2 <.LBB217_59>
8021567e: 1d aa        	j	0x802157b4 <.LBB217_59+0x12>
;         if (pte.* & arch.PTE_VALID != 0) {
80215680: 09 a0        	j	0x80215682 <.LBB217_53+0x40>
;     while (level > 0) : (level -= 1) {
80215682: 03 35 04 f1  	ld	a0, -240(s0)
80215686: 93 05 f5 ff  	addi	a1, a0, -1
8021568a: 23 3c b4 e4  	sd	a1, -424(s0)
8021568e: 63 68 b5 14  	bltu	a0, a1, 0x802157de <.LBB217_61>
80215692: b9 aa        	j	0x802157f0 <.LBB217_61+0x12>
;     const index = arch.PAGE_INDEX(0, virtual_addr);
80215694: 03 35 84 ec  	ld	a0, -312(s0)
80215698: 23 38 a4 e4  	sd	a0, -432(s0)
8021569c: 81 45        	mv	a1, zero
8021569e: 23 30 b4 f8  	sd	a1, -128(s0)
802156a2: 23 3c a4 f6  	sd	a0, -136(s0)
802156a6: 23 30 b4 fe  	sd	a1, -32(s0)
802156aa: 05 45        	addi	a0, zero, 1
;     return @intCast(u6, PAGE_SHIFT + 9 * level);
802156ac: 63 1c b5 00  	bne	a0, a1, 0x802156c4 <.LBB217_54+0x12>
802156b0: 09 a0        	j	0x802156b2 <.LBB217_54>

00000000802156b2 <.LBB217_54>:
802156b2: 17 85 00 00  	auipc	a0, 8
802156b6: 13 05 e5 dc  	addi	a0, a0, -562
802156ba: 81 45        	mv	a1, zero
802156bc: 97 b0 fe ff  	auipc	ra, 1048555
802156c0: e7 80 40 9e  	jalr	-1564(ra)
802156c4: 31 45        	addi	a0, zero, 12
802156c6: 23 34 a4 e4  	sd	a0, -440(s0)
802156ca: 81 45        	mv	a1, zero
802156cc: 05 45        	addi	a0, zero, 1
;     return @intCast(u6, PAGE_SHIFT + 9 * level);
802156ce: 63 1c b5 00  	bne	a0, a1, 0x802156e6 <.LBB217_55+0x12>
802156d2: 09 a0        	j	0x802156d4 <.LBB217_55>

00000000802156d4 <.LBB217_55>:
802156d4: 17 85 00 00  	auipc	a0, 8
802156d8: 13 05 c5 da  	addi	a0, a0, -596
802156dc: 81 45        	mv	a1, zero
802156de: 97 b0 fe ff  	auipc	ra, 1048555
802156e2: e7 80 20 9c  	jalr	-1598(ra)
802156e6: 03 35 84 e4  	ld	a0, -440(s0)
802156ea: 23 30 a4 e4  	sd	a0, -448(s0)
802156ee: 81 45        	mv	a1, zero
802156f0: 05 45        	addi	a0, zero, 1
802156f2: 63 1c b5 00  	bne	a0, a1, 0x8021570a <.LBB217_56+0x12>
802156f6: 09 a0        	j	0x802156f8 <.LBB217_56>

00000000802156f8 <.LBB217_56>:
802156f8: 17 85 00 00  	auipc	a0, 8
802156fc: 13 05 85 bf  	addi	a0, a0, -1032
80215700: 81 45        	mv	a1, zero
80215702: 97 b0 fe ff  	auipc	ra, 1048555
80215706: e7 80 e0 99  	jalr	-1634(ra)
8021570a: 83 35 84 eb  	ld	a1, -328(s0)
8021570e: 03 35 04 e5  	ld	a0, -432(s0)
80215712: 03 36 04 e4  	ld	a2, -448(s0)
80215716: a3 07 c4 fe  	sb	a2, -17(s0)
;     const page_index = (virtual_address >> PAGE_INDEX_SHIFT(level)) & PAGE_INDEX_MASK;
8021571a: 33 55 c5 00  	srl	a0, a0, a2
8021571e: 13 76 f5 1f  	andi	a2, a0, 511
80215722: 23 34 c4 f8  	sd	a2, -120(s0)
;     return page_index;
80215726: 23 38 c4 f8  	sd	a2, -112(s0)
;     const index = arch.PAGE_INDEX(0, virtual_addr);
8021572a: 23 3c c4 ec  	sd	a2, -296(s0)
;     return @ptrToInt(&pg_iter[index]);
8021572e: 03 35 84 f0  	ld	a0, -248(s0)
80215732: 0e 06        	slli	a2, a2, 3
80215734: 32 95        	add	a0, a0, a2
80215736: 05 46        	addi	a2, zero, 1
80215738: 23 84 c5 00  	sb	a2, 8(a1)
8021573c: 88 e1        	sd	a0, 0(a1)
8021573e: 5a 74        	ld	s0, 432(sp)
80215740: fa 70        	ld	ra, 440(sp)
80215742: 39 61        	addi	sp, sp, 448
80215744: 82 80        	ret

0000000080215746 <.LBB217_57>:
;                     pg_iter = @intToPtr([*]usize, page_physical);
80215746: 17 85 00 00  	auipc	a0, 8
8021574a: 13 05 25 db  	addi	a0, a0, -590
8021574e: 81 45        	mv	a1, zero
80215750: 97 b0 fe ff  	auipc	ra, 1048555
80215754: e7 80 00 95  	jalr	-1712(ra)
80215758: 03 35 84 e6  	ld	a0, -408(s0)
8021575c: 1d 89        	andi	a0, a0, 7
8021575e: 81 45        	mv	a1, zero
80215760: 63 0c b5 00  	beq	a0, a1, 0x80215778 <.LBB217_58+0x12>
80215764: 09 a0        	j	0x80215766 <.LBB217_58>

0000000080215766 <.LBB217_58>:
80215766: 17 85 00 00  	auipc	a0, 8
8021576a: 13 05 25 ee  	addi	a0, a0, -286
8021576e: 81 45        	mv	a1, zero
80215770: 97 b0 fe ff  	auipc	ra, 1048555
80215774: e7 80 00 93  	jalr	-1744(ra)
80215778: 03 35 84 e6  	ld	a0, -408(s0)
8021577c: 23 34 a4 f0  	sd	a0, -248(s0)
;                     pte.* = arch.PA_TO_PTE(page_physical) | arch.PTE_VALID;
80215780: 83 35 84 ef  	ld	a1, -264(s0)
80215784: 03 35 04 ee  	ld	a0, -288(s0)
80215788: 23 30 a4 f6  	sd	a0, -160(s0)
;     const pte = (pa >> 12) << 10;
8021578c: 09 81        	srli	a0, a0, 2
8021578e: 13 75 05 c0  	andi	a0, a0, -1024
80215792: 23 34 a4 f6  	sd	a0, -152(s0)
;     return pte;
80215796: 23 38 a4 f6  	sd	a0, -144(s0)
;                     pte.* = arch.PA_TO_PTE(page_physical) | arch.PTE_VALID;
8021579a: 13 65 15 00  	ori	a0, a0, 1
8021579e: 88 e1        	sd	a0, 0(a1)
;                 if (Physical.allocate1(1)) |page_physical| {
802157a0: 6d bd        	j	0x8021565a <.LBB217_53+0x18>

00000000802157a2 <.LBB217_59>:
;             pg_iter = @intToPtr([*]usize, arch.PTE_TO_PA(pte.*));
802157a2: 17 85 00 00  	auipc	a0, 8
802157a6: 13 05 65 d5  	addi	a0, a0, -682
802157aa: 81 45        	mv	a1, zero
802157ac: 97 b0 fe ff  	auipc	ra, 1048555
802157b0: e7 80 40 8f  	jalr	-1804(ra)
802157b4: 03 35 04 e6  	ld	a0, -416(s0)
802157b8: 1d 89        	andi	a0, a0, 7
802157ba: 81 45        	mv	a1, zero
802157bc: 63 0c b5 00  	beq	a0, a1, 0x802157d4 <.LBB217_60+0x12>
802157c0: 09 a0        	j	0x802157c2 <.LBB217_60>

00000000802157c2 <.LBB217_60>:
802157c2: 17 85 00 00  	auipc	a0, 8
802157c6: 13 05 65 e8  	addi	a0, a0, -378
802157ca: 81 45        	mv	a1, zero
802157cc: 97 b0 fe ff  	auipc	ra, 1048555
802157d0: e7 80 40 8d  	jalr	-1836(ra)
802157d4: 03 35 04 e6  	ld	a0, -416(s0)
802157d8: 23 34 a4 f0  	sd	a0, -248(s0)
;         if (pte.* & arch.PTE_VALID != 0) {
802157dc: 5d b5        	j	0x80215682 <.LBB217_53+0x40>

00000000802157de <.LBB217_61>:
;     while (level > 0) : (level -= 1) {
802157de: 17 85 00 00  	auipc	a0, 8
802157e2: 13 05 25 ca  	addi	a0, a0, -862
802157e6: 81 45        	mv	a1, zero
802157e8: 97 b0 fe ff  	auipc	ra, 1048555
802157ec: e7 80 80 8b  	jalr	-1864(ra)
802157f0: 03 35 84 e5  	ld	a0, -424(s0)
802157f4: 23 38 a4 f0  	sd	a0, -240(s0)
802157f8: 89 b9        	j	0x8021544a <.LBB217_45+0x24>

00000000802157fa <log.0.143>:
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
802157fa: 29 71        	addi	sp, sp, -320
802157fc: 06 fe        	sd	ra, 312(sp)
802157fe: 22 fa        	sd	s0, 304(sp)
80215800: 80 02        	addi	s0, sp, 320
80215802: 01 45        	mv	a0, zero
80215804: 23 30 a4 ec  	sd	a0, -320(s0)
80215808: 23 3c a4 ec  	sd	a0, -296(s0)
8021580c: 13 05 04 ef  	addi	a0, s0, -272
80215810: 23 30 a4 ee  	sd	a0, -288(s0)
80215814: 13 05 00 02  	addi	a0, zero, 32
80215818: 23 34 a4 ee  	sd	a0, -280(s0)
8021581c: 13 05 84 ed  	addi	a0, s0, -296
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80215820: 97 20 00 00  	auipc	ra, 2
80215824: e7 80 a0 12  	jalr	298(ra)
80215828: 83 35 04 ec  	ld	a1, -320(s0)
8021582c: 23 1b a4 ec  	sh	a0, -298(s0)
80215830: 41 66        	lui	a2, 16
80215832: 7d 36        	addiw	a2, a2, -1
80215834: 71 8d        	and	a0, a0, a2
80215836: 23 34 a4 ec  	sd	a0, -312(s0)
8021583a: 63 0b b5 00  	beq	a0, a1, 0x80215850 <log.0.143+0x56>
8021583e: 09 a0        	j	0x80215840 <log.0.143+0x46>
80215840: 83 35 84 ec  	ld	a1, -312(s0)
80215844: 13 05 84 ed  	addi	a0, s0, -296
80215848: 97 b0 fe ff  	auipc	ra, 1048555
8021584c: e7 80 60 da  	jalr	-602(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80215850: 52 74        	ld	s0, 304(sp)
80215852: f2 70        	ld	ra, 312(sp)
80215854: 31 61        	addi	sp, sp, 320
80215856: 82 80        	ret

0000000080215858 <log.0.144>:
80215858: 4d 71        	addi	sp, sp, -336
8021585a: 86 e6        	sd	ra, 328(sp)
8021585c: a2 e2        	sd	s0, 320(sp)
8021585e: 80 0a        	addi	s0, sp, 336
80215860: aa 85        	mv	a1, a0
80215862: 01 45        	mv	a0, zero
80215864: 23 3c a4 ea  	sd	a0, -328(s0)
80215868: 23 3c a4 ec  	sd	a0, -296(s0)
8021586c: 13 05 04 ef  	addi	a0, s0, -272
80215870: 23 30 a4 ee  	sd	a0, -288(s0)
80215874: 13 05 00 02  	addi	a0, zero, 32
80215878: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
8021587c: 88 61        	ld	a0, 0(a1)
8021587e: 23 38 a4 ec  	sd	a0, -304(s0)
80215882: 13 05 84 ed  	addi	a0, s0, -296
80215886: 97 20 00 00  	auipc	ra, 2
8021588a: e7 80 80 10  	jalr	264(ra)
8021588e: 83 35 84 eb  	ld	a1, -328(s0)
80215892: 23 17 a4 ec  	sh	a0, -306(s0)
80215896: 41 66        	lui	a2, 16
80215898: 7d 36        	addiw	a2, a2, -1
8021589a: 71 8d        	and	a0, a0, a2
8021589c: 23 30 a4 ec  	sd	a0, -320(s0)
802158a0: 63 0b b5 00  	beq	a0, a1, 0x802158b6 <log.0.144+0x5e>
802158a4: 09 a0        	j	0x802158a6 <log.0.144+0x4e>
802158a6: 83 35 04 ec  	ld	a1, -320(s0)
802158aa: 13 05 84 ed  	addi	a0, s0, -296
802158ae: 97 b0 fe ff  	auipc	ra, 1048555
802158b2: e7 80 00 d4  	jalr	-704(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
802158b6: 16 64        	ld	s0, 320(sp)
802158b8: b6 60        	ld	ra, 328(sp)
802158ba: 71 61        	addi	sp, sp, 336
802158bc: 82 80        	ret

00000000802158be <std.log.scoped(PANIC).err.145>:
;         pub fn err(
802158be: 39 71        	addi	sp, sp, -64
;             log(.err, scope, format, args);
802158c0: 06 fc        	sd	ra, 56(sp)
802158c2: 22 f8        	sd	s0, 48(sp)
802158c4: 80 00        	addi	s0, sp, 64
802158c6: 0c 71        	ld	a1, 32(a0)
802158c8: 23 34 b4 fe  	sd	a1, -24(s0)
802158cc: 0c 6d        	ld	a1, 24(a0)
802158ce: 23 30 b4 fe  	sd	a1, -32(s0)
802158d2: 0c 69        	ld	a1, 16(a0)
802158d4: 23 3c b4 fc  	sd	a1, -40(s0)
802158d8: 0c 65        	ld	a1, 8(a0)
802158da: 23 38 b4 fc  	sd	a1, -48(s0)
802158de: 0c 61        	ld	a1, 0(a0)
802158e0: 23 34 b4 fc  	sd	a1, -56(s0)
802158e4: 97 20 00 00  	auipc	ra, 2
802158e8: e7 80 40 0f  	jalr	244(ra)
;         ) void {
802158ec: 42 74        	ld	s0, 48(sp)
802158ee: e2 70        	ld	ra, 56(sp)
802158f0: 21 61        	addi	sp, sp, 64
802158f2: 82 80        	ret

00000000802158f4 <log.0.146>:
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
802158f4: 29 71        	addi	sp, sp, -320
802158f6: 06 fe        	sd	ra, 312(sp)
802158f8: 22 fa        	sd	s0, 304(sp)
802158fa: 80 02        	addi	s0, sp, 320
802158fc: 01 45        	mv	a0, zero
802158fe: 23 30 a4 ec  	sd	a0, -320(s0)
80215902: 23 3c a4 ec  	sd	a0, -296(s0)
80215906: 13 05 04 ef  	addi	a0, s0, -272
8021590a: 23 30 a4 ee  	sd	a0, -288(s0)
8021590e: 13 05 00 02  	addi	a0, zero, 32
80215912: 23 34 a4 ee  	sd	a0, -280(s0)
80215916: 13 05 84 ed  	addi	a0, s0, -296
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
8021591a: 97 20 00 00  	auipc	ra, 2
8021591e: e7 80 40 10  	jalr	260(ra)
80215922: 83 35 04 ec  	ld	a1, -320(s0)
80215926: 23 1b a4 ec  	sh	a0, -298(s0)
8021592a: 41 66        	lui	a2, 16
8021592c: 7d 36        	addiw	a2, a2, -1
8021592e: 71 8d        	and	a0, a0, a2
80215930: 23 34 a4 ec  	sd	a0, -312(s0)
80215934: 63 0b b5 00  	beq	a0, a1, 0x8021594a <log.0.146+0x56>
80215938: 09 a0        	j	0x8021593a <log.0.146+0x46>
8021593a: 83 35 84 ec  	ld	a1, -312(s0)
8021593e: 13 05 84 ed  	addi	a0, s0, -296
80215942: 97 b0 fe ff  	auipc	ra, 1048555
80215946: e7 80 c0 ca  	jalr	-852(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
8021594a: 52 74        	ld	s0, 304(sp)
8021594c: f2 70        	ld	ra, 312(sp)
8021594e: 31 61        	addi	sp, sp, 320
80215950: 82 80        	ret

0000000080215952 <__zig_tag_name_arch.riscv64.virtio_common.ControlType>:
80215952: 01 11        	addi	sp, sp, -32
80215954: 06 ec        	sd	ra, 24(sp)
80215956: 22 e8        	sd	s0, 16(sp)
80215958: 00 10        	addi	s0, sp, 32
8021595a: aa 85        	mv	a1, a0
8021595c: 1b 85 05 00  	sext.w	a0, a1
80215960: 23 34 b4 fe  	sd	a1, -24(s0)
80215964: 93 05 00 10  	addi	a1, zero, 256
80215968: 63 0f b5 18  	beq	a0, a1, 0x80215b06 <.LBB222_50>
8021596c: 09 a0        	j	0x8021596e <__zig_tag_name_arch.riscv64.virtio_common.ControlType+0x1c>
8021596e: 03 35 84 fe  	ld	a0, -24(s0)
80215972: 01 25        	sext.w	a0, a0
80215974: 93 05 10 10  	addi	a1, zero, 257
80215978: 63 0f b5 18  	beq	a0, a1, 0x80215b16 <.LBB222_51>
8021597c: 09 a0        	j	0x8021597e <__zig_tag_name_arch.riscv64.virtio_common.ControlType+0x2c>
8021597e: 03 35 84 fe  	ld	a0, -24(s0)
80215982: 01 25        	sext.w	a0, a0
80215984: 93 05 20 10  	addi	a1, zero, 258
80215988: 63 0f b5 18  	beq	a0, a1, 0x80215b26 <.LBB222_52>
8021598c: 09 a0        	j	0x8021598e <__zig_tag_name_arch.riscv64.virtio_common.ControlType+0x3c>
8021598e: 03 35 84 fe  	ld	a0, -24(s0)
80215992: 01 25        	sext.w	a0, a0
80215994: 93 05 30 10  	addi	a1, zero, 259
80215998: 63 0f b5 18  	beq	a0, a1, 0x80215b36 <.LBB222_53>
8021599c: 09 a0        	j	0x8021599e <__zig_tag_name_arch.riscv64.virtio_common.ControlType+0x4c>
8021599e: 03 35 84 fe  	ld	a0, -24(s0)
802159a2: 01 25        	sext.w	a0, a0
802159a4: 93 05 40 10  	addi	a1, zero, 260
802159a8: 63 0f b5 18  	beq	a0, a1, 0x80215b46 <.LBB222_54>
802159ac: 09 a0        	j	0x802159ae <__zig_tag_name_arch.riscv64.virtio_common.ControlType+0x5c>
802159ae: 03 35 84 fe  	ld	a0, -24(s0)
802159b2: 01 25        	sext.w	a0, a0
802159b4: 93 05 50 10  	addi	a1, zero, 261
802159b8: 63 0f b5 18  	beq	a0, a1, 0x80215b56 <.LBB222_55>
802159bc: 09 a0        	j	0x802159be <__zig_tag_name_arch.riscv64.virtio_common.ControlType+0x6c>
802159be: 03 35 84 fe  	ld	a0, -24(s0)
802159c2: 01 25        	sext.w	a0, a0
802159c4: 93 05 60 10  	addi	a1, zero, 262
802159c8: 63 0f b5 18  	beq	a0, a1, 0x80215b66 <.LBB222_56>
802159cc: 09 a0        	j	0x802159ce <__zig_tag_name_arch.riscv64.virtio_common.ControlType+0x7c>
802159ce: 03 35 84 fe  	ld	a0, -24(s0)
802159d2: 01 25        	sext.w	a0, a0
802159d4: 93 05 70 10  	addi	a1, zero, 263
802159d8: 63 0f b5 18  	beq	a0, a1, 0x80215b76 <.LBB222_57>
802159dc: 09 a0        	j	0x802159de <__zig_tag_name_arch.riscv64.virtio_common.ControlType+0x8c>
802159de: 03 35 84 fe  	ld	a0, -24(s0)
802159e2: 01 25        	sext.w	a0, a0
802159e4: 93 05 80 10  	addi	a1, zero, 264
802159e8: 63 0f b5 18  	beq	a0, a1, 0x80215b86 <.LBB222_58>
802159ec: 09 a0        	j	0x802159ee <__zig_tag_name_arch.riscv64.virtio_common.ControlType+0x9c>
802159ee: 03 35 84 fe  	ld	a0, -24(s0)
802159f2: 01 25        	sext.w	a0, a0
802159f4: 93 05 90 10  	addi	a1, zero, 265
802159f8: 63 0f b5 18  	beq	a0, a1, 0x80215b96 <.LBB222_59>
802159fc: 09 a0        	j	0x802159fe <__zig_tag_name_arch.riscv64.virtio_common.ControlType+0xac>
802159fe: 03 35 84 fe  	ld	a0, -24(s0)
80215a02: 01 25        	sext.w	a0, a0
80215a04: 93 05 a0 10  	addi	a1, zero, 266
80215a08: 63 0f b5 18  	beq	a0, a1, 0x80215ba6 <.LBB222_60>
80215a0c: 09 a0        	j	0x80215a0e <__zig_tag_name_arch.riscv64.virtio_common.ControlType+0xbc>
80215a0e: 03 35 84 fe  	ld	a0, -24(s0)
80215a12: 01 25        	sext.w	a0, a0
80215a14: 93 05 00 30  	addi	a1, zero, 768
80215a18: 63 0f b5 18  	beq	a0, a1, 0x80215bb6 <.LBB222_61>
80215a1c: 09 a0        	j	0x80215a1e <__zig_tag_name_arch.riscv64.virtio_common.ControlType+0xcc>
80215a1e: 03 35 84 fe  	ld	a0, -24(s0)
80215a22: 01 25        	sext.w	a0, a0
80215a24: 93 05 10 30  	addi	a1, zero, 769
80215a28: 63 0f b5 18  	beq	a0, a1, 0x80215bc6 <.LBB222_62>
80215a2c: 09 a0        	j	0x80215a2e <__zig_tag_name_arch.riscv64.virtio_common.ControlType+0xdc>
80215a2e: 03 35 84 fe  	ld	a0, -24(s0)
80215a32: 01 25        	sext.w	a0, a0
80215a34: 85 65        	lui	a1, 1
80215a36: 9b 85 05 10  	addiw	a1, a1, 256
80215a3a: 63 0e b5 18  	beq	a0, a1, 0x80215bd6 <.LBB222_63>
80215a3e: 09 a0        	j	0x80215a40 <__zig_tag_name_arch.riscv64.virtio_common.ControlType+0xee>
80215a40: 03 35 84 fe  	ld	a0, -24(s0)
80215a44: 01 25        	sext.w	a0, a0
80215a46: 85 65        	lui	a1, 1
80215a48: 9b 85 15 10  	addiw	a1, a1, 257
80215a4c: 63 0d b5 18  	beq	a0, a1, 0x80215be6 <.LBB222_64>
80215a50: 09 a0        	j	0x80215a52 <__zig_tag_name_arch.riscv64.virtio_common.ControlType+0x100>
80215a52: 03 35 84 fe  	ld	a0, -24(s0)
80215a56: 01 25        	sext.w	a0, a0
80215a58: 85 65        	lui	a1, 1
80215a5a: 9b 85 25 10  	addiw	a1, a1, 258
80215a5e: 63 0c b5 18  	beq	a0, a1, 0x80215bf6 <.LBB222_65>
80215a62: 09 a0        	j	0x80215a64 <__zig_tag_name_arch.riscv64.virtio_common.ControlType+0x112>
80215a64: 03 35 84 fe  	ld	a0, -24(s0)
80215a68: 01 25        	sext.w	a0, a0
80215a6a: 85 65        	lui	a1, 1
80215a6c: 9b 85 35 10  	addiw	a1, a1, 259
80215a70: 63 0b b5 18  	beq	a0, a1, 0x80215c06 <.LBB222_66>
80215a74: 09 a0        	j	0x80215a76 <__zig_tag_name_arch.riscv64.virtio_common.ControlType+0x124>
80215a76: 03 35 84 fe  	ld	a0, -24(s0)
80215a7a: 01 25        	sext.w	a0, a0
80215a7c: 85 65        	lui	a1, 1
80215a7e: 9b 85 45 10  	addiw	a1, a1, 260
80215a82: 63 0a b5 18  	beq	a0, a1, 0x80215c16 <.LBB222_67>
80215a86: 09 a0        	j	0x80215a88 <__zig_tag_name_arch.riscv64.virtio_common.ControlType+0x136>
80215a88: 03 35 84 fe  	ld	a0, -24(s0)
80215a8c: 01 25        	sext.w	a0, a0
80215a8e: 85 65        	lui	a1, 1
80215a90: 9b 85 05 20  	addiw	a1, a1, 512
80215a94: 63 09 b5 18  	beq	a0, a1, 0x80215c26 <.LBB222_68>
80215a98: 09 a0        	j	0x80215a9a <__zig_tag_name_arch.riscv64.virtio_common.ControlType+0x148>
80215a9a: 03 35 84 fe  	ld	a0, -24(s0)
80215a9e: 01 25        	sext.w	a0, a0
80215aa0: 85 65        	lui	a1, 1
80215aa2: 9b 85 15 20  	addiw	a1, a1, 513
80215aa6: 63 08 b5 18  	beq	a0, a1, 0x80215c36 <.LBB222_69>
80215aaa: 09 a0        	j	0x80215aac <__zig_tag_name_arch.riscv64.virtio_common.ControlType+0x15a>
80215aac: 03 35 84 fe  	ld	a0, -24(s0)
80215ab0: 01 25        	sext.w	a0, a0
80215ab2: 85 65        	lui	a1, 1
80215ab4: 9b 85 25 20  	addiw	a1, a1, 514
80215ab8: 63 07 b5 18  	beq	a0, a1, 0x80215c46 <.LBB222_70>
80215abc: 09 a0        	j	0x80215abe <__zig_tag_name_arch.riscv64.virtio_common.ControlType+0x16c>
80215abe: 03 35 84 fe  	ld	a0, -24(s0)
80215ac2: 01 25        	sext.w	a0, a0
80215ac4: 85 65        	lui	a1, 1
80215ac6: 9b 85 35 20  	addiw	a1, a1, 515
80215aca: 63 06 b5 18  	beq	a0, a1, 0x80215c56 <.LBB222_71>
80215ace: 09 a0        	j	0x80215ad0 <__zig_tag_name_arch.riscv64.virtio_common.ControlType+0x17e>
80215ad0: 03 35 84 fe  	ld	a0, -24(s0)
80215ad4: 01 25        	sext.w	a0, a0
80215ad6: 85 65        	lui	a1, 1
80215ad8: 9b 85 45 20  	addiw	a1, a1, 516
80215adc: 63 05 b5 18  	beq	a0, a1, 0x80215c66 <.LBB222_72>
80215ae0: 09 a0        	j	0x80215ae2 <__zig_tag_name_arch.riscv64.virtio_common.ControlType+0x190>
80215ae2: 03 35 84 fe  	ld	a0, -24(s0)
80215ae6: 01 25        	sext.w	a0, a0
80215ae8: 85 65        	lui	a1, 1
80215aea: 9b 85 55 20  	addiw	a1, a1, 517
80215aee: 63 04 b5 18  	beq	a0, a1, 0x80215c76 <.LBB222_73>
80215af2: 09 a0        	j	0x80215af4 <.LBB222_49>

0000000080215af4 <.LBB222_49>:
80215af4: 17 85 00 00  	auipc	a0, 8
80215af8: 13 05 c5 16  	addi	a0, a0, 364
80215afc: 81 45        	mv	a1, zero
80215afe: 97 a0 fe ff  	auipc	ra, 1048554
80215b02: e7 80 20 5a  	jalr	1442(ra)

0000000080215b06 <.LBB222_50>:
80215b06: 17 95 00 00  	auipc	a0, 9
80215b0a: 13 05 a5 c5  	addi	a0, a0, -934
80215b0e: 42 64        	ld	s0, 16(sp)
80215b10: e2 60        	ld	ra, 24(sp)
80215b12: 05 61        	addi	sp, sp, 32
80215b14: 82 80        	ret

0000000080215b16 <.LBB222_51>:
80215b16: 17 95 00 00  	auipc	a0, 9
80215b1a: 13 05 a5 c5  	addi	a0, a0, -934
80215b1e: 42 64        	ld	s0, 16(sp)
80215b20: e2 60        	ld	ra, 24(sp)
80215b22: 05 61        	addi	sp, sp, 32
80215b24: 82 80        	ret

0000000080215b26 <.LBB222_52>:
80215b26: 17 95 00 00  	auipc	a0, 9
80215b2a: 13 05 a5 c5  	addi	a0, a0, -934
80215b2e: 42 64        	ld	s0, 16(sp)
80215b30: e2 60        	ld	ra, 24(sp)
80215b32: 05 61        	addi	sp, sp, 32
80215b34: 82 80        	ret

0000000080215b36 <.LBB222_53>:
80215b36: 17 95 00 00  	auipc	a0, 9
80215b3a: 13 05 a5 c5  	addi	a0, a0, -934
80215b3e: 42 64        	ld	s0, 16(sp)
80215b40: e2 60        	ld	ra, 24(sp)
80215b42: 05 61        	addi	sp, sp, 32
80215b44: 82 80        	ret

0000000080215b46 <.LBB222_54>:
80215b46: 17 95 00 00  	auipc	a0, 9
80215b4a: 13 05 a5 c5  	addi	a0, a0, -934
80215b4e: 42 64        	ld	s0, 16(sp)
80215b50: e2 60        	ld	ra, 24(sp)
80215b52: 05 61        	addi	sp, sp, 32
80215b54: 82 80        	ret

0000000080215b56 <.LBB222_55>:
80215b56: 17 95 00 00  	auipc	a0, 9
80215b5a: 13 05 a5 c5  	addi	a0, a0, -934
80215b5e: 42 64        	ld	s0, 16(sp)
80215b60: e2 60        	ld	ra, 24(sp)
80215b62: 05 61        	addi	sp, sp, 32
80215b64: 82 80        	ret

0000000080215b66 <.LBB222_56>:
80215b66: 17 95 00 00  	auipc	a0, 9
80215b6a: 13 05 a5 c5  	addi	a0, a0, -934
80215b6e: 42 64        	ld	s0, 16(sp)
80215b70: e2 60        	ld	ra, 24(sp)
80215b72: 05 61        	addi	sp, sp, 32
80215b74: 82 80        	ret

0000000080215b76 <.LBB222_57>:
80215b76: 17 95 00 00  	auipc	a0, 9
80215b7a: 13 05 a5 c5  	addi	a0, a0, -934
80215b7e: 42 64        	ld	s0, 16(sp)
80215b80: e2 60        	ld	ra, 24(sp)
80215b82: 05 61        	addi	sp, sp, 32
80215b84: 82 80        	ret

0000000080215b86 <.LBB222_58>:
80215b86: 17 95 00 00  	auipc	a0, 9
80215b8a: 13 05 a5 c5  	addi	a0, a0, -934
80215b8e: 42 64        	ld	s0, 16(sp)
80215b90: e2 60        	ld	ra, 24(sp)
80215b92: 05 61        	addi	sp, sp, 32
80215b94: 82 80        	ret

0000000080215b96 <.LBB222_59>:
80215b96: 17 95 00 00  	auipc	a0, 9
80215b9a: 13 05 a5 c5  	addi	a0, a0, -934
80215b9e: 42 64        	ld	s0, 16(sp)
80215ba0: e2 60        	ld	ra, 24(sp)
80215ba2: 05 61        	addi	sp, sp, 32
80215ba4: 82 80        	ret

0000000080215ba6 <.LBB222_60>:
80215ba6: 17 95 00 00  	auipc	a0, 9
80215baa: 13 05 a5 c5  	addi	a0, a0, -934
80215bae: 42 64        	ld	s0, 16(sp)
80215bb0: e2 60        	ld	ra, 24(sp)
80215bb2: 05 61        	addi	sp, sp, 32
80215bb4: 82 80        	ret

0000000080215bb6 <.LBB222_61>:
80215bb6: 17 95 00 00  	auipc	a0, 9
80215bba: 13 05 a5 c5  	addi	a0, a0, -934
80215bbe: 42 64        	ld	s0, 16(sp)
80215bc0: e2 60        	ld	ra, 24(sp)
80215bc2: 05 61        	addi	sp, sp, 32
80215bc4: 82 80        	ret

0000000080215bc6 <.LBB222_62>:
80215bc6: 17 95 00 00  	auipc	a0, 9
80215bca: 13 05 a5 c5  	addi	a0, a0, -934
80215bce: 42 64        	ld	s0, 16(sp)
80215bd0: e2 60        	ld	ra, 24(sp)
80215bd2: 05 61        	addi	sp, sp, 32
80215bd4: 82 80        	ret

0000000080215bd6 <.LBB222_63>:
80215bd6: 17 95 00 00  	auipc	a0, 9
80215bda: 13 05 a5 c5  	addi	a0, a0, -934
80215bde: 42 64        	ld	s0, 16(sp)
80215be0: e2 60        	ld	ra, 24(sp)
80215be2: 05 61        	addi	sp, sp, 32
80215be4: 82 80        	ret

0000000080215be6 <.LBB222_64>:
80215be6: 17 95 00 00  	auipc	a0, 9
80215bea: 13 05 a5 c5  	addi	a0, a0, -934
80215bee: 42 64        	ld	s0, 16(sp)
80215bf0: e2 60        	ld	ra, 24(sp)
80215bf2: 05 61        	addi	sp, sp, 32
80215bf4: 82 80        	ret

0000000080215bf6 <.LBB222_65>:
80215bf6: 17 95 00 00  	auipc	a0, 9
80215bfa: 13 05 a5 c5  	addi	a0, a0, -934
80215bfe: 42 64        	ld	s0, 16(sp)
80215c00: e2 60        	ld	ra, 24(sp)
80215c02: 05 61        	addi	sp, sp, 32
80215c04: 82 80        	ret

0000000080215c06 <.LBB222_66>:
80215c06: 17 95 00 00  	auipc	a0, 9
80215c0a: 13 05 a5 c5  	addi	a0, a0, -934
80215c0e: 42 64        	ld	s0, 16(sp)
80215c10: e2 60        	ld	ra, 24(sp)
80215c12: 05 61        	addi	sp, sp, 32
80215c14: 82 80        	ret

0000000080215c16 <.LBB222_67>:
80215c16: 17 95 00 00  	auipc	a0, 9
80215c1a: 13 05 a5 c5  	addi	a0, a0, -934
80215c1e: 42 64        	ld	s0, 16(sp)
80215c20: e2 60        	ld	ra, 24(sp)
80215c22: 05 61        	addi	sp, sp, 32
80215c24: 82 80        	ret

0000000080215c26 <.LBB222_68>:
80215c26: 17 95 00 00  	auipc	a0, 9
80215c2a: 13 05 a5 c5  	addi	a0, a0, -934
80215c2e: 42 64        	ld	s0, 16(sp)
80215c30: e2 60        	ld	ra, 24(sp)
80215c32: 05 61        	addi	sp, sp, 32
80215c34: 82 80        	ret

0000000080215c36 <.LBB222_69>:
80215c36: 17 95 00 00  	auipc	a0, 9
80215c3a: 13 05 a5 c5  	addi	a0, a0, -934
80215c3e: 42 64        	ld	s0, 16(sp)
80215c40: e2 60        	ld	ra, 24(sp)
80215c42: 05 61        	addi	sp, sp, 32
80215c44: 82 80        	ret

0000000080215c46 <.LBB222_70>:
80215c46: 17 95 00 00  	auipc	a0, 9
80215c4a: 13 05 a5 c5  	addi	a0, a0, -934
80215c4e: 42 64        	ld	s0, 16(sp)
80215c50: e2 60        	ld	ra, 24(sp)
80215c52: 05 61        	addi	sp, sp, 32
80215c54: 82 80        	ret

0000000080215c56 <.LBB222_71>:
80215c56: 17 95 00 00  	auipc	a0, 9
80215c5a: 13 05 a5 c5  	addi	a0, a0, -934
80215c5e: 42 64        	ld	s0, 16(sp)
80215c60: e2 60        	ld	ra, 24(sp)
80215c62: 05 61        	addi	sp, sp, 32
80215c64: 82 80        	ret

0000000080215c66 <.LBB222_72>:
80215c66: 17 95 00 00  	auipc	a0, 9
80215c6a: 13 05 a5 c5  	addi	a0, a0, -934
80215c6e: 42 64        	ld	s0, 16(sp)
80215c70: e2 60        	ld	ra, 24(sp)
80215c72: 05 61        	addi	sp, sp, 32
80215c74: 82 80        	ret

0000000080215c76 <.LBB222_73>:
80215c76: 17 95 00 00  	auipc	a0, 9
80215c7a: 13 05 a5 c5  	addi	a0, a0, -934
80215c7e: 42 64        	ld	s0, 16(sp)
80215c80: e2 60        	ld	ra, 24(sp)
80215c82: 05 61        	addi	sp, sp, 32
80215c84: 82 80        	ret

0000000080215c86 <panic.panic.147>:
; pub fn panic(comptime format: []const u8, args: anytype) noreturn {
80215c86: 79 71        	addi	sp, sp, -48
80215c88: 06 f4        	sd	ra, 40(sp)
80215c8a: 22 f0        	sd	s0, 32(sp)
80215c8c: 00 18        	addi	s0, sp, 48
80215c8e: 23 3c a4 fc  	sd	a0, -40(s0)
;     kernel.arch.disable_interrupts();
80215c92: 97 b0 fe ff  	auipc	ra, 1048555
80215c96: e7 80 20 83  	jalr	-1998(ra)
80215c9a: 03 35 84 fd  	ld	a0, -40(s0)

0000000080215c9e <.LBB223_2>:
;     kernel.arch.Writer.should_lock = true;
80215c9e: 17 e6 65 00  	auipc	a2, 1630
80215ca2: 13 06 26 36  	addi	a2, a2, 866
80215ca6: 85 45        	addi	a1, zero, 1
80215ca8: 23 00 b6 00  	sb	a1, 0(a2)
;     log.err(format, args);
80215cac: 0c 61        	ld	a1, 0(a0)
80215cae: 23 30 b4 fe  	sd	a1, -32(s0)
80215cb2: 0c 65        	ld	a1, 8(a0)
80215cb4: 23 34 b4 fe  	sd	a1, -24(s0)
80215cb8: 97 20 00 00  	auipc	ra, 2
80215cbc: e7 80 a0 da  	jalr	-598(ra)
;     while (true) {}
80215cc0: 09 a0        	j	0x80215cc2 <.LBB223_2+0x24>
80215cc2: 01 a0        	j	0x80215cc2 <.LBB223_2+0x24>

0000000080215cc4 <panic.panic.148>:
; pub fn panic(comptime format: []const u8, args: anytype) noreturn {
80215cc4: 39 71        	addi	sp, sp, -64
80215cc6: 06 fc        	sd	ra, 56(sp)
80215cc8: 22 f8        	sd	s0, 48(sp)
80215cca: 80 00        	addi	s0, sp, 64
80215ccc: 23 34 a4 fc  	sd	a0, -56(s0)
;     kernel.arch.disable_interrupts();
80215cd0: 97 a0 fe ff  	auipc	ra, 1048554
80215cd4: e7 80 40 7f  	jalr	2036(ra)
80215cd8: 03 35 84 fc  	ld	a0, -56(s0)

0000000080215cdc <.LBB224_2>:
;     kernel.arch.Writer.should_lock = true;
80215cdc: 17 e6 65 00  	auipc	a2, 1630
80215ce0: 13 06 46 32  	addi	a2, a2, 804
80215ce4: 85 45        	addi	a1, zero, 1
80215ce6: 23 00 b6 00  	sb	a1, 0(a2)
;     log.err(format, args);
80215cea: 0c 61        	ld	a1, 0(a0)
80215cec: 23 38 b4 fc  	sd	a1, -48(s0)
80215cf0: 0c 65        	ld	a1, 8(a0)
80215cf2: 23 3c b4 fc  	sd	a1, -40(s0)
80215cf6: 0c 69        	ld	a1, 16(a0)
80215cf8: 23 30 b4 fe  	sd	a1, -32(s0)
80215cfc: 0c 6d        	ld	a1, 24(a0)
80215cfe: 23 34 b4 fe  	sd	a1, -24(s0)
80215d02: 97 20 00 00  	auipc	ra, 2
80215d06: e7 80 40 d8  	jalr	-636(ra)
;     while (true) {}
80215d0a: 09 a0        	j	0x80215d0c <.LBB224_2+0x30>
80215d0c: 01 a0        	j	0x80215d0c <.LBB224_2+0x30>

0000000080215d0e <std.log.scoped(VirtioGPU).debug.149>:
;         pub fn debug(
80215d0e: 01 11        	addi	sp, sp, -32
;             log(.debug, scope, format, args);
80215d10: 06 ec        	sd	ra, 24(sp)
80215d12: 22 e8        	sd	s0, 16(sp)
80215d14: 00 10        	addi	s0, sp, 32
80215d16: 0c 65        	ld	a1, 8(a0)
80215d18: 23 34 b4 fe  	sd	a1, -24(s0)
80215d1c: 0c 61        	ld	a1, 0(a0)
80215d1e: 23 30 b4 fe  	sd	a1, -32(s0)
80215d22: 97 20 00 00  	auipc	ra, 2
80215d26: e7 80 40 d9  	jalr	-620(ra)
;         ) void {
80215d2a: 42 64        	ld	s0, 16(sp)
80215d2c: e2 60        	ld	ra, 24(sp)
80215d2e: 05 61        	addi	sp, sp, 32
80215d30: 82 80        	ret

0000000080215d32 <log.0.150>:
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80215d32: 29 71        	addi	sp, sp, -320
80215d34: 06 fe        	sd	ra, 312(sp)
80215d36: 22 fa        	sd	s0, 304(sp)
80215d38: 80 02        	addi	s0, sp, 320
80215d3a: 01 45        	mv	a0, zero
80215d3c: 23 30 a4 ec  	sd	a0, -320(s0)
80215d40: 23 3c a4 ec  	sd	a0, -296(s0)
80215d44: 13 05 04 ef  	addi	a0, s0, -272
80215d48: 23 30 a4 ee  	sd	a0, -288(s0)
80215d4c: 13 05 00 02  	addi	a0, zero, 32
80215d50: 23 34 a4 ee  	sd	a0, -280(s0)
80215d54: 13 05 84 ed  	addi	a0, s0, -296
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80215d58: 97 20 00 00  	auipc	ra, 2
80215d5c: e7 80 20 da  	jalr	-606(ra)
80215d60: 83 35 04 ec  	ld	a1, -320(s0)
80215d64: 23 1b a4 ec  	sh	a0, -298(s0)
80215d68: 41 66        	lui	a2, 16
80215d6a: 7d 36        	addiw	a2, a2, -1
80215d6c: 71 8d        	and	a0, a0, a2
80215d6e: 23 34 a4 ec  	sd	a0, -312(s0)
80215d72: 63 0b b5 00  	beq	a0, a1, 0x80215d88 <log.0.150+0x56>
80215d76: 09 a0        	j	0x80215d78 <log.0.150+0x46>
80215d78: 83 35 84 ec  	ld	a1, -312(s0)
80215d7c: 13 05 84 ed  	addi	a0, s0, -296
80215d80: 97 b0 fe ff  	auipc	ra, 1048555
80215d84: e7 80 e0 86  	jalr	-1938(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80215d88: 52 74        	ld	s0, 304(sp)
80215d8a: f2 70        	ld	ra, 312(sp)
80215d8c: 31 61        	addi	sp, sp, 320
80215d8e: 82 80        	ret

0000000080215d90 <log.0.151>:
80215d90: 0d 71        	addi	sp, sp, -352
80215d92: 86 ee        	sd	ra, 344(sp)
80215d94: a2 ea        	sd	s0, 336(sp)
80215d96: 80 12        	addi	s0, sp, 352
80215d98: aa 85        	mv	a1, a0
80215d9a: 01 45        	mv	a0, zero
80215d9c: 23 30 a4 ea  	sd	a0, -352(s0)
80215da0: 23 3c a4 ec  	sd	a0, -296(s0)
80215da4: 13 05 04 ef  	addi	a0, s0, -272
80215da8: 23 30 a4 ee  	sd	a0, -288(s0)
80215dac: 13 05 00 02  	addi	a0, zero, 32
80215db0: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80215db4: 88 61        	ld	a0, 0(a1)
80215db6: 23 3c a4 ea  	sd	a0, -328(s0)
80215dba: 88 65        	ld	a0, 8(a1)
80215dbc: 23 30 a4 ec  	sd	a0, -320(s0)
80215dc0: 88 69        	ld	a0, 16(a1)
80215dc2: 23 34 a4 ec  	sd	a0, -312(s0)
80215dc6: 88 6d        	ld	a0, 24(a1)
80215dc8: 23 38 a4 ec  	sd	a0, -304(s0)
80215dcc: 13 05 84 ed  	addi	a0, s0, -296
80215dd0: 97 20 00 00  	auipc	ra, 2
80215dd4: e7 80 e0 d6  	jalr	-658(ra)
80215dd8: 83 35 04 ea  	ld	a1, -352(s0)
80215ddc: 23 1b a4 ea  	sh	a0, -330(s0)
80215de0: 41 66        	lui	a2, 16
80215de2: 7d 36        	addiw	a2, a2, -1
80215de4: 71 8d        	and	a0, a0, a2
80215de6: 23 34 a4 ea  	sd	a0, -344(s0)
80215dea: 63 0b b5 00  	beq	a0, a1, 0x80215e00 <log.0.151+0x70>
80215dee: 09 a0        	j	0x80215df0 <log.0.151+0x60>
80215df0: 83 35 84 ea  	ld	a1, -344(s0)
80215df4: 13 05 84 ed  	addi	a0, s0, -296
80215df8: 97 a0 fe ff  	auipc	ra, 1048554
80215dfc: e7 80 60 7f  	jalr	2038(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80215e00: 56 64        	ld	s0, 336(sp)
80215e02: f6 60        	ld	ra, 344(sp)
80215e04: 35 61        	addi	sp, sp, 352
80215e06: 82 80        	ret

0000000080215e08 <log.0.152>:
80215e08: 29 71        	addi	sp, sp, -320
80215e0a: 06 fe        	sd	ra, 312(sp)
80215e0c: 22 fa        	sd	s0, 304(sp)
80215e0e: 80 02        	addi	s0, sp, 320
80215e10: 01 45        	mv	a0, zero
80215e12: 23 30 a4 ec  	sd	a0, -320(s0)
80215e16: 23 3c a4 ec  	sd	a0, -296(s0)
80215e1a: 13 05 04 ef  	addi	a0, s0, -272
80215e1e: 23 30 a4 ee  	sd	a0, -288(s0)
80215e22: 13 05 00 02  	addi	a0, zero, 32
80215e26: 23 34 a4 ee  	sd	a0, -280(s0)
80215e2a: 13 05 84 ed  	addi	a0, s0, -296
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80215e2e: 97 20 00 00  	auipc	ra, 2
80215e32: e7 80 c0 d6  	jalr	-660(ra)
80215e36: 83 35 04 ec  	ld	a1, -320(s0)
80215e3a: 23 1b a4 ec  	sh	a0, -298(s0)
80215e3e: 41 66        	lui	a2, 16
80215e40: 7d 36        	addiw	a2, a2, -1
80215e42: 71 8d        	and	a0, a0, a2
80215e44: 23 34 a4 ec  	sd	a0, -312(s0)
80215e48: 63 0b b5 00  	beq	a0, a1, 0x80215e5e <log.0.152+0x56>
80215e4c: 09 a0        	j	0x80215e4e <log.0.152+0x46>
80215e4e: 83 35 84 ec  	ld	a1, -312(s0)
80215e52: 13 05 84 ed  	addi	a0, s0, -296
80215e56: 97 a0 fe ff  	auipc	ra, 1048554
80215e5a: e7 80 80 79  	jalr	1944(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80215e5e: 52 74        	ld	s0, 304(sp)
80215e60: f2 70        	ld	ra, 312(sp)
80215e62: 31 61        	addi	sp, sp, 320
80215e64: 82 80        	ret

0000000080215e66 <log.0.153>:
80215e66: 4d 71        	addi	sp, sp, -336
80215e68: 86 e6        	sd	ra, 328(sp)
80215e6a: a2 e2        	sd	s0, 320(sp)
80215e6c: 80 0a        	addi	s0, sp, 336
80215e6e: aa 85        	mv	a1, a0
80215e70: 01 45        	mv	a0, zero
80215e72: 23 3c a4 ea  	sd	a0, -328(s0)
80215e76: 23 3c a4 ec  	sd	a0, -296(s0)
80215e7a: 13 05 04 ef  	addi	a0, s0, -272
80215e7e: 23 30 a4 ee  	sd	a0, -288(s0)
80215e82: 13 05 00 02  	addi	a0, zero, 32
80215e86: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80215e8a: 88 61        	ld	a0, 0(a1)
80215e8c: 23 38 a4 ec  	sd	a0, -304(s0)
80215e90: 13 05 84 ed  	addi	a0, s0, -296
80215e94: 97 20 00 00  	auipc	ra, 2
80215e98: e7 80 a0 d4  	jalr	-694(ra)
80215e9c: 83 35 84 eb  	ld	a1, -328(s0)
80215ea0: 23 17 a4 ec  	sh	a0, -306(s0)
80215ea4: 41 66        	lui	a2, 16
80215ea6: 7d 36        	addiw	a2, a2, -1
80215ea8: 71 8d        	and	a0, a0, a2
80215eaa: 23 30 a4 ec  	sd	a0, -320(s0)
80215eae: 63 0b b5 00  	beq	a0, a1, 0x80215ec4 <log.0.153+0x5e>
80215eb2: 09 a0        	j	0x80215eb4 <log.0.153+0x4e>
80215eb4: 83 35 04 ec  	ld	a1, -320(s0)
80215eb8: 13 05 84 ed  	addi	a0, s0, -296
80215ebc: 97 a0 fe ff  	auipc	ra, 1048554
80215ec0: e7 80 20 73  	jalr	1842(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80215ec4: 16 64        	ld	s0, 320(sp)
80215ec6: b6 60        	ld	ra, 328(sp)
80215ec8: 71 61        	addi	sp, sp, 336
80215eca: 82 80        	ret

0000000080215ecc <log.0.154>:
80215ecc: 4d 71        	addi	sp, sp, -336
80215ece: 86 e6        	sd	ra, 328(sp)
80215ed0: a2 e2        	sd	s0, 320(sp)
80215ed2: 80 0a        	addi	s0, sp, 336
80215ed4: aa 85        	mv	a1, a0
80215ed6: 01 45        	mv	a0, zero
80215ed8: 23 3c a4 ea  	sd	a0, -328(s0)
80215edc: 23 3c a4 ec  	sd	a0, -296(s0)
80215ee0: 13 05 04 ef  	addi	a0, s0, -272
80215ee4: 23 30 a4 ee  	sd	a0, -288(s0)
80215ee8: 13 05 00 02  	addi	a0, zero, 32
80215eec: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80215ef0: 03 c6 05 00  	lbu	a2, 0(a1)
80215ef4: 03 c5 15 00  	lbu	a0, 1(a1)
80215ef8: 22 05        	slli	a0, a0, 8
80215efa: 49 8e        	or	a2, a2, a0
80215efc: 83 c6 25 00  	lbu	a3, 2(a1)
80215f00: 03 85 35 00  	lb	a0, 3(a1)
80215f04: 22 05        	slli	a0, a0, 8
80215f06: 55 8d        	or	a0, a0, a3
80215f08: 42 05        	slli	a0, a0, 16
80215f0a: 51 8d        	or	a0, a0, a2
80215f0c: 23 28 a4 ec  	sw	a0, -304(s0)
80215f10: 13 05 84 ed  	addi	a0, s0, -296
80215f14: 97 20 00 00  	auipc	ra, 2
80215f18: e7 80 40 d1  	jalr	-748(ra)
80215f1c: 83 35 84 eb  	ld	a1, -328(s0)
80215f20: 23 17 a4 ec  	sh	a0, -306(s0)
80215f24: 41 66        	lui	a2, 16
80215f26: 7d 36        	addiw	a2, a2, -1
80215f28: 71 8d        	and	a0, a0, a2
80215f2a: 23 30 a4 ec  	sd	a0, -320(s0)
80215f2e: 63 0b b5 00  	beq	a0, a1, 0x80215f44 <log.0.154+0x78>
80215f32: 09 a0        	j	0x80215f34 <log.0.154+0x68>
80215f34: 83 35 04 ec  	ld	a1, -320(s0)
80215f38: 13 05 84 ed  	addi	a0, s0, -296
80215f3c: 97 a0 fe ff  	auipc	ra, 1048554
80215f40: e7 80 20 6b  	jalr	1714(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80215f44: 16 64        	ld	s0, 320(sp)
80215f46: b6 60        	ld	ra, 328(sp)
80215f48: 71 61        	addi	sp, sp, 336
80215f4a: 82 80        	ret

0000000080215f4c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.155>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80215f4c: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
80215f4e: 06 f4        	sd	ra, 40(sp)
80215f50: 22 f0        	sd	s0, 32(sp)
80215f52: 00 18        	addi	s0, sp, 48
80215f54: 23 3c a4 fc  	sd	a0, -40(s0)
80215f58: 83 e6 05 00  	lwu	a3, 0(a1)
80215f5c: 03 e6 45 00  	lwu	a2, 4(a1)
80215f60: 02 16        	slli	a2, a2, 32
80215f62: 55 8e        	or	a2, a2, a3
80215f64: 23 30 c4 fe  	sd	a2, -32(s0)
80215f68: 97 20 00 00  	auipc	ra, 2
80215f6c: e7 80 40 d2  	jalr	-732(ra)
80215f70: aa 85        	mv	a1, a0
80215f72: 41 65        	lui	a0, 16
80215f74: 7d 35        	addiw	a0, a0, -1
80215f76: 6d 8d        	and	a0, a0, a1
80215f78: 23 17 b4 fe  	sh	a1, -18(s0)
80215f7c: 81 45        	mv	a1, zero
80215f7e: 63 0a b5 00  	beq	a0, a1, 0x80215f92 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.155+0x46>
80215f82: 09 a0        	j	0x80215f84 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.155+0x38>
80215f84: 03 35 84 fd  	ld	a0, -40(s0)
80215f88: 97 b0 fe ff  	auipc	ra, 1048555
80215f8c: e7 80 a0 91  	jalr	-1766(ra)
80215f90: 11 a0        	j	0x80215f94 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.155+0x48>
80215f92: 09 a0        	j	0x80215f94 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.155+0x48>
80215f94: 03 15 e4 fe  	lh	a0, -18(s0)
80215f98: 02 74        	ld	s0, 32(sp)
80215f9a: a2 70        	ld	ra, 40(sp)
80215f9c: 45 61        	addi	sp, sp, 48
80215f9e: 82 80        	ret

0000000080215fa0 <log.0.156>:
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80215fa0: 29 71        	addi	sp, sp, -320
80215fa2: 06 fe        	sd	ra, 312(sp)
80215fa4: 22 fa        	sd	s0, 304(sp)
80215fa6: 80 02        	addi	s0, sp, 320
80215fa8: 01 45        	mv	a0, zero
80215faa: 23 30 a4 ec  	sd	a0, -320(s0)
80215fae: 23 3c a4 ec  	sd	a0, -296(s0)
80215fb2: 13 05 04 ef  	addi	a0, s0, -272
80215fb6: 23 30 a4 ee  	sd	a0, -288(s0)
80215fba: 13 05 00 02  	addi	a0, zero, 32
80215fbe: 23 34 a4 ee  	sd	a0, -280(s0)
80215fc2: 13 05 84 ed  	addi	a0, s0, -296
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80215fc6: 97 20 00 00  	auipc	ra, 2
80215fca: e7 80 e0 d7  	jalr	-642(ra)
80215fce: 83 35 04 ec  	ld	a1, -320(s0)
80215fd2: 23 1b a4 ec  	sh	a0, -298(s0)
80215fd6: 41 66        	lui	a2, 16
80215fd8: 7d 36        	addiw	a2, a2, -1
80215fda: 71 8d        	and	a0, a0, a2
80215fdc: 23 34 a4 ec  	sd	a0, -312(s0)
80215fe0: 63 0b b5 00  	beq	a0, a1, 0x80215ff6 <log.0.156+0x56>
80215fe4: 09 a0        	j	0x80215fe6 <log.0.156+0x46>
80215fe6: 83 35 84 ec  	ld	a1, -312(s0)
80215fea: 13 05 84 ed  	addi	a0, s0, -296
80215fee: 97 a0 fe ff  	auipc	ra, 1048554
80215ff2: e7 80 00 60  	jalr	1536(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80215ff6: 52 74        	ld	s0, 304(sp)
80215ff8: f2 70        	ld	ra, 312(sp)
80215ffa: 31 61        	addi	sp, sp, 320
80215ffc: 82 80        	ret

0000000080215ffe <log.0.157>:
80215ffe: 29 71        	addi	sp, sp, -320
80216000: 06 fe        	sd	ra, 312(sp)
80216002: 22 fa        	sd	s0, 304(sp)
80216004: 80 02        	addi	s0, sp, 320
80216006: 01 45        	mv	a0, zero
80216008: 23 30 a4 ec  	sd	a0, -320(s0)
8021600c: 23 3c a4 ec  	sd	a0, -296(s0)
80216010: 13 05 04 ef  	addi	a0, s0, -272
80216014: 23 30 a4 ee  	sd	a0, -288(s0)
80216018: 13 05 00 02  	addi	a0, zero, 32
8021601c: 23 34 a4 ee  	sd	a0, -280(s0)
80216020: 13 05 84 ed  	addi	a0, s0, -296
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80216024: 97 20 00 00  	auipc	ra, 2
80216028: e7 80 40 d6  	jalr	-668(ra)
8021602c: 83 35 04 ec  	ld	a1, -320(s0)
80216030: 23 1b a4 ec  	sh	a0, -298(s0)
80216034: 41 66        	lui	a2, 16
80216036: 7d 36        	addiw	a2, a2, -1
80216038: 71 8d        	and	a0, a0, a2
8021603a: 23 34 a4 ec  	sd	a0, -312(s0)
8021603e: 63 0b b5 00  	beq	a0, a1, 0x80216054 <log.0.157+0x56>
80216042: 09 a0        	j	0x80216044 <log.0.157+0x46>
80216044: 83 35 84 ec  	ld	a1, -312(s0)
80216048: 13 05 84 ed  	addi	a0, s0, -296
8021604c: 97 a0 fe ff  	auipc	ra, 1048554
80216050: e7 80 20 5a  	jalr	1442(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80216054: 52 74        	ld	s0, 304(sp)
80216056: f2 70        	ld	ra, 312(sp)
80216058: 31 61        	addi	sp, sp, 320
8021605a: 82 80        	ret

000000008021605c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.158>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021605c: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
8021605e: 06 f4        	sd	ra, 40(sp)
80216060: 22 f0        	sd	s0, 32(sp)
80216062: 00 18        	addi	s0, sp, 48
80216064: 23 38 a4 fc  	sd	a0, -48(s0)
80216068: 90 65        	ld	a2, 8(a1)
8021606a: 23 30 c4 fe  	sd	a2, -32(s0)
8021606e: 90 61        	ld	a2, 0(a1)
80216070: 23 3c c4 fc  	sd	a2, -40(s0)
80216074: 97 20 00 00  	auipc	ra, 2
80216078: e7 80 80 d5  	jalr	-680(ra)
8021607c: aa 85        	mv	a1, a0
8021607e: 41 65        	lui	a0, 16
80216080: 7d 35        	addiw	a0, a0, -1
80216082: 6d 8d        	and	a0, a0, a1
80216084: 23 17 b4 fe  	sh	a1, -18(s0)
80216088: 81 45        	mv	a1, zero
8021608a: 63 0a b5 00  	beq	a0, a1, 0x8021609e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.158+0x42>
8021608e: 09 a0        	j	0x80216090 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.158+0x34>
80216090: 03 35 04 fd  	ld	a0, -48(s0)
80216094: 97 b0 fe ff  	auipc	ra, 1048555
80216098: e7 80 e0 80  	jalr	-2034(ra)
8021609c: 11 a0        	j	0x802160a0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.158+0x44>
8021609e: 09 a0        	j	0x802160a0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.158+0x44>
802160a0: 03 15 e4 fe  	lh	a0, -18(s0)
802160a4: 02 74        	ld	s0, 32(sp)
802160a6: a2 70        	ld	ra, 40(sp)
802160a8: 45 61        	addi	sp, sp, 48
802160aa: 82 80        	ret

00000000802160ac <std.fmt.format.159>:
; pub fn format(
802160ac: 1d 71        	addi	sp, sp, -96
;     args: anytype,
802160ae: 86 ec        	sd	ra, 88(sp)
802160b0: a2 e8        	sd	s0, 80(sp)
802160b2: 80 10        	addi	s0, sp, 96
802160b4: 23 34 b4 fa  	sd	a1, -88(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
802160b8: 23 3c a4 fa  	sd	a0, -72(s0)

00000000802160bc <.LBB235_1>:
802160bc: 97 95 00 00  	auipc	a1, 9
802160c0: 93 85 45 a1  	addi	a1, a1, -1516
802160c4: 97 b0 fe ff  	auipc	ra, 1048555
802160c8: e7 80 e0 9e  	jalr	-1554(ra)
802160cc: aa 85        	mv	a1, a0
802160ce: 03 35 84 fb  	ld	a0, -72(s0)
802160d2: 23 16 b4 fe  	sh	a1, -20(s0)

00000000802160d6 <.LBB235_2>:
;         try formatType(
802160d6: 97 95 00 00  	auipc	a1, 9
802160da: 93 85 a5 a6  	addi	a1, a1, -1430

00000000802160de <.LBB235_3>:
802160de: 17 96 00 00  	auipc	a2, 9
802160e2: 13 06 26 a7  	addi	a2, a2, -1422
802160e6: 8d 46        	addi	a3, zero, 3
802160e8: 23 38 d4 fa  	sd	a3, -80(s0)
802160ec: 97 20 00 00  	auipc	ra, 2
802160f0: e7 80 80 d9  	jalr	-616(ra)
802160f4: aa 85        	mv	a1, a0
802160f6: 03 35 84 fb  	ld	a0, -72(s0)
802160fa: 23 15 b4 fe  	sh	a1, -22(s0)

00000000802160fe <.LBB235_4>:
;             try writer.writeAll(fmt[start_index..end_index]);
802160fe: 97 95 00 00  	auipc	a1, 9
80216102: 93 85 a5 a7  	addi	a1, a1, -1414
80216106: 97 b0 fe ff  	auipc	ra, 1048555
8021610a: e7 80 c0 9a  	jalr	-1620(ra)
8021610e: 83 36 04 fb  	ld	a3, -80(s0)
80216112: aa 85        	mv	a1, a0
80216114: 03 35 84 fb  	ld	a0, -72(s0)
80216118: 23 14 b4 fe  	sh	a1, -24(s0)

000000008021611c <.LBB235_5>:
;         try formatType(
8021611c: 97 95 00 00  	auipc	a1, 9
80216120: 93 85 c5 ac  	addi	a1, a1, -1332

0000000080216124 <.LBB235_6>:
80216124: 17 96 00 00  	auipc	a2, 9
80216128: 13 06 46 ad  	addi	a2, a2, -1324
8021612c: 97 20 00 00  	auipc	ra, 2
80216130: e7 80 80 d5  	jalr	-680(ra)
80216134: aa 85        	mv	a1, a0
80216136: 03 35 84 fb  	ld	a0, -72(s0)
8021613a: 23 13 b4 fe  	sh	a1, -26(s0)

000000008021613e <.LBB235_7>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021613e: 97 95 00 00  	auipc	a1, 9
80216142: 93 85 25 ae  	addi	a1, a1, -1310
80216146: 97 b0 fe ff  	auipc	ra, 1048555
8021614a: e7 80 c0 96  	jalr	-1684(ra)
8021614e: 83 35 84 fa  	ld	a1, -88(s0)
80216152: 83 36 04 fb  	ld	a3, -80(s0)
80216156: 2a 86        	mv	a2, a0
80216158: 03 35 84 fb  	ld	a0, -72(s0)
8021615c: 23 12 c4 fe  	sh	a2, -28(s0)
;             @field(args, fields_info[arg_to_print].name),
80216160: 8c 61        	ld	a1, 0(a1)
80216162: 23 3c b4 fc  	sd	a1, -40(s0)

0000000080216166 <.LBB235_8>:
;         try formatType(
80216166: 17 96 00 00  	auipc	a2, 9
8021616a: 13 06 a6 b2  	addi	a2, a2, -1238
8021616e: 97 20 00 00  	auipc	ra, 2
80216172: e7 80 00 dc  	jalr	-576(ra)
80216176: aa 85        	mv	a1, a0
80216178: 03 35 84 fb  	ld	a0, -72(s0)
8021617c: 23 1b b4 fc  	sh	a1, -42(s0)

0000000080216180 <.LBB235_9>:
;             try writer.writeAll(fmt[start_index..end_index]);
80216180: 97 95 00 00  	auipc	a1, 9
80216184: 93 85 85 b3  	addi	a1, a1, -1224
80216188: 97 b0 fe ff  	auipc	ra, 1048555
8021618c: e7 80 a0 92  	jalr	-1750(ra)
80216190: 83 35 84 fa  	ld	a1, -88(s0)
80216194: 83 36 04 fb  	ld	a3, -80(s0)
80216198: 2a 86        	mv	a2, a0
8021619a: 03 35 84 fb  	ld	a0, -72(s0)
8021619e: 23 1a c4 fc  	sh	a2, -44(s0)
;             @field(args, fields_info[arg_to_print].name),
802161a2: 8c 65        	ld	a1, 8(a1)
802161a4: 23 34 b4 fc  	sd	a1, -56(s0)

00000000802161a8 <.LBB235_10>:
;         try formatType(
802161a8: 17 96 00 00  	auipc	a2, 9
802161ac: 13 06 86 b8  	addi	a2, a2, -1144
802161b0: 97 20 00 00  	auipc	ra, 2
802161b4: e7 80 c0 de  	jalr	-532(ra)
802161b8: aa 85        	mv	a1, a0
802161ba: 03 35 84 fb  	ld	a0, -72(s0)
802161be: 23 13 b4 fc  	sh	a1, -58(s0)

00000000802161c2 <.LBB235_11>:
;             try writer.writeAll(fmt[start_index..end_index]);
802161c2: 97 95 00 00  	auipc	a1, 9
802161c6: 93 85 65 b9  	addi	a1, a1, -1130
802161ca: 97 b0 fe ff  	auipc	ra, 1048555
802161ce: e7 80 80 8e  	jalr	-1816(ra)
802161d2: 23 12 a4 fc  	sh	a0, -60(s0)
802161d6: 01 45        	mv	a0, zero
; ) !void {
802161d8: 23 17 a4 fe  	sh	a0, -18(s0)
802161dc: 46 64        	ld	s0, 80(sp)
802161de: e6 60        	ld	ra, 88(sp)
802161e0: 25 61        	addi	sp, sp, 96
802161e2: 82 80        	ret

00000000802161e4 <std.fmt.format.160>:
; pub fn format(
802161e4: 5d 71        	addi	sp, sp, -80
;     args: anytype,
802161e6: 86 e4        	sd	ra, 72(sp)
802161e8: a2 e0        	sd	s0, 64(sp)
802161ea: 80 08        	addi	s0, sp, 80
802161ec: 23 38 b4 fa  	sd	a1, -80(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
802161f0: 23 30 a4 fc  	sd	a0, -64(s0)

00000000802161f4 <.LBB236_1>:
802161f4: 97 95 00 00  	auipc	a1, 9
802161f8: 93 85 45 ba  	addi	a1, a1, -1116
802161fc: 97 b0 fe ff  	auipc	ra, 1048555
80216200: e7 80 60 8b  	jalr	-1866(ra)
80216204: 83 35 04 fb  	ld	a1, -80(s0)
80216208: 2a 86        	mv	a2, a0
8021620a: 03 35 04 fc  	ld	a0, -64(s0)
8021620e: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
80216212: 8c 61        	ld	a1, 0(a1)
80216214: 23 30 b4 fe  	sd	a1, -32(s0)

0000000080216218 <.LBB236_2>:
;         try formatType(
80216218: 17 96 00 00  	auipc	a2, 9
8021621c: 13 06 06 bf  	addi	a2, a2, -1040
80216220: 8d 46        	addi	a3, zero, 3
80216222: 23 3c d4 fa  	sd	a3, -72(s0)
80216226: 97 20 00 00  	auipc	ra, 2
8021622a: e7 80 60 d7  	jalr	-650(ra)
8021622e: aa 85        	mv	a1, a0
80216230: 03 35 04 fc  	ld	a0, -64(s0)
80216234: 23 1f b4 fc  	sh	a1, -34(s0)

0000000080216238 <.LBB236_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
80216238: 97 95 00 00  	auipc	a1, 9
8021623c: 93 85 85 bf  	addi	a1, a1, -1032
80216240: 97 b0 fe ff  	auipc	ra, 1048555
80216244: e7 80 20 87  	jalr	-1934(ra)
80216248: 83 35 04 fb  	ld	a1, -80(s0)
8021624c: 83 36 84 fb  	ld	a3, -72(s0)
80216250: 2a 86        	mv	a2, a0
80216252: 03 35 04 fc  	ld	a0, -64(s0)
80216256: 23 1e c4 fc  	sh	a2, -36(s0)
;             @field(args, fields_info[arg_to_print].name),
8021625a: 8c 65        	ld	a1, 8(a1)
8021625c: 23 38 b4 fc  	sd	a1, -48(s0)

0000000080216260 <.LBB236_4>:
;         try formatType(
80216260: 17 96 00 00  	auipc	a2, 9
80216264: 13 06 06 c4  	addi	a2, a2, -960
80216268: 97 20 00 00  	auipc	ra, 2
8021626c: e7 80 40 d3  	jalr	-716(ra)
80216270: aa 85        	mv	a1, a0
80216272: 03 35 04 fc  	ld	a0, -64(s0)
80216276: 23 17 b4 fc  	sh	a1, -50(s0)

000000008021627a <.LBB236_5>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021627a: 97 95 00 00  	auipc	a1, 9
8021627e: 93 85 e5 c4  	addi	a1, a1, -946
80216282: 97 b0 fe ff  	auipc	ra, 1048555
80216286: e7 80 00 83  	jalr	-2000(ra)
8021628a: 23 16 a4 fc  	sh	a0, -52(s0)
8021628e: 01 45        	mv	a0, zero
; ) !void {
80216290: 23 17 a4 fe  	sh	a0, -18(s0)
80216294: 06 64        	ld	s0, 64(sp)
80216296: a6 60        	ld	ra, 72(sp)
80216298: 61 61        	addi	sp, sp, 80
8021629a: 82 80        	ret

000000008021629c <std.mem.len.161>:
; pub fn len(value: anytype) usize {
8021629c: 79 71        	addi	sp, sp, -48
8021629e: 06 f4        	sd	ra, 40(sp)
802162a0: 22 f0        	sd	s0, 32(sp)
802162a2: 00 18        	addi	s0, sp, 48
802162a4: 23 3c a4 fc  	sd	a0, -40(s0)
;                 indexOfSentinel(info.child, sentinel, value)
802162a8: 23 30 a4 fe  	sd	a0, -32(s0)
802162ac: 97 00 00 00  	auipc	ra, 0
802162b0: e7 80 20 04  	jalr	66(ra)
802162b4: 23 34 a4 fe  	sd	a0, -24(s0)
;     return switch (@typeInfo(@TypeOf(value))) {
802162b8: 02 74        	ld	s0, 32(sp)
802162ba: a2 70        	ld	ra, 40(sp)
802162bc: 45 61        	addi	sp, sp, 48
802162be: 82 80        	ret

00000000802162c0 <std.log.log.162>:
; fn log(
802162c0: 01 11        	addi	sp, sp, -32
;     args: anytype,
802162c2: 06 ec        	sd	ra, 24(sp)
802162c4: 22 e8        	sd	s0, 16(sp)
802162c6: 00 10        	addi	s0, sp, 32
802162c8: 23 30 a4 fe  	sd	a0, -32(s0)
802162cc: 0d 45        	addi	a0, zero, 3
;         break :blk level;
802162ce: a3 07 a4 fe  	sb	a0, -17(s0)
802162d2: 09 a0        	j	0x802162d4 <std.log.log.162+0x14>
;             root.log(message_level, scope, format, args);
802162d4: 03 35 04 fe  	ld	a0, -32(s0)
802162d8: 0c 41        	lw	a1, 0(a0)
802162da: 23 24 b4 fe  	sw	a1, -24(s0)
802162de: 97 20 00 00  	auipc	ra, 2
802162e2: e7 80 00 e0  	jalr	-512(ra)
; ) void {
802162e6: 42 64        	ld	s0, 16(sp)
802162e8: e2 60        	ld	ra, 24(sp)
802162ea: 05 61        	addi	sp, sp, 32
802162ec: 82 80        	ret

00000000802162ee <std.mem.indexOfSentinel>:
; pub fn indexOfSentinel(comptime Elem: type, comptime sentinel: Elem, ptr: [*:sentinel]const Elem) usize {
802162ee: 79 71        	addi	sp, sp, -48
802162f0: 06 f4        	sd	ra, 40(sp)
802162f2: 22 f0        	sd	s0, 32(sp)
802162f4: 00 18        	addi	s0, sp, 48
802162f6: 23 3c a4 fc  	sd	a0, -40(s0)
802162fa: 01 45        	mv	a0, zero
;     var i: usize = 0;
802162fc: 23 30 a4 fe  	sd	a0, -32(s0)
;     while (ptr[i] != sentinel) {
80216300: 09 a0        	j	0x80216302 <std.mem.indexOfSentinel+0x14>
80216302: 83 35 04 fe  	ld	a1, -32(s0)
80216306: 03 35 84 fd  	ld	a0, -40(s0)
8021630a: 2e 95        	add	a0, a0, a1
8021630c: 03 45 05 00  	lbu	a0, 0(a0)
80216310: 81 45        	mv	a1, zero
80216312: 63 0c b5 00  	beq	a0, a1, 0x8021632a <std.mem.indexOfSentinel+0x3c>
80216316: 09 a0        	j	0x80216318 <std.mem.indexOfSentinel+0x2a>
;         i += 1;
80216318: 83 35 04 fe  	ld	a1, -32(s0)
8021631c: 13 85 15 00  	addi	a0, a1, 1
80216320: 23 38 a4 fc  	sd	a0, -48(s0)
80216324: 63 6b b5 00  	bltu	a0, a1, 0x8021633a <.LBB239_6>
80216328: 15 a0        	j	0x8021634c <.LBB239_6+0x12>
;     return i;
8021632a: 03 35 04 fe  	ld	a0, -32(s0)
8021632e: 23 34 a4 fe  	sd	a0, -24(s0)
80216332: 02 74        	ld	s0, 32(sp)
80216334: a2 70        	ld	ra, 40(sp)
80216336: 45 61        	addi	sp, sp, 48
80216338: 82 80        	ret

000000008021633a <.LBB239_6>:
;         i += 1;
8021633a: 17 75 00 00  	auipc	a0, 7
8021633e: 13 05 65 14  	addi	a0, a0, 326
80216342: 81 45        	mv	a1, zero
80216344: 97 a0 fe ff  	auipc	ra, 1048554
80216348: e7 80 c0 d5  	jalr	-676(ra)
8021634c: 03 35 04 fd  	ld	a0, -48(s0)
80216350: 23 30 a4 fe  	sd	a0, -32(s0)
;     while (ptr[i] != sentinel) {
80216354: 7d b7        	j	0x80216302 <std.mem.indexOfSentinel+0x14>

0000000080216356 <std.fmt.format.163>:
; pub fn format(
80216356: 39 71        	addi	sp, sp, -64
;             @field(args, fields_info[arg_to_print].name),
80216358: 06 fc        	sd	ra, 56(sp)
8021635a: 22 f8        	sd	s0, 48(sp)
8021635c: 80 00        	addi	s0, sp, 64
8021635e: 23 34 a4 fc  	sd	a0, -56(s0)
80216362: 90 65        	ld	a2, 8(a1)
80216364: 23 30 c4 fe  	sd	a2, -32(s0)
80216368: 90 61        	ld	a2, 0(a1)
8021636a: 23 3c c4 fc  	sd	a2, -40(s0)

000000008021636e <.LBB240_1>:
;         try formatType(
8021636e: 17 96 00 00  	auipc	a2, 9
80216372: 13 06 a6 bc  	addi	a2, a2, -1078
80216376: 8d 46        	addi	a3, zero, 3
80216378: 97 b0 fe ff  	auipc	ra, 1048555
8021637c: e7 80 a0 81  	jalr	-2022(ra)
80216380: aa 85        	mv	a1, a0
80216382: 03 35 84 fc  	ld	a0, -56(s0)
80216386: 23 1b b4 fc  	sh	a1, -42(s0)

000000008021638a <.LBB240_2>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021638a: 97 95 00 00  	auipc	a1, 9
8021638e: 93 85 65 bd  	addi	a1, a1, -1066
80216392: 97 a0 fe ff  	auipc	ra, 1048554
80216396: e7 80 00 72  	jalr	1824(ra)
8021639a: 23 1a a4 fc  	sh	a0, -44(s0)
8021639e: 01 45        	mv	a0, zero
; ) !void {
802163a0: 23 17 a4 fe  	sh	a0, -18(s0)
802163a4: 42 74        	ld	s0, 48(sp)
802163a6: e2 70        	ld	ra, 56(sp)
802163a8: 21 61        	addi	sp, sp, 64
802163aa: 82 80        	ret

00000000802163ac <std.fmt.format.164>:
; pub fn format(
802163ac: 79 71        	addi	sp, sp, -48
;             @field(args, fields_info[arg_to_print].name),
802163ae: 06 f4        	sd	ra, 40(sp)
802163b0: 22 f0        	sd	s0, 32(sp)
802163b2: 00 18        	addi	s0, sp, 48
802163b4: 23 3c a4 fc  	sd	a0, -40(s0)
802163b8: 8c 41        	lw	a1, 0(a1)
802163ba: 23 24 b4 fe  	sw	a1, -24(s0)

00000000802163be <.LBB241_1>:
;         try formatType(
802163be: 17 96 00 00  	auipc	a2, 9
802163c2: 13 06 26 c1  	addi	a2, a2, -1006
802163c6: 8d 46        	addi	a3, zero, 3
802163c8: 97 20 00 00  	auipc	ra, 2
802163cc: e7 80 c0 d7  	jalr	-644(ra)
802163d0: aa 85        	mv	a1, a0
802163d2: 03 35 84 fd  	ld	a0, -40(s0)
802163d6: 23 13 b4 fe  	sh	a1, -26(s0)

00000000802163da <.LBB241_2>:
;             try writer.writeAll(fmt[start_index..end_index]);
802163da: 97 95 00 00  	auipc	a1, 9
802163de: 93 85 e5 c1  	addi	a1, a1, -994
802163e2: 97 a0 fe ff  	auipc	ra, 1048554
802163e6: e7 80 00 6d  	jalr	1744(ra)
802163ea: 23 12 a4 fe  	sh	a0, -28(s0)
802163ee: 01 45        	mv	a0, zero
; ) !void {
802163f0: 23 17 a4 fe  	sh	a0, -18(s0)
802163f4: 02 74        	ld	s0, 32(sp)
802163f6: a2 70        	ld	ra, 40(sp)
802163f8: 45 61        	addi	sp, sp, 48
802163fa: 82 80        	ret

00000000802163fc <std.fmt.format.165>:
; pub fn format(
802163fc: 79 71        	addi	sp, sp, -48
;             @field(args, fields_info[arg_to_print].name),
802163fe: 06 f4        	sd	ra, 40(sp)
80216400: 22 f0        	sd	s0, 32(sp)
80216402: 00 18        	addi	s0, sp, 48
80216404: 23 3c a4 fc  	sd	a0, -40(s0)
80216408: 8c 41        	lw	a1, 0(a1)
8021640a: 23 24 b4 fe  	sw	a1, -24(s0)

000000008021640e <.LBB242_1>:
;         try formatType(
8021640e: 17 96 00 00  	auipc	a2, 9
80216412: 13 06 a6 c5  	addi	a2, a2, -934
80216416: 8d 46        	addi	a3, zero, 3
80216418: 97 20 00 00  	auipc	ra, 2
8021641c: e7 80 c0 d2  	jalr	-724(ra)
80216420: aa 85        	mv	a1, a0
80216422: 03 35 84 fd  	ld	a0, -40(s0)
80216426: 23 13 b4 fe  	sh	a1, -26(s0)

000000008021642a <.LBB242_2>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021642a: 97 95 00 00  	auipc	a1, 9
8021642e: 93 85 65 c6  	addi	a1, a1, -922
80216432: 97 a0 fe ff  	auipc	ra, 1048554
80216436: e7 80 00 68  	jalr	1664(ra)
8021643a: 23 12 a4 fe  	sh	a0, -28(s0)
8021643e: 01 45        	mv	a0, zero
; ) !void {
80216440: 23 17 a4 fe  	sh	a0, -18(s0)
80216444: 02 74        	ld	s0, 32(sp)
80216446: a2 70        	ld	ra, 40(sp)
80216448: 45 61        	addi	sp, sp, 48
8021644a: 82 80        	ret

000000008021644c <std.fmt.format.166>:
; pub fn format(
8021644c: 39 71        	addi	sp, sp, -64
;             @field(args, fields_info[arg_to_print].name),
8021644e: 06 fc        	sd	ra, 56(sp)
80216450: 22 f8        	sd	s0, 48(sp)
80216452: 80 00        	addi	s0, sp, 64
80216454: 23 34 a4 fc  	sd	a0, -56(s0)
80216458: 90 65        	ld	a2, 8(a1)
8021645a: 23 30 c4 fe  	sd	a2, -32(s0)
8021645e: 90 61        	ld	a2, 0(a1)
80216460: 23 3c c4 fc  	sd	a2, -40(s0)

0000000080216464 <.LBB243_1>:
;         try formatType(
80216464: 17 96 00 00  	auipc	a2, 9
80216468: 13 06 c6 c9  	addi	a2, a2, -868
8021646c: 8d 46        	addi	a3, zero, 3
8021646e: 97 a0 fe ff  	auipc	ra, 1048554
80216472: e7 80 40 72  	jalr	1828(ra)
80216476: aa 85        	mv	a1, a0
80216478: 03 35 84 fc  	ld	a0, -56(s0)
8021647c: 23 1b b4 fc  	sh	a1, -42(s0)

0000000080216480 <.LBB243_2>:
;             try writer.writeAll(fmt[start_index..end_index]);
80216480: 97 95 00 00  	auipc	a1, 9
80216484: 93 85 85 ca  	addi	a1, a1, -856
80216488: 97 a0 fe ff  	auipc	ra, 1048554
8021648c: e7 80 a0 62  	jalr	1578(ra)
80216490: 23 1a a4 fc  	sh	a0, -44(s0)
80216494: 01 45        	mv	a0, zero
; ) !void {
80216496: 23 17 a4 fe  	sh	a0, -18(s0)
8021649a: 42 74        	ld	s0, 48(sp)
8021649c: e2 70        	ld	ra, 56(sp)
8021649e: 21 61        	addi	sp, sp, 64
802164a0: 82 80        	ret

00000000802164a2 <std.fmt.format.167>:
; pub fn format(
802164a2: 39 71        	addi	sp, sp, -64
;             @field(args, fields_info[arg_to_print].name),
802164a4: 06 fc        	sd	ra, 56(sp)
802164a6: 22 f8        	sd	s0, 48(sp)
802164a8: 80 00        	addi	s0, sp, 64
802164aa: 23 34 a4 fc  	sd	a0, -56(s0)
802164ae: 90 65        	ld	a2, 8(a1)
802164b0: 23 30 c4 fe  	sd	a2, -32(s0)
802164b4: 90 61        	ld	a2, 0(a1)
802164b6: 23 3c c4 fc  	sd	a2, -40(s0)

00000000802164ba <.LBB244_1>:
;         try formatType(
802164ba: 17 96 00 00  	auipc	a2, 9
802164be: 13 06 e6 cd  	addi	a2, a2, -802
802164c2: 8d 46        	addi	a3, zero, 3
802164c4: 97 a0 fe ff  	auipc	ra, 1048554
802164c8: e7 80 e0 6c  	jalr	1742(ra)
802164cc: aa 85        	mv	a1, a0
802164ce: 03 35 84 fc  	ld	a0, -56(s0)
802164d2: 23 1b b4 fc  	sh	a1, -42(s0)

00000000802164d6 <.LBB244_2>:
;             try writer.writeAll(fmt[start_index..end_index]);
802164d6: 97 95 00 00  	auipc	a1, 9
802164da: 93 85 a5 ce  	addi	a1, a1, -790
802164de: 97 a0 fe ff  	auipc	ra, 1048554
802164e2: e7 80 40 5d  	jalr	1492(ra)
802164e6: 23 1a a4 fc  	sh	a0, -44(s0)
802164ea: 01 45        	mv	a0, zero
; ) !void {
802164ec: 23 17 a4 fe  	sh	a0, -18(s0)
802164f0: 42 74        	ld	s0, 48(sp)
802164f2: e2 70        	ld	ra, 56(sp)
802164f4: 21 61        	addi	sp, sp, 64
802164f6: 82 80        	ret

00000000802164f8 <std.log.scoped(PANIC).err.169>:
;         pub fn err(
802164f8: 01 11        	addi	sp, sp, -32
;             log(.err, scope, format, args);
802164fa: 06 ec        	sd	ra, 24(sp)
802164fc: 22 e8        	sd	s0, 16(sp)
802164fe: 00 10        	addi	s0, sp, 32
80216500: 0c 65        	ld	a1, 8(a0)
80216502: 23 34 b4 fe  	sd	a1, -24(s0)
80216506: 0c 61        	ld	a1, 0(a0)
80216508: 23 30 b4 fe  	sd	a1, -32(s0)
8021650c: 97 20 00 00  	auipc	ra, 2
80216510: e7 80 00 d6  	jalr	-672(ra)
;         ) void {
80216514: 42 64        	ld	s0, 16(sp)
80216516: e2 60        	ld	ra, 24(sp)
80216518: 05 61        	addi	sp, sp, 32
8021651a: 82 80        	ret

000000008021651c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.171>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021651c: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
8021651e: 06 f4        	sd	ra, 40(sp)
80216520: 22 f0        	sd	s0, 32(sp)
80216522: 00 18        	addi	s0, sp, 48
80216524: 23 38 a4 fc  	sd	a0, -48(s0)
80216528: 90 65        	ld	a2, 8(a1)
8021652a: 23 30 c4 fe  	sd	a2, -32(s0)
8021652e: 90 61        	ld	a2, 0(a1)
80216530: 23 3c c4 fc  	sd	a2, -40(s0)
80216534: 97 20 00 00  	auipc	ra, 2
80216538: e7 80 c0 db  	jalr	-580(ra)
8021653c: aa 85        	mv	a1, a0
8021653e: 41 65        	lui	a0, 16
80216540: 7d 35        	addiw	a0, a0, -1
80216542: 6d 8d        	and	a0, a0, a1
80216544: 23 17 b4 fe  	sh	a1, -18(s0)
80216548: 81 45        	mv	a1, zero
8021654a: 63 0a b5 00  	beq	a0, a1, 0x8021655e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.171+0x42>
8021654e: 09 a0        	j	0x80216550 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.171+0x34>
80216550: 03 35 04 fd  	ld	a0, -48(s0)
80216554: 97 a0 fe ff  	auipc	ra, 1048554
80216558: e7 80 e0 34  	jalr	846(ra)
8021655c: 11 a0        	j	0x80216560 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.171+0x44>
8021655e: 09 a0        	j	0x80216560 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.171+0x44>
80216560: 03 15 e4 fe  	lh	a0, -18(s0)
80216564: 02 74        	ld	s0, 32(sp)
80216566: a2 70        	ld	ra, 40(sp)
80216568: 45 61        	addi	sp, sp, 48
8021656a: 82 80        	ret

000000008021656c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.172>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021656c: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
8021656e: 06 ec        	sd	ra, 24(sp)
80216570: 22 e8        	sd	s0, 16(sp)
80216572: 00 10        	addi	s0, sp, 32
80216574: 23 30 a4 fe  	sd	a0, -32(s0)
80216578: 90 41        	lw	a2, 0(a1)
8021657a: 23 24 c4 fe  	sw	a2, -24(s0)
8021657e: 97 20 00 00  	auipc	ra, 2
80216582: e7 80 a0 da  	jalr	-598(ra)
80216586: aa 85        	mv	a1, a0
80216588: 41 65        	lui	a0, 16
8021658a: 7d 35        	addiw	a0, a0, -1
8021658c: 6d 8d        	and	a0, a0, a1
8021658e: 23 17 b4 fe  	sh	a1, -18(s0)
80216592: 81 45        	mv	a1, zero
80216594: 63 0a b5 00  	beq	a0, a1, 0x802165a8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.172+0x3c>
80216598: 09 a0        	j	0x8021659a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.172+0x2e>
8021659a: 03 35 04 fe  	ld	a0, -32(s0)
8021659e: 97 a0 fe ff  	auipc	ra, 1048554
802165a2: e7 80 40 30  	jalr	772(ra)
802165a6: 11 a0        	j	0x802165aa <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.172+0x3e>
802165a8: 09 a0        	j	0x802165aa <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.172+0x3e>
802165aa: 03 15 e4 fe  	lh	a0, -18(s0)
802165ae: 42 64        	ld	s0, 16(sp)
802165b0: e2 60        	ld	ra, 24(sp)
802165b2: 05 61        	addi	sp, sp, 32
802165b4: 82 80        	ret

00000000802165b6 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.173>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
802165b6: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
802165b8: 06 f4        	sd	ra, 40(sp)
802165ba: 22 f0        	sd	s0, 32(sp)
802165bc: 00 18        	addi	s0, sp, 48
802165be: 23 38 a4 fc  	sd	a0, -48(s0)
802165c2: 90 65        	ld	a2, 8(a1)
802165c4: 23 30 c4 fe  	sd	a2, -32(s0)
802165c8: 90 61        	ld	a2, 0(a1)
802165ca: 23 3c c4 fc  	sd	a2, -40(s0)
802165ce: 97 20 00 00  	auipc	ra, 2
802165d2: e7 80 c0 d8  	jalr	-628(ra)
802165d6: aa 85        	mv	a1, a0
802165d8: 41 65        	lui	a0, 16
802165da: 7d 35        	addiw	a0, a0, -1
802165dc: 6d 8d        	and	a0, a0, a1
802165de: 23 17 b4 fe  	sh	a1, -18(s0)
802165e2: 81 45        	mv	a1, zero
802165e4: 63 0a b5 00  	beq	a0, a1, 0x802165f8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.173+0x42>
802165e8: 09 a0        	j	0x802165ea <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.173+0x34>
802165ea: 03 35 04 fd  	ld	a0, -48(s0)
802165ee: 97 a0 fe ff  	auipc	ra, 1048554
802165f2: e7 80 40 2b  	jalr	692(ra)
802165f6: 11 a0        	j	0x802165fa <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.173+0x44>
802165f8: 09 a0        	j	0x802165fa <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.173+0x44>
802165fa: 03 15 e4 fe  	lh	a0, -18(s0)
802165fe: 02 74        	ld	s0, 32(sp)
80216600: a2 70        	ld	ra, 40(sp)
80216602: 45 61        	addi	sp, sp, 48
80216604: 82 80        	ret

0000000080216606 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.174>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80216606: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80216608: 06 ec        	sd	ra, 24(sp)
8021660a: 22 e8        	sd	s0, 16(sp)
8021660c: 00 10        	addi	s0, sp, 32
8021660e: 23 30 a4 fe  	sd	a0, -32(s0)
80216612: 90 41        	lw	a2, 0(a1)
80216614: 23 24 c4 fe  	sw	a2, -24(s0)
80216618: 97 20 00 00  	auipc	ra, 2
8021661c: e7 80 a0 d7  	jalr	-646(ra)
80216620: aa 85        	mv	a1, a0
80216622: 41 65        	lui	a0, 16
80216624: 7d 35        	addiw	a0, a0, -1
80216626: 6d 8d        	and	a0, a0, a1
80216628: 23 17 b4 fe  	sh	a1, -18(s0)
8021662c: 81 45        	mv	a1, zero
8021662e: 63 0a b5 00  	beq	a0, a1, 0x80216642 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.174+0x3c>
80216632: 09 a0        	j	0x80216634 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.174+0x2e>
80216634: 03 35 04 fe  	ld	a0, -32(s0)
80216638: 97 a0 fe ff  	auipc	ra, 1048554
8021663c: e7 80 a0 26  	jalr	618(ra)
80216640: 11 a0        	j	0x80216644 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.174+0x3e>
80216642: 09 a0        	j	0x80216644 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.174+0x3e>
80216644: 03 15 e4 fe  	lh	a0, -18(s0)
80216648: 42 64        	ld	s0, 16(sp)
8021664a: e2 60        	ld	ra, 24(sp)
8021664c: 05 61        	addi	sp, sp, 32
8021664e: 82 80        	ret

0000000080216650 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.176>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80216650: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80216652: 06 ec        	sd	ra, 24(sp)
80216654: 22 e8        	sd	s0, 16(sp)
80216656: 00 10        	addi	s0, sp, 32
80216658: 23 30 a4 fe  	sd	a0, -32(s0)
8021665c: 90 41        	lw	a2, 0(a1)
8021665e: 23 24 c4 fe  	sw	a2, -24(s0)
80216662: 97 20 00 00  	auipc	ra, 2
80216666: e7 80 c0 da  	jalr	-596(ra)
8021666a: aa 85        	mv	a1, a0
8021666c: 41 65        	lui	a0, 16
8021666e: 7d 35        	addiw	a0, a0, -1
80216670: 6d 8d        	and	a0, a0, a1
80216672: 23 17 b4 fe  	sh	a1, -18(s0)
80216676: 81 45        	mv	a1, zero
80216678: 63 0a b5 00  	beq	a0, a1, 0x8021668c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.176+0x3c>
8021667c: 09 a0        	j	0x8021667e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.176+0x2e>
8021667e: 03 35 04 fe  	ld	a0, -32(s0)
80216682: 97 a0 fe ff  	auipc	ra, 1048554
80216686: e7 80 00 22  	jalr	544(ra)
8021668a: 11 a0        	j	0x8021668e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.176+0x3e>
8021668c: 09 a0        	j	0x8021668e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.176+0x3e>
8021668e: 03 15 e4 fe  	lh	a0, -18(s0)
80216692: 42 64        	ld	s0, 16(sp)
80216694: e2 60        	ld	ra, 24(sp)
80216696: 05 61        	addi	sp, sp, 32
80216698: 82 80        	ret

000000008021669a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.177>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021669a: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
8021669c: 06 f4        	sd	ra, 40(sp)
8021669e: 22 f0        	sd	s0, 32(sp)
802166a0: 00 18        	addi	s0, sp, 48
802166a2: 23 3c a4 fc  	sd	a0, -40(s0)
802166a6: 90 61        	ld	a2, 0(a1)
802166a8: 23 30 c4 fe  	sd	a2, -32(s0)
802166ac: 97 20 00 00  	auipc	ra, 2
802166b0: e7 80 a0 db  	jalr	-582(ra)
802166b4: aa 85        	mv	a1, a0
802166b6: 41 65        	lui	a0, 16
802166b8: 7d 35        	addiw	a0, a0, -1
802166ba: 6d 8d        	and	a0, a0, a1
802166bc: 23 17 b4 fe  	sh	a1, -18(s0)
802166c0: 81 45        	mv	a1, zero
802166c2: 63 0a b5 00  	beq	a0, a1, 0x802166d6 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.177+0x3c>
802166c6: 09 a0        	j	0x802166c8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.177+0x2e>
802166c8: 03 35 84 fd  	ld	a0, -40(s0)
802166cc: 97 a0 fe ff  	auipc	ra, 1048554
802166d0: e7 80 60 1d  	jalr	470(ra)
802166d4: 11 a0        	j	0x802166d8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.177+0x3e>
802166d6: 09 a0        	j	0x802166d8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.177+0x3e>
802166d8: 03 15 e4 fe  	lh	a0, -18(s0)
802166dc: 02 74        	ld	s0, 32(sp)
802166de: a2 70        	ld	ra, 40(sp)
802166e0: 45 61        	addi	sp, sp, 48
802166e2: 82 80        	ret

00000000802166e4 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.178>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
802166e4: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
802166e6: 06 f4        	sd	ra, 40(sp)
802166e8: 22 f0        	sd	s0, 32(sp)
802166ea: 00 18        	addi	s0, sp, 48
802166ec: 23 3c a4 fc  	sd	a0, -40(s0)
802166f0: 90 61        	ld	a2, 0(a1)
802166f2: 23 30 c4 fe  	sd	a2, -32(s0)
802166f6: 97 20 00 00  	auipc	ra, 2
802166fa: e7 80 80 dc  	jalr	-568(ra)
802166fe: aa 85        	mv	a1, a0
80216700: 41 65        	lui	a0, 16
80216702: 7d 35        	addiw	a0, a0, -1
80216704: 6d 8d        	and	a0, a0, a1
80216706: 23 17 b4 fe  	sh	a1, -18(s0)
8021670a: 81 45        	mv	a1, zero
8021670c: 63 0a b5 00  	beq	a0, a1, 0x80216720 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.178+0x3c>
80216710: 09 a0        	j	0x80216712 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.178+0x2e>
80216712: 03 35 84 fd  	ld	a0, -40(s0)
80216716: 97 a0 fe ff  	auipc	ra, 1048554
8021671a: e7 80 c0 18  	jalr	396(ra)
8021671e: 11 a0        	j	0x80216722 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.178+0x3e>
80216720: 09 a0        	j	0x80216722 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.178+0x3e>
80216722: 03 15 e4 fe  	lh	a0, -18(s0)
80216726: 02 74        	ld	s0, 32(sp)
80216728: a2 70        	ld	ra, 40(sp)
8021672a: 45 61        	addi	sp, sp, 48
8021672c: 82 80        	ret

000000008021672e <std.mem.startsWith>:
; pub fn startsWith(comptime T: type, haystack: []const T, needle: []const T) bool {
8021672e: 1d 71        	addi	sp, sp, -96
80216730: 86 ec        	sd	ra, 88(sp)
80216732: a2 e8        	sd	s0, 80(sp)
80216734: 80 10        	addi	s0, sp, 96
80216736: 23 3c b4 fa  	sd	a1, -72(s0)
8021673a: 23 30 a4 fc  	sd	a0, -64(s0)
;     return if (needle.len > haystack.len) false else eql(T, haystack[0..needle.len], needle);
8021673e: 8c 65        	ld	a1, 8(a1)
80216740: 08 65        	ld	a0, 8(a0)
80216742: 63 77 b5 00  	bgeu	a0, a1, 0x80216750 <std.mem.startsWith+0x22>
80216746: 09 a0        	j	0x80216748 <std.mem.startsWith+0x1a>
80216748: 01 45        	mv	a0, zero
;     return if (needle.len > haystack.len) false else eql(T, haystack[0..needle.len], needle);
8021674a: a3 07 a4 fe  	sb	a0, -17(s0)
8021674e: 05 a0        	j	0x8021676e <std.mem.startsWith+0x40>
80216750: 03 35 04 fc  	ld	a0, -64(s0)
80216754: 83 35 84 fb  	ld	a1, -72(s0)
80216758: 8c 65        	ld	a1, 8(a1)
8021675a: 23 34 b4 fa  	sd	a1, -88(s0)
8021675e: 08 65        	ld	a0, 8(a0)
80216760: 23 38 a4 fa  	sd	a0, -80(s0)
80216764: 81 45        	mv	a1, zero
80216766: 05 45        	addi	a0, zero, 1
80216768: 63 12 b5 02  	bne	a0, a1, 0x8021678c <.LBB253_8+0x12>
8021676c: 39 a0        	j	0x8021677a <.LBB253_8>
8021676e: 03 05 f4 fe  	lb	a0, -17(s0)
80216772: 46 64        	ld	s0, 80(sp)
80216774: e6 60        	ld	ra, 88(sp)
80216776: 25 61        	addi	sp, sp, 96
80216778: 82 80        	ret

000000008021677a <.LBB253_8>:
8021677a: 17 75 00 00  	auipc	a0, 7
8021677e: 13 05 65 b8  	addi	a0, a0, -1146
80216782: 81 45        	mv	a1, zero
80216784: 97 a0 fe ff  	auipc	ra, 1048554
80216788: e7 80 c0 91  	jalr	-1764(ra)
8021678c: 03 35 04 fb  	ld	a0, -80(s0)
80216790: 83 35 84 fa  	ld	a1, -88(s0)
80216794: 63 7c b5 00  	bgeu	a0, a1, 0x802167ac <.LBB253_9+0x12>
80216798: 09 a0        	j	0x8021679a <.LBB253_9>

000000008021679a <.LBB253_9>:
8021679a: 17 75 00 00  	auipc	a0, 7
8021679e: 13 05 65 b6  	addi	a0, a0, -1178
802167a2: 81 45        	mv	a1, zero
802167a4: 97 a0 fe ff  	auipc	ra, 1048554
802167a8: e7 80 c0 8f  	jalr	-1796(ra)
802167ac: 83 35 84 fb  	ld	a1, -72(s0)
802167b0: 03 35 84 fa  	ld	a0, -88(s0)
802167b4: 03 36 04 fc  	ld	a2, -64(s0)
802167b8: 10 62        	ld	a2, 0(a2)
802167ba: 23 3c c4 fc  	sd	a2, -40(s0)
802167be: 23 30 a4 fe  	sd	a0, -32(s0)
802167c2: 88 61        	ld	a0, 0(a1)
802167c4: 23 34 a4 fc  	sd	a0, -56(s0)
802167c8: 88 65        	ld	a0, 8(a1)
802167ca: 23 38 a4 fc  	sd	a0, -48(s0)
802167ce: 13 05 84 fd  	addi	a0, s0, -40
802167d2: 97 e0 ff ff  	auipc	ra, 1048574
802167d6: e7 80 20 b5  	jalr	-1198(ra)
802167da: 05 89        	andi	a0, a0, 1
802167dc: a3 07 a4 fe  	sb	a0, -17(s0)
802167e0: 79 b7        	j	0x8021676e <std.mem.startsWith+0x40>

00000000802167e2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.179>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
802167e2: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
802167e4: 06 ec        	sd	ra, 24(sp)
802167e6: 22 e8        	sd	s0, 16(sp)
802167e8: 00 10        	addi	s0, sp, 32
802167ea: 23 30 a4 fe  	sd	a0, -32(s0)
802167ee: 90 41        	lw	a2, 0(a1)
802167f0: 23 24 c4 fe  	sw	a2, -24(s0)
802167f4: 97 20 00 00  	auipc	ra, 2
802167f8: e7 80 20 d2  	jalr	-734(ra)
802167fc: aa 85        	mv	a1, a0
802167fe: 41 65        	lui	a0, 16
80216800: 7d 35        	addiw	a0, a0, -1
80216802: 6d 8d        	and	a0, a0, a1
80216804: 23 17 b4 fe  	sh	a1, -18(s0)
80216808: 81 45        	mv	a1, zero
8021680a: 63 0a b5 00  	beq	a0, a1, 0x8021681e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.179+0x3c>
8021680e: 09 a0        	j	0x80216810 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.179+0x2e>
80216810: 03 35 04 fe  	ld	a0, -32(s0)
80216814: 97 a0 fe ff  	auipc	ra, 1048554
80216818: e7 80 e0 08  	jalr	142(ra)
8021681c: 11 a0        	j	0x80216820 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.179+0x3e>
8021681e: 09 a0        	j	0x80216820 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.179+0x3e>
80216820: 03 15 e4 fe  	lh	a0, -18(s0)
80216824: 42 64        	ld	s0, 16(sp)
80216826: e2 60        	ld	ra, 24(sp)
80216828: 05 61        	addi	sp, sp, 32
8021682a: 82 80        	ret

000000008021682c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.180>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021682c: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
8021682e: 06 f4        	sd	ra, 40(sp)
80216830: 22 f0        	sd	s0, 32(sp)
80216832: 00 18        	addi	s0, sp, 48
80216834: 23 38 a4 fc  	sd	a0, -48(s0)
80216838: 90 65        	ld	a2, 8(a1)
8021683a: 23 30 c4 fe  	sd	a2, -32(s0)
8021683e: 90 61        	ld	a2, 0(a1)
80216840: 23 3c c4 fc  	sd	a2, -40(s0)
80216844: 97 20 00 00  	auipc	ra, 2
80216848: e7 80 40 d0  	jalr	-764(ra)
8021684c: aa 85        	mv	a1, a0
8021684e: 41 65        	lui	a0, 16
80216850: 7d 35        	addiw	a0, a0, -1
80216852: 6d 8d        	and	a0, a0, a1
80216854: 23 17 b4 fe  	sh	a1, -18(s0)
80216858: 81 45        	mv	a1, zero
8021685a: 63 0a b5 00  	beq	a0, a1, 0x8021686e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.180+0x42>
8021685e: 09 a0        	j	0x80216860 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.180+0x34>
80216860: 03 35 04 fd  	ld	a0, -48(s0)
80216864: 97 a0 fe ff  	auipc	ra, 1048554
80216868: e7 80 e0 03  	jalr	62(ra)
8021686c: 11 a0        	j	0x80216870 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.180+0x44>
8021686e: 09 a0        	j	0x80216870 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.180+0x44>
80216870: 03 15 e4 fe  	lh	a0, -18(s0)
80216874: 02 74        	ld	s0, 32(sp)
80216876: a2 70        	ld	ra, 40(sp)
80216878: 45 61        	addi	sp, sp, 48
8021687a: 82 80        	ret

000000008021687c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.181>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021687c: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
8021687e: 06 f4        	sd	ra, 40(sp)
80216880: 22 f0        	sd	s0, 32(sp)
80216882: 00 18        	addi	s0, sp, 48
80216884: 23 38 a4 fc  	sd	a0, -48(s0)
80216888: 90 65        	ld	a2, 8(a1)
8021688a: 23 30 c4 fe  	sd	a2, -32(s0)
8021688e: 90 61        	ld	a2, 0(a1)
80216890: 23 3c c4 fc  	sd	a2, -40(s0)
80216894: 97 20 00 00  	auipc	ra, 2
80216898: e7 80 c0 ce  	jalr	-788(ra)
8021689c: aa 85        	mv	a1, a0
8021689e: 41 65        	lui	a0, 16
802168a0: 7d 35        	addiw	a0, a0, -1
802168a2: 6d 8d        	and	a0, a0, a1
802168a4: 23 17 b4 fe  	sh	a1, -18(s0)
802168a8: 81 45        	mv	a1, zero
802168aa: 63 0a b5 00  	beq	a0, a1, 0x802168be <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.181+0x42>
802168ae: 09 a0        	j	0x802168b0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.181+0x34>
802168b0: 03 35 04 fd  	ld	a0, -48(s0)
802168b4: 97 a0 fe ff  	auipc	ra, 1048554
802168b8: e7 80 e0 fe  	jalr	-18(ra)
802168bc: 11 a0        	j	0x802168c0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.181+0x44>
802168be: 09 a0        	j	0x802168c0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.181+0x44>
802168c0: 03 15 e4 fe  	lh	a0, -18(s0)
802168c4: 02 74        	ld	s0, 32(sp)
802168c6: a2 70        	ld	ra, 40(sp)
802168c8: 45 61        	addi	sp, sp, 48
802168ca: 82 80        	ret

00000000802168cc <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.182>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
802168cc: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
802168ce: 06 f4        	sd	ra, 40(sp)
802168d0: 22 f0        	sd	s0, 32(sp)
802168d2: 00 18        	addi	s0, sp, 48
802168d4: 23 38 a4 fc  	sd	a0, -48(s0)
802168d8: 90 65        	ld	a2, 8(a1)
802168da: 23 30 c4 fe  	sd	a2, -32(s0)
802168de: 90 61        	ld	a2, 0(a1)
802168e0: 23 3c c4 fc  	sd	a2, -40(s0)
802168e4: 97 20 00 00  	auipc	ra, 2
802168e8: e7 80 40 cd  	jalr	-812(ra)
802168ec: aa 85        	mv	a1, a0
802168ee: 41 65        	lui	a0, 16
802168f0: 7d 35        	addiw	a0, a0, -1
802168f2: 6d 8d        	and	a0, a0, a1
802168f4: 23 17 b4 fe  	sh	a1, -18(s0)
802168f8: 81 45        	mv	a1, zero
802168fa: 63 0a b5 00  	beq	a0, a1, 0x8021690e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.182+0x42>
802168fe: 09 a0        	j	0x80216900 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.182+0x34>
80216900: 03 35 04 fd  	ld	a0, -48(s0)
80216904: 97 a0 fe ff  	auipc	ra, 1048554
80216908: e7 80 e0 f9  	jalr	-98(ra)
8021690c: 11 a0        	j	0x80216910 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.182+0x44>
8021690e: 09 a0        	j	0x80216910 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.182+0x44>
80216910: 03 15 e4 fe  	lh	a0, -18(s0)
80216914: 02 74        	ld	s0, 32(sp)
80216916: a2 70        	ld	ra, 40(sp)
80216918: 45 61        	addi	sp, sp, 48
8021691a: 82 80        	ret

000000008021691c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.183>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021691c: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
8021691e: 06 f4        	sd	ra, 40(sp)
80216920: 22 f0        	sd	s0, 32(sp)
80216922: 00 18        	addi	s0, sp, 48
80216924: 23 38 a4 fc  	sd	a0, -48(s0)
80216928: 90 65        	ld	a2, 8(a1)
8021692a: 23 30 c4 fe  	sd	a2, -32(s0)
8021692e: 90 61        	ld	a2, 0(a1)
80216930: 23 3c c4 fc  	sd	a2, -40(s0)
80216934: 97 20 00 00  	auipc	ra, 2
80216938: e7 80 20 ce  	jalr	-798(ra)
8021693c: aa 85        	mv	a1, a0
8021693e: 41 65        	lui	a0, 16
80216940: 7d 35        	addiw	a0, a0, -1
80216942: 6d 8d        	and	a0, a0, a1
80216944: 23 17 b4 fe  	sh	a1, -18(s0)
80216948: 81 45        	mv	a1, zero
8021694a: 63 0a b5 00  	beq	a0, a1, 0x8021695e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.183+0x42>
8021694e: 09 a0        	j	0x80216950 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.183+0x34>
80216950: 03 35 04 fd  	ld	a0, -48(s0)
80216954: 97 a0 fe ff  	auipc	ra, 1048554
80216958: e7 80 e0 f4  	jalr	-178(ra)
8021695c: 11 a0        	j	0x80216960 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.183+0x44>
8021695e: 09 a0        	j	0x80216960 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.183+0x44>
80216960: 03 15 e4 fe  	lh	a0, -18(s0)
80216964: 02 74        	ld	s0, 32(sp)
80216966: a2 70        	ld	ra, 40(sp)
80216968: 45 61        	addi	sp, sp, 48
8021696a: 82 80        	ret

000000008021696c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.185>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021696c: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
8021696e: 06 f4        	sd	ra, 40(sp)
80216970: 22 f0        	sd	s0, 32(sp)
80216972: 00 18        	addi	s0, sp, 48
80216974: 23 38 a4 fc  	sd	a0, -48(s0)
80216978: 90 65        	ld	a2, 8(a1)
8021697a: 23 30 c4 fe  	sd	a2, -32(s0)
8021697e: 90 61        	ld	a2, 0(a1)
80216980: 23 3c c4 fc  	sd	a2, -40(s0)
80216984: 97 20 00 00  	auipc	ra, 2
80216988: e7 80 40 d1  	jalr	-748(ra)
8021698c: aa 85        	mv	a1, a0
8021698e: 41 65        	lui	a0, 16
80216990: 7d 35        	addiw	a0, a0, -1
80216992: 6d 8d        	and	a0, a0, a1
80216994: 23 17 b4 fe  	sh	a1, -18(s0)
80216998: 81 45        	mv	a1, zero
8021699a: 63 0a b5 00  	beq	a0, a1, 0x802169ae <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.185+0x42>
8021699e: 09 a0        	j	0x802169a0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.185+0x34>
802169a0: 03 35 04 fd  	ld	a0, -48(s0)
802169a4: 97 a0 fe ff  	auipc	ra, 1048554
802169a8: e7 80 e0 ef  	jalr	-258(ra)
802169ac: 11 a0        	j	0x802169b0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.185+0x44>
802169ae: 09 a0        	j	0x802169b0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.185+0x44>
802169b0: 03 15 e4 fe  	lh	a0, -18(s0)
802169b4: 02 74        	ld	s0, 32(sp)
802169b6: a2 70        	ld	ra, 40(sp)
802169b8: 45 61        	addi	sp, sp, 48
802169ba: 82 80        	ret

00000000802169bc <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.186>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
802169bc: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
802169be: 06 f4        	sd	ra, 40(sp)
802169c0: 22 f0        	sd	s0, 32(sp)
802169c2: 00 18        	addi	s0, sp, 48
802169c4: 23 38 a4 fc  	sd	a0, -48(s0)
802169c8: 90 65        	ld	a2, 8(a1)
802169ca: 23 30 c4 fe  	sd	a2, -32(s0)
802169ce: 90 61        	ld	a2, 0(a1)
802169d0: 23 3c c4 fc  	sd	a2, -40(s0)
802169d4: 97 20 00 00  	auipc	ra, 2
802169d8: e7 80 c0 cf  	jalr	-772(ra)
802169dc: aa 85        	mv	a1, a0
802169de: 41 65        	lui	a0, 16
802169e0: 7d 35        	addiw	a0, a0, -1
802169e2: 6d 8d        	and	a0, a0, a1
802169e4: 23 17 b4 fe  	sh	a1, -18(s0)
802169e8: 81 45        	mv	a1, zero
802169ea: 63 0a b5 00  	beq	a0, a1, 0x802169fe <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.186+0x42>
802169ee: 09 a0        	j	0x802169f0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.186+0x34>
802169f0: 03 35 04 fd  	ld	a0, -48(s0)
802169f4: 97 a0 fe ff  	auipc	ra, 1048554
802169f8: e7 80 e0 ea  	jalr	-338(ra)
802169fc: 11 a0        	j	0x80216a00 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.186+0x44>
802169fe: 09 a0        	j	0x80216a00 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.186+0x44>
80216a00: 03 15 e4 fe  	lh	a0, -18(s0)
80216a04: 02 74        	ld	s0, 32(sp)
80216a06: a2 70        	ld	ra, 40(sp)
80216a08: 45 61        	addi	sp, sp, 48
80216a0a: 82 80        	ret

0000000080216a0c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.187>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80216a0c: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
80216a0e: 06 f4        	sd	ra, 40(sp)
80216a10: 22 f0        	sd	s0, 32(sp)
80216a12: 00 18        	addi	s0, sp, 48
80216a14: 23 38 a4 fc  	sd	a0, -48(s0)
80216a18: 90 65        	ld	a2, 8(a1)
80216a1a: 23 30 c4 fe  	sd	a2, -32(s0)
80216a1e: 90 61        	ld	a2, 0(a1)
80216a20: 23 3c c4 fc  	sd	a2, -40(s0)
80216a24: 97 20 00 00  	auipc	ra, 2
80216a28: e7 80 40 ce  	jalr	-796(ra)
80216a2c: aa 85        	mv	a1, a0
80216a2e: 41 65        	lui	a0, 16
80216a30: 7d 35        	addiw	a0, a0, -1
80216a32: 6d 8d        	and	a0, a0, a1
80216a34: 23 17 b4 fe  	sh	a1, -18(s0)
80216a38: 81 45        	mv	a1, zero
80216a3a: 63 0a b5 00  	beq	a0, a1, 0x80216a4e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.187+0x42>
80216a3e: 09 a0        	j	0x80216a40 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.187+0x34>
80216a40: 03 35 04 fd  	ld	a0, -48(s0)
80216a44: 97 a0 fe ff  	auipc	ra, 1048554
80216a48: e7 80 e0 e5  	jalr	-418(ra)
80216a4c: 11 a0        	j	0x80216a50 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.187+0x44>
80216a4e: 09 a0        	j	0x80216a50 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.187+0x44>
80216a50: 03 15 e4 fe  	lh	a0, -18(s0)
80216a54: 02 74        	ld	s0, 32(sp)
80216a56: a2 70        	ld	ra, 40(sp)
80216a58: 45 61        	addi	sp, sp, 48
80216a5a: 82 80        	ret

0000000080216a5c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.188>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80216a5c: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80216a5e: 06 ec        	sd	ra, 24(sp)
80216a60: 22 e8        	sd	s0, 16(sp)
80216a62: 00 10        	addi	s0, sp, 32
80216a64: 23 30 a4 fe  	sd	a0, -32(s0)
80216a68: 90 41        	lw	a2, 0(a1)
80216a6a: 23 24 c4 fe  	sw	a2, -24(s0)
80216a6e: 97 20 00 00  	auipc	ra, 2
80216a72: e7 80 20 cd  	jalr	-814(ra)
80216a76: aa 85        	mv	a1, a0
80216a78: 41 65        	lui	a0, 16
80216a7a: 7d 35        	addiw	a0, a0, -1
80216a7c: 6d 8d        	and	a0, a0, a1
80216a7e: 23 17 b4 fe  	sh	a1, -18(s0)
80216a82: 81 45        	mv	a1, zero
80216a84: 63 0a b5 00  	beq	a0, a1, 0x80216a98 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.188+0x3c>
80216a88: 09 a0        	j	0x80216a8a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.188+0x2e>
80216a8a: 03 35 04 fe  	ld	a0, -32(s0)
80216a8e: 97 a0 fe ff  	auipc	ra, 1048554
80216a92: e7 80 40 e1  	jalr	-492(ra)
80216a96: 11 a0        	j	0x80216a9a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.188+0x3e>
80216a98: 09 a0        	j	0x80216a9a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.188+0x3e>
80216a9a: 03 15 e4 fe  	lh	a0, -18(s0)
80216a9e: 42 64        	ld	s0, 16(sp)
80216aa0: e2 60        	ld	ra, 24(sp)
80216aa2: 05 61        	addi	sp, sp, 32
80216aa4: 82 80        	ret

0000000080216aa6 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.189>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80216aa6: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80216aa8: 06 ec        	sd	ra, 24(sp)
80216aaa: 22 e8        	sd	s0, 16(sp)
80216aac: 00 10        	addi	s0, sp, 32
80216aae: 23 30 a4 fe  	sd	a0, -32(s0)
80216ab2: 90 41        	lw	a2, 0(a1)
80216ab4: 23 24 c4 fe  	sw	a2, -24(s0)
80216ab8: 97 20 00 00  	auipc	ra, 2
80216abc: e7 80 a0 cb  	jalr	-838(ra)
80216ac0: aa 85        	mv	a1, a0
80216ac2: 41 65        	lui	a0, 16
80216ac4: 7d 35        	addiw	a0, a0, -1
80216ac6: 6d 8d        	and	a0, a0, a1
80216ac8: 23 17 b4 fe  	sh	a1, -18(s0)
80216acc: 81 45        	mv	a1, zero
80216ace: 63 0a b5 00  	beq	a0, a1, 0x80216ae2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.189+0x3c>
80216ad2: 09 a0        	j	0x80216ad4 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.189+0x2e>
80216ad4: 03 35 04 fe  	ld	a0, -32(s0)
80216ad8: 97 a0 fe ff  	auipc	ra, 1048554
80216adc: e7 80 a0 dc  	jalr	-566(ra)
80216ae0: 11 a0        	j	0x80216ae4 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.189+0x3e>
80216ae2: 09 a0        	j	0x80216ae4 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.189+0x3e>
80216ae4: 03 15 e4 fe  	lh	a0, -18(s0)
80216ae8: 42 64        	ld	s0, 16(sp)
80216aea: e2 60        	ld	ra, 24(sp)
80216aec: 05 61        	addi	sp, sp, 32
80216aee: 82 80        	ret

0000000080216af0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.190>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80216af0: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80216af2: 06 ec        	sd	ra, 24(sp)
80216af4: 22 e8        	sd	s0, 16(sp)
80216af6: 00 10        	addi	s0, sp, 32
80216af8: 23 30 a4 fe  	sd	a0, -32(s0)
80216afc: 90 41        	lw	a2, 0(a1)
80216afe: 23 24 c4 fe  	sw	a2, -24(s0)
80216b02: 97 20 00 00  	auipc	ra, 2
80216b06: e7 80 20 ca  	jalr	-862(ra)
80216b0a: aa 85        	mv	a1, a0
80216b0c: 41 65        	lui	a0, 16
80216b0e: 7d 35        	addiw	a0, a0, -1
80216b10: 6d 8d        	and	a0, a0, a1
80216b12: 23 17 b4 fe  	sh	a1, -18(s0)
80216b16: 81 45        	mv	a1, zero
80216b18: 63 0a b5 00  	beq	a0, a1, 0x80216b2c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.190+0x3c>
80216b1c: 09 a0        	j	0x80216b1e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.190+0x2e>
80216b1e: 03 35 04 fe  	ld	a0, -32(s0)
80216b22: 97 a0 fe ff  	auipc	ra, 1048554
80216b26: e7 80 00 d8  	jalr	-640(ra)
80216b2a: 11 a0        	j	0x80216b2e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.190+0x3e>
80216b2c: 09 a0        	j	0x80216b2e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.190+0x3e>
80216b2e: 03 15 e4 fe  	lh	a0, -18(s0)
80216b32: 42 64        	ld	s0, 16(sp)
80216b34: e2 60        	ld	ra, 24(sp)
80216b36: 05 61        	addi	sp, sp, 32
80216b38: 82 80        	ret

0000000080216b3a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.191>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80216b3a: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80216b3c: 06 ec        	sd	ra, 24(sp)
80216b3e: 22 e8        	sd	s0, 16(sp)
80216b40: 00 10        	addi	s0, sp, 32
80216b42: 23 30 a4 fe  	sd	a0, -32(s0)
80216b46: 90 41        	lw	a2, 0(a1)
80216b48: 23 24 c4 fe  	sw	a2, -24(s0)
80216b4c: 97 20 00 00  	auipc	ra, 2
80216b50: e7 80 a0 c8  	jalr	-886(ra)
80216b54: aa 85        	mv	a1, a0
80216b56: 41 65        	lui	a0, 16
80216b58: 7d 35        	addiw	a0, a0, -1
80216b5a: 6d 8d        	and	a0, a0, a1
80216b5c: 23 17 b4 fe  	sh	a1, -18(s0)
80216b60: 81 45        	mv	a1, zero
80216b62: 63 0a b5 00  	beq	a0, a1, 0x80216b76 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.191+0x3c>
80216b66: 09 a0        	j	0x80216b68 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.191+0x2e>
80216b68: 03 35 04 fe  	ld	a0, -32(s0)
80216b6c: 97 a0 fe ff  	auipc	ra, 1048554
80216b70: e7 80 60 d3  	jalr	-714(ra)
80216b74: 11 a0        	j	0x80216b78 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.191+0x3e>
80216b76: 09 a0        	j	0x80216b78 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.191+0x3e>
80216b78: 03 15 e4 fe  	lh	a0, -18(s0)
80216b7c: 42 64        	ld	s0, 16(sp)
80216b7e: e2 60        	ld	ra, 24(sp)
80216b80: 05 61        	addi	sp, sp, 32
80216b82: 82 80        	ret

0000000080216b84 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.192>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80216b84: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80216b86: 06 ec        	sd	ra, 24(sp)
80216b88: 22 e8        	sd	s0, 16(sp)
80216b8a: 00 10        	addi	s0, sp, 32
80216b8c: 23 30 a4 fe  	sd	a0, -32(s0)
80216b90: 90 41        	lw	a2, 0(a1)
80216b92: 23 24 c4 fe  	sw	a2, -24(s0)
80216b96: 97 20 00 00  	auipc	ra, 2
80216b9a: e7 80 20 c7  	jalr	-910(ra)
80216b9e: aa 85        	mv	a1, a0
80216ba0: 41 65        	lui	a0, 16
80216ba2: 7d 35        	addiw	a0, a0, -1
80216ba4: 6d 8d        	and	a0, a0, a1
80216ba6: 23 17 b4 fe  	sh	a1, -18(s0)
80216baa: 81 45        	mv	a1, zero
80216bac: 63 0a b5 00  	beq	a0, a1, 0x80216bc0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.192+0x3c>
80216bb0: 09 a0        	j	0x80216bb2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.192+0x2e>
80216bb2: 03 35 04 fe  	ld	a0, -32(s0)
80216bb6: 97 a0 fe ff  	auipc	ra, 1048554
80216bba: e7 80 c0 ce  	jalr	-788(ra)
80216bbe: 11 a0        	j	0x80216bc2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.192+0x3e>
80216bc0: 09 a0        	j	0x80216bc2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.192+0x3e>
80216bc2: 03 15 e4 fe  	lh	a0, -18(s0)
80216bc6: 42 64        	ld	s0, 16(sp)
80216bc8: e2 60        	ld	ra, 24(sp)
80216bca: 05 61        	addi	sp, sp, 32
80216bcc: 82 80        	ret

0000000080216bce <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.193>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80216bce: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80216bd0: 06 ec        	sd	ra, 24(sp)
80216bd2: 22 e8        	sd	s0, 16(sp)
80216bd4: 00 10        	addi	s0, sp, 32
80216bd6: 23 30 a4 fe  	sd	a0, -32(s0)
80216bda: 90 41        	lw	a2, 0(a1)
80216bdc: 23 24 c4 fe  	sw	a2, -24(s0)
80216be0: 97 20 00 00  	auipc	ra, 2
80216be4: e7 80 a0 c5  	jalr	-934(ra)
80216be8: aa 85        	mv	a1, a0
80216bea: 41 65        	lui	a0, 16
80216bec: 7d 35        	addiw	a0, a0, -1
80216bee: 6d 8d        	and	a0, a0, a1
80216bf0: 23 17 b4 fe  	sh	a1, -18(s0)
80216bf4: 81 45        	mv	a1, zero
80216bf6: 63 0a b5 00  	beq	a0, a1, 0x80216c0a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.193+0x3c>
80216bfa: 09 a0        	j	0x80216bfc <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.193+0x2e>
80216bfc: 03 35 04 fe  	ld	a0, -32(s0)
80216c00: 97 a0 fe ff  	auipc	ra, 1048554
80216c04: e7 80 20 ca  	jalr	-862(ra)
80216c08: 11 a0        	j	0x80216c0c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.193+0x3e>
80216c0a: 09 a0        	j	0x80216c0c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.193+0x3e>
80216c0c: 03 15 e4 fe  	lh	a0, -18(s0)
80216c10: 42 64        	ld	s0, 16(sp)
80216c12: e2 60        	ld	ra, 24(sp)
80216c14: 05 61        	addi	sp, sp, 32
80216c16: 82 80        	ret

0000000080216c18 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.194>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80216c18: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80216c1a: 06 ec        	sd	ra, 24(sp)
80216c1c: 22 e8        	sd	s0, 16(sp)
80216c1e: 00 10        	addi	s0, sp, 32
80216c20: 23 30 a4 fe  	sd	a0, -32(s0)
80216c24: 90 41        	lw	a2, 0(a1)
80216c26: 23 24 c4 fe  	sw	a2, -24(s0)
80216c2a: 97 20 00 00  	auipc	ra, 2
80216c2e: e7 80 20 c4  	jalr	-958(ra)
80216c32: aa 85        	mv	a1, a0
80216c34: 41 65        	lui	a0, 16
80216c36: 7d 35        	addiw	a0, a0, -1
80216c38: 6d 8d        	and	a0, a0, a1
80216c3a: 23 17 b4 fe  	sh	a1, -18(s0)
80216c3e: 81 45        	mv	a1, zero
80216c40: 63 0a b5 00  	beq	a0, a1, 0x80216c54 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.194+0x3c>
80216c44: 09 a0        	j	0x80216c46 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.194+0x2e>
80216c46: 03 35 04 fe  	ld	a0, -32(s0)
80216c4a: 97 a0 fe ff  	auipc	ra, 1048554
80216c4e: e7 80 80 c5  	jalr	-936(ra)
80216c52: 11 a0        	j	0x80216c56 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.194+0x3e>
80216c54: 09 a0        	j	0x80216c56 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.194+0x3e>
80216c56: 03 15 e4 fe  	lh	a0, -18(s0)
80216c5a: 42 64        	ld	s0, 16(sp)
80216c5c: e2 60        	ld	ra, 24(sp)
80216c5e: 05 61        	addi	sp, sp, 32
80216c60: 82 80        	ret

0000000080216c62 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.195>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80216c62: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
80216c64: 06 f4        	sd	ra, 40(sp)
80216c66: 22 f0        	sd	s0, 32(sp)
80216c68: 00 18        	addi	s0, sp, 48
80216c6a: 23 38 a4 fc  	sd	a0, -48(s0)
80216c6e: 90 65        	ld	a2, 8(a1)
80216c70: 23 30 c4 fe  	sd	a2, -32(s0)
80216c74: 90 61        	ld	a2, 0(a1)
80216c76: 23 3c c4 fc  	sd	a2, -40(s0)
80216c7a: 97 20 00 00  	auipc	ra, 2
80216c7e: e7 80 40 c2  	jalr	-988(ra)
80216c82: aa 85        	mv	a1, a0
80216c84: 41 65        	lui	a0, 16
80216c86: 7d 35        	addiw	a0, a0, -1
80216c88: 6d 8d        	and	a0, a0, a1
80216c8a: 23 17 b4 fe  	sh	a1, -18(s0)
80216c8e: 81 45        	mv	a1, zero
80216c90: 63 0a b5 00  	beq	a0, a1, 0x80216ca4 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.195+0x42>
80216c94: 09 a0        	j	0x80216c96 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.195+0x34>
80216c96: 03 35 04 fd  	ld	a0, -48(s0)
80216c9a: 97 a0 fe ff  	auipc	ra, 1048554
80216c9e: e7 80 80 c0  	jalr	-1016(ra)
80216ca2: 11 a0        	j	0x80216ca6 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.195+0x44>
80216ca4: 09 a0        	j	0x80216ca6 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.195+0x44>
80216ca6: 03 15 e4 fe  	lh	a0, -18(s0)
80216caa: 02 74        	ld	s0, 32(sp)
80216cac: a2 70        	ld	ra, 40(sp)
80216cae: 45 61        	addi	sp, sp, 48
80216cb0: 82 80        	ret

0000000080216cb2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.196>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80216cb2: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
80216cb4: 06 f4        	sd	ra, 40(sp)
80216cb6: 22 f0        	sd	s0, 32(sp)
80216cb8: 00 18        	addi	s0, sp, 48
80216cba: 23 3c a4 fc  	sd	a0, -40(s0)
80216cbe: 90 61        	ld	a2, 0(a1)
80216cc0: 23 30 c4 fe  	sd	a2, -32(s0)
80216cc4: 97 20 00 00  	auipc	ra, 2
80216cc8: e7 80 80 c7  	jalr	-904(ra)
80216ccc: aa 85        	mv	a1, a0
80216cce: 41 65        	lui	a0, 16
80216cd0: 7d 35        	addiw	a0, a0, -1
80216cd2: 6d 8d        	and	a0, a0, a1
80216cd4: 23 17 b4 fe  	sh	a1, -18(s0)
80216cd8: 81 45        	mv	a1, zero
80216cda: 63 0a b5 00  	beq	a0, a1, 0x80216cee <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.196+0x3c>
80216cde: 09 a0        	j	0x80216ce0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.196+0x2e>
80216ce0: 03 35 84 fd  	ld	a0, -40(s0)
80216ce4: 97 a0 fe ff  	auipc	ra, 1048554
80216ce8: e7 80 e0 bb  	jalr	-1090(ra)
80216cec: 11 a0        	j	0x80216cf0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.196+0x3e>
80216cee: 09 a0        	j	0x80216cf0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.196+0x3e>
80216cf0: 03 15 e4 fe  	lh	a0, -18(s0)
80216cf4: 02 74        	ld	s0, 32(sp)
80216cf6: a2 70        	ld	ra, 40(sp)
80216cf8: 45 61        	addi	sp, sp, 48
80216cfa: 82 80        	ret

0000000080216cfc <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.197>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80216cfc: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80216cfe: 06 ec        	sd	ra, 24(sp)
80216d00: 22 e8        	sd	s0, 16(sp)
80216d02: 00 10        	addi	s0, sp, 32
80216d04: 23 30 a4 fe  	sd	a0, -32(s0)
80216d08: 90 41        	lw	a2, 0(a1)
80216d0a: 23 24 c4 fe  	sw	a2, -24(s0)
80216d0e: 97 20 00 00  	auipc	ra, 2
80216d12: e7 80 00 c6  	jalr	-928(ra)
80216d16: aa 85        	mv	a1, a0
80216d18: 41 65        	lui	a0, 16
80216d1a: 7d 35        	addiw	a0, a0, -1
80216d1c: 6d 8d        	and	a0, a0, a1
80216d1e: 23 17 b4 fe  	sh	a1, -18(s0)
80216d22: 81 45        	mv	a1, zero
80216d24: 63 0a b5 00  	beq	a0, a1, 0x80216d38 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.197+0x3c>
80216d28: 09 a0        	j	0x80216d2a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.197+0x2e>
80216d2a: 03 35 04 fe  	ld	a0, -32(s0)
80216d2e: 97 a0 fe ff  	auipc	ra, 1048554
80216d32: e7 80 40 b7  	jalr	-1164(ra)
80216d36: 11 a0        	j	0x80216d3a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.197+0x3e>
80216d38: 09 a0        	j	0x80216d3a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.197+0x3e>
80216d3a: 03 15 e4 fe  	lh	a0, -18(s0)
80216d3e: 42 64        	ld	s0, 16(sp)
80216d40: e2 60        	ld	ra, 24(sp)
80216d42: 05 61        	addi	sp, sp, 32
80216d44: 82 80        	ret

0000000080216d46 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.198>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80216d46: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
80216d48: 06 f4        	sd	ra, 40(sp)
80216d4a: 22 f0        	sd	s0, 32(sp)
80216d4c: 00 18        	addi	s0, sp, 48
80216d4e: 23 38 a4 fc  	sd	a0, -48(s0)
80216d52: 90 65        	ld	a2, 8(a1)
80216d54: 23 30 c4 fe  	sd	a2, -32(s0)
80216d58: 90 61        	ld	a2, 0(a1)
80216d5a: 23 3c c4 fc  	sd	a2, -40(s0)
80216d5e: 97 20 00 00  	auipc	ra, 2
80216d62: e7 80 20 c4  	jalr	-958(ra)
80216d66: aa 85        	mv	a1, a0
80216d68: 41 65        	lui	a0, 16
80216d6a: 7d 35        	addiw	a0, a0, -1
80216d6c: 6d 8d        	and	a0, a0, a1
80216d6e: 23 17 b4 fe  	sh	a1, -18(s0)
80216d72: 81 45        	mv	a1, zero
80216d74: 63 0a b5 00  	beq	a0, a1, 0x80216d88 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.198+0x42>
80216d78: 09 a0        	j	0x80216d7a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.198+0x34>
80216d7a: 03 35 04 fd  	ld	a0, -48(s0)
80216d7e: 97 a0 fe ff  	auipc	ra, 1048554
80216d82: e7 80 40 b2  	jalr	-1244(ra)
80216d86: 11 a0        	j	0x80216d8a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.198+0x44>
80216d88: 09 a0        	j	0x80216d8a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.198+0x44>
80216d8a: 03 15 e4 fe  	lh	a0, -18(s0)
80216d8e: 02 74        	ld	s0, 32(sp)
80216d90: a2 70        	ld	ra, 40(sp)
80216d92: 45 61        	addi	sp, sp, 48
80216d94: 82 80        	ret

0000000080216d96 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.199>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80216d96: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
80216d98: 06 f4        	sd	ra, 40(sp)
80216d9a: 22 f0        	sd	s0, 32(sp)
80216d9c: 00 18        	addi	s0, sp, 48
80216d9e: 23 38 a4 fc  	sd	a0, -48(s0)
80216da2: 90 65        	ld	a2, 8(a1)
80216da4: 23 30 c4 fe  	sd	a2, -32(s0)
80216da8: 90 61        	ld	a2, 0(a1)
80216daa: 23 3c c4 fc  	sd	a2, -40(s0)
80216dae: 97 20 00 00  	auipc	ra, 2
80216db2: e7 80 a0 c2  	jalr	-982(ra)
80216db6: aa 85        	mv	a1, a0
80216db8: 41 65        	lui	a0, 16
80216dba: 7d 35        	addiw	a0, a0, -1
80216dbc: 6d 8d        	and	a0, a0, a1
80216dbe: 23 17 b4 fe  	sh	a1, -18(s0)
80216dc2: 81 45        	mv	a1, zero
80216dc4: 63 0a b5 00  	beq	a0, a1, 0x80216dd8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.199+0x42>
80216dc8: 09 a0        	j	0x80216dca <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.199+0x34>
80216dca: 03 35 04 fd  	ld	a0, -48(s0)
80216dce: 97 a0 fe ff  	auipc	ra, 1048554
80216dd2: e7 80 40 ad  	jalr	-1324(ra)
80216dd6: 11 a0        	j	0x80216dda <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.199+0x44>
80216dd8: 09 a0        	j	0x80216dda <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.199+0x44>
80216dda: 03 15 e4 fe  	lh	a0, -18(s0)
80216dde: 02 74        	ld	s0, 32(sp)
80216de0: a2 70        	ld	ra, 40(sp)
80216de2: 45 61        	addi	sp, sp, 48
80216de4: 82 80        	ret

0000000080216de6 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.200>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80216de6: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80216de8: 06 ec        	sd	ra, 24(sp)
80216dea: 22 e8        	sd	s0, 16(sp)
80216dec: 00 10        	addi	s0, sp, 32
80216dee: 23 30 a4 fe  	sd	a0, -32(s0)
80216df2: 90 41        	lw	a2, 0(a1)
80216df4: 23 24 c4 fe  	sw	a2, -24(s0)
80216df8: 97 20 00 00  	auipc	ra, 2
80216dfc: e7 80 80 c1  	jalr	-1000(ra)
80216e00: aa 85        	mv	a1, a0
80216e02: 41 65        	lui	a0, 16
80216e04: 7d 35        	addiw	a0, a0, -1
80216e06: 6d 8d        	and	a0, a0, a1
80216e08: 23 17 b4 fe  	sh	a1, -18(s0)
80216e0c: 81 45        	mv	a1, zero
80216e0e: 63 0a b5 00  	beq	a0, a1, 0x80216e22 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.200+0x3c>
80216e12: 09 a0        	j	0x80216e14 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.200+0x2e>
80216e14: 03 35 04 fe  	ld	a0, -32(s0)
80216e18: 97 a0 fe ff  	auipc	ra, 1048554
80216e1c: e7 80 a0 a8  	jalr	-1398(ra)
80216e20: 11 a0        	j	0x80216e24 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.200+0x3e>
80216e22: 09 a0        	j	0x80216e24 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.200+0x3e>
80216e24: 03 15 e4 fe  	lh	a0, -18(s0)
80216e28: 42 64        	ld	s0, 16(sp)
80216e2a: e2 60        	ld	ra, 24(sp)
80216e2c: 05 61        	addi	sp, sp, 32
80216e2e: 82 80        	ret

0000000080216e30 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.201>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80216e30: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80216e32: 06 ec        	sd	ra, 24(sp)
80216e34: 22 e8        	sd	s0, 16(sp)
80216e36: 00 10        	addi	s0, sp, 32
80216e38: 23 30 a4 fe  	sd	a0, -32(s0)
80216e3c: 90 41        	lw	a2, 0(a1)
80216e3e: 23 24 c4 fe  	sw	a2, -24(s0)
80216e42: 97 20 00 00  	auipc	ra, 2
80216e46: e7 80 00 c0  	jalr	-1024(ra)
80216e4a: aa 85        	mv	a1, a0
80216e4c: 41 65        	lui	a0, 16
80216e4e: 7d 35        	addiw	a0, a0, -1
80216e50: 6d 8d        	and	a0, a0, a1
80216e52: 23 17 b4 fe  	sh	a1, -18(s0)
80216e56: 81 45        	mv	a1, zero
80216e58: 63 0a b5 00  	beq	a0, a1, 0x80216e6c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.201+0x3c>
80216e5c: 09 a0        	j	0x80216e5e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.201+0x2e>
80216e5e: 03 35 04 fe  	ld	a0, -32(s0)
80216e62: 97 a0 fe ff  	auipc	ra, 1048554
80216e66: e7 80 00 a4  	jalr	-1472(ra)
80216e6a: 11 a0        	j	0x80216e6e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.201+0x3e>
80216e6c: 09 a0        	j	0x80216e6e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.201+0x3e>
80216e6e: 03 15 e4 fe  	lh	a0, -18(s0)
80216e72: 42 64        	ld	s0, 16(sp)
80216e74: e2 60        	ld	ra, 24(sp)
80216e76: 05 61        	addi	sp, sp, 32
80216e78: 82 80        	ret

0000000080216e7a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.202>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80216e7a: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80216e7c: 06 ec        	sd	ra, 24(sp)
80216e7e: 22 e8        	sd	s0, 16(sp)
80216e80: 00 10        	addi	s0, sp, 32
80216e82: 23 30 a4 fe  	sd	a0, -32(s0)
80216e86: 90 41        	lw	a2, 0(a1)
80216e88: 23 24 c4 fe  	sw	a2, -24(s0)
80216e8c: 97 20 00 00  	auipc	ra, 2
80216e90: e7 80 80 be  	jalr	-1048(ra)
80216e94: aa 85        	mv	a1, a0
80216e96: 41 65        	lui	a0, 16
80216e98: 7d 35        	addiw	a0, a0, -1
80216e9a: 6d 8d        	and	a0, a0, a1
80216e9c: 23 17 b4 fe  	sh	a1, -18(s0)
80216ea0: 81 45        	mv	a1, zero
80216ea2: 63 0a b5 00  	beq	a0, a1, 0x80216eb6 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.202+0x3c>
80216ea6: 09 a0        	j	0x80216ea8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.202+0x2e>
80216ea8: 03 35 04 fe  	ld	a0, -32(s0)
80216eac: 97 a0 fe ff  	auipc	ra, 1048554
80216eb0: e7 80 60 9f  	jalr	-1546(ra)
80216eb4: 11 a0        	j	0x80216eb8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.202+0x3e>
80216eb6: 09 a0        	j	0x80216eb8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.202+0x3e>
80216eb8: 03 15 e4 fe  	lh	a0, -18(s0)
80216ebc: 42 64        	ld	s0, 16(sp)
80216ebe: e2 60        	ld	ra, 24(sp)
80216ec0: 05 61        	addi	sp, sp, 32
80216ec2: 82 80        	ret

0000000080216ec4 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.203>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80216ec4: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
80216ec6: 06 f4        	sd	ra, 40(sp)
80216ec8: 22 f0        	sd	s0, 32(sp)
80216eca: 00 18        	addi	s0, sp, 48
80216ecc: 23 38 a4 fc  	sd	a0, -48(s0)
80216ed0: 83 e6 85 00  	lwu	a3, 8(a1)
80216ed4: 03 e6 c5 00  	lwu	a2, 12(a1)
80216ed8: 02 16        	slli	a2, a2, 32
80216eda: 55 8e        	or	a2, a2, a3
80216edc: 23 30 c4 fe  	sd	a2, -32(s0)
80216ee0: 83 e6 05 00  	lwu	a3, 0(a1)
80216ee4: 03 e6 45 00  	lwu	a2, 4(a1)
80216ee8: 02 16        	slli	a2, a2, 32
80216eea: 55 8e        	or	a2, a2, a3
80216eec: 23 3c c4 fc  	sd	a2, -40(s0)
80216ef0: 97 20 00 00  	auipc	ra, 2
80216ef4: e7 80 60 bb  	jalr	-1098(ra)
80216ef8: aa 85        	mv	a1, a0
80216efa: 41 65        	lui	a0, 16
80216efc: 7d 35        	addiw	a0, a0, -1
80216efe: 6d 8d        	and	a0, a0, a1
80216f00: 23 17 b4 fe  	sh	a1, -18(s0)
80216f04: 81 45        	mv	a1, zero
80216f06: 63 0a b5 00  	beq	a0, a1, 0x80216f1a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.203+0x56>
80216f0a: 09 a0        	j	0x80216f0c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.203+0x48>
80216f0c: 03 35 04 fd  	ld	a0, -48(s0)
80216f10: 97 a0 fe ff  	auipc	ra, 1048554
80216f14: e7 80 20 99  	jalr	-1646(ra)
80216f18: 11 a0        	j	0x80216f1c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.203+0x58>
80216f1a: 09 a0        	j	0x80216f1c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.203+0x58>
80216f1c: 03 15 e4 fe  	lh	a0, -18(s0)
80216f20: 02 74        	ld	s0, 32(sp)
80216f22: a2 70        	ld	ra, 40(sp)
80216f24: 45 61        	addi	sp, sp, 48
80216f26: 82 80        	ret

0000000080216f28 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.204>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80216f28: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
80216f2a: 06 f4        	sd	ra, 40(sp)
80216f2c: 22 f0        	sd	s0, 32(sp)
80216f2e: 00 18        	addi	s0, sp, 48
80216f30: 23 38 a4 fc  	sd	a0, -48(s0)
80216f34: 90 65        	ld	a2, 8(a1)
80216f36: 23 30 c4 fe  	sd	a2, -32(s0)
80216f3a: 90 61        	ld	a2, 0(a1)
80216f3c: 23 3c c4 fc  	sd	a2, -40(s0)
80216f40: 97 20 00 00  	auipc	ra, 2
80216f44: e7 80 40 c8  	jalr	-892(ra)
80216f48: aa 85        	mv	a1, a0
80216f4a: 41 65        	lui	a0, 16
80216f4c: 7d 35        	addiw	a0, a0, -1
80216f4e: 6d 8d        	and	a0, a0, a1
80216f50: 23 17 b4 fe  	sh	a1, -18(s0)
80216f54: 81 45        	mv	a1, zero
80216f56: 63 0a b5 00  	beq	a0, a1, 0x80216f6a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.204+0x42>
80216f5a: 09 a0        	j	0x80216f5c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.204+0x34>
80216f5c: 03 35 04 fd  	ld	a0, -48(s0)
80216f60: 97 a0 fe ff  	auipc	ra, 1048554
80216f64: e7 80 20 94  	jalr	-1726(ra)
80216f68: 11 a0        	j	0x80216f6c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.204+0x44>
80216f6a: 09 a0        	j	0x80216f6c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.204+0x44>
80216f6c: 03 15 e4 fe  	lh	a0, -18(s0)
80216f70: 02 74        	ld	s0, 32(sp)
80216f72: a2 70        	ld	ra, 40(sp)
80216f74: 45 61        	addi	sp, sp, 48
80216f76: 82 80        	ret

0000000080216f78 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.205>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80216f78: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
80216f7a: 06 f4        	sd	ra, 40(sp)
80216f7c: 22 f0        	sd	s0, 32(sp)
80216f7e: 00 18        	addi	s0, sp, 48
80216f80: 23 38 a4 fc  	sd	a0, -48(s0)
80216f84: 83 e6 85 00  	lwu	a3, 8(a1)
80216f88: 03 e6 c5 00  	lwu	a2, 12(a1)
80216f8c: 02 16        	slli	a2, a2, 32
80216f8e: 55 8e        	or	a2, a2, a3
80216f90: 23 30 c4 fe  	sd	a2, -32(s0)
80216f94: 83 e6 05 00  	lwu	a3, 0(a1)
80216f98: 03 e6 45 00  	lwu	a2, 4(a1)
80216f9c: 02 16        	slli	a2, a2, 32
80216f9e: 55 8e        	or	a2, a2, a3
80216fa0: 23 3c c4 fc  	sd	a2, -40(s0)
80216fa4: 97 20 00 00  	auipc	ra, 2
80216fa8: e7 80 80 c5  	jalr	-936(ra)
80216fac: aa 85        	mv	a1, a0
80216fae: 41 65        	lui	a0, 16
80216fb0: 7d 35        	addiw	a0, a0, -1
80216fb2: 6d 8d        	and	a0, a0, a1
80216fb4: 23 17 b4 fe  	sh	a1, -18(s0)
80216fb8: 81 45        	mv	a1, zero
80216fba: 63 0a b5 00  	beq	a0, a1, 0x80216fce <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.205+0x56>
80216fbe: 09 a0        	j	0x80216fc0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.205+0x48>
80216fc0: 03 35 04 fd  	ld	a0, -48(s0)
80216fc4: 97 a0 fe ff  	auipc	ra, 1048554
80216fc8: e7 80 e0 8d  	jalr	-1826(ra)
80216fcc: 11 a0        	j	0x80216fd0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.205+0x58>
80216fce: 09 a0        	j	0x80216fd0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.205+0x58>
80216fd0: 03 15 e4 fe  	lh	a0, -18(s0)
80216fd4: 02 74        	ld	s0, 32(sp)
80216fd6: a2 70        	ld	ra, 40(sp)
80216fd8: 45 61        	addi	sp, sp, 48
80216fda: 82 80        	ret

0000000080216fdc <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.206>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80216fdc: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80216fde: 06 ec        	sd	ra, 24(sp)
80216fe0: 22 e8        	sd	s0, 16(sp)
80216fe2: 00 10        	addi	s0, sp, 32
80216fe4: 23 30 a4 fe  	sd	a0, -32(s0)
80216fe8: 97 20 00 00  	auipc	ra, 2
80216fec: e7 80 20 d3  	jalr	-718(ra)
80216ff0: aa 85        	mv	a1, a0
80216ff2: 41 65        	lui	a0, 16
80216ff4: 7d 35        	addiw	a0, a0, -1
80216ff6: 6d 8d        	and	a0, a0, a1
80216ff8: 23 17 b4 fe  	sh	a1, -18(s0)
80216ffc: 81 45        	mv	a1, zero
80216ffe: 63 0a b5 00  	beq	a0, a1, 0x80217012 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.206+0x36>
80217002: 09 a0        	j	0x80217004 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.206+0x28>
80217004: 03 35 04 fe  	ld	a0, -32(s0)
80217008: 97 a0 fe ff  	auipc	ra, 1048554
8021700c: e7 80 a0 89  	jalr	-1894(ra)
80217010: 11 a0        	j	0x80217014 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.206+0x38>
80217012: 09 a0        	j	0x80217014 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.206+0x38>
80217014: 03 15 e4 fe  	lh	a0, -18(s0)
80217018: 42 64        	ld	s0, 16(sp)
8021701a: e2 60        	ld	ra, 24(sp)
8021701c: 05 61        	addi	sp, sp, 32
8021701e: 82 80        	ret

0000000080217020 <std.log.scoped(PANIC).err.207>:
;         pub fn err(
80217020: 01 11        	addi	sp, sp, -32
;             log(.err, scope, format, args);
80217022: 06 ec        	sd	ra, 24(sp)
80217024: 22 e8        	sd	s0, 16(sp)
80217026: 00 10        	addi	s0, sp, 32
80217028: 0c 41        	lw	a1, 0(a0)
8021702a: 23 24 b4 fe  	sw	a1, -24(s0)
8021702e: 97 20 00 00  	auipc	ra, 2
80217032: e7 80 60 d1  	jalr	-746(ra)
;         ) void {
80217036: 42 64        	ld	s0, 16(sp)
80217038: e2 60        	ld	ra, 24(sp)
8021703a: 05 61        	addi	sp, sp, 32
8021703c: 82 80        	ret

000000008021703e <std.mem.endsWith>:
; pub fn endsWith(comptime T: type, haystack: []const T, needle: []const T) bool {
8021703e: 1d 71        	addi	sp, sp, -96
80217040: 86 ec        	sd	ra, 88(sp)
80217042: a2 e8        	sd	s0, 80(sp)
80217044: 80 10        	addi	s0, sp, 96
80217046: 23 3c b4 fa  	sd	a1, -72(s0)
8021704a: 23 30 a4 fc  	sd	a0, -64(s0)
;     return if (needle.len > haystack.len) false else eql(T, haystack[haystack.len - needle.len ..], needle);
8021704e: 8c 65        	ld	a1, 8(a1)
80217050: 08 65        	ld	a0, 8(a0)
80217052: 63 77 b5 00  	bgeu	a0, a1, 0x80217060 <std.mem.endsWith+0x22>
80217056: 09 a0        	j	0x80217058 <std.mem.endsWith+0x1a>
80217058: 01 45        	mv	a0, zero
;     return if (needle.len > haystack.len) false else eql(T, haystack[haystack.len - needle.len ..], needle);
8021705a: a3 07 a4 fe  	sb	a0, -17(s0)
8021705e: 31 a8        	j	0x8021707a <std.mem.endsWith+0x3c>
80217060: 83 35 84 fb  	ld	a1, -72(s0)
80217064: 03 35 04 fc  	ld	a0, -64(s0)
80217068: 08 65        	ld	a0, 8(a0)
8021706a: 8c 65        	ld	a1, 8(a1)
8021706c: b3 05 b5 40  	sub	a1, a0, a1
80217070: 23 38 b4 fa  	sd	a1, -80(s0)
80217074: 63 69 b5 00  	bltu	a0, a1, 0x80217086 <.LBB282_10>
80217078: 05 a0        	j	0x80217098 <.LBB282_10+0x12>
8021707a: 03 05 f4 fe  	lb	a0, -17(s0)
8021707e: 46 64        	ld	s0, 80(sp)
80217080: e6 60        	ld	ra, 88(sp)
80217082: 25 61        	addi	sp, sp, 96
80217084: 82 80        	ret

0000000080217086 <.LBB282_10>:
80217086: 17 65 00 00  	auipc	a0, 6
8021708a: 13 05 a5 3f  	addi	a0, a0, 1018
8021708e: 81 45        	mv	a1, zero
80217090: 97 90 fe ff  	auipc	ra, 1048553
80217094: e7 80 00 01  	jalr	16(ra)
80217098: 83 35 04 fb  	ld	a1, -80(s0)
8021709c: 03 35 04 fc  	ld	a0, -64(s0)
802170a0: 08 65        	ld	a0, 8(a0)
802170a2: 23 34 a4 fa  	sd	a0, -88(s0)
802170a6: 63 7c b5 00  	bgeu	a0, a1, 0x802170be <.LBB282_11+0x12>
802170aa: 09 a0        	j	0x802170ac <.LBB282_11>

00000000802170ac <.LBB282_11>:
802170ac: 17 65 00 00  	auipc	a0, 6
802170b0: 13 05 45 25  	addi	a0, a0, 596
802170b4: 81 45        	mv	a1, zero
802170b6: 97 90 fe ff  	auipc	ra, 1048553
802170ba: e7 80 a0 fe  	jalr	-22(ra)
802170be: 81 45        	mv	a1, zero
802170c0: 05 45        	addi	a0, zero, 1
;     return if (needle.len > haystack.len) false else eql(T, haystack[haystack.len - needle.len ..], needle);
802170c2: 63 1c b5 00  	bne	a0, a1, 0x802170da <.LBB282_12+0x12>
802170c6: 09 a0        	j	0x802170c8 <.LBB282_12>

00000000802170c8 <.LBB282_12>:
802170c8: 17 65 00 00  	auipc	a0, 6
802170cc: 13 05 85 23  	addi	a0, a0, 568
802170d0: 81 45        	mv	a1, zero
802170d2: 97 90 fe ff  	auipc	ra, 1048553
802170d6: e7 80 e0 fc  	jalr	-50(ra)
802170da: 83 35 84 fb  	ld	a1, -72(s0)
802170de: 03 35 84 fa  	ld	a0, -88(s0)
802170e2: 83 36 04 fb  	ld	a3, -80(s0)
802170e6: 03 36 04 fc  	ld	a2, -64(s0)
802170ea: 10 62        	ld	a2, 0(a2)
802170ec: 36 96        	add	a2, a2, a3
802170ee: 15 8d        	sub	a0, a0, a3
802170f0: 23 3c c4 fc  	sd	a2, -40(s0)
802170f4: 23 30 a4 fe  	sd	a0, -32(s0)
802170f8: 88 61        	ld	a0, 0(a1)
802170fa: 23 34 a4 fc  	sd	a0, -56(s0)
802170fe: 88 65        	ld	a0, 8(a1)
80217100: 23 38 a4 fc  	sd	a0, -48(s0)
80217104: 13 05 84 fd  	addi	a0, s0, -40
80217108: 97 d0 ff ff  	auipc	ra, 1048573
8021710c: e7 80 c0 21  	jalr	540(ra)
80217110: 05 89        	andi	a0, a0, 1
80217112: a3 07 a4 fe  	sb	a0, -17(s0)
80217116: 95 b7        	j	0x8021707a <std.mem.endsWith+0x3c>

0000000080217118 <panic.panic.208>:
; pub fn panic(comptime format: []const u8, args: anytype) noreturn {
80217118: 01 11        	addi	sp, sp, -32
8021711a: 06 ec        	sd	ra, 24(sp)
8021711c: 22 e8        	sd	s0, 16(sp)
8021711e: 00 10        	addi	s0, sp, 32
80217120: 23 30 a4 fe  	sd	a0, -32(s0)
;     kernel.arch.disable_interrupts();
80217124: 97 90 fe ff  	auipc	ra, 1048553
80217128: e7 80 00 3a  	jalr	928(ra)
8021712c: 03 35 04 fe  	ld	a0, -32(s0)

0000000080217130 <.LBB283_2>:
;     kernel.arch.Writer.should_lock = true;
80217130: 17 d6 65 00  	auipc	a2, 1629
80217134: 13 06 06 ed  	addi	a2, a2, -304
80217138: 85 45        	addi	a1, zero, 1
8021713a: 23 00 b6 00  	sb	a1, 0(a2)
;     log.err(format, args);
8021713e: 0c 41        	lw	a1, 0(a0)
80217140: 23 24 b4 fe  	sw	a1, -24(s0)
80217144: 97 20 00 00  	auipc	ra, 2
80217148: e7 80 e0 c2  	jalr	-978(ra)
;     while (true) {}
8021714c: 09 a0        	j	0x8021714e <.LBB283_2+0x1e>
8021714e: 01 a0        	j	0x8021714e <.LBB283_2+0x1e>

0000000080217150 <arch.riscv64.device_tree.Parser.skip_cstr>:
;         fn skip_cstr(self: *@This()) void {
80217150: 31 71        	addi	sp, sp, -192
80217152: 06 fd        	sd	ra, 184(sp)
80217154: 22 f9        	sd	s0, 176(sp)
80217156: 80 01        	addi	s0, sp, 192
80217158: 23 38 a4 f8  	sd	a0, -112(s0)
;             const len = std.mem.len(@ptrCast([*:0]const u8, self.slice[self.i..].ptr));
8021715c: aa 85        	mv	a1, a0
8021715e: 23 3c b4 f6  	sd	a1, -136(s0)
80217162: 0c 69        	ld	a1, 16(a0)
80217164: 23 30 b4 f8  	sd	a1, -128(s0)
80217168: 08 65        	ld	a0, 8(a0)
8021716a: 23 34 a4 f8  	sd	a0, -120(s0)
8021716e: 63 7c b5 00  	bgeu	a0, a1, 0x80217186 <.LBB284_15+0x12>
80217172: 09 a0        	j	0x80217174 <.LBB284_15>

0000000080217174 <.LBB284_15>:
80217174: 17 65 00 00  	auipc	a0, 6
80217178: 13 05 c5 18  	addi	a0, a0, 396
8021717c: 81 45        	mv	a1, zero
8021717e: 97 90 fe ff  	auipc	ra, 1048553
80217182: e7 80 20 f2  	jalr	-222(ra)
80217186: 81 45        	mv	a1, zero
80217188: 05 45        	addi	a0, zero, 1
;             const len = std.mem.len(@ptrCast([*:0]const u8, self.slice[self.i..].ptr));
8021718a: 63 1c b5 00  	bne	a0, a1, 0x802171a2 <.LBB284_16+0x12>
8021718e: 09 a0        	j	0x80217190 <.LBB284_16>

0000000080217190 <.LBB284_16>:
80217190: 17 65 00 00  	auipc	a0, 6
80217194: 13 05 05 17  	addi	a0, a0, 368
80217198: 81 45        	mv	a1, zero
8021719a: 97 90 fe ff  	auipc	ra, 1048553
8021719e: e7 80 60 f0  	jalr	-250(ra)
802171a2: 83 35 84 f8  	ld	a1, -120(s0)
802171a6: 03 36 04 f8  	ld	a2, -128(s0)
802171aa: 03 35 84 f7  	ld	a0, -136(s0)
802171ae: 08 61        	ld	a0, 0(a0)
802171b0: 32 95        	add	a0, a0, a2
802171b2: 23 38 a4 f6  	sd	a0, -144(s0)
802171b6: 91 8d        	sub	a1, a1, a2
802171b8: 23 34 a4 fa  	sd	a0, -88(s0)
802171bc: 23 38 b4 fa  	sd	a1, -80(s0)
802171c0: 81 45        	mv	a1, zero
802171c2: 63 1c b5 00  	bne	a0, a1, 0x802171da <.LBB284_17+0x12>
802171c6: 09 a0        	j	0x802171c8 <.LBB284_17>

00000000802171c8 <.LBB284_17>:
802171c8: 17 65 00 00  	auipc	a0, 6
802171cc: 13 05 05 33  	addi	a0, a0, 816
802171d0: 81 45        	mv	a1, zero
802171d2: 97 90 fe ff  	auipc	ra, 1048553
802171d6: e7 80 e0 ec  	jalr	-306(ra)
802171da: 03 35 04 f7  	ld	a0, -144(s0)
802171de: 23 30 a4 fa  	sd	a0, -96(s0)
802171e2: 97 f0 ff ff  	auipc	ra, 1048575
802171e6: e7 80 a0 0b  	jalr	186(ra)
802171ea: 23 3c a4 f8  	sd	a0, -104(s0)
;             self.i = align_to_u32(self.i + len + 1);
802171ee: 83 35 04 f9  	ld	a1, -112(s0)
802171f2: 13 86 05 01  	addi	a2, a1, 16
802171f6: 23 30 c4 f6  	sd	a2, -160(s0)
802171fa: 8c 69        	ld	a1, 16(a1)
802171fc: 2e 95        	add	a0, a0, a1
802171fe: 23 34 a4 f6  	sd	a0, -152(s0)
80217202: 63 7c b5 00  	bgeu	a0, a1, 0x8021721a <.LBB284_18+0x12>
80217206: 09 a0        	j	0x80217208 <.LBB284_18>

0000000080217208 <.LBB284_18>:
80217208: 17 65 00 00  	auipc	a0, 6
8021720c: 13 05 85 27  	addi	a0, a0, 632
80217210: 81 45        	mv	a1, zero
80217212: 97 90 fe ff  	auipc	ra, 1048553
80217216: e7 80 e0 e8  	jalr	-370(ra)
8021721a: 83 35 84 f6  	ld	a1, -152(s0)
8021721e: 13 85 15 00  	addi	a0, a1, 1
80217222: 23 3c a4 f4  	sd	a0, -168(s0)
80217226: 63 7c b5 00  	bgeu	a0, a1, 0x8021723e <.LBB284_19+0x12>
8021722a: 09 a0        	j	0x8021722c <.LBB284_19>

000000008021722c <.LBB284_19>:
8021722c: 17 65 00 00  	auipc	a0, 6
80217230: 13 05 45 25  	addi	a0, a0, 596
80217234: 81 45        	mv	a1, zero
80217236: 97 90 fe ff  	auipc	ra, 1048553
8021723a: e7 80 a0 e6  	jalr	-406(ra)
8021723e: 03 35 84 f5  	ld	a0, -168(s0)
80217242: 23 3c a4 fa  	sd	a0, -72(s0)
80217246: 23 38 a4 fc  	sd	a0, -48(s0)
8021724a: 11 45        	addi	a0, zero, 4
8021724c: 23 34 a4 fc  	sd	a0, -56(s0)
80217250: 0d 45        	addi	a0, zero, 3
80217252: 23 38 a4 f4  	sd	a0, -176(s0)
80217256: 01 45        	mv	a0, zero
;     const mask: u64 = alignment - 1;
80217258: 63 0c a5 00  	beq	a0, a0, 0x80217270 <.LBB284_20+0x12>
8021725c: 09 a0        	j	0x8021725e <.LBB284_20>

000000008021725e <.LBB284_20>:
8021725e: 17 65 00 00  	auipc	a0, 6
80217262: 13 05 25 22  	addi	a0, a0, 546
80217266: 81 45        	mv	a1, zero
80217268: 97 90 fe ff  	auipc	ra, 1048553
8021726c: e7 80 80 e3  	jalr	-456(ra)
80217270: 03 35 04 f5  	ld	a0, -176(s0)
80217274: 23 30 a4 fe  	sd	a0, -32(s0)
;     const result = (n + mask) & ~mask;
80217278: 83 35 04 fd  	ld	a1, -48(s0)
8021727c: 2e 95        	add	a0, a0, a1
8021727e: 23 34 a4 f4  	sd	a0, -184(s0)
80217282: 63 7c b5 00  	bgeu	a0, a1, 0x8021729a <.LBB284_21+0x12>
80217286: 09 a0        	j	0x80217288 <.LBB284_21>

0000000080217288 <.LBB284_21>:
80217288: 17 65 00 00  	auipc	a0, 6
8021728c: 13 05 85 1f  	addi	a0, a0, 504
80217290: 81 45        	mv	a1, zero
80217292: 97 90 fe ff  	auipc	ra, 1048553
80217296: e7 80 e0 e0  	jalr	-498(ra)
8021729a: 83 35 04 f6  	ld	a1, -160(s0)
8021729e: 03 35 84 f4  	ld	a0, -184(s0)
802172a2: 03 36 04 fe  	ld	a2, -32(s0)
802172a6: 13 46 f6 ff  	not	a2, a2
802172aa: 71 8d        	and	a0, a0, a2
802172ac: 23 3c a4 fc  	sd	a0, -40(s0)
;     return result;
802172b0: 23 34 a4 fe  	sd	a0, -24(s0)
;             return align_forward(i, @sizeOf(u32));
802172b4: 23 30 a4 fc  	sd	a0, -64(s0)
;             self.i = align_to_u32(self.i + len + 1);
802172b8: 88 e1        	sd	a0, 0(a1)
;         fn skip_cstr(self: *@This()) void {
802172ba: 4a 74        	ld	s0, 176(sp)
802172bc: ea 70        	ld	ra, 184(sp)
802172be: 29 61        	addi	sp, sp, 192
802172c0: 82 80        	ret

00000000802172c2 <arch.riscv64.device_tree.Parser.skip_property_value>:
;         fn skip_property_value(self: *@This(), property_value_descriptor: Property.ValueDescriptor) void {
802172c2: 19 71        	addi	sp, sp, -128
802172c4: 86 fc        	sd	ra, 120(sp)
802172c6: a2 f8        	sd	s0, 112(sp)
802172c8: 00 01        	addi	s0, sp, 128
802172ca: 23 3c b4 f8  	sd	a1, -104(s0)
802172ce: aa 85        	mv	a1, a0
802172d0: 03 35 84 f9  	ld	a0, -104(s0)
802172d4: 23 38 b4 fa  	sd	a1, -80(s0)
;             self.i = align_to_u32(self.i + property_value_descriptor.len);
802172d8: 13 86 05 01  	addi	a2, a1, 16
802172dc: 23 30 c4 fa  	sd	a2, -96(s0)
802172e0: 8c 69        	ld	a1, 16(a1)
802172e2: 03 65 05 00  	lwu	a0, 0(a0)
802172e6: 2e 95        	add	a0, a0, a1
802172e8: 23 34 a4 fa  	sd	a0, -88(s0)
802172ec: 63 7c b5 00  	bgeu	a0, a1, 0x80217304 <.LBB285_7+0x12>
802172f0: 09 a0        	j	0x802172f2 <.LBB285_7>

00000000802172f2 <.LBB285_7>:
802172f2: 17 65 00 00  	auipc	a0, 6
802172f6: 13 05 e5 18  	addi	a0, a0, 398
802172fa: 81 45        	mv	a1, zero
802172fc: 97 90 fe ff  	auipc	ra, 1048553
80217300: e7 80 40 da  	jalr	-604(ra)
80217304: 03 35 84 fa  	ld	a0, -88(s0)
80217308: 23 3c a4 fa  	sd	a0, -72(s0)
8021730c: 23 38 a4 fc  	sd	a0, -48(s0)
80217310: 11 45        	addi	a0, zero, 4
80217312: 23 34 a4 fc  	sd	a0, -56(s0)
80217316: 0d 45        	addi	a0, zero, 3
80217318: 23 38 a4 f8  	sd	a0, -112(s0)
8021731c: 01 45        	mv	a0, zero
;     const mask: u64 = alignment - 1;
8021731e: 63 0c a5 00  	beq	a0, a0, 0x80217336 <.LBB285_8+0x12>
80217322: 09 a0        	j	0x80217324 <.LBB285_8>

0000000080217324 <.LBB285_8>:
80217324: 17 65 00 00  	auipc	a0, 6
80217328: 13 05 c5 15  	addi	a0, a0, 348
8021732c: 81 45        	mv	a1, zero
8021732e: 97 90 fe ff  	auipc	ra, 1048553
80217332: e7 80 20 d7  	jalr	-654(ra)
80217336: 03 35 04 f9  	ld	a0, -112(s0)
8021733a: 23 30 a4 fe  	sd	a0, -32(s0)
;     const result = (n + mask) & ~mask;
8021733e: 83 35 04 fd  	ld	a1, -48(s0)
80217342: 2e 95        	add	a0, a0, a1
80217344: 23 34 a4 f8  	sd	a0, -120(s0)
80217348: 63 7c b5 00  	bgeu	a0, a1, 0x80217360 <.LBB285_9+0x12>
8021734c: 09 a0        	j	0x8021734e <.LBB285_9>

000000008021734e <.LBB285_9>:
8021734e: 17 65 00 00  	auipc	a0, 6
80217352: 13 05 25 13  	addi	a0, a0, 306
80217356: 81 45        	mv	a1, zero
80217358: 97 90 fe ff  	auipc	ra, 1048553
8021735c: e7 80 80 d4  	jalr	-696(ra)
80217360: 83 35 04 fa  	ld	a1, -96(s0)
80217364: 03 35 84 f8  	ld	a0, -120(s0)
80217368: 03 36 04 fe  	ld	a2, -32(s0)
8021736c: 13 46 f6 ff  	not	a2, a2
80217370: 71 8d        	and	a0, a0, a2
80217372: 23 3c a4 fc  	sd	a0, -40(s0)
;     return result;
80217376: 23 34 a4 fe  	sd	a0, -24(s0)
;             return align_forward(i, @sizeOf(u32));
8021737a: 23 30 a4 fc  	sd	a0, -64(s0)
;             self.i = align_to_u32(self.i + property_value_descriptor.len);
8021737e: 88 e1        	sd	a0, 0(a1)
;         fn skip_property_value(self: *@This(), property_value_descriptor: Property.ValueDescriptor) void {
80217380: 46 74        	ld	s0, 112(sp)
80217382: e6 70        	ld	ra, 120(sp)
80217384: 09 61        	addi	sp, sp, 128
80217386: 82 80        	ret

0000000080217388 <std.log.scoped(PANIC).err.209>:
;         pub fn err(
80217388: 01 11        	addi	sp, sp, -32
;             log(.err, scope, format, args);
8021738a: 06 ec        	sd	ra, 24(sp)
8021738c: 22 e8        	sd	s0, 16(sp)
8021738e: 00 10        	addi	s0, sp, 32
80217390: 0c 41        	lw	a1, 0(a0)
80217392: 23 24 b4 fe  	sw	a1, -24(s0)
80217396: 97 20 00 00  	auipc	ra, 2
8021739a: e7 80 a0 9f  	jalr	-1542(ra)
;         ) void {
8021739e: 42 64        	ld	s0, 16(sp)
802173a0: e2 60        	ld	ra, 24(sp)
802173a2: 05 61        	addi	sp, sp, 32
802173a4: 82 80        	ret

00000000802173a6 <std.log.log.210>:
; fn log(
802173a6: 79 71        	addi	sp, sp, -48
;     args: anytype,
802173a8: 06 f4        	sd	ra, 40(sp)
802173aa: 22 f0        	sd	s0, 32(sp)
802173ac: 00 18        	addi	s0, sp, 48
802173ae: 23 38 a4 fc  	sd	a0, -48(s0)
802173b2: 0d 45        	addi	a0, zero, 3
;         break :blk level;
802173b4: a3 07 a4 fe  	sb	a0, -17(s0)
802173b8: 09 a0        	j	0x802173ba <std.log.log.210+0x14>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
802173ba: 03 45 f4 fe  	lbu	a0, -17(s0)
802173be: 8d 45        	addi	a1, zero, 3
802173c0: 63 10 b5 02  	bne	a0, a1, 0x802173e0 <std.log.log.210+0x3a>
802173c4: 09 a0        	j	0x802173c6 <std.log.log.210+0x20>
;             root.log(message_level, scope, format, args);
802173c6: 03 35 04 fd  	ld	a0, -48(s0)
802173ca: 0c 65        	ld	a1, 8(a0)
802173cc: 23 30 b4 fe  	sd	a1, -32(s0)
802173d0: 0c 61        	ld	a1, 0(a0)
802173d2: 23 3c b4 fc  	sd	a1, -40(s0)
802173d6: 97 20 00 00  	auipc	ra, 2
802173da: e7 80 80 9e  	jalr	-1560(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
802173de: 11 a0        	j	0x802173e2 <std.log.log.210+0x3c>
802173e0: 09 a0        	j	0x802173e2 <std.log.log.210+0x3c>
; ) void {
802173e2: 02 74        	ld	s0, 32(sp)
802173e4: a2 70        	ld	ra, 40(sp)
802173e6: 45 61        	addi	sp, sp, 48
802173e8: 82 80        	ret

00000000802173ea <std.log.log.211>:
; fn log(
802173ea: 01 11        	addi	sp, sp, -32
802173ec: 06 ec        	sd	ra, 24(sp)
802173ee: 22 e8        	sd	s0, 16(sp)
802173f0: 00 10        	addi	s0, sp, 32
802173f2: 0d 45        	addi	a0, zero, 3
;         break :blk level;
802173f4: a3 07 a4 fe  	sb	a0, -17(s0)
802173f8: 09 a0        	j	0x802173fa <std.log.log.211+0x10>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
802173fa: 03 45 f4 fe  	lbu	a0, -17(s0)
802173fe: 8d 45        	addi	a1, zero, 3
80217400: 63 18 b5 00  	bne	a0, a1, 0x80217410 <std.log.log.211+0x26>
80217404: 09 a0        	j	0x80217406 <std.log.log.211+0x1c>
;             root.log(message_level, scope, format, args);
80217406: 97 20 00 00  	auipc	ra, 2
8021740a: e7 80 40 a2  	jalr	-1500(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
8021740e: 11 a0        	j	0x80217412 <std.log.log.211+0x28>
80217410: 09 a0        	j	0x80217412 <std.log.log.211+0x28>
; ) void {
80217412: 42 64        	ld	s0, 16(sp)
80217414: e2 60        	ld	ra, 24(sp)
80217416: 05 61        	addi	sp, sp, 32
80217418: 82 80        	ret

000000008021741a <std.log.log.212>:
; fn log(
8021741a: 39 71        	addi	sp, sp, -64
;     args: anytype,
8021741c: 06 fc        	sd	ra, 56(sp)
8021741e: 22 f8        	sd	s0, 48(sp)
80217420: 80 00        	addi	s0, sp, 64
80217422: 23 34 a4 fc  	sd	a0, -56(s0)
80217426: 0d 45        	addi	a0, zero, 3
;         break :blk level;
80217428: a3 07 a4 fe  	sb	a0, -17(s0)
8021742c: 09 a0        	j	0x8021742e <std.log.log.212+0x14>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
8021742e: 03 45 f4 fe  	lbu	a0, -17(s0)
80217432: 8d 45        	addi	a1, zero, 3
80217434: 63 13 b5 02  	bne	a0, a1, 0x8021745a <std.log.log.212+0x40>
80217438: 09 a0        	j	0x8021743a <std.log.log.212+0x20>
;             root.log(message_level, scope, format, args);
8021743a: 03 35 84 fc  	ld	a0, -56(s0)
8021743e: 0c 69        	ld	a1, 16(a0)
80217440: 23 30 b4 fe  	sd	a1, -32(s0)
80217444: 0c 65        	ld	a1, 8(a0)
80217446: 23 3c b4 fc  	sd	a1, -40(s0)
8021744a: 0c 61        	ld	a1, 0(a0)
8021744c: 23 38 b4 fc  	sd	a1, -48(s0)
80217450: 97 20 00 00  	auipc	ra, 2
80217454: e7 80 80 a3  	jalr	-1480(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80217458: 11 a0        	j	0x8021745c <std.log.log.212+0x42>
8021745a: 09 a0        	j	0x8021745c <std.log.log.212+0x42>
; ) void {
8021745c: 42 74        	ld	s0, 48(sp)
8021745e: e2 70        	ld	ra, 56(sp)
80217460: 21 61        	addi	sp, sp, 64
80217462: 82 80        	ret

0000000080217464 <std.log.log.213>:
; fn log(
80217464: 01 11        	addi	sp, sp, -32
80217466: 06 ec        	sd	ra, 24(sp)
80217468: 22 e8        	sd	s0, 16(sp)
8021746a: 00 10        	addi	s0, sp, 32
8021746c: 0d 45        	addi	a0, zero, 3
;         break :blk level;
8021746e: a3 07 a4 fe  	sb	a0, -17(s0)
80217472: 09 a0        	j	0x80217474 <std.log.log.213+0x10>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80217474: 03 45 f4 fe  	lbu	a0, -17(s0)
80217478: 8d 45        	addi	a1, zero, 3
8021747a: 63 18 b5 00  	bne	a0, a1, 0x8021748a <std.log.log.213+0x26>
8021747e: 09 a0        	j	0x80217480 <std.log.log.213+0x1c>
;             root.log(message_level, scope, format, args);
80217480: 97 20 00 00  	auipc	ra, 2
80217484: e7 80 a0 a7  	jalr	-1414(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80217488: 11 a0        	j	0x8021748c <std.log.log.213+0x28>
8021748a: 09 a0        	j	0x8021748c <std.log.log.213+0x28>
; ) void {
8021748c: 42 64        	ld	s0, 16(sp)
8021748e: e2 60        	ld	ra, 24(sp)
80217490: 05 61        	addi	sp, sp, 32
80217492: 82 80        	ret

0000000080217494 <std.log.log.214>:
; fn log(
80217494: 39 71        	addi	sp, sp, -64
;     args: anytype,
80217496: 06 fc        	sd	ra, 56(sp)
80217498: 22 f8        	sd	s0, 48(sp)
8021749a: 80 00        	addi	s0, sp, 64
8021749c: 23 34 a4 fc  	sd	a0, -56(s0)
802174a0: 0d 45        	addi	a0, zero, 3
;         break :blk level;
802174a2: a3 07 a4 fe  	sb	a0, -17(s0)
802174a6: 09 a0        	j	0x802174a8 <std.log.log.214+0x14>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
802174a8: 03 45 f4 fe  	lbu	a0, -17(s0)
802174ac: 8d 45        	addi	a1, zero, 3
802174ae: 63 13 b5 02  	bne	a0, a1, 0x802174d4 <std.log.log.214+0x40>
802174b2: 09 a0        	j	0x802174b4 <std.log.log.214+0x20>
;             root.log(message_level, scope, format, args);
802174b4: 03 35 84 fc  	ld	a0, -56(s0)
802174b8: 0c 69        	ld	a1, 16(a0)
802174ba: 23 30 b4 fe  	sd	a1, -32(s0)
802174be: 0c 65        	ld	a1, 8(a0)
802174c0: 23 3c b4 fc  	sd	a1, -40(s0)
802174c4: 0c 61        	ld	a1, 0(a0)
802174c6: 23 38 b4 fc  	sd	a1, -48(s0)
802174ca: 97 20 00 00  	auipc	ra, 2
802174ce: e7 80 e0 a8  	jalr	-1394(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
802174d2: 11 a0        	j	0x802174d6 <std.log.log.214+0x42>
802174d4: 09 a0        	j	0x802174d6 <std.log.log.214+0x42>
; ) void {
802174d6: 42 74        	ld	s0, 48(sp)
802174d8: e2 70        	ld	ra, 56(sp)
802174da: 21 61        	addi	sp, sp, 64
802174dc: 82 80        	ret

00000000802174de <log.0.215>:
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
802174de: 29 71        	addi	sp, sp, -320
802174e0: 06 fe        	sd	ra, 312(sp)
802174e2: 22 fa        	sd	s0, 304(sp)
802174e4: 80 02        	addi	s0, sp, 320
802174e6: 01 45        	mv	a0, zero
802174e8: 23 30 a4 ec  	sd	a0, -320(s0)
802174ec: 23 3c a4 ec  	sd	a0, -296(s0)
802174f0: 13 05 04 ef  	addi	a0, s0, -272
802174f4: 23 30 a4 ee  	sd	a0, -288(s0)
802174f8: 13 05 00 02  	addi	a0, zero, 32
802174fc: 23 34 a4 ee  	sd	a0, -280(s0)
80217500: 13 05 84 ed  	addi	a0, s0, -296
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80217504: 97 20 00 00  	auipc	ra, 2
80217508: e7 80 60 ac  	jalr	-1338(ra)
8021750c: 83 35 04 ec  	ld	a1, -320(s0)
80217510: 23 1b a4 ec  	sh	a0, -298(s0)
80217514: 41 66        	lui	a2, 16
80217516: 7d 36        	addiw	a2, a2, -1
80217518: 71 8d        	and	a0, a0, a2
8021751a: 23 34 a4 ec  	sd	a0, -312(s0)
8021751e: 63 0b b5 00  	beq	a0, a1, 0x80217534 <log.0.215+0x56>
80217522: 09 a0        	j	0x80217524 <log.0.215+0x46>
80217524: 83 35 84 ec  	ld	a1, -312(s0)
80217528: 13 05 84 ed  	addi	a0, s0, -296
8021752c: 97 90 fe ff  	auipc	ra, 1048553
80217530: e7 80 20 0c  	jalr	194(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80217534: 52 74        	ld	s0, 304(sp)
80217536: f2 70        	ld	ra, 312(sp)
80217538: 31 61        	addi	sp, sp, 320
8021753a: 82 80        	ret

000000008021753c <log.0.216>:
8021753c: 0d 71        	addi	sp, sp, -352
8021753e: 86 ee        	sd	ra, 344(sp)
80217540: a2 ea        	sd	s0, 336(sp)
80217542: 80 12        	addi	s0, sp, 352
80217544: aa 85        	mv	a1, a0
80217546: 01 45        	mv	a0, zero
80217548: 23 34 a4 ea  	sd	a0, -344(s0)
8021754c: 23 3c a4 ec  	sd	a0, -296(s0)
80217550: 13 05 04 ef  	addi	a0, s0, -272
80217554: 23 30 a4 ee  	sd	a0, -288(s0)
80217558: 13 05 00 02  	addi	a0, zero, 32
8021755c: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80217560: 88 61        	ld	a0, 0(a1)
80217562: 23 30 a4 ec  	sd	a0, -320(s0)
80217566: 88 65        	ld	a0, 8(a1)
80217568: 23 34 a4 ec  	sd	a0, -312(s0)
8021756c: 88 69        	ld	a0, 16(a1)
8021756e: 23 38 a4 ec  	sd	a0, -304(s0)
80217572: 13 05 84 ed  	addi	a0, s0, -296
80217576: 97 20 00 00  	auipc	ra, 2
8021757a: e7 80 80 a9  	jalr	-1384(ra)
8021757e: 83 35 84 ea  	ld	a1, -344(s0)
80217582: 23 1f a4 ea  	sh	a0, -322(s0)
80217586: 41 66        	lui	a2, 16
80217588: 7d 36        	addiw	a2, a2, -1
8021758a: 71 8d        	and	a0, a0, a2
8021758c: 23 38 a4 ea  	sd	a0, -336(s0)
80217590: 63 0b b5 00  	beq	a0, a1, 0x802175a6 <log.0.216+0x6a>
80217594: 09 a0        	j	0x80217596 <log.0.216+0x5a>
80217596: 83 35 04 eb  	ld	a1, -336(s0)
8021759a: 13 05 84 ed  	addi	a0, s0, -296
8021759e: 97 90 fe ff  	auipc	ra, 1048553
802175a2: e7 80 00 05  	jalr	80(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
802175a6: 56 64        	ld	s0, 336(sp)
802175a8: f6 60        	ld	ra, 344(sp)
802175aa: 35 61        	addi	sp, sp, 352
802175ac: 82 80        	ret

00000000802175ae <log.0.217>:
802175ae: 29 71        	addi	sp, sp, -320
802175b0: 06 fe        	sd	ra, 312(sp)
802175b2: 22 fa        	sd	s0, 304(sp)
802175b4: 80 02        	addi	s0, sp, 320
802175b6: 01 45        	mv	a0, zero
802175b8: 23 30 a4 ec  	sd	a0, -320(s0)
802175bc: 23 3c a4 ec  	sd	a0, -296(s0)
802175c0: 13 05 04 ef  	addi	a0, s0, -272
802175c4: 23 30 a4 ee  	sd	a0, -288(s0)
802175c8: 13 05 00 02  	addi	a0, zero, 32
802175cc: 23 34 a4 ee  	sd	a0, -280(s0)
802175d0: 13 05 84 ed  	addi	a0, s0, -296
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
802175d4: 97 20 00 00  	auipc	ra, 2
802175d8: e7 80 00 a9  	jalr	-1392(ra)
802175dc: 83 35 04 ec  	ld	a1, -320(s0)
802175e0: 23 1b a4 ec  	sh	a0, -298(s0)
802175e4: 41 66        	lui	a2, 16
802175e6: 7d 36        	addiw	a2, a2, -1
802175e8: 71 8d        	and	a0, a0, a2
802175ea: 23 34 a4 ec  	sd	a0, -312(s0)
802175ee: 63 0b b5 00  	beq	a0, a1, 0x80217604 <log.0.217+0x56>
802175f2: 09 a0        	j	0x802175f4 <log.0.217+0x46>
802175f4: 83 35 84 ec  	ld	a1, -312(s0)
802175f8: 13 05 84 ed  	addi	a0, s0, -296
802175fc: 97 90 fe ff  	auipc	ra, 1048553
80217600: e7 80 20 ff  	jalr	-14(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80217604: 52 74        	ld	s0, 304(sp)
80217606: f2 70        	ld	ra, 312(sp)
80217608: 31 61        	addi	sp, sp, 320
8021760a: 82 80        	ret

000000008021760c <log.0.218>:
8021760c: 0d 71        	addi	sp, sp, -352
8021760e: 86 ee        	sd	ra, 344(sp)
80217610: a2 ea        	sd	s0, 336(sp)
80217612: 80 12        	addi	s0, sp, 352
80217614: aa 85        	mv	a1, a0
80217616: 01 45        	mv	a0, zero
80217618: 23 30 a4 ea  	sd	a0, -352(s0)
8021761c: 23 3c a4 ec  	sd	a0, -296(s0)
80217620: 13 05 04 ef  	addi	a0, s0, -272
80217624: 23 30 a4 ee  	sd	a0, -288(s0)
80217628: 13 05 00 02  	addi	a0, zero, 32
8021762c: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80217630: 88 61        	ld	a0, 0(a1)
80217632: 23 3c a4 ea  	sd	a0, -328(s0)
80217636: 88 65        	ld	a0, 8(a1)
80217638: 23 30 a4 ec  	sd	a0, -320(s0)
8021763c: 88 69        	ld	a0, 16(a1)
8021763e: 23 34 a4 ec  	sd	a0, -312(s0)
80217642: 88 6d        	ld	a0, 24(a1)
80217644: 23 38 a4 ec  	sd	a0, -304(s0)
80217648: 13 05 84 ed  	addi	a0, s0, -296
8021764c: 97 20 00 00  	auipc	ra, 2
80217650: e7 80 c0 a5  	jalr	-1444(ra)
80217654: 83 35 04 ea  	ld	a1, -352(s0)
80217658: 23 1b a4 ea  	sh	a0, -330(s0)
8021765c: 41 66        	lui	a2, 16
8021765e: 7d 36        	addiw	a2, a2, -1
80217660: 71 8d        	and	a0, a0, a2
80217662: 23 34 a4 ea  	sd	a0, -344(s0)
80217666: 63 0b b5 00  	beq	a0, a1, 0x8021767c <log.0.218+0x70>
8021766a: 09 a0        	j	0x8021766c <log.0.218+0x60>
8021766c: 83 35 84 ea  	ld	a1, -344(s0)
80217670: 13 05 84 ed  	addi	a0, s0, -296
80217674: 97 90 fe ff  	auipc	ra, 1048553
80217678: e7 80 a0 f7  	jalr	-134(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
8021767c: 56 64        	ld	s0, 336(sp)
8021767e: f6 60        	ld	ra, 344(sp)
80217680: 35 61        	addi	sp, sp, 352
80217682: 82 80        	ret

0000000080217684 <std.log.log.219>:
; fn log(
80217684: 39 71        	addi	sp, sp, -64
;     args: anytype,
80217686: 06 fc        	sd	ra, 56(sp)
80217688: 22 f8        	sd	s0, 48(sp)
8021768a: 80 00        	addi	s0, sp, 64
8021768c: 23 30 a4 fc  	sd	a0, -64(s0)
80217690: 0d 45        	addi	a0, zero, 3
;         break :blk level;
80217692: a3 07 a4 fe  	sb	a0, -17(s0)
80217696: 09 a0        	j	0x80217698 <std.log.log.219+0x14>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80217698: 03 45 f4 fe  	lbu	a0, -17(s0)
8021769c: 8d 45        	addi	a1, zero, 3
8021769e: 63 16 b5 02  	bne	a0, a1, 0x802176ca <std.log.log.219+0x46>
802176a2: 09 a0        	j	0x802176a4 <std.log.log.219+0x20>
;             root.log(message_level, scope, format, args);
802176a4: 03 35 04 fc  	ld	a0, -64(s0)
802176a8: 0c 6d        	ld	a1, 24(a0)
802176aa: 23 30 b4 fe  	sd	a1, -32(s0)
802176ae: 0c 69        	ld	a1, 16(a0)
802176b0: 23 3c b4 fc  	sd	a1, -40(s0)
802176b4: 0c 65        	ld	a1, 8(a0)
802176b6: 23 38 b4 fc  	sd	a1, -48(s0)
802176ba: 0c 61        	ld	a1, 0(a0)
802176bc: 23 34 b4 fc  	sd	a1, -56(s0)
802176c0: 97 20 00 00  	auipc	ra, 2
802176c4: e7 80 40 a4  	jalr	-1468(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
802176c8: 11 a0        	j	0x802176cc <std.log.log.219+0x48>
802176ca: 09 a0        	j	0x802176cc <std.log.log.219+0x48>
; ) void {
802176cc: 42 74        	ld	s0, 48(sp)
802176ce: e2 70        	ld	ra, 56(sp)
802176d0: 21 61        	addi	sp, sp, 64
802176d2: 82 80        	ret

00000000802176d4 <log.0.220>:
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
802176d4: 29 71        	addi	sp, sp, -320
802176d6: 06 fe        	sd	ra, 312(sp)
802176d8: 22 fa        	sd	s0, 304(sp)
802176da: 80 02        	addi	s0, sp, 320
802176dc: 01 45        	mv	a0, zero
802176de: 23 30 a4 ec  	sd	a0, -320(s0)
802176e2: 23 3c a4 ec  	sd	a0, -296(s0)
802176e6: 13 05 04 ef  	addi	a0, s0, -272
802176ea: 23 30 a4 ee  	sd	a0, -288(s0)
802176ee: 13 05 00 02  	addi	a0, zero, 32
802176f2: 23 34 a4 ee  	sd	a0, -280(s0)
802176f6: 13 05 84 ed  	addi	a0, s0, -296
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
802176fa: 97 20 00 00  	auipc	ra, 2
802176fe: e7 80 20 a8  	jalr	-1406(ra)
80217702: 83 35 04 ec  	ld	a1, -320(s0)
80217706: 23 1b a4 ec  	sh	a0, -298(s0)
8021770a: 41 66        	lui	a2, 16
8021770c: 7d 36        	addiw	a2, a2, -1
8021770e: 71 8d        	and	a0, a0, a2
80217710: 23 34 a4 ec  	sd	a0, -312(s0)
80217714: 63 0b b5 00  	beq	a0, a1, 0x8021772a <log.0.220+0x56>
80217718: 09 a0        	j	0x8021771a <log.0.220+0x46>
8021771a: 83 35 84 ec  	ld	a1, -312(s0)
8021771e: 13 05 84 ed  	addi	a0, s0, -296
80217722: 97 90 fe ff  	auipc	ra, 1048553
80217726: e7 80 c0 ec  	jalr	-308(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
8021772a: 52 74        	ld	s0, 304(sp)
8021772c: f2 70        	ld	ra, 312(sp)
8021772e: 31 61        	addi	sp, sp, 320
80217730: 82 80        	ret

0000000080217732 <log.0.221>:
80217732: 29 71        	addi	sp, sp, -320
80217734: 06 fe        	sd	ra, 312(sp)
80217736: 22 fa        	sd	s0, 304(sp)
80217738: 80 02        	addi	s0, sp, 320
8021773a: 01 45        	mv	a0, zero
8021773c: 23 30 a4 ec  	sd	a0, -320(s0)
80217740: 23 3c a4 ec  	sd	a0, -296(s0)
80217744: 13 05 04 ef  	addi	a0, s0, -272
80217748: 23 30 a4 ee  	sd	a0, -288(s0)
8021774c: 13 05 00 02  	addi	a0, zero, 32
80217750: 23 34 a4 ee  	sd	a0, -280(s0)
80217754: 13 05 84 ed  	addi	a0, s0, -296
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80217758: 97 20 00 00  	auipc	ra, 2
8021775c: e7 80 80 a6  	jalr	-1432(ra)
80217760: 83 35 04 ec  	ld	a1, -320(s0)
80217764: 23 1b a4 ec  	sh	a0, -298(s0)
80217768: 41 66        	lui	a2, 16
8021776a: 7d 36        	addiw	a2, a2, -1
8021776c: 71 8d        	and	a0, a0, a2
8021776e: 23 34 a4 ec  	sd	a0, -312(s0)
80217772: 63 0b b5 00  	beq	a0, a1, 0x80217788 <log.0.221+0x56>
80217776: 09 a0        	j	0x80217778 <log.0.221+0x46>
80217778: 83 35 84 ec  	ld	a1, -312(s0)
8021777c: 13 05 84 ed  	addi	a0, s0, -296
80217780: 97 90 fe ff  	auipc	ra, 1048553
80217784: e7 80 e0 e6  	jalr	-402(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80217788: 52 74        	ld	s0, 304(sp)
8021778a: f2 70        	ld	ra, 312(sp)
8021778c: 31 61        	addi	sp, sp, 320
8021778e: 82 80        	ret

0000000080217790 <log.0.222>:
80217790: 4d 71        	addi	sp, sp, -336
80217792: 86 e6        	sd	ra, 328(sp)
80217794: a2 e2        	sd	s0, 320(sp)
80217796: 80 0a        	addi	s0, sp, 336
80217798: aa 85        	mv	a1, a0
8021779a: 01 45        	mv	a0, zero
8021779c: 23 38 a4 ea  	sd	a0, -336(s0)
802177a0: 23 3c a4 ec  	sd	a0, -296(s0)
802177a4: 13 05 04 ef  	addi	a0, s0, -272
802177a8: 23 30 a4 ee  	sd	a0, -288(s0)
802177ac: 13 05 00 02  	addi	a0, zero, 32
802177b0: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
802177b4: 88 61        	ld	a0, 0(a1)
802177b6: 23 34 a4 ec  	sd	a0, -312(s0)
802177ba: 88 65        	ld	a0, 8(a1)
802177bc: 23 38 a4 ec  	sd	a0, -304(s0)
802177c0: 13 05 84 ed  	addi	a0, s0, -296
802177c4: 97 20 00 00  	auipc	ra, 2
802177c8: e7 80 00 a4  	jalr	-1472(ra)
802177cc: 83 35 04 eb  	ld	a1, -336(s0)
802177d0: 23 13 a4 ec  	sh	a0, -314(s0)
802177d4: 41 66        	lui	a2, 16
802177d6: 7d 36        	addiw	a2, a2, -1
802177d8: 71 8d        	and	a0, a0, a2
802177da: 23 3c a4 ea  	sd	a0, -328(s0)
802177de: 63 0b b5 00  	beq	a0, a1, 0x802177f4 <log.0.222+0x64>
802177e2: 09 a0        	j	0x802177e4 <log.0.222+0x54>
802177e4: 83 35 84 eb  	ld	a1, -328(s0)
802177e8: 13 05 84 ed  	addi	a0, s0, -296
802177ec: 97 90 fe ff  	auipc	ra, 1048553
802177f0: e7 80 20 e0  	jalr	-510(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
802177f4: 16 64        	ld	s0, 320(sp)
802177f6: b6 60        	ld	ra, 328(sp)
802177f8: 71 61        	addi	sp, sp, 336
802177fa: 82 80        	ret

00000000802177fc <log.0.223>:
802177fc: 29 71        	addi	sp, sp, -320
802177fe: 06 fe        	sd	ra, 312(sp)
80217800: 22 fa        	sd	s0, 304(sp)
80217802: 80 02        	addi	s0, sp, 320
80217804: 01 45        	mv	a0, zero
80217806: 23 30 a4 ec  	sd	a0, -320(s0)
8021780a: 23 3c a4 ec  	sd	a0, -296(s0)
8021780e: 13 05 04 ef  	addi	a0, s0, -272
80217812: 23 30 a4 ee  	sd	a0, -288(s0)
80217816: 13 05 00 02  	addi	a0, zero, 32
8021781a: 23 34 a4 ee  	sd	a0, -280(s0)
8021781e: 13 05 84 ed  	addi	a0, s0, -296
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80217822: 97 20 00 00  	auipc	ra, 2
80217826: e7 80 20 a3  	jalr	-1486(ra)
8021782a: 83 35 04 ec  	ld	a1, -320(s0)
8021782e: 23 1b a4 ec  	sh	a0, -298(s0)
80217832: 41 66        	lui	a2, 16
80217834: 7d 36        	addiw	a2, a2, -1
80217836: 71 8d        	and	a0, a0, a2
80217838: 23 34 a4 ec  	sd	a0, -312(s0)
8021783c: 63 0b b5 00  	beq	a0, a1, 0x80217852 <log.0.223+0x56>
80217840: 09 a0        	j	0x80217842 <log.0.223+0x46>
80217842: 83 35 84 ec  	ld	a1, -312(s0)
80217846: 13 05 84 ed  	addi	a0, s0, -296
8021784a: 97 90 fe ff  	auipc	ra, 1048553
8021784e: e7 80 40 da  	jalr	-604(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80217852: 52 74        	ld	s0, 304(sp)
80217854: f2 70        	ld	ra, 312(sp)
80217856: 31 61        	addi	sp, sp, 320
80217858: 82 80        	ret

000000008021785a <log.0.224>:
8021785a: 4d 71        	addi	sp, sp, -336
8021785c: 86 e6        	sd	ra, 328(sp)
8021785e: a2 e2        	sd	s0, 320(sp)
80217860: 80 0a        	addi	s0, sp, 336
80217862: aa 85        	mv	a1, a0
80217864: 01 45        	mv	a0, zero
80217866: 23 3c a4 ea  	sd	a0, -328(s0)
8021786a: 23 3c a4 ec  	sd	a0, -296(s0)
8021786e: 13 05 04 ef  	addi	a0, s0, -272
80217872: 23 30 a4 ee  	sd	a0, -288(s0)
80217876: 13 05 00 02  	addi	a0, zero, 32
8021787a: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
8021787e: 88 61        	ld	a0, 0(a1)
80217880: 23 38 a4 ec  	sd	a0, -304(s0)
80217884: 13 05 84 ed  	addi	a0, s0, -296
80217888: 97 20 00 00  	auipc	ra, 2
8021788c: e7 80 00 a1  	jalr	-1520(ra)
80217890: 83 35 84 eb  	ld	a1, -328(s0)
80217894: 23 17 a4 ec  	sh	a0, -306(s0)
80217898: 41 66        	lui	a2, 16
8021789a: 7d 36        	addiw	a2, a2, -1
8021789c: 71 8d        	and	a0, a0, a2
8021789e: 23 30 a4 ec  	sd	a0, -320(s0)
802178a2: 63 0b b5 00  	beq	a0, a1, 0x802178b8 <log.0.224+0x5e>
802178a6: 09 a0        	j	0x802178a8 <log.0.224+0x4e>
802178a8: 83 35 04 ec  	ld	a1, -320(s0)
802178ac: 13 05 84 ed  	addi	a0, s0, -296
802178b0: 97 90 fe ff  	auipc	ra, 1048553
802178b4: e7 80 e0 d3  	jalr	-706(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
802178b8: 16 64        	ld	s0, 320(sp)
802178ba: b6 60        	ld	ra, 328(sp)
802178bc: 71 61        	addi	sp, sp, 336
802178be: 82 80        	ret

00000000802178c0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.225>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
802178c0: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
802178c2: 06 ec        	sd	ra, 24(sp)
802178c4: 22 e8        	sd	s0, 16(sp)
802178c6: 00 10        	addi	s0, sp, 32
802178c8: 23 30 a4 fe  	sd	a0, -32(s0)
802178cc: 97 20 00 00  	auipc	ra, 2
802178d0: e7 80 60 a1  	jalr	-1514(ra)
802178d4: aa 85        	mv	a1, a0
802178d6: 41 65        	lui	a0, 16
802178d8: 7d 35        	addiw	a0, a0, -1
802178da: 6d 8d        	and	a0, a0, a1
802178dc: 23 17 b4 fe  	sh	a1, -18(s0)
802178e0: 81 45        	mv	a1, zero
802178e2: 63 0a b5 00  	beq	a0, a1, 0x802178f6 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.225+0x36>
802178e6: 09 a0        	j	0x802178e8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.225+0x28>
802178e8: 03 35 04 fe  	ld	a0, -32(s0)
802178ec: 97 90 fe ff  	auipc	ra, 1048553
802178f0: e7 80 60 fb  	jalr	-74(ra)
802178f4: 11 a0        	j	0x802178f8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.225+0x38>
802178f6: 09 a0        	j	0x802178f8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.225+0x38>
802178f8: 03 15 e4 fe  	lh	a0, -18(s0)
802178fc: 42 64        	ld	s0, 16(sp)
802178fe: e2 60        	ld	ra, 24(sp)
80217900: 05 61        	addi	sp, sp, 32
80217902: 82 80        	ret

0000000080217904 <std.log.log.226>:
; fn log(
80217904: 5d 71        	addi	sp, sp, -80
;     args: anytype,
80217906: 86 e4        	sd	ra, 72(sp)
80217908: a2 e0        	sd	s0, 64(sp)
8021790a: 80 08        	addi	s0, sp, 80
8021790c: 23 3c a4 fa  	sd	a0, -72(s0)
80217910: 0d 45        	addi	a0, zero, 3
;         break :blk level;
80217912: a3 07 a4 fe  	sb	a0, -17(s0)
80217916: 09 a0        	j	0x80217918 <std.log.log.226+0x14>
;             root.log(message_level, scope, format, args);
80217918: 03 35 84 fb  	ld	a0, -72(s0)
8021791c: 0c 61        	ld	a1, 0(a0)
8021791e: 23 30 b4 fc  	sd	a1, -64(s0)
80217922: 0c 65        	ld	a1, 8(a0)
80217924: 23 34 b4 fc  	sd	a1, -56(s0)
80217928: 0c 69        	ld	a1, 16(a0)
8021792a: 23 38 b4 fc  	sd	a1, -48(s0)
8021792e: 0c 6d        	ld	a1, 24(a0)
80217930: 23 3c b4 fc  	sd	a1, -40(s0)
80217934: 0c 71        	ld	a1, 32(a0)
80217936: 23 30 b4 fe  	sd	a1, -32(s0)
8021793a: 97 20 00 00  	auipc	ra, 2
8021793e: e7 80 20 9d  	jalr	-1582(ra)
; ) void {
80217942: 06 64        	ld	s0, 64(sp)
80217944: a6 60        	ld	ra, 72(sp)
80217946: 61 61        	addi	sp, sp, 80
80217948: 82 80        	ret

000000008021794a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.227>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021794a: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
8021794c: 06 ec        	sd	ra, 24(sp)
8021794e: 22 e8        	sd	s0, 16(sp)
80217950: 00 10        	addi	s0, sp, 32
80217952: 23 30 a4 fe  	sd	a0, -32(s0)
80217956: 97 20 00 00  	auipc	ra, 2
8021795a: e7 80 40 a3  	jalr	-1484(ra)
8021795e: aa 85        	mv	a1, a0
80217960: 41 65        	lui	a0, 16
80217962: 7d 35        	addiw	a0, a0, -1
80217964: 6d 8d        	and	a0, a0, a1
80217966: 23 17 b4 fe  	sh	a1, -18(s0)
8021796a: 81 45        	mv	a1, zero
8021796c: 63 0a b5 00  	beq	a0, a1, 0x80217980 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.227+0x36>
80217970: 09 a0        	j	0x80217972 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.227+0x28>
80217972: 03 35 04 fe  	ld	a0, -32(s0)
80217976: 97 90 fe ff  	auipc	ra, 1048553
8021797a: e7 80 c0 f2  	jalr	-212(ra)
8021797e: 11 a0        	j	0x80217982 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.227+0x38>
80217980: 09 a0        	j	0x80217982 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.227+0x38>
80217982: 03 15 e4 fe  	lh	a0, -18(s0)
80217986: 42 64        	ld	s0, 16(sp)
80217988: e2 60        	ld	ra, 24(sp)
8021798a: 05 61        	addi	sp, sp, 32
8021798c: 82 80        	ret

000000008021798e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.228>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021798e: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
80217990: 06 f4        	sd	ra, 40(sp)
80217992: 22 f0        	sd	s0, 32(sp)
80217994: 00 18        	addi	s0, sp, 48
80217996: 23 3c a4 fc  	sd	a0, -40(s0)
8021799a: 90 61        	ld	a2, 0(a1)
8021799c: 23 30 c4 fe  	sd	a2, -32(s0)
802179a0: 97 20 00 00  	auipc	ra, 2
802179a4: e7 80 40 a1  	jalr	-1516(ra)
802179a8: aa 85        	mv	a1, a0
802179aa: 41 65        	lui	a0, 16
802179ac: 7d 35        	addiw	a0, a0, -1
802179ae: 6d 8d        	and	a0, a0, a1
802179b0: 23 17 b4 fe  	sh	a1, -18(s0)
802179b4: 81 45        	mv	a1, zero
802179b6: 63 0a b5 00  	beq	a0, a1, 0x802179ca <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.228+0x3c>
802179ba: 09 a0        	j	0x802179bc <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.228+0x2e>
802179bc: 03 35 84 fd  	ld	a0, -40(s0)
802179c0: 97 90 fe ff  	auipc	ra, 1048553
802179c4: e7 80 20 ee  	jalr	-286(ra)
802179c8: 11 a0        	j	0x802179cc <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.228+0x3e>
802179ca: 09 a0        	j	0x802179cc <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.228+0x3e>
802179cc: 03 15 e4 fe  	lh	a0, -18(s0)
802179d0: 02 74        	ld	s0, 32(sp)
802179d2: a2 70        	ld	ra, 40(sp)
802179d4: 45 61        	addi	sp, sp, 48
802179d6: 82 80        	ret

00000000802179d8 <std.log.log.229>:
; fn log(
802179d8: 5d 71        	addi	sp, sp, -80
;     args: anytype,
802179da: 86 e4        	sd	ra, 72(sp)
802179dc: a2 e0        	sd	s0, 64(sp)
802179de: 80 08        	addi	s0, sp, 80
802179e0: 23 3c a4 fa  	sd	a0, -72(s0)
802179e4: 0d 45        	addi	a0, zero, 3
;         break :blk level;
802179e6: a3 07 a4 fe  	sb	a0, -17(s0)
802179ea: 09 a0        	j	0x802179ec <std.log.log.229+0x14>
;             root.log(message_level, scope, format, args);
802179ec: 03 35 84 fb  	ld	a0, -72(s0)
802179f0: 0c 61        	ld	a1, 0(a0)
802179f2: 23 30 b4 fc  	sd	a1, -64(s0)
802179f6: 0c 65        	ld	a1, 8(a0)
802179f8: 23 34 b4 fc  	sd	a1, -56(s0)
802179fc: 0c 69        	ld	a1, 16(a0)
802179fe: 23 38 b4 fc  	sd	a1, -48(s0)
80217a02: 0c 6d        	ld	a1, 24(a0)
80217a04: 23 3c b4 fc  	sd	a1, -40(s0)
80217a08: 0c 71        	ld	a1, 32(a0)
80217a0a: 23 30 b4 fe  	sd	a1, -32(s0)
80217a0e: 97 20 00 00  	auipc	ra, 2
80217a12: e7 80 80 a1  	jalr	-1512(ra)
; ) void {
80217a16: 06 64        	ld	s0, 64(sp)
80217a18: a6 60        	ld	ra, 72(sp)
80217a1a: 61 61        	addi	sp, sp, 80
80217a1c: 82 80        	ret

0000000080217a1e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.230>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80217a1e: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80217a20: 06 ec        	sd	ra, 24(sp)
80217a22: 22 e8        	sd	s0, 16(sp)
80217a24: 00 10        	addi	s0, sp, 32
80217a26: 23 30 a4 fe  	sd	a0, -32(s0)
80217a2a: 97 20 00 00  	auipc	ra, 2
80217a2e: e7 80 a0 a7  	jalr	-1414(ra)
80217a32: aa 85        	mv	a1, a0
80217a34: 41 65        	lui	a0, 16
80217a36: 7d 35        	addiw	a0, a0, -1
80217a38: 6d 8d        	and	a0, a0, a1
80217a3a: 23 17 b4 fe  	sh	a1, -18(s0)
80217a3e: 81 45        	mv	a1, zero
80217a40: 63 0a b5 00  	beq	a0, a1, 0x80217a54 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.230+0x36>
80217a44: 09 a0        	j	0x80217a46 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.230+0x28>
80217a46: 03 35 04 fe  	ld	a0, -32(s0)
80217a4a: 97 90 fe ff  	auipc	ra, 1048553
80217a4e: e7 80 80 e5  	jalr	-424(ra)
80217a52: 11 a0        	j	0x80217a56 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.230+0x38>
80217a54: 09 a0        	j	0x80217a56 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.230+0x38>
80217a56: 03 15 e4 fe  	lh	a0, -18(s0)
80217a5a: 42 64        	ld	s0, 16(sp)
80217a5c: e2 60        	ld	ra, 24(sp)
80217a5e: 05 61        	addi	sp, sp, 32
80217a60: 82 80        	ret

0000000080217a62 <std.log.scoped(PANIC).err.231>:
;         pub fn err(
80217a62: 01 11        	addi	sp, sp, -32
;             log(.err, scope, format, args);
80217a64: 06 ec        	sd	ra, 24(sp)
80217a66: 22 e8        	sd	s0, 16(sp)
80217a68: 00 10        	addi	s0, sp, 32
80217a6a: 0c 65        	ld	a1, 8(a0)
80217a6c: 23 34 b4 fe  	sd	a1, -24(s0)
80217a70: 0c 61        	ld	a1, 0(a0)
80217a72: 23 30 b4 fe  	sd	a1, -32(s0)
80217a76: 97 20 00 00  	auipc	ra, 2
80217a7a: e7 80 80 a5  	jalr	-1448(ra)
;         ) void {
80217a7e: 42 64        	ld	s0, 16(sp)
80217a80: e2 60        	ld	ra, 24(sp)
80217a82: 05 61        	addi	sp, sp, 32
80217a84: 82 80        	ret

0000000080217a86 <std.log.scoped(PANIC).err.232>:
;         pub fn err(
80217a86: 79 71        	addi	sp, sp, -48
;             log(.err, scope, format, args);
80217a88: 06 f4        	sd	ra, 40(sp)
80217a8a: 22 f0        	sd	s0, 32(sp)
80217a8c: 00 18        	addi	s0, sp, 48
80217a8e: 0c 6d        	ld	a1, 24(a0)
80217a90: 23 34 b4 fe  	sd	a1, -24(s0)
80217a94: 0c 69        	ld	a1, 16(a0)
80217a96: 23 30 b4 fe  	sd	a1, -32(s0)
80217a9a: 0c 65        	ld	a1, 8(a0)
80217a9c: 23 3c b4 fc  	sd	a1, -40(s0)
80217aa0: 0c 61        	ld	a1, 0(a0)
80217aa2: 23 38 b4 fc  	sd	a1, -48(s0)
80217aa6: 97 20 00 00  	auipc	ra, 2
80217aaa: e7 80 c0 a5  	jalr	-1444(ra)
;         ) void {
80217aae: 02 74        	ld	s0, 32(sp)
80217ab0: a2 70        	ld	ra, 40(sp)
80217ab2: 45 61        	addi	sp, sp, 48
80217ab4: 82 80        	ret

0000000080217ab6 <std.log.log.233>:
; fn log(
80217ab6: 79 71        	addi	sp, sp, -48
;     args: anytype,
80217ab8: 06 f4        	sd	ra, 40(sp)
80217aba: 22 f0        	sd	s0, 32(sp)
80217abc: 00 18        	addi	s0, sp, 48
80217abe: 23 38 a4 fc  	sd	a0, -48(s0)
80217ac2: 0d 45        	addi	a0, zero, 3
;         break :blk level;
80217ac4: a3 07 a4 fe  	sb	a0, -17(s0)
80217ac8: 09 a0        	j	0x80217aca <std.log.log.233+0x14>
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80217aca: 03 45 f4 fe  	lbu	a0, -17(s0)
80217ace: 8d 45        	addi	a1, zero, 3
80217ad0: 63 10 b5 02  	bne	a0, a1, 0x80217af0 <std.log.log.233+0x3a>
80217ad4: 09 a0        	j	0x80217ad6 <std.log.log.233+0x20>
;             root.log(message_level, scope, format, args);
80217ad6: 03 35 04 fd  	ld	a0, -48(s0)
80217ada: 0c 65        	ld	a1, 8(a0)
80217adc: 23 30 b4 fe  	sd	a1, -32(s0)
80217ae0: 0c 61        	ld	a1, 0(a0)
80217ae2: 23 3c b4 fc  	sd	a1, -40(s0)
80217ae6: 97 20 00 00  	auipc	ra, 2
80217aea: e7 80 c0 a5  	jalr	-1444(ra)
;     if (@enumToInt(message_level) <= @enumToInt(effective_log_level)) {
80217aee: 11 a0        	j	0x80217af2 <std.log.log.233+0x3c>
80217af0: 09 a0        	j	0x80217af2 <std.log.log.233+0x3c>
; ) void {
80217af2: 02 74        	ld	s0, 32(sp)
80217af4: a2 70        	ld	ra, 40(sp)
80217af6: 45 61        	addi	sp, sp, 48
80217af8: 82 80        	ret

0000000080217afa <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.234>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80217afa: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80217afc: 06 ec        	sd	ra, 24(sp)
80217afe: 22 e8        	sd	s0, 16(sp)
80217b00: 00 10        	addi	s0, sp, 32
80217b02: 23 30 a4 fe  	sd	a0, -32(s0)
80217b06: 97 20 00 00  	auipc	ra, 2
80217b0a: e7 80 80 aa  	jalr	-1368(ra)
80217b0e: aa 85        	mv	a1, a0
80217b10: 41 65        	lui	a0, 16
80217b12: 7d 35        	addiw	a0, a0, -1
80217b14: 6d 8d        	and	a0, a0, a1
80217b16: 23 17 b4 fe  	sh	a1, -18(s0)
80217b1a: 81 45        	mv	a1, zero
80217b1c: 63 0a b5 00  	beq	a0, a1, 0x80217b30 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.234+0x36>
80217b20: 09 a0        	j	0x80217b22 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.234+0x28>
80217b22: 03 35 04 fe  	ld	a0, -32(s0)
80217b26: 97 90 fe ff  	auipc	ra, 1048553
80217b2a: e7 80 c0 d7  	jalr	-644(ra)
80217b2e: 11 a0        	j	0x80217b32 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.234+0x38>
80217b30: 09 a0        	j	0x80217b32 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.234+0x38>
80217b32: 03 15 e4 fe  	lh	a0, -18(s0)
80217b36: 42 64        	ld	s0, 16(sp)
80217b38: e2 60        	ld	ra, 24(sp)
80217b3a: 05 61        	addi	sp, sp, 32
80217b3c: 82 80        	ret

0000000080217b3e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.235>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80217b3e: 39 71        	addi	sp, sp, -64
;             return std.fmt.format(self, format, args);
80217b40: 06 fc        	sd	ra, 56(sp)
80217b42: 22 f8        	sd	s0, 48(sp)
80217b44: 80 00        	addi	s0, sp, 64
80217b46: 23 30 a4 fc  	sd	a0, -64(s0)
80217b4a: 90 6d        	ld	a2, 24(a1)
80217b4c: 23 30 c4 fe  	sd	a2, -32(s0)
80217b50: 90 69        	ld	a2, 16(a1)
80217b52: 23 3c c4 fc  	sd	a2, -40(s0)
80217b56: 90 65        	ld	a2, 8(a1)
80217b58: 23 38 c4 fc  	sd	a2, -48(s0)
80217b5c: 90 61        	ld	a2, 0(a1)
80217b5e: 23 34 c4 fc  	sd	a2, -56(s0)
80217b62: 97 20 00 00  	auipc	ra, 2
80217b66: e7 80 60 a7  	jalr	-1418(ra)
80217b6a: aa 85        	mv	a1, a0
80217b6c: 41 65        	lui	a0, 16
80217b6e: 7d 35        	addiw	a0, a0, -1
80217b70: 6d 8d        	and	a0, a0, a1
80217b72: 23 17 b4 fe  	sh	a1, -18(s0)
80217b76: 81 45        	mv	a1, zero
80217b78: 63 0a b5 00  	beq	a0, a1, 0x80217b8c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.235+0x4e>
80217b7c: 09 a0        	j	0x80217b7e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.235+0x40>
80217b7e: 03 35 04 fc  	ld	a0, -64(s0)
80217b82: 97 90 fe ff  	auipc	ra, 1048553
80217b86: e7 80 00 d2  	jalr	-736(ra)
80217b8a: 11 a0        	j	0x80217b8e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.235+0x50>
80217b8c: 09 a0        	j	0x80217b8e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.235+0x50>
80217b8e: 03 15 e4 fe  	lh	a0, -18(s0)
80217b92: 42 74        	ld	s0, 48(sp)
80217b94: e2 70        	ld	ra, 56(sp)
80217b96: 21 61        	addi	sp, sp, 64
80217b98: 82 80        	ret

0000000080217b9a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.236>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80217b9a: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80217b9c: 06 ec        	sd	ra, 24(sp)
80217b9e: 22 e8        	sd	s0, 16(sp)
80217ba0: 00 10        	addi	s0, sp, 32
80217ba2: 23 30 a4 fe  	sd	a0, -32(s0)
80217ba6: 97 20 00 00  	auipc	ra, 2
80217baa: e7 80 80 b1  	jalr	-1256(ra)
80217bae: aa 85        	mv	a1, a0
80217bb0: 41 65        	lui	a0, 16
80217bb2: 7d 35        	addiw	a0, a0, -1
80217bb4: 6d 8d        	and	a0, a0, a1
80217bb6: 23 17 b4 fe  	sh	a1, -18(s0)
80217bba: 81 45        	mv	a1, zero
80217bbc: 63 0a b5 00  	beq	a0, a1, 0x80217bd0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.236+0x36>
80217bc0: 09 a0        	j	0x80217bc2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.236+0x28>
80217bc2: 03 35 04 fe  	ld	a0, -32(s0)
80217bc6: 97 90 fe ff  	auipc	ra, 1048553
80217bca: e7 80 c0 cd  	jalr	-804(ra)
80217bce: 11 a0        	j	0x80217bd2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.236+0x38>
80217bd0: 09 a0        	j	0x80217bd2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.236+0x38>
80217bd2: 03 15 e4 fe  	lh	a0, -18(s0)
80217bd6: 42 64        	ld	s0, 16(sp)
80217bd8: e2 60        	ld	ra, 24(sp)
80217bda: 05 61        	addi	sp, sp, 32
80217bdc: 82 80        	ret

0000000080217bde <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.237>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80217bde: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
80217be0: 06 f4        	sd	ra, 40(sp)
80217be2: 22 f0        	sd	s0, 32(sp)
80217be4: 00 18        	addi	s0, sp, 48
80217be6: 23 3c a4 fc  	sd	a0, -40(s0)
80217bea: 90 61        	ld	a2, 0(a1)
80217bec: 23 30 c4 fe  	sd	a2, -32(s0)
80217bf0: 97 20 00 00  	auipc	ra, 2
80217bf4: e7 80 80 af  	jalr	-1288(ra)
80217bf8: aa 85        	mv	a1, a0
80217bfa: 41 65        	lui	a0, 16
80217bfc: 7d 35        	addiw	a0, a0, -1
80217bfe: 6d 8d        	and	a0, a0, a1
80217c00: 23 17 b4 fe  	sh	a1, -18(s0)
80217c04: 81 45        	mv	a1, zero
80217c06: 63 0a b5 00  	beq	a0, a1, 0x80217c1a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.237+0x3c>
80217c0a: 09 a0        	j	0x80217c0c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.237+0x2e>
80217c0c: 03 35 84 fd  	ld	a0, -40(s0)
80217c10: 97 90 fe ff  	auipc	ra, 1048553
80217c14: e7 80 20 c9  	jalr	-878(ra)
80217c18: 11 a0        	j	0x80217c1c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.237+0x3e>
80217c1a: 09 a0        	j	0x80217c1c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.237+0x3e>
80217c1c: 03 15 e4 fe  	lh	a0, -18(s0)
80217c20: 02 74        	ld	s0, 32(sp)
80217c22: a2 70        	ld	ra, 40(sp)
80217c24: 45 61        	addi	sp, sp, 48
80217c26: 82 80        	ret

0000000080217c28 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.238>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80217c28: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80217c2a: 06 ec        	sd	ra, 24(sp)
80217c2c: 22 e8        	sd	s0, 16(sp)
80217c2e: 00 10        	addi	s0, sp, 32
80217c30: 23 30 a4 fe  	sd	a0, -32(s0)
80217c34: 83 c6 05 00  	lbu	a3, 0(a1)
80217c38: 03 c6 15 00  	lbu	a2, 1(a1)
80217c3c: 22 06        	slli	a2, a2, 8
80217c3e: d1 8e        	or	a3, a3, a2
80217c40: 03 c7 25 00  	lbu	a4, 2(a1)
80217c44: 03 86 35 00  	lb	a2, 3(a1)
80217c48: 22 06        	slli	a2, a2, 8
80217c4a: 59 8e        	or	a2, a2, a4
80217c4c: 42 06        	slli	a2, a2, 16
80217c4e: 55 8e        	or	a2, a2, a3
80217c50: 23 24 c4 fe  	sw	a2, -24(s0)
80217c54: 97 20 00 00  	auipc	ra, 2
80217c58: e7 80 60 b0  	jalr	-1274(ra)
80217c5c: aa 85        	mv	a1, a0
80217c5e: 41 65        	lui	a0, 16
80217c60: 7d 35        	addiw	a0, a0, -1
80217c62: 6d 8d        	and	a0, a0, a1
80217c64: 23 17 b4 fe  	sh	a1, -18(s0)
80217c68: 81 45        	mv	a1, zero
80217c6a: 63 0a b5 00  	beq	a0, a1, 0x80217c7e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.238+0x56>
80217c6e: 09 a0        	j	0x80217c70 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.238+0x48>
80217c70: 03 35 04 fe  	ld	a0, -32(s0)
80217c74: 97 90 fe ff  	auipc	ra, 1048553
80217c78: e7 80 e0 c2  	jalr	-978(ra)
80217c7c: 11 a0        	j	0x80217c80 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.238+0x58>
80217c7e: 09 a0        	j	0x80217c80 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.238+0x58>
80217c80: 03 15 e4 fe  	lh	a0, -18(s0)
80217c84: 42 64        	ld	s0, 16(sp)
80217c86: e2 60        	ld	ra, 24(sp)
80217c88: 05 61        	addi	sp, sp, 32
80217c8a: 82 80        	ret

0000000080217c8c <std.fmt.format.239>:
; pub fn format(
80217c8c: 39 71        	addi	sp, sp, -64
;     args: anytype,
80217c8e: 06 fc        	sd	ra, 56(sp)
80217c90: 22 f8        	sd	s0, 48(sp)
80217c92: 80 00        	addi	s0, sp, 64
80217c94: 23 30 b4 fc  	sd	a1, -64(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
80217c98: 23 38 a4 fc  	sd	a0, -48(s0)

0000000080217c9c <.LBB316_1>:
80217c9c: 97 75 00 00  	auipc	a1, 7
80217ca0: 93 85 45 5c  	addi	a1, a1, 1476
80217ca4: 97 90 fe ff  	auipc	ra, 1048553
80217ca8: e7 80 e0 e0  	jalr	-498(ra)
80217cac: 83 35 04 fc  	ld	a1, -64(s0)
80217cb0: 2a 86        	mv	a2, a0
80217cb2: 03 35 04 fd  	ld	a0, -48(s0)
80217cb6: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
80217cba: 8c 41        	lw	a1, 0(a1)
80217cbc: 23 24 b4 fe  	sw	a1, -24(s0)

0000000080217cc0 <.LBB316_2>:
;         try formatType(
80217cc0: 17 76 00 00  	auipc	a2, 7
80217cc4: 13 06 06 61  	addi	a2, a2, 1552
80217cc8: 8d 46        	addi	a3, zero, 3
80217cca: 23 34 d4 fc  	sd	a3, -56(s0)
80217cce: 97 00 00 00  	auipc	ra, 0
80217cd2: e7 80 60 47  	jalr	1142(ra)
80217cd6: aa 85        	mv	a1, a0
80217cd8: 03 35 04 fd  	ld	a0, -48(s0)
80217cdc: 23 13 b4 fe  	sh	a1, -26(s0)

0000000080217ce0 <.LBB316_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
80217ce0: 97 75 00 00  	auipc	a1, 7
80217ce4: 93 85 85 61  	addi	a1, a1, 1560
80217ce8: 97 90 fe ff  	auipc	ra, 1048553
80217cec: e7 80 a0 dc  	jalr	-566(ra)
80217cf0: 83 35 04 fc  	ld	a1, -64(s0)
80217cf4: 83 36 84 fc  	ld	a3, -56(s0)
80217cf8: 2a 86        	mv	a2, a0
80217cfa: 03 35 04 fd  	ld	a0, -48(s0)
80217cfe: 23 12 c4 fe  	sh	a2, -28(s0)
;             @field(args, fields_info[arg_to_print].name),
80217d02: cc 41        	lw	a1, 4(a1)
80217d04: 23 20 b4 fe  	sw	a1, -32(s0)

0000000080217d08 <.LBB316_4>:
;         try formatType(
80217d08: 17 76 00 00  	auipc	a2, 7
80217d0c: 13 06 06 66  	addi	a2, a2, 1632
80217d10: 97 00 00 00  	auipc	ra, 0
80217d14: e7 80 40 43  	jalr	1076(ra)
80217d18: aa 85        	mv	a1, a0
80217d1a: 03 35 04 fd  	ld	a0, -48(s0)
80217d1e: 23 1f b4 fc  	sh	a1, -34(s0)

0000000080217d22 <.LBB316_5>:
;             try writer.writeAll(fmt[start_index..end_index]);
80217d22: 97 75 00 00  	auipc	a1, 7
80217d26: 93 85 e5 66  	addi	a1, a1, 1646
80217d2a: 97 90 fe ff  	auipc	ra, 1048553
80217d2e: e7 80 80 d8  	jalr	-632(ra)
80217d32: 23 1e a4 fc  	sh	a0, -36(s0)
80217d36: 01 45        	mv	a0, zero
; ) !void {
80217d38: 23 17 a4 fe  	sh	a0, -18(s0)
80217d3c: 42 74        	ld	s0, 48(sp)
80217d3e: e2 70        	ld	ra, 56(sp)
80217d40: 21 61        	addi	sp, sp, 64
80217d42: 82 80        	ret

0000000080217d44 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.240>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80217d44: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80217d46: 06 ec        	sd	ra, 24(sp)
80217d48: 22 e8        	sd	s0, 16(sp)
80217d4a: 00 10        	addi	s0, sp, 32
80217d4c: 23 30 a4 fe  	sd	a0, -32(s0)
80217d50: 97 20 00 00  	auipc	ra, 2
80217d54: e7 80 60 a9  	jalr	-1386(ra)
80217d58: aa 85        	mv	a1, a0
80217d5a: 41 65        	lui	a0, 16
80217d5c: 7d 35        	addiw	a0, a0, -1
80217d5e: 6d 8d        	and	a0, a0, a1
80217d60: 23 17 b4 fe  	sh	a1, -18(s0)
80217d64: 81 45        	mv	a1, zero
80217d66: 63 0a b5 00  	beq	a0, a1, 0x80217d7a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.240+0x36>
80217d6a: 09 a0        	j	0x80217d6c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.240+0x28>
80217d6c: 03 35 04 fe  	ld	a0, -32(s0)
80217d70: 97 90 fe ff  	auipc	ra, 1048553
80217d74: e7 80 20 b3  	jalr	-1230(ra)
80217d78: 11 a0        	j	0x80217d7c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.240+0x38>
80217d7a: 09 a0        	j	0x80217d7c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.240+0x38>
80217d7c: 03 15 e4 fe  	lh	a0, -18(s0)
80217d80: 42 64        	ld	s0, 16(sp)
80217d82: e2 60        	ld	ra, 24(sp)
80217d84: 05 61        	addi	sp, sp, 32
80217d86: 82 80        	ret

0000000080217d88 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.241>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80217d88: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80217d8a: 06 ec        	sd	ra, 24(sp)
80217d8c: 22 e8        	sd	s0, 16(sp)
80217d8e: 00 10        	addi	s0, sp, 32
80217d90: 23 30 a4 fe  	sd	a0, -32(s0)
80217d94: 97 20 00 00  	auipc	ra, 2
80217d98: e7 80 c0 a7  	jalr	-1412(ra)
80217d9c: aa 85        	mv	a1, a0
80217d9e: 41 65        	lui	a0, 16
80217da0: 7d 35        	addiw	a0, a0, -1
80217da2: 6d 8d        	and	a0, a0, a1
80217da4: 23 17 b4 fe  	sh	a1, -18(s0)
80217da8: 81 45        	mv	a1, zero
80217daa: 63 0a b5 00  	beq	a0, a1, 0x80217dbe <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.241+0x36>
80217dae: 09 a0        	j	0x80217db0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.241+0x28>
80217db0: 03 35 04 fe  	ld	a0, -32(s0)
80217db4: 97 90 fe ff  	auipc	ra, 1048553
80217db8: e7 80 e0 ae  	jalr	-1298(ra)
80217dbc: 11 a0        	j	0x80217dc0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.241+0x38>
80217dbe: 09 a0        	j	0x80217dc0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.241+0x38>
80217dc0: 03 15 e4 fe  	lh	a0, -18(s0)
80217dc4: 42 64        	ld	s0, 16(sp)
80217dc6: e2 60        	ld	ra, 24(sp)
80217dc8: 05 61        	addi	sp, sp, 32
80217dca: 82 80        	ret

0000000080217dcc <std.fmt.format.242>:
; pub fn format(
80217dcc: 5d 71        	addi	sp, sp, -80
;     args: anytype,
80217dce: 86 e4        	sd	ra, 72(sp)
80217dd0: a2 e0        	sd	s0, 64(sp)
80217dd2: 80 08        	addi	s0, sp, 80
80217dd4: 23 38 b4 fa  	sd	a1, -80(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
80217dd8: 23 30 a4 fc  	sd	a0, -64(s0)

0000000080217ddc <.LBB319_1>:
80217ddc: 97 75 00 00  	auipc	a1, 7
80217de0: 93 85 45 5c  	addi	a1, a1, 1476
80217de4: 97 90 fe ff  	auipc	ra, 1048553
80217de8: e7 80 e0 cc  	jalr	-818(ra)
80217dec: 83 35 04 fb  	ld	a1, -80(s0)
80217df0: 2a 86        	mv	a2, a0
80217df2: 03 35 04 fc  	ld	a0, -64(s0)
80217df6: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
80217dfa: 8c 61        	ld	a1, 0(a1)
80217dfc: 23 30 b4 fe  	sd	a1, -32(s0)

0000000080217e00 <.LBB319_2>:
;         try formatType(
80217e00: 17 76 00 00  	auipc	a2, 7
80217e04: 13 06 06 61  	addi	a2, a2, 1552
80217e08: 8d 46        	addi	a3, zero, 3
80217e0a: 23 3c d4 fa  	sd	a3, -72(s0)
80217e0e: 97 00 00 00  	auipc	ra, 0
80217e12: e7 80 00 12  	jalr	288(ra)
80217e16: aa 85        	mv	a1, a0
80217e18: 03 35 04 fc  	ld	a0, -64(s0)
80217e1c: 23 1f b4 fc  	sh	a1, -34(s0)

0000000080217e20 <.LBB319_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
80217e20: 97 75 00 00  	auipc	a1, 7
80217e24: 93 85 85 61  	addi	a1, a1, 1560
80217e28: 97 90 fe ff  	auipc	ra, 1048553
80217e2c: e7 80 a0 c8  	jalr	-886(ra)
80217e30: 83 35 04 fb  	ld	a1, -80(s0)
80217e34: 83 36 84 fb  	ld	a3, -72(s0)
80217e38: 2a 86        	mv	a2, a0
80217e3a: 03 35 04 fc  	ld	a0, -64(s0)
80217e3e: 23 1e c4 fc  	sh	a2, -36(s0)
;             @field(args, fields_info[arg_to_print].name),
80217e42: 8c 65        	ld	a1, 8(a1)
80217e44: 23 38 b4 fc  	sd	a1, -48(s0)

0000000080217e48 <.LBB319_4>:
;         try formatType(
80217e48: 17 76 00 00  	auipc	a2, 7
80217e4c: 13 06 06 66  	addi	a2, a2, 1632
80217e50: 97 00 00 00  	auipc	ra, 0
80217e54: e7 80 e0 0d  	jalr	222(ra)
80217e58: aa 85        	mv	a1, a0
80217e5a: 03 35 04 fc  	ld	a0, -64(s0)
80217e5e: 23 17 b4 fc  	sh	a1, -50(s0)

0000000080217e62 <.LBB319_5>:
;             try writer.writeAll(fmt[start_index..end_index]);
80217e62: 97 75 00 00  	auipc	a1, 7
80217e66: 93 85 e5 66  	addi	a1, a1, 1646
80217e6a: 97 90 fe ff  	auipc	ra, 1048553
80217e6e: e7 80 80 c4  	jalr	-952(ra)
80217e72: 23 16 a4 fc  	sh	a0, -52(s0)
80217e76: 01 45        	mv	a0, zero
; ) !void {
80217e78: 23 17 a4 fe  	sh	a0, -18(s0)
80217e7c: 06 64        	ld	s0, 64(sp)
80217e7e: a6 60        	ld	ra, 72(sp)
80217e80: 61 61        	addi	sp, sp, 80
80217e82: 82 80        	ret

0000000080217e84 <std.fmt.formatType.243>:
; pub fn formatType(
80217e84: 39 71        	addi	sp, sp, -64
;     options: FormatOptions,
80217e86: 06 fc        	sd	ra, 56(sp)
80217e88: 22 f8        	sd	s0, 48(sp)
80217e8a: 80 00        	addi	s0, sp, 64
80217e8c: 23 34 c4 fc  	sd	a2, -56(s0)
;     value: anytype,
80217e90: 23 38 b4 fc  	sd	a1, -48(s0)
80217e94: 23 3c a4 fc  	sd	a0, -40(s0)
80217e98: 23 30 d4 fe  	sd	a3, -32(s0)
80217e9c: 01 45        	mv	a0, zero
;                 if (max_depth == 0) {
80217e9e: 63 95 a6 04  	bne	a3, a0, 0x80217ee8 <.LBB320_10+0x40>
80217ea2: 09 a0        	j	0x80217ea4 <std.fmt.formatType.243+0x20>
;                     return writer.writeAll("{ ... }");
80217ea4: 03 35 84 fd  	ld	a0, -40(s0)

0000000080217ea8 <.LBB320_10>:
80217ea8: 97 75 00 00  	auipc	a1, 7
80217eac: 93 85 05 ed  	addi	a1, a1, -304
80217eb0: 97 90 fe ff  	auipc	ra, 1048553
80217eb4: e7 80 20 c0  	jalr	-1022(ra)
80217eb8: aa 85        	mv	a1, a0
80217eba: 41 65        	lui	a0, 16
80217ebc: 7d 35        	addiw	a0, a0, -1
80217ebe: 6d 8d        	and	a0, a0, a1
80217ec0: 23 17 b4 fe  	sh	a1, -18(s0)
80217ec4: 81 45        	mv	a1, zero
80217ec6: 63 0a b5 00  	beq	a0, a1, 0x80217eda <.LBB320_10+0x32>
80217eca: 09 a0        	j	0x80217ecc <.LBB320_10+0x24>
80217ecc: 03 35 84 fd  	ld	a0, -40(s0)
80217ed0: 97 90 fe ff  	auipc	ra, 1048553
80217ed4: e7 80 20 9d  	jalr	-1582(ra)
80217ed8: 11 a0        	j	0x80217edc <.LBB320_10+0x34>
80217eda: 09 a0        	j	0x80217edc <.LBB320_10+0x34>
80217edc: 03 15 e4 fe  	lh	a0, -18(s0)
80217ee0: 42 74        	ld	s0, 48(sp)
80217ee2: e2 70        	ld	ra, 56(sp)
80217ee4: 21 61        	addi	sp, sp, 64
80217ee6: 82 80        	ret
;                 if (max_depth == 0) {
80217ee8: 09 a0        	j	0x80217eea <.LBB320_10+0x42>
;                             return formatBuf(value, options, writer);
80217eea: 03 36 84 fc  	ld	a2, -56(s0)
80217eee: 83 35 04 fd  	ld	a1, -48(s0)
80217ef2: 03 35 84 fd  	ld	a0, -40(s0)
80217ef6: 97 90 fe ff  	auipc	ra, 1048553
80217efa: e7 80 e0 56  	jalr	1390(ra)
80217efe: aa 85        	mv	a1, a0
80217f00: 41 65        	lui	a0, 16
80217f02: 7d 35        	addiw	a0, a0, -1
80217f04: 6d 8d        	and	a0, a0, a1
80217f06: 23 17 b4 fe  	sh	a1, -18(s0)
80217f0a: 81 45        	mv	a1, zero
80217f0c: 63 0a b5 00  	beq	a0, a1, 0x80217f20 <.LBB320_10+0x78>
80217f10: 09 a0        	j	0x80217f12 <.LBB320_10+0x6a>
80217f12: 03 35 84 fd  	ld	a0, -40(s0)
80217f16: 97 90 fe ff  	auipc	ra, 1048553
80217f1a: e7 80 c0 98  	jalr	-1652(ra)
80217f1e: 11 a0        	j	0x80217f22 <.LBB320_10+0x7a>
80217f20: 09 a0        	j	0x80217f22 <.LBB320_10+0x7a>
80217f22: 03 15 e4 fe  	lh	a0, -18(s0)
80217f26: 42 74        	ld	s0, 48(sp)
80217f28: e2 70        	ld	ra, 56(sp)
80217f2a: 21 61        	addi	sp, sp, 64
80217f2c: 82 80        	ret

0000000080217f2e <std.fmt.formatType.244>:
; pub fn formatType(
80217f2e: 1d 71        	addi	sp, sp, -96
80217f30: 86 ec        	sd	ra, 88(sp)
80217f32: a2 e8        	sd	s0, 80(sp)
80217f34: 80 10        	addi	s0, sp, 96
80217f36: 23 30 a4 fa  	sd	a0, -96(s0)
80217f3a: 23 38 b4 fa  	sd	a1, -80(s0)
80217f3e: 23 34 d4 fa  	sd	a3, -88(s0)
;             return formatValue(value, actual_fmt, options, writer);
80217f42: 23 30 b4 fe  	sd	a1, -32(s0)
80217f46: 14 62        	ld	a3, 0(a2)
80217f48: 23 3c d4 fa  	sd	a3, -72(s0)
80217f4c: 14 66        	ld	a3, 8(a2)
80217f4e: 23 30 d4 fc  	sd	a3, -64(s0)
80217f52: 14 6a        	ld	a3, 16(a2)
80217f54: 23 34 d4 fc  	sd	a3, -56(s0)
80217f58: 14 6e        	ld	a3, 24(a2)
80217f5a: 23 38 d4 fc  	sd	a3, -48(s0)
80217f5e: 14 72        	ld	a3, 32(a2)
80217f60: 23 3c d4 fc  	sd	a3, -40(s0)
80217f64: 97 00 00 00  	auipc	ra, 0
80217f68: e7 80 60 0a  	jalr	166(ra)
80217f6c: aa 85        	mv	a1, a0
80217f6e: 41 65        	lui	a0, 16
80217f70: 7d 35        	addiw	a0, a0, -1
80217f72: 6d 8d        	and	a0, a0, a1
80217f74: 23 17 b4 fe  	sh	a1, -18(s0)
80217f78: 81 45        	mv	a1, zero
80217f7a: 63 0a b5 00  	beq	a0, a1, 0x80217f8e <std.fmt.formatType.244+0x60>
80217f7e: 09 a0        	j	0x80217f80 <std.fmt.formatType.244+0x52>
80217f80: 03 35 04 fa  	ld	a0, -96(s0)
80217f84: 97 90 fe ff  	auipc	ra, 1048553
80217f88: e7 80 e0 91  	jalr	-1762(ra)
80217f8c: 11 a0        	j	0x80217f90 <std.fmt.formatType.244+0x62>
80217f8e: 09 a0        	j	0x80217f90 <std.fmt.formatType.244+0x62>
80217f90: 03 15 e4 fe  	lh	a0, -18(s0)
80217f94: 46 64        	ld	s0, 80(sp)
80217f96: e6 60        	ld	ra, 88(sp)
80217f98: 25 61        	addi	sp, sp, 96
80217f9a: 82 80        	ret

0000000080217f9c <std.fmt.formatType.245>:
; pub fn formatType(
80217f9c: 1d 71        	addi	sp, sp, -96
80217f9e: 86 ec        	sd	ra, 88(sp)
80217fa0: a2 e8        	sd	s0, 80(sp)
80217fa2: 80 10        	addi	s0, sp, 96
80217fa4: 23 30 a4 fa  	sd	a0, -96(s0)
80217fa8: 23 38 b4 fa  	sd	a1, -80(s0)
80217fac: 23 34 d4 fa  	sd	a3, -88(s0)
;             return formatValue(value, actual_fmt, options, writer);
80217fb0: 23 30 b4 fe  	sd	a1, -32(s0)
80217fb4: 14 62        	ld	a3, 0(a2)
80217fb6: 23 3c d4 fa  	sd	a3, -72(s0)
80217fba: 14 66        	ld	a3, 8(a2)
80217fbc: 23 30 d4 fc  	sd	a3, -64(s0)
80217fc0: 14 6a        	ld	a3, 16(a2)
80217fc2: 23 34 d4 fc  	sd	a3, -56(s0)
80217fc6: 14 6e        	ld	a3, 24(a2)
80217fc8: 23 38 d4 fc  	sd	a3, -48(s0)
80217fcc: 14 72        	ld	a3, 32(a2)
80217fce: 23 3c d4 fc  	sd	a3, -40(s0)
80217fd2: 97 00 00 00  	auipc	ra, 0
80217fd6: e7 80 20 0a  	jalr	162(ra)
80217fda: aa 85        	mv	a1, a0
80217fdc: 41 65        	lui	a0, 16
80217fde: 7d 35        	addiw	a0, a0, -1
80217fe0: 6d 8d        	and	a0, a0, a1
80217fe2: 23 17 b4 fe  	sh	a1, -18(s0)
80217fe6: 81 45        	mv	a1, zero
80217fe8: 63 0a b5 00  	beq	a0, a1, 0x80217ffc <std.fmt.formatType.245+0x60>
80217fec: 09 a0        	j	0x80217fee <std.fmt.formatType.245+0x52>
80217fee: 03 35 04 fa  	ld	a0, -96(s0)
80217ff2: 97 90 fe ff  	auipc	ra, 1048553
80217ff6: e7 80 00 8b  	jalr	-1872(ra)
80217ffa: 11 a0        	j	0x80217ffe <std.fmt.formatType.245+0x62>
80217ffc: 09 a0        	j	0x80217ffe <std.fmt.formatType.245+0x62>
80217ffe: 03 15 e4 fe  	lh	a0, -18(s0)
80218002: 46 64        	ld	s0, 80(sp)
80218004: e6 60        	ld	ra, 88(sp)
80218006: 25 61        	addi	sp, sp, 96
80218008: 82 80        	ret

000000008021800a <std.fmt.formatValue>:
; fn formatValue(
8021800a: 1d 71        	addi	sp, sp, -96
8021800c: 86 ec        	sd	ra, 88(sp)
8021800e: a2 e8        	sd	s0, 80(sp)
80218010: 80 10        	addi	s0, sp, 96
80218012: 23 34 a4 fa  	sd	a0, -88(s0)
80218016: 23 38 b4 fa  	sd	a1, -80(s0)
;         .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
8021801a: 23 30 b4 fe  	sd	a1, -32(s0)
8021801e: 14 62        	ld	a3, 0(a2)
80218020: 23 3c d4 fa  	sd	a3, -72(s0)
80218024: 14 66        	ld	a3, 8(a2)
80218026: 23 30 d4 fc  	sd	a3, -64(s0)
8021802a: 14 6a        	ld	a3, 16(a2)
8021802c: 23 34 d4 fc  	sd	a3, -56(s0)
80218030: 14 6e        	ld	a3, 24(a2)
80218032: 23 38 d4 fc  	sd	a3, -48(s0)
80218036: 14 72        	ld	a3, 32(a2)
80218038: 23 3c d4 fc  	sd	a3, -40(s0)
8021803c: 97 10 00 00  	auipc	ra, 1
80218040: e7 80 e0 7f  	jalr	2046(ra)
80218044: aa 85        	mv	a1, a0
80218046: 41 65        	lui	a0, 16
80218048: 7d 35        	addiw	a0, a0, -1
8021804a: 6d 8d        	and	a0, a0, a1
8021804c: 23 17 b4 fe  	sh	a1, -18(s0)
80218050: 81 45        	mv	a1, zero
80218052: 63 0a b5 00  	beq	a0, a1, 0x80218066 <std.fmt.formatValue+0x5c>
80218056: 09 a0        	j	0x80218058 <std.fmt.formatValue+0x4e>
80218058: 03 35 84 fa  	ld	a0, -88(s0)
8021805c: 97 90 fe ff  	auipc	ra, 1048553
80218060: e7 80 60 84  	jalr	-1978(ra)
80218064: 11 a0        	j	0x80218068 <std.fmt.formatValue+0x5e>
80218066: 09 a0        	j	0x80218068 <std.fmt.formatValue+0x5e>
80218068: 03 15 e4 fe  	lh	a0, -18(s0)
8021806c: 46 64        	ld	s0, 80(sp)
8021806e: e6 60        	ld	ra, 88(sp)
80218070: 25 61        	addi	sp, sp, 96
80218072: 82 80        	ret

0000000080218074 <std.fmt.formatValue.246>:
; fn formatValue(
80218074: 1d 71        	addi	sp, sp, -96
80218076: 86 ec        	sd	ra, 88(sp)
80218078: a2 e8        	sd	s0, 80(sp)
8021807a: 80 10        	addi	s0, sp, 96
8021807c: 23 34 a4 fa  	sd	a0, -88(s0)
80218080: 23 38 b4 fa  	sd	a1, -80(s0)
;         .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
80218084: 23 30 b4 fe  	sd	a1, -32(s0)
80218088: 14 62        	ld	a3, 0(a2)
8021808a: 23 3c d4 fa  	sd	a3, -72(s0)
8021808e: 14 66        	ld	a3, 8(a2)
80218090: 23 30 d4 fc  	sd	a3, -64(s0)
80218094: 14 6a        	ld	a3, 16(a2)
80218096: 23 34 d4 fc  	sd	a3, -56(s0)
8021809a: 14 6e        	ld	a3, 24(a2)
8021809c: 23 38 d4 fc  	sd	a3, -48(s0)
802180a0: 14 72        	ld	a3, 32(a2)
802180a2: 23 3c d4 fc  	sd	a3, -40(s0)
802180a6: 97 20 00 00  	auipc	ra, 2
802180aa: e7 80 c0 b7  	jalr	-1156(ra)
802180ae: aa 85        	mv	a1, a0
802180b0: 41 65        	lui	a0, 16
802180b2: 7d 35        	addiw	a0, a0, -1
802180b4: 6d 8d        	and	a0, a0, a1
802180b6: 23 17 b4 fe  	sh	a1, -18(s0)
802180ba: 81 45        	mv	a1, zero
802180bc: 63 0a b5 00  	beq	a0, a1, 0x802180d0 <std.fmt.formatValue.246+0x5c>
802180c0: 09 a0        	j	0x802180c2 <std.fmt.formatValue.246+0x4e>
802180c2: 03 35 84 fa  	ld	a0, -88(s0)
802180c6: 97 80 fe ff  	auipc	ra, 1048552
802180ca: e7 80 c0 7d  	jalr	2012(ra)
802180ce: 11 a0        	j	0x802180d2 <std.fmt.formatValue.246+0x5e>
802180d0: 09 a0        	j	0x802180d2 <std.fmt.formatValue.246+0x5e>
802180d2: 03 15 e4 fe  	lh	a0, -18(s0)
802180d6: 46 64        	ld	s0, 80(sp)
802180d8: e6 60        	ld	ra, 88(sp)
802180da: 25 61        	addi	sp, sp, 96
802180dc: 82 80        	ret

00000000802180de <log.0.247>:
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
802180de: 4d 71        	addi	sp, sp, -336
802180e0: 86 e6        	sd	ra, 328(sp)
802180e2: a2 e2        	sd	s0, 320(sp)
802180e4: 80 0a        	addi	s0, sp, 336
802180e6: aa 85        	mv	a1, a0
802180e8: 01 45        	mv	a0, zero
802180ea: 23 3c a4 ea  	sd	a0, -328(s0)
802180ee: 23 3c a4 ec  	sd	a0, -296(s0)
802180f2: 13 05 04 ef  	addi	a0, s0, -272
802180f6: 23 30 a4 ee  	sd	a0, -288(s0)
802180fa: 13 05 00 02  	addi	a0, zero, 32
802180fe: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80218102: 88 41        	lw	a0, 0(a1)
80218104: 23 28 a4 ec  	sw	a0, -304(s0)
80218108: 13 05 84 ed  	addi	a0, s0, -296
8021810c: 97 20 00 00  	auipc	ra, 2
80218110: e7 80 00 b9  	jalr	-1136(ra)
80218114: 83 35 84 eb  	ld	a1, -328(s0)
80218118: 23 17 a4 ec  	sh	a0, -306(s0)
8021811c: 41 66        	lui	a2, 16
8021811e: 7d 36        	addiw	a2, a2, -1
80218120: 71 8d        	and	a0, a0, a2
80218122: 23 30 a4 ec  	sd	a0, -320(s0)
80218126: 63 0b b5 00  	beq	a0, a1, 0x8021813c <log.0.247+0x5e>
8021812a: 09 a0        	j	0x8021812c <log.0.247+0x4e>
8021812c: 83 35 04 ec  	ld	a1, -320(s0)
80218130: 13 05 84 ed  	addi	a0, s0, -296
80218134: 97 80 fe ff  	auipc	ra, 1048552
80218138: e7 80 a0 4b  	jalr	1210(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
8021813c: 16 64        	ld	s0, 320(sp)
8021813e: b6 60        	ld	ra, 328(sp)
80218140: 71 61        	addi	sp, sp, 336
80218142: 82 80        	ret

0000000080218144 <std.fmt.formatType.248>:
; pub fn formatType(
80218144: 1d 71        	addi	sp, sp, -96
80218146: 86 ec        	sd	ra, 88(sp)
80218148: a2 e8        	sd	s0, 80(sp)
8021814a: 80 10        	addi	s0, sp, 96
8021814c: 23 34 a4 fa  	sd	a0, -88(s0)
80218150: 23 2e b4 fa  	sw	a1, -68(s0)
80218154: 23 38 d4 fa  	sd	a3, -80(s0)
;             return formatValue(value, actual_fmt, options, writer);
80218158: 23 24 b4 fe  	sw	a1, -24(s0)
8021815c: 14 62        	ld	a3, 0(a2)
8021815e: 23 30 d4 fc  	sd	a3, -64(s0)
80218162: 14 66        	ld	a3, 8(a2)
80218164: 23 34 d4 fc  	sd	a3, -56(s0)
80218168: 14 6a        	ld	a3, 16(a2)
8021816a: 23 38 d4 fc  	sd	a3, -48(s0)
8021816e: 14 6e        	ld	a3, 24(a2)
80218170: 23 3c d4 fc  	sd	a3, -40(s0)
80218174: 14 72        	ld	a3, 32(a2)
80218176: 23 30 d4 fe  	sd	a3, -32(s0)
8021817a: 97 00 00 00  	auipc	ra, 0
8021817e: e7 80 80 03  	jalr	56(ra)
80218182: aa 85        	mv	a1, a0
80218184: 41 65        	lui	a0, 16
80218186: 7d 35        	addiw	a0, a0, -1
80218188: 6d 8d        	and	a0, a0, a1
8021818a: 23 17 b4 fe  	sh	a1, -18(s0)
8021818e: 81 45        	mv	a1, zero
80218190: 63 0a b5 00  	beq	a0, a1, 0x802181a4 <std.fmt.formatType.248+0x60>
80218194: 09 a0        	j	0x80218196 <std.fmt.formatType.248+0x52>
80218196: 03 35 84 fa  	ld	a0, -88(s0)
8021819a: 97 80 fe ff  	auipc	ra, 1048552
8021819e: e7 80 80 70  	jalr	1800(ra)
802181a2: 11 a0        	j	0x802181a6 <std.fmt.formatType.248+0x62>
802181a4: 09 a0        	j	0x802181a6 <std.fmt.formatType.248+0x62>
802181a6: 03 15 e4 fe  	lh	a0, -18(s0)
802181aa: 46 64        	ld	s0, 80(sp)
802181ac: e6 60        	ld	ra, 88(sp)
802181ae: 25 61        	addi	sp, sp, 96
802181b0: 82 80        	ret

00000000802181b2 <std.fmt.formatValue.249>:
; fn formatValue(
802181b2: 5d 71        	addi	sp, sp, -80
802181b4: 86 e4        	sd	ra, 72(sp)
802181b6: a2 e0        	sd	s0, 64(sp)
802181b8: 80 08        	addi	s0, sp, 80
802181ba: 23 38 a4 fa  	sd	a0, -80(s0)
802181be: 23 2e b4 fa  	sw	a1, -68(s0)
;         .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
802181c2: 23 24 b4 fe  	sw	a1, -24(s0)
802181c6: 14 62        	ld	a3, 0(a2)
802181c8: 23 30 d4 fc  	sd	a3, -64(s0)
802181cc: 14 66        	ld	a3, 8(a2)
802181ce: 23 34 d4 fc  	sd	a3, -56(s0)
802181d2: 14 6a        	ld	a3, 16(a2)
802181d4: 23 38 d4 fc  	sd	a3, -48(s0)
802181d8: 14 6e        	ld	a3, 24(a2)
802181da: 23 3c d4 fc  	sd	a3, -40(s0)
802181de: 14 72        	ld	a3, 32(a2)
802181e0: 23 30 d4 fe  	sd	a3, -32(s0)
802181e4: 97 20 00 00  	auipc	ra, 2
802181e8: e7 80 20 b0  	jalr	-1278(ra)
802181ec: aa 85        	mv	a1, a0
802181ee: 41 65        	lui	a0, 16
802181f0: 7d 35        	addiw	a0, a0, -1
802181f2: 6d 8d        	and	a0, a0, a1
802181f4: 23 17 b4 fe  	sh	a1, -18(s0)
802181f8: 81 45        	mv	a1, zero
802181fa: 63 0a b5 00  	beq	a0, a1, 0x8021820e <std.fmt.formatValue.249+0x5c>
802181fe: 09 a0        	j	0x80218200 <std.fmt.formatValue.249+0x4e>
80218200: 03 35 04 fb  	ld	a0, -80(s0)
80218204: 97 80 fe ff  	auipc	ra, 1048552
80218208: e7 80 e0 69  	jalr	1694(ra)
8021820c: 11 a0        	j	0x80218210 <std.fmt.formatValue.249+0x5e>
8021820e: 09 a0        	j	0x80218210 <std.fmt.formatValue.249+0x5e>
80218210: 03 15 e4 fe  	lh	a0, -18(s0)
80218214: 06 64        	ld	s0, 64(sp)
80218216: a6 60        	ld	ra, 72(sp)
80218218: 61 61        	addi	sp, sp, 80
8021821a: 82 80        	ret

000000008021821c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.250>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021821c: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
8021821e: 06 f4        	sd	ra, 40(sp)
80218220: 22 f0        	sd	s0, 32(sp)
80218222: 00 18        	addi	s0, sp, 48
80218224: 23 38 a4 fc  	sd	a0, -48(s0)
80218228: 90 65        	ld	a2, 8(a1)
8021822a: 23 30 c4 fe  	sd	a2, -32(s0)
8021822e: 90 61        	ld	a2, 0(a1)
80218230: 23 3c c4 fc  	sd	a2, -40(s0)
80218234: 97 20 00 00  	auipc	ra, 2
80218238: e7 80 20 d9  	jalr	-622(ra)
8021823c: aa 85        	mv	a1, a0
8021823e: 41 65        	lui	a0, 16
80218240: 7d 35        	addiw	a0, a0, -1
80218242: 6d 8d        	and	a0, a0, a1
80218244: 23 17 b4 fe  	sh	a1, -18(s0)
80218248: 81 45        	mv	a1, zero
8021824a: 63 0a b5 00  	beq	a0, a1, 0x8021825e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.250+0x42>
8021824e: 09 a0        	j	0x80218250 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.250+0x34>
80218250: 03 35 04 fd  	ld	a0, -48(s0)
80218254: 97 80 fe ff  	auipc	ra, 1048552
80218258: e7 80 e0 64  	jalr	1614(ra)
8021825c: 11 a0        	j	0x80218260 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.250+0x44>
8021825e: 09 a0        	j	0x80218260 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.250+0x44>
80218260: 03 15 e4 fe  	lh	a0, -18(s0)
80218264: 02 74        	ld	s0, 32(sp)
80218266: a2 70        	ld	ra, 40(sp)
80218268: 45 61        	addi	sp, sp, 48
8021826a: 82 80        	ret

000000008021826c <std.log.log.251>:
; fn log(
8021826c: 79 71        	addi	sp, sp, -48
;     args: anytype,
8021826e: 06 f4        	sd	ra, 40(sp)
80218270: 22 f0        	sd	s0, 32(sp)
80218272: 00 18        	addi	s0, sp, 48
80218274: 23 38 a4 fc  	sd	a0, -48(s0)
80218278: 0d 45        	addi	a0, zero, 3
;         break :blk level;
8021827a: a3 07 a4 fe  	sb	a0, -17(s0)
8021827e: 09 a0        	j	0x80218280 <std.log.log.251+0x14>
;             root.log(message_level, scope, format, args);
80218280: 03 35 04 fd  	ld	a0, -48(s0)
80218284: 0c 61        	ld	a1, 0(a0)
80218286: 23 3c b4 fc  	sd	a1, -40(s0)
8021828a: 0c 65        	ld	a1, 8(a0)
8021828c: 23 30 b4 fe  	sd	a1, -32(s0)
80218290: 97 20 00 00  	auipc	ra, 2
80218294: e7 80 e0 da  	jalr	-594(ra)
; ) void {
80218298: 02 74        	ld	s0, 32(sp)
8021829a: a2 70        	ld	ra, 40(sp)
8021829c: 45 61        	addi	sp, sp, 48
8021829e: 82 80        	ret

00000000802182a0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.252>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
802182a0: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
802182a2: 06 f4        	sd	ra, 40(sp)
802182a4: 22 f0        	sd	s0, 32(sp)
802182a6: 00 18        	addi	s0, sp, 48
802182a8: 23 38 a4 fc  	sd	a0, -48(s0)
802182ac: 90 65        	ld	a2, 8(a1)
802182ae: 23 30 c4 fe  	sd	a2, -32(s0)
802182b2: 90 61        	ld	a2, 0(a1)
802182b4: 23 3c c4 fc  	sd	a2, -40(s0)
802182b8: 97 20 00 00  	auipc	ra, 2
802182bc: e7 80 20 df  	jalr	-526(ra)
802182c0: aa 85        	mv	a1, a0
802182c2: 41 65        	lui	a0, 16
802182c4: 7d 35        	addiw	a0, a0, -1
802182c6: 6d 8d        	and	a0, a0, a1
802182c8: 23 17 b4 fe  	sh	a1, -18(s0)
802182cc: 81 45        	mv	a1, zero
802182ce: 63 0a b5 00  	beq	a0, a1, 0x802182e2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.252+0x42>
802182d2: 09 a0        	j	0x802182d4 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.252+0x34>
802182d4: 03 35 04 fd  	ld	a0, -48(s0)
802182d8: 97 80 fe ff  	auipc	ra, 1048552
802182dc: e7 80 a0 5c  	jalr	1482(ra)
802182e0: 11 a0        	j	0x802182e4 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.252+0x44>
802182e2: 09 a0        	j	0x802182e4 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.252+0x44>
802182e4: 03 15 e4 fe  	lh	a0, -18(s0)
802182e8: 02 74        	ld	s0, 32(sp)
802182ea: a2 70        	ld	ra, 40(sp)
802182ec: 45 61        	addi	sp, sp, 48
802182ee: 82 80        	ret

00000000802182f0 <std.fmt.format.253>:
; pub fn format(
802182f0: 79 71        	addi	sp, sp, -48
;             @field(args, fields_info[arg_to_print].name),
802182f2: 06 f4        	sd	ra, 40(sp)
802182f4: 22 f0        	sd	s0, 32(sp)
802182f6: 00 18        	addi	s0, sp, 48
802182f8: 90 65        	ld	a2, 8(a1)
802182fa: 23 30 c4 fe  	sd	a2, -32(s0)
802182fe: 90 61        	ld	a2, 0(a1)
80218300: 23 3c c4 fc  	sd	a2, -40(s0)

0000000080218304 <.LBB331_1>:
;         try formatType(
80218304: 17 76 00 00  	auipc	a2, 7
80218308: 13 06 c6 24  	addi	a2, a2, 588
8021830c: 8d 46        	addi	a3, zero, 3
8021830e: 97 90 fe ff  	auipc	ra, 1048553
80218312: e7 80 40 88  	jalr	-1916(ra)
80218316: 23 1b a4 fc  	sh	a0, -42(s0)
8021831a: 01 45        	mv	a0, zero
; ) !void {
8021831c: 23 17 a4 fe  	sh	a0, -18(s0)
80218320: 02 74        	ld	s0, 32(sp)
80218322: a2 70        	ld	ra, 40(sp)
80218324: 45 61        	addi	sp, sp, 48
80218326: 82 80        	ret

0000000080218328 <std.fmt.format.254>:
; pub fn format(
80218328: 01 11        	addi	sp, sp, -32
;             @field(args, fields_info[arg_to_print].name),
8021832a: 06 ec        	sd	ra, 24(sp)
8021832c: 22 e8        	sd	s0, 16(sp)
8021832e: 00 10        	addi	s0, sp, 32
80218330: 8c 41        	lw	a1, 0(a1)
80218332: 23 24 b4 fe  	sw	a1, -24(s0)

0000000080218336 <.LBB332_1>:
;         try formatType(
80218336: 17 76 00 00  	auipc	a2, 7
8021833a: 13 06 26 2a  	addi	a2, a2, 674
8021833e: 8d 46        	addi	a3, zero, 3
80218340: 97 00 00 00  	auipc	ra, 0
80218344: e7 80 40 e0  	jalr	-508(ra)
80218348: 23 13 a4 fe  	sh	a0, -26(s0)
8021834c: 01 45        	mv	a0, zero
; ) !void {
8021834e: 23 17 a4 fe  	sh	a0, -18(s0)
80218352: 42 64        	ld	s0, 16(sp)
80218354: e2 60        	ld	ra, 24(sp)
80218356: 05 61        	addi	sp, sp, 32
80218358: 82 80        	ret

000000008021835a <std.fmt.format.255>:
; pub fn format(
8021835a: 79 71        	addi	sp, sp, -48
;             @field(args, fields_info[arg_to_print].name),
8021835c: 06 f4        	sd	ra, 40(sp)
8021835e: 22 f0        	sd	s0, 32(sp)
80218360: 00 18        	addi	s0, sp, 48
80218362: 90 65        	ld	a2, 8(a1)
80218364: 23 30 c4 fe  	sd	a2, -32(s0)
80218368: 90 61        	ld	a2, 0(a1)
8021836a: 23 3c c4 fc  	sd	a2, -40(s0)

000000008021836e <.LBB333_1>:
;         try formatType(
8021836e: 17 76 00 00  	auipc	a2, 7
80218372: 13 06 26 2f  	addi	a2, a2, 754
80218376: 8d 46        	addi	a3, zero, 3
80218378: 97 90 fe ff  	auipc	ra, 1048553
8021837c: e7 80 a0 81  	jalr	-2022(ra)
80218380: 23 1b a4 fc  	sh	a0, -42(s0)
80218384: 01 45        	mv	a0, zero
; ) !void {
80218386: 23 17 a4 fe  	sh	a0, -18(s0)
8021838a: 02 74        	ld	s0, 32(sp)
8021838c: a2 70        	ld	ra, 40(sp)
8021838e: 45 61        	addi	sp, sp, 48
80218390: 82 80        	ret

0000000080218392 <std.fmt.format.256>:
; pub fn format(
80218392: 01 11        	addi	sp, sp, -32
;             @field(args, fields_info[arg_to_print].name),
80218394: 06 ec        	sd	ra, 24(sp)
80218396: 22 e8        	sd	s0, 16(sp)
80218398: 00 10        	addi	s0, sp, 32
8021839a: 8c 41        	lw	a1, 0(a1)
8021839c: 23 24 b4 fe  	sw	a1, -24(s0)

00000000802183a0 <.LBB334_1>:
;         try formatType(
802183a0: 17 76 00 00  	auipc	a2, 7
802183a4: 13 06 86 34  	addi	a2, a2, 840
802183a8: 8d 46        	addi	a3, zero, 3
802183aa: 97 00 00 00  	auipc	ra, 0
802183ae: e7 80 a0 d9  	jalr	-614(ra)
802183b2: 23 13 a4 fe  	sh	a0, -26(s0)
802183b6: 01 45        	mv	a0, zero
; ) !void {
802183b8: 23 17 a4 fe  	sh	a0, -18(s0)
802183bc: 42 64        	ld	s0, 16(sp)
802183be: e2 60        	ld	ra, 24(sp)
802183c0: 05 61        	addi	sp, sp, 32
802183c2: 82 80        	ret

00000000802183c4 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.257>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
802183c4: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
802183c6: 06 ec        	sd	ra, 24(sp)
802183c8: 22 e8        	sd	s0, 16(sp)
802183ca: 00 10        	addi	s0, sp, 32
802183cc: 23 30 a4 fe  	sd	a0, -32(s0)
802183d0: 90 41        	lw	a2, 0(a1)
802183d2: 23 24 c4 fe  	sw	a2, -24(s0)
802183d6: 97 20 00 00  	auipc	ra, 2
802183da: e7 80 a0 d2  	jalr	-726(ra)
802183de: aa 85        	mv	a1, a0
802183e0: 41 65        	lui	a0, 16
802183e2: 7d 35        	addiw	a0, a0, -1
802183e4: 6d 8d        	and	a0, a0, a1
802183e6: 23 17 b4 fe  	sh	a1, -18(s0)
802183ea: 81 45        	mv	a1, zero
802183ec: 63 0a b5 00  	beq	a0, a1, 0x80218400 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.257+0x3c>
802183f0: 09 a0        	j	0x802183f2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.257+0x2e>
802183f2: 03 35 04 fe  	ld	a0, -32(s0)
802183f6: 97 80 fe ff  	auipc	ra, 1048552
802183fa: e7 80 c0 4a  	jalr	1196(ra)
802183fe: 11 a0        	j	0x80218402 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.257+0x3e>
80218400: 09 a0        	j	0x80218402 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.257+0x3e>
80218402: 03 15 e4 fe  	lh	a0, -18(s0)
80218406: 42 64        	ld	s0, 16(sp)
80218408: e2 60        	ld	ra, 24(sp)
8021840a: 05 61        	addi	sp, sp, 32
8021840c: 82 80        	ret

000000008021840e <std.fmt.format.258>:
; pub fn format(
8021840e: 79 71        	addi	sp, sp, -48
;     args: anytype,
80218410: 06 f4        	sd	ra, 40(sp)
80218412: 22 f0        	sd	s0, 32(sp)
80218414: 00 18        	addi	s0, sp, 48
80218416: 23 38 b4 fc  	sd	a1, -48(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
8021841a: 23 3c a4 fc  	sd	a0, -40(s0)

000000008021841e <.LBB336_1>:
8021841e: 97 75 00 00  	auipc	a1, 7
80218422: 93 85 25 2f  	addi	a1, a1, 754
80218426: 97 80 fe ff  	auipc	ra, 1048552
8021842a: e7 80 c0 68  	jalr	1676(ra)
8021842e: 83 35 04 fd  	ld	a1, -48(s0)
80218432: 2a 86        	mv	a2, a0
80218434: 03 35 84 fd  	ld	a0, -40(s0)
80218438: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
8021843c: 8c 41        	lw	a1, 0(a1)
8021843e: 23 24 b4 fe  	sw	a1, -24(s0)

0000000080218442 <.LBB336_2>:
;         try formatType(
80218442: 17 76 00 00  	auipc	a2, 7
80218446: 13 06 e6 33  	addi	a2, a2, 830
8021844a: 8d 46        	addi	a3, zero, 3
8021844c: 97 20 00 00  	auipc	ra, 2
80218450: e7 80 60 ce  	jalr	-794(ra)
80218454: 23 13 a4 fe  	sh	a0, -26(s0)
80218458: 01 45        	mv	a0, zero
; ) !void {
8021845a: 23 17 a4 fe  	sh	a0, -18(s0)
8021845e: 02 74        	ld	s0, 32(sp)
80218460: a2 70        	ld	ra, 40(sp)
80218462: 45 61        	addi	sp, sp, 48
80218464: 82 80        	ret

0000000080218466 <std.fmt.format.259>:
; pub fn format(
80218466: 39 71        	addi	sp, sp, -64
;     args: anytype,
80218468: 06 fc        	sd	ra, 56(sp)
8021846a: 22 f8        	sd	s0, 48(sp)
8021846c: 80 00        	addi	s0, sp, 64
8021846e: 23 34 b4 fc  	sd	a1, -56(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
80218472: 23 38 a4 fc  	sd	a0, -48(s0)

0000000080218476 <.LBB337_1>:
80218476: 97 75 00 00  	auipc	a1, 7
8021847a: 93 85 25 34  	addi	a1, a1, 834
8021847e: 97 80 fe ff  	auipc	ra, 1048552
80218482: e7 80 40 63  	jalr	1588(ra)
80218486: 83 35 84 fc  	ld	a1, -56(s0)
8021848a: 2a 86        	mv	a2, a0
8021848c: 03 35 04 fd  	ld	a0, -48(s0)
80218490: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
80218494: 8c 61        	ld	a1, 0(a1)
80218496: 23 30 b4 fe  	sd	a1, -32(s0)

000000008021849a <.LBB337_2>:
;         try formatType(
8021849a: 17 76 00 00  	auipc	a2, 7
8021849e: 13 06 e6 38  	addi	a2, a2, 910
802184a2: 8d 46        	addi	a3, zero, 3
802184a4: 97 00 00 00  	auipc	ra, 0
802184a8: e7 80 80 af  	jalr	-1288(ra)
802184ac: 23 1f a4 fc  	sh	a0, -34(s0)
802184b0: 01 45        	mv	a0, zero
; ) !void {
802184b2: 23 17 a4 fe  	sh	a0, -18(s0)
802184b6: 42 74        	ld	s0, 48(sp)
802184b8: e2 70        	ld	ra, 56(sp)
802184ba: 21 61        	addi	sp, sp, 64
802184bc: 82 80        	ret

00000000802184be <std.fmt.format.260>:
; pub fn format(
802184be: 39 71        	addi	sp, sp, -64
;     args: anytype,
802184c0: 06 fc        	sd	ra, 56(sp)
802184c2: 22 f8        	sd	s0, 48(sp)
802184c4: 80 00        	addi	s0, sp, 64
802184c6: 23 34 b4 fc  	sd	a1, -56(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
802184ca: 23 38 a4 fc  	sd	a0, -48(s0)

00000000802184ce <.LBB338_1>:
802184ce: 97 75 00 00  	auipc	a1, 7
802184d2: 93 85 25 38  	addi	a1, a1, 898
802184d6: 97 80 fe ff  	auipc	ra, 1048552
802184da: e7 80 c0 5d  	jalr	1500(ra)
802184de: 83 35 84 fc  	ld	a1, -56(s0)
802184e2: 2a 86        	mv	a2, a0
802184e4: 03 35 04 fd  	ld	a0, -48(s0)
802184e8: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
802184ec: 8c 61        	ld	a1, 0(a1)
802184ee: 23 30 b4 fe  	sd	a1, -32(s0)

00000000802184f2 <.LBB338_2>:
;         try formatType(
802184f2: 17 76 00 00  	auipc	a2, 7
802184f6: 13 06 e6 3c  	addi	a2, a2, 974
802184fa: 8d 46        	addi	a3, zero, 3
802184fc: 97 00 00 00  	auipc	ra, 0
80218500: e7 80 00 aa  	jalr	-1376(ra)
80218504: 23 1f a4 fc  	sh	a0, -34(s0)
80218508: 01 45        	mv	a0, zero
; ) !void {
8021850a: 23 17 a4 fe  	sh	a0, -18(s0)
8021850e: 42 74        	ld	s0, 48(sp)
80218510: e2 70        	ld	ra, 56(sp)
80218512: 21 61        	addi	sp, sp, 64
80218514: 82 80        	ret

0000000080218516 <std.fmt.format.261>:
; pub fn format(
80218516: 01 11        	addi	sp, sp, -32
;             @field(args, fields_info[arg_to_print].name),
80218518: 06 ec        	sd	ra, 24(sp)
8021851a: 22 e8        	sd	s0, 16(sp)
8021851c: 00 10        	addi	s0, sp, 32
8021851e: 8c 41        	lw	a1, 0(a1)
80218520: 23 24 b4 fe  	sw	a1, -24(s0)

0000000080218524 <.LBB339_1>:
;         try formatType(
80218524: 17 76 00 00  	auipc	a2, 7
80218528: 13 06 46 42  	addi	a2, a2, 1060
8021852c: 8d 46        	addi	a3, zero, 3
8021852e: 97 00 00 00  	auipc	ra, 0
80218532: e7 80 60 c1  	jalr	-1002(ra)
80218536: 23 13 a4 fe  	sh	a0, -26(s0)
8021853a: 01 45        	mv	a0, zero
; ) !void {
8021853c: 23 17 a4 fe  	sh	a0, -18(s0)
80218540: 42 64        	ld	s0, 16(sp)
80218542: e2 60        	ld	ra, 24(sp)
80218544: 05 61        	addi	sp, sp, 32
80218546: 82 80        	ret

0000000080218548 <std.fmt.format.262>:
; pub fn format(
80218548: 79 71        	addi	sp, sp, -48
;             @field(args, fields_info[arg_to_print].name),
8021854a: 06 f4        	sd	ra, 40(sp)
8021854c: 22 f0        	sd	s0, 32(sp)
8021854e: 00 18        	addi	s0, sp, 48
80218550: 90 65        	ld	a2, 8(a1)
80218552: 23 30 c4 fe  	sd	a2, -32(s0)
80218556: 90 61        	ld	a2, 0(a1)
80218558: 23 3c c4 fc  	sd	a2, -40(s0)

000000008021855c <.LBB340_1>:
;         try formatType(
8021855c: 17 76 00 00  	auipc	a2, 7
80218560: 13 06 46 47  	addi	a2, a2, 1140
80218564: 8d 46        	addi	a3, zero, 3
80218566: 97 80 fe ff  	auipc	ra, 1048552
8021856a: e7 80 c0 62  	jalr	1580(ra)
8021856e: 23 1b a4 fc  	sh	a0, -42(s0)
80218572: 01 45        	mv	a0, zero
; ) !void {
80218574: 23 17 a4 fe  	sh	a0, -18(s0)
80218578: 02 74        	ld	s0, 32(sp)
8021857a: a2 70        	ld	ra, 40(sp)
8021857c: 45 61        	addi	sp, sp, 48
8021857e: 82 80        	ret

0000000080218580 <std.fmt.format.263>:
; pub fn format(
80218580: 79 71        	addi	sp, sp, -48
;             @field(args, fields_info[arg_to_print].name),
80218582: 06 f4        	sd	ra, 40(sp)
80218584: 22 f0        	sd	s0, 32(sp)
80218586: 00 18        	addi	s0, sp, 48
80218588: 90 65        	ld	a2, 8(a1)
8021858a: 23 30 c4 fe  	sd	a2, -32(s0)
8021858e: 90 61        	ld	a2, 0(a1)
80218590: 23 3c c4 fc  	sd	a2, -40(s0)

0000000080218594 <.LBB341_1>:
;         try formatType(
80218594: 17 76 00 00  	auipc	a2, 7
80218598: 13 06 46 4c  	addi	a2, a2, 1220
8021859c: 8d 46        	addi	a3, zero, 3
8021859e: 97 80 fe ff  	auipc	ra, 1048552
802185a2: e7 80 40 5f  	jalr	1524(ra)
802185a6: 23 1b a4 fc  	sh	a0, -42(s0)
802185aa: 01 45        	mv	a0, zero
; ) !void {
802185ac: 23 17 a4 fe  	sh	a0, -18(s0)
802185b0: 02 74        	ld	s0, 32(sp)
802185b2: a2 70        	ld	ra, 40(sp)
802185b4: 45 61        	addi	sp, sp, 48
802185b6: 82 80        	ret

00000000802185b8 <std.fmt.format.264>:
; pub fn format(
802185b8: 39 71        	addi	sp, sp, -64
;     args: anytype,
802185ba: 06 fc        	sd	ra, 56(sp)
802185bc: 22 f8        	sd	s0, 48(sp)
802185be: 80 00        	addi	s0, sp, 64
802185c0: 23 30 b4 fc  	sd	a1, -64(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
802185c4: 23 34 a4 fc  	sd	a0, -56(s0)

00000000802185c8 <.LBB342_1>:
802185c8: 97 75 00 00  	auipc	a1, 7
802185cc: 93 85 85 4b  	addi	a1, a1, 1208
802185d0: 97 80 fe ff  	auipc	ra, 1048552
802185d4: e7 80 20 4e  	jalr	1250(ra)
802185d8: 83 35 04 fc  	ld	a1, -64(s0)
802185dc: 2a 86        	mv	a2, a0
802185de: 03 35 84 fc  	ld	a0, -56(s0)
802185e2: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
802185e6: 90 61        	ld	a2, 0(a1)
802185e8: 23 3c c4 fc  	sd	a2, -40(s0)
802185ec: 90 65        	ld	a2, 8(a1)
802185ee: 23 30 c4 fe  	sd	a2, -32(s0)

00000000802185f2 <.LBB342_2>:
;         try formatType(
802185f2: 17 76 00 00  	auipc	a2, 7
802185f6: 13 06 e6 4f  	addi	a2, a2, 1278
802185fa: 8d 46        	addi	a3, zero, 3
802185fc: 97 80 fe ff  	auipc	ra, 1048552
80218600: e7 80 60 59  	jalr	1430(ra)
80218604: 23 1b a4 fc  	sh	a0, -42(s0)
80218608: 01 45        	mv	a0, zero
; ) !void {
8021860a: 23 17 a4 fe  	sh	a0, -18(s0)
8021860e: 42 74        	ld	s0, 48(sp)
80218610: e2 70        	ld	ra, 56(sp)
80218612: 21 61        	addi	sp, sp, 64
80218614: 82 80        	ret

0000000080218616 <std.fmt.format.265>:
; pub fn format(
80218616: 79 71        	addi	sp, sp, -48
;             @field(args, fields_info[arg_to_print].name),
80218618: 06 f4        	sd	ra, 40(sp)
8021861a: 22 f0        	sd	s0, 32(sp)
8021861c: 00 18        	addi	s0, sp, 48
8021861e: 90 65        	ld	a2, 8(a1)
80218620: 23 30 c4 fe  	sd	a2, -32(s0)
80218624: 90 61        	ld	a2, 0(a1)
80218626: 23 3c c4 fc  	sd	a2, -40(s0)

000000008021862a <.LBB343_1>:
;         try formatType(
8021862a: 17 76 00 00  	auipc	a2, 7
8021862e: 13 06 e6 54  	addi	a2, a2, 1358
80218632: 8d 46        	addi	a3, zero, 3
80218634: 97 80 fe ff  	auipc	ra, 1048552
80218638: e7 80 e0 55  	jalr	1374(ra)
8021863c: 23 1b a4 fc  	sh	a0, -42(s0)
80218640: 01 45        	mv	a0, zero
; ) !void {
80218642: 23 17 a4 fe  	sh	a0, -18(s0)
80218646: 02 74        	ld	s0, 32(sp)
80218648: a2 70        	ld	ra, 40(sp)
8021864a: 45 61        	addi	sp, sp, 48
8021864c: 82 80        	ret

000000008021864e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.266>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021864e: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80218650: 06 ec        	sd	ra, 24(sp)
80218652: 22 e8        	sd	s0, 16(sp)
80218654: 00 10        	addi	s0, sp, 32
80218656: 23 30 a4 fe  	sd	a0, -32(s0)
8021865a: 90 41        	lw	a2, 0(a1)
8021865c: 23 24 c4 fe  	sw	a2, -24(s0)
80218660: 97 20 00 00  	auipc	ra, 2
80218664: e7 80 a0 ba  	jalr	-1110(ra)
80218668: aa 85        	mv	a1, a0
8021866a: 41 65        	lui	a0, 16
8021866c: 7d 35        	addiw	a0, a0, -1
8021866e: 6d 8d        	and	a0, a0, a1
80218670: 23 17 b4 fe  	sh	a1, -18(s0)
80218674: 81 45        	mv	a1, zero
80218676: 63 0a b5 00  	beq	a0, a1, 0x8021868a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.266+0x3c>
8021867a: 09 a0        	j	0x8021867c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.266+0x2e>
8021867c: 03 35 04 fe  	ld	a0, -32(s0)
80218680: 97 80 fe ff  	auipc	ra, 1048552
80218684: e7 80 20 22  	jalr	546(ra)
80218688: 11 a0        	j	0x8021868c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.266+0x3e>
8021868a: 09 a0        	j	0x8021868c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.266+0x3e>
8021868c: 03 15 e4 fe  	lh	a0, -18(s0)
80218690: 42 64        	ld	s0, 16(sp)
80218692: e2 60        	ld	ra, 24(sp)
80218694: 05 61        	addi	sp, sp, 32
80218696: 82 80        	ret

0000000080218698 <std.fmt.format.267>:
; pub fn format(
80218698: 79 71        	addi	sp, sp, -48
;             @field(args, fields_info[arg_to_print].name),
8021869a: 06 f4        	sd	ra, 40(sp)
8021869c: 22 f0        	sd	s0, 32(sp)
8021869e: 00 18        	addi	s0, sp, 48
802186a0: 90 65        	ld	a2, 8(a1)
802186a2: 23 30 c4 fe  	sd	a2, -32(s0)
802186a6: 90 61        	ld	a2, 0(a1)
802186a8: 23 3c c4 fc  	sd	a2, -40(s0)

00000000802186ac <.LBB345_1>:
;         try formatType(
802186ac: 17 76 00 00  	auipc	a2, 7
802186b0: 13 06 46 55  	addi	a2, a2, 1364
802186b4: 8d 46        	addi	a3, zero, 3
802186b6: 97 80 fe ff  	auipc	ra, 1048552
802186ba: e7 80 c0 4d  	jalr	1244(ra)
802186be: 23 1b a4 fc  	sh	a0, -42(s0)
802186c2: 01 45        	mv	a0, zero
; ) !void {
802186c4: 23 17 a4 fe  	sh	a0, -18(s0)
802186c8: 02 74        	ld	s0, 32(sp)
802186ca: a2 70        	ld	ra, 40(sp)
802186cc: 45 61        	addi	sp, sp, 48
802186ce: 82 80        	ret

00000000802186d0 <std.fmt.format.268>:
; pub fn format(
802186d0: 79 71        	addi	sp, sp, -48
;             @field(args, fields_info[arg_to_print].name),
802186d2: 06 f4        	sd	ra, 40(sp)
802186d4: 22 f0        	sd	s0, 32(sp)
802186d6: 00 18        	addi	s0, sp, 48
802186d8: 90 65        	ld	a2, 8(a1)
802186da: 23 30 c4 fe  	sd	a2, -32(s0)
802186de: 90 61        	ld	a2, 0(a1)
802186e0: 23 3c c4 fc  	sd	a2, -40(s0)

00000000802186e4 <.LBB346_1>:
;         try formatType(
802186e4: 17 76 00 00  	auipc	a2, 7
802186e8: 13 06 46 5a  	addi	a2, a2, 1444
802186ec: 8d 46        	addi	a3, zero, 3
802186ee: 97 80 fe ff  	auipc	ra, 1048552
802186f2: e7 80 40 4a  	jalr	1188(ra)
802186f6: 23 1b a4 fc  	sh	a0, -42(s0)
802186fa: 01 45        	mv	a0, zero
; ) !void {
802186fc: 23 17 a4 fe  	sh	a0, -18(s0)
80218700: 02 74        	ld	s0, 32(sp)
80218702: a2 70        	ld	ra, 40(sp)
80218704: 45 61        	addi	sp, sp, 48
80218706: 82 80        	ret

0000000080218708 <std.fmt.format.269>:
; pub fn format(
80218708: 79 71        	addi	sp, sp, -48
;             @field(args, fields_info[arg_to_print].name),
8021870a: 06 f4        	sd	ra, 40(sp)
8021870c: 22 f0        	sd	s0, 32(sp)
8021870e: 00 18        	addi	s0, sp, 48
80218710: 90 65        	ld	a2, 8(a1)
80218712: 23 30 c4 fe  	sd	a2, -32(s0)
80218716: 90 61        	ld	a2, 0(a1)
80218718: 23 3c c4 fc  	sd	a2, -40(s0)

000000008021871c <.LBB347_1>:
;         try formatType(
8021871c: 17 76 00 00  	auipc	a2, 7
80218720: 13 06 46 5f  	addi	a2, a2, 1524
80218724: 8d 46        	addi	a3, zero, 3
80218726: 97 80 fe ff  	auipc	ra, 1048552
8021872a: e7 80 c0 46  	jalr	1132(ra)
8021872e: 23 1b a4 fc  	sh	a0, -42(s0)
80218732: 01 45        	mv	a0, zero
; ) !void {
80218734: 23 17 a4 fe  	sh	a0, -18(s0)
80218738: 02 74        	ld	s0, 32(sp)
8021873a: a2 70        	ld	ra, 40(sp)
8021873c: 45 61        	addi	sp, sp, 48
8021873e: 82 80        	ret

0000000080218740 <std.fmt.format.270>:
; pub fn format(
80218740: 01 11        	addi	sp, sp, -32
;             @field(args, fields_info[arg_to_print].name),
80218742: 06 ec        	sd	ra, 24(sp)
80218744: 22 e8        	sd	s0, 16(sp)
80218746: 00 10        	addi	s0, sp, 32
80218748: 8c 41        	lw	a1, 0(a1)
8021874a: 23 24 b4 fe  	sw	a1, -24(s0)

000000008021874e <.LBB348_1>:
;         try formatType(
8021874e: 17 76 00 00  	auipc	a2, 7
80218752: 13 06 a6 64  	addi	a2, a2, 1610
80218756: 8d 46        	addi	a3, zero, 3
80218758: 97 00 00 00  	auipc	ra, 0
8021875c: e7 80 c0 9e  	jalr	-1556(ra)
80218760: 23 13 a4 fe  	sh	a0, -26(s0)
80218764: 01 45        	mv	a0, zero
; ) !void {
80218766: 23 17 a4 fe  	sh	a0, -18(s0)
8021876a: 42 64        	ld	s0, 16(sp)
8021876c: e2 60        	ld	ra, 24(sp)
8021876e: 05 61        	addi	sp, sp, 32
80218770: 82 80        	ret

0000000080218772 <std.fmt.format.271>:
; pub fn format(
80218772: 01 11        	addi	sp, sp, -32
;             @field(args, fields_info[arg_to_print].name),
80218774: 06 ec        	sd	ra, 24(sp)
80218776: 22 e8        	sd	s0, 16(sp)
80218778: 00 10        	addi	s0, sp, 32
8021877a: 8c 41        	lw	a1, 0(a1)
8021877c: 23 24 b4 fe  	sw	a1, -24(s0)

0000000080218780 <.LBB349_1>:
;         try formatType(
80218780: 17 76 00 00  	auipc	a2, 7
80218784: 13 06 06 6a  	addi	a2, a2, 1696
80218788: 8d 46        	addi	a3, zero, 3
8021878a: 97 00 00 00  	auipc	ra, 0
8021878e: e7 80 a0 9b  	jalr	-1606(ra)
80218792: 23 13 a4 fe  	sh	a0, -26(s0)
80218796: 01 45        	mv	a0, zero
; ) !void {
80218798: 23 17 a4 fe  	sh	a0, -18(s0)
8021879c: 42 64        	ld	s0, 16(sp)
8021879e: e2 60        	ld	ra, 24(sp)
802187a0: 05 61        	addi	sp, sp, 32
802187a2: 82 80        	ret

00000000802187a4 <std.fmt.format.272>:
; pub fn format(
802187a4: 01 11        	addi	sp, sp, -32
;             @field(args, fields_info[arg_to_print].name),
802187a6: 06 ec        	sd	ra, 24(sp)
802187a8: 22 e8        	sd	s0, 16(sp)
802187aa: 00 10        	addi	s0, sp, 32
802187ac: 8c 41        	lw	a1, 0(a1)
802187ae: 23 24 b4 fe  	sw	a1, -24(s0)

00000000802187b2 <.LBB350_1>:
;         try formatType(
802187b2: 17 76 00 00  	auipc	a2, 7
802187b6: 13 06 66 6f  	addi	a2, a2, 1782
802187ba: 8d 46        	addi	a3, zero, 3
802187bc: 97 00 00 00  	auipc	ra, 0
802187c0: e7 80 80 98  	jalr	-1656(ra)
802187c4: 23 13 a4 fe  	sh	a0, -26(s0)
802187c8: 01 45        	mv	a0, zero
; ) !void {
802187ca: 23 17 a4 fe  	sh	a0, -18(s0)
802187ce: 42 64        	ld	s0, 16(sp)
802187d0: e2 60        	ld	ra, 24(sp)
802187d2: 05 61        	addi	sp, sp, 32
802187d4: 82 80        	ret

00000000802187d6 <std.fmt.format.273>:
; pub fn format(
802187d6: 01 11        	addi	sp, sp, -32
;             @field(args, fields_info[arg_to_print].name),
802187d8: 06 ec        	sd	ra, 24(sp)
802187da: 22 e8        	sd	s0, 16(sp)
802187dc: 00 10        	addi	s0, sp, 32
802187de: 8c 41        	lw	a1, 0(a1)
802187e0: 23 24 b4 fe  	sw	a1, -24(s0)

00000000802187e4 <.LBB351_1>:
;         try formatType(
802187e4: 17 76 00 00  	auipc	a2, 7
802187e8: 13 06 c6 74  	addi	a2, a2, 1868
802187ec: 8d 46        	addi	a3, zero, 3
802187ee: 97 00 00 00  	auipc	ra, 0
802187f2: e7 80 60 95  	jalr	-1706(ra)
802187f6: 23 13 a4 fe  	sh	a0, -26(s0)
802187fa: 01 45        	mv	a0, zero
; ) !void {
802187fc: 23 17 a4 fe  	sh	a0, -18(s0)
80218800: 42 64        	ld	s0, 16(sp)
80218802: e2 60        	ld	ra, 24(sp)
80218804: 05 61        	addi	sp, sp, 32
80218806: 82 80        	ret

0000000080218808 <std.fmt.format.274>:
; pub fn format(
80218808: 01 11        	addi	sp, sp, -32
;             @field(args, fields_info[arg_to_print].name),
8021880a: 06 ec        	sd	ra, 24(sp)
8021880c: 22 e8        	sd	s0, 16(sp)
8021880e: 00 10        	addi	s0, sp, 32
80218810: 8c 41        	lw	a1, 0(a1)
80218812: 23 24 b4 fe  	sw	a1, -24(s0)

0000000080218816 <.LBB352_1>:
;         try formatType(
80218816: 17 76 00 00  	auipc	a2, 7
8021881a: 13 06 26 7a  	addi	a2, a2, 1954
8021881e: 8d 46        	addi	a3, zero, 3
80218820: 97 00 00 00  	auipc	ra, 0
80218824: e7 80 40 92  	jalr	-1756(ra)
80218828: 23 13 a4 fe  	sh	a0, -26(s0)
8021882c: 01 45        	mv	a0, zero
; ) !void {
8021882e: 23 17 a4 fe  	sh	a0, -18(s0)
80218832: 42 64        	ld	s0, 16(sp)
80218834: e2 60        	ld	ra, 24(sp)
80218836: 05 61        	addi	sp, sp, 32
80218838: 82 80        	ret

000000008021883a <std.fmt.format.275>:
; pub fn format(
8021883a: 01 11        	addi	sp, sp, -32
;             @field(args, fields_info[arg_to_print].name),
8021883c: 06 ec        	sd	ra, 24(sp)
8021883e: 22 e8        	sd	s0, 16(sp)
80218840: 00 10        	addi	s0, sp, 32
80218842: 8c 41        	lw	a1, 0(a1)
80218844: 23 24 b4 fe  	sw	a1, -24(s0)

0000000080218848 <.LBB353_1>:
;         try formatType(
80218848: 17 76 00 00  	auipc	a2, 7
8021884c: 13 06 86 7f  	addi	a2, a2, 2040
80218850: 8d 46        	addi	a3, zero, 3
80218852: 97 00 00 00  	auipc	ra, 0
80218856: e7 80 20 8f  	jalr	-1806(ra)
8021885a: 23 13 a4 fe  	sh	a0, -26(s0)
8021885e: 01 45        	mv	a0, zero
; ) !void {
80218860: 23 17 a4 fe  	sh	a0, -18(s0)
80218864: 42 64        	ld	s0, 16(sp)
80218866: e2 60        	ld	ra, 24(sp)
80218868: 05 61        	addi	sp, sp, 32
8021886a: 82 80        	ret

000000008021886c <std.fmt.format.276>:
; pub fn format(
8021886c: 01 11        	addi	sp, sp, -32
;             @field(args, fields_info[arg_to_print].name),
8021886e: 06 ec        	sd	ra, 24(sp)
80218870: 22 e8        	sd	s0, 16(sp)
80218872: 00 10        	addi	s0, sp, 32
80218874: 8c 41        	lw	a1, 0(a1)
80218876: 23 24 b4 fe  	sw	a1, -24(s0)

000000008021887a <.LBB354_1>:
;         try formatType(
8021887a: 17 86 00 00  	auipc	a2, 8
8021887e: 13 06 e6 84  	addi	a2, a2, -1970
80218882: 8d 46        	addi	a3, zero, 3
80218884: 97 00 00 00  	auipc	ra, 0
80218888: e7 80 00 8c  	jalr	-1856(ra)
8021888c: 23 13 a4 fe  	sh	a0, -26(s0)
80218890: 01 45        	mv	a0, zero
; ) !void {
80218892: 23 17 a4 fe  	sh	a0, -18(s0)
80218896: 42 64        	ld	s0, 16(sp)
80218898: e2 60        	ld	ra, 24(sp)
8021889a: 05 61        	addi	sp, sp, 32
8021889c: 82 80        	ret

000000008021889e <std.fmt.format.277>:
; pub fn format(
8021889e: 5d 71        	addi	sp, sp, -80
;     args: anytype,
802188a0: 86 e4        	sd	ra, 72(sp)
802188a2: a2 e0        	sd	s0, 64(sp)
802188a4: 80 08        	addi	s0, sp, 80
802188a6: 23 38 b4 fa  	sd	a1, -80(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
802188aa: 23 30 a4 fc  	sd	a0, -64(s0)

00000000802188ae <.LBB355_1>:
802188ae: 97 85 00 00  	auipc	a1, 8
802188b2: 93 85 25 84  	addi	a1, a1, -1982
802188b6: 97 80 fe ff  	auipc	ra, 1048552
802188ba: e7 80 c0 1f  	jalr	508(ra)
802188be: 83 35 04 fb  	ld	a1, -80(s0)
802188c2: 2a 86        	mv	a2, a0
802188c4: 03 35 04 fc  	ld	a0, -64(s0)
802188c8: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
802188cc: 8c 61        	ld	a1, 0(a1)
802188ce: 23 30 b4 fe  	sd	a1, -32(s0)

00000000802188d2 <.LBB355_2>:
;         try formatType(
802188d2: 17 86 00 00  	auipc	a2, 8
802188d6: 13 06 e6 88  	addi	a2, a2, -1906
802188da: 8d 46        	addi	a3, zero, 3
802188dc: 23 3c d4 fa  	sd	a3, -72(s0)
802188e0: 97 f0 ff ff  	auipc	ra, 1048575
802188e4: e7 80 c0 6b  	jalr	1724(ra)
802188e8: aa 85        	mv	a1, a0
802188ea: 03 35 04 fc  	ld	a0, -64(s0)
802188ee: 23 1f b4 fc  	sh	a1, -34(s0)

00000000802188f2 <.LBB355_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
802188f2: 97 85 00 00  	auipc	a1, 8
802188f6: 93 85 65 89  	addi	a1, a1, -1898
802188fa: 97 80 fe ff  	auipc	ra, 1048552
802188fe: e7 80 80 1b  	jalr	440(ra)
80218902: 83 35 04 fb  	ld	a1, -80(s0)
80218906: 83 36 84 fb  	ld	a3, -72(s0)
8021890a: 2a 86        	mv	a2, a0
8021890c: 03 35 04 fc  	ld	a0, -64(s0)
80218910: 23 1e c4 fc  	sh	a2, -36(s0)
;             @field(args, fields_info[arg_to_print].name),
80218914: 8c 65        	ld	a1, 8(a1)
80218916: 23 38 b4 fc  	sd	a1, -48(s0)

000000008021891a <.LBB355_4>:
;         try formatType(
8021891a: 17 86 00 00  	auipc	a2, 8
8021891e: 13 06 e6 8d  	addi	a2, a2, -1826
80218922: 97 f0 ff ff  	auipc	ra, 1048575
80218926: e7 80 a0 67  	jalr	1658(ra)
8021892a: 23 17 a4 fc  	sh	a0, -50(s0)
8021892e: 01 45        	mv	a0, zero
; ) !void {
80218930: 23 17 a4 fe  	sh	a0, -18(s0)
80218934: 06 64        	ld	s0, 64(sp)
80218936: a6 60        	ld	ra, 72(sp)
80218938: 61 61        	addi	sp, sp, 80
8021893a: 82 80        	ret

000000008021893c <std.fmt.format.278>:
; pub fn format(
8021893c: 79 71        	addi	sp, sp, -48
;             @field(args, fields_info[arg_to_print].name),
8021893e: 06 f4        	sd	ra, 40(sp)
80218940: 22 f0        	sd	s0, 32(sp)
80218942: 00 18        	addi	s0, sp, 48
80218944: 8c 61        	ld	a1, 0(a1)
80218946: 23 30 b4 fe  	sd	a1, -32(s0)

000000008021894a <.LBB356_1>:
;         try formatType(
8021894a: 17 86 00 00  	auipc	a2, 8
8021894e: 13 06 66 93  	addi	a2, a2, -1738
80218952: 8d 46        	addi	a3, zero, 3
80218954: 97 f0 ff ff  	auipc	ra, 1048575
80218958: e7 80 a0 5d  	jalr	1498(ra)
8021895c: 23 1f a4 fc  	sh	a0, -34(s0)
80218960: 01 45        	mv	a0, zero
; ) !void {
80218962: 23 17 a4 fe  	sh	a0, -18(s0)
80218966: 02 74        	ld	s0, 32(sp)
80218968: a2 70        	ld	ra, 40(sp)
8021896a: 45 61        	addi	sp, sp, 48
8021896c: 82 80        	ret

000000008021896e <std.fmt.format.279>:
; pub fn format(
8021896e: 01 11        	addi	sp, sp, -32
;             @field(args, fields_info[arg_to_print].name),
80218970: 06 ec        	sd	ra, 24(sp)
80218972: 22 e8        	sd	s0, 16(sp)
80218974: 00 10        	addi	s0, sp, 32
80218976: 8c 41        	lw	a1, 0(a1)
80218978: 23 24 b4 fe  	sw	a1, -24(s0)

000000008021897c <.LBB357_1>:
;         try formatType(
8021897c: 17 86 00 00  	auipc	a2, 8
80218980: 13 06 c6 98  	addi	a2, a2, -1652
80218984: 8d 46        	addi	a3, zero, 3
80218986: 97 f0 ff ff  	auipc	ra, 1048575
8021898a: e7 80 e0 7b  	jalr	1982(ra)
8021898e: 23 13 a4 fe  	sh	a0, -26(s0)
80218992: 01 45        	mv	a0, zero
; ) !void {
80218994: 23 17 a4 fe  	sh	a0, -18(s0)
80218998: 42 64        	ld	s0, 16(sp)
8021899a: e2 60        	ld	ra, 24(sp)
8021899c: 05 61        	addi	sp, sp, 32
8021899e: 82 80        	ret

00000000802189a0 <std.fmt.format.280>:
; pub fn format(
802189a0: 79 71        	addi	sp, sp, -48
;             @field(args, fields_info[arg_to_print].name),
802189a2: 06 f4        	sd	ra, 40(sp)
802189a4: 22 f0        	sd	s0, 32(sp)
802189a6: 00 18        	addi	s0, sp, 48
802189a8: 90 65        	ld	a2, 8(a1)
802189aa: 23 30 c4 fe  	sd	a2, -32(s0)
802189ae: 90 61        	ld	a2, 0(a1)
802189b0: 23 3c c4 fc  	sd	a2, -40(s0)

00000000802189b4 <.LBB358_1>:
;         try formatType(
802189b4: 17 86 00 00  	auipc	a2, 8
802189b8: 13 06 c6 9d  	addi	a2, a2, -1572
802189bc: 8d 46        	addi	a3, zero, 3
802189be: 97 80 fe ff  	auipc	ra, 1048552
802189c2: e7 80 40 1d  	jalr	468(ra)
802189c6: 23 1b a4 fc  	sh	a0, -42(s0)
802189ca: 01 45        	mv	a0, zero
; ) !void {
802189cc: 23 17 a4 fe  	sh	a0, -18(s0)
802189d0: 02 74        	ld	s0, 32(sp)
802189d2: a2 70        	ld	ra, 40(sp)
802189d4: 45 61        	addi	sp, sp, 48
802189d6: 82 80        	ret

00000000802189d8 <std.fmt.format.281>:
; pub fn format(
802189d8: 79 71        	addi	sp, sp, -48
;             @field(args, fields_info[arg_to_print].name),
802189da: 06 f4        	sd	ra, 40(sp)
802189dc: 22 f0        	sd	s0, 32(sp)
802189de: 00 18        	addi	s0, sp, 48
802189e0: 90 65        	ld	a2, 8(a1)
802189e2: 23 30 c4 fe  	sd	a2, -32(s0)
802189e6: 90 61        	ld	a2, 0(a1)
802189e8: 23 3c c4 fc  	sd	a2, -40(s0)

00000000802189ec <.LBB359_1>:
;         try formatType(
802189ec: 17 86 00 00  	auipc	a2, 8
802189f0: 13 06 c6 a2  	addi	a2, a2, -1492
802189f4: 8d 46        	addi	a3, zero, 3
802189f6: 97 80 fe ff  	auipc	ra, 1048552
802189fa: e7 80 c0 19  	jalr	412(ra)
802189fe: 23 1b a4 fc  	sh	a0, -42(s0)
80218a02: 01 45        	mv	a0, zero
; ) !void {
80218a04: 23 17 a4 fe  	sh	a0, -18(s0)
80218a08: 02 74        	ld	s0, 32(sp)
80218a0a: a2 70        	ld	ra, 40(sp)
80218a0c: 45 61        	addi	sp, sp, 48
80218a0e: 82 80        	ret

0000000080218a10 <std.fmt.format.282>:
; pub fn format(
80218a10: 01 11        	addi	sp, sp, -32
;             @field(args, fields_info[arg_to_print].name),
80218a12: 06 ec        	sd	ra, 24(sp)
80218a14: 22 e8        	sd	s0, 16(sp)
80218a16: 00 10        	addi	s0, sp, 32
80218a18: 8c 41        	lw	a1, 0(a1)
80218a1a: 23 24 b4 fe  	sw	a1, -24(s0)

0000000080218a1e <.LBB360_1>:
;         try formatType(
80218a1e: 17 86 00 00  	auipc	a2, 8
80218a22: 13 06 26 a8  	addi	a2, a2, -1406
80218a26: 8d 46        	addi	a3, zero, 3
80218a28: 97 f0 ff ff  	auipc	ra, 1048575
80218a2c: e7 80 c0 71  	jalr	1820(ra)
80218a30: 23 13 a4 fe  	sh	a0, -26(s0)
80218a34: 01 45        	mv	a0, zero
; ) !void {
80218a36: 23 17 a4 fe  	sh	a0, -18(s0)
80218a3a: 42 64        	ld	s0, 16(sp)
80218a3c: e2 60        	ld	ra, 24(sp)
80218a3e: 05 61        	addi	sp, sp, 32
80218a40: 82 80        	ret

0000000080218a42 <std.fmt.format.283>:
; pub fn format(
80218a42: 01 11        	addi	sp, sp, -32
;             @field(args, fields_info[arg_to_print].name),
80218a44: 06 ec        	sd	ra, 24(sp)
80218a46: 22 e8        	sd	s0, 16(sp)
80218a48: 00 10        	addi	s0, sp, 32
80218a4a: 8c 41        	lw	a1, 0(a1)
80218a4c: 23 24 b4 fe  	sw	a1, -24(s0)

0000000080218a50 <.LBB361_1>:
;         try formatType(
80218a50: 17 86 00 00  	auipc	a2, 8
80218a54: 13 06 86 ad  	addi	a2, a2, -1320
80218a58: 8d 46        	addi	a3, zero, 3
80218a5a: 97 f0 ff ff  	auipc	ra, 1048575
80218a5e: e7 80 a0 6e  	jalr	1770(ra)
80218a62: 23 13 a4 fe  	sh	a0, -26(s0)
80218a66: 01 45        	mv	a0, zero
; ) !void {
80218a68: 23 17 a4 fe  	sh	a0, -18(s0)
80218a6c: 42 64        	ld	s0, 16(sp)
80218a6e: e2 60        	ld	ra, 24(sp)
80218a70: 05 61        	addi	sp, sp, 32
80218a72: 82 80        	ret

0000000080218a74 <std.fmt.format.284>:
; pub fn format(
80218a74: 01 11        	addi	sp, sp, -32
;             @field(args, fields_info[arg_to_print].name),
80218a76: 06 ec        	sd	ra, 24(sp)
80218a78: 22 e8        	sd	s0, 16(sp)
80218a7a: 00 10        	addi	s0, sp, 32
80218a7c: 8c 41        	lw	a1, 0(a1)
80218a7e: 23 24 b4 fe  	sw	a1, -24(s0)

0000000080218a82 <.LBB362_1>:
;         try formatType(
80218a82: 17 86 00 00  	auipc	a2, 8
80218a86: 13 06 e6 b2  	addi	a2, a2, -1234
80218a8a: 8d 46        	addi	a3, zero, 3
80218a8c: 97 f0 ff ff  	auipc	ra, 1048575
80218a90: e7 80 80 6b  	jalr	1720(ra)
80218a94: 23 13 a4 fe  	sh	a0, -26(s0)
80218a98: 01 45        	mv	a0, zero
; ) !void {
80218a9a: 23 17 a4 fe  	sh	a0, -18(s0)
80218a9e: 42 64        	ld	s0, 16(sp)
80218aa0: e2 60        	ld	ra, 24(sp)
80218aa2: 05 61        	addi	sp, sp, 32
80218aa4: 82 80        	ret

0000000080218aa6 <std.fmt.format.285>:
; pub fn format(
80218aa6: 5d 71        	addi	sp, sp, -80
;     args: anytype,
80218aa8: 86 e4        	sd	ra, 72(sp)
80218aaa: a2 e0        	sd	s0, 64(sp)
80218aac: 80 08        	addi	s0, sp, 80
80218aae: 23 38 b4 fa  	sd	a1, -80(s0)
;             @field(args, fields_info[arg_to_print].name),
80218ab2: 23 30 a4 fc  	sd	a0, -64(s0)
80218ab6: 8c 41        	lw	a1, 0(a1)
80218ab8: 23 24 b4 fe  	sw	a1, -24(s0)

0000000080218abc <.LBB363_1>:
;         try formatType(
80218abc: 17 86 00 00  	auipc	a2, 8
80218ac0: 13 06 c6 b7  	addi	a2, a2, -1156
80218ac4: 8d 46        	addi	a3, zero, 3
80218ac6: 23 3c d4 fa  	sd	a3, -72(s0)
80218aca: 97 f0 ff ff  	auipc	ra, 1048575
80218ace: e7 80 a0 67  	jalr	1658(ra)
80218ad2: aa 85        	mv	a1, a0
80218ad4: 03 35 04 fc  	ld	a0, -64(s0)
80218ad8: 23 13 b4 fe  	sh	a1, -26(s0)

0000000080218adc <.LBB363_2>:
;             try writer.writeAll(fmt[start_index..end_index]);
80218adc: 97 85 00 00  	auipc	a1, 8
80218ae0: 93 85 45 b8  	addi	a1, a1, -1148
80218ae4: 97 80 fe ff  	auipc	ra, 1048552
80218ae8: e7 80 e0 fc  	jalr	-50(ra)
80218aec: 83 35 04 fb  	ld	a1, -80(s0)
80218af0: 83 36 84 fb  	ld	a3, -72(s0)
80218af4: 2a 86        	mv	a2, a0
80218af6: 03 35 04 fc  	ld	a0, -64(s0)
80218afa: 23 12 c4 fe  	sh	a2, -28(s0)
;             @field(args, fields_info[arg_to_print].name),
80218afe: cc 41        	lw	a1, 4(a1)
80218b00: 23 20 b4 fe  	sw	a1, -32(s0)

0000000080218b04 <.LBB363_3>:
;         try formatType(
80218b04: 17 86 00 00  	auipc	a2, 8
80218b08: 13 06 c6 bc  	addi	a2, a2, -1076
80218b0c: 97 f0 ff ff  	auipc	ra, 1048575
80218b10: e7 80 80 63  	jalr	1592(ra)
80218b14: aa 85        	mv	a1, a0
80218b16: 03 35 04 fc  	ld	a0, -64(s0)
80218b1a: 23 1f b4 fc  	sh	a1, -34(s0)

0000000080218b1e <.LBB363_4>:
;             try writer.writeAll(fmt[start_index..end_index]);
80218b1e: 97 85 00 00  	auipc	a1, 8
80218b22: 93 85 a5 bd  	addi	a1, a1, -1062
80218b26: 97 80 fe ff  	auipc	ra, 1048552
80218b2a: e7 80 c0 f8  	jalr	-116(ra)
80218b2e: 83 35 04 fb  	ld	a1, -80(s0)
80218b32: 83 36 84 fb  	ld	a3, -72(s0)
80218b36: 2a 86        	mv	a2, a0
80218b38: 03 35 04 fc  	ld	a0, -64(s0)
80218b3c: 23 1e c4 fc  	sh	a2, -36(s0)
;             @field(args, fields_info[arg_to_print].name),
80218b40: 8c 45        	lw	a1, 8(a1)
80218b42: 23 2c b4 fc  	sw	a1, -40(s0)

0000000080218b46 <.LBB363_5>:
;         try formatType(
80218b46: 17 86 00 00  	auipc	a2, 8
80218b4a: 13 06 26 c2  	addi	a2, a2, -990
80218b4e: 97 f0 ff ff  	auipc	ra, 1048575
80218b52: e7 80 60 5f  	jalr	1526(ra)
80218b56: aa 85        	mv	a1, a0
80218b58: 03 35 04 fc  	ld	a0, -64(s0)
80218b5c: 23 1b b4 fc  	sh	a1, -42(s0)

0000000080218b60 <.LBB363_6>:
;             try writer.writeAll(fmt[start_index..end_index]);
80218b60: 97 85 00 00  	auipc	a1, 8
80218b64: 93 85 05 c3  	addi	a1, a1, -976
80218b68: 97 80 fe ff  	auipc	ra, 1048552
80218b6c: e7 80 a0 f4  	jalr	-182(ra)
80218b70: 83 35 04 fb  	ld	a1, -80(s0)
80218b74: 83 36 84 fb  	ld	a3, -72(s0)
80218b78: 2a 86        	mv	a2, a0
80218b7a: 03 35 04 fc  	ld	a0, -64(s0)
80218b7e: 23 1a c4 fc  	sh	a2, -44(s0)
;             @field(args, fields_info[arg_to_print].name),
80218b82: cc 45        	lw	a1, 12(a1)
80218b84: 23 28 b4 fc  	sw	a1, -48(s0)

0000000080218b88 <.LBB363_7>:
;         try formatType(
80218b88: 17 86 00 00  	auipc	a2, 8
80218b8c: 13 06 86 c7  	addi	a2, a2, -904
80218b90: 97 f0 ff ff  	auipc	ra, 1048575
80218b94: e7 80 40 5b  	jalr	1460(ra)
80218b98: aa 85        	mv	a1, a0
80218b9a: 03 35 04 fc  	ld	a0, -64(s0)
80218b9e: 23 17 b4 fc  	sh	a1, -50(s0)

0000000080218ba2 <.LBB363_8>:
;             try writer.writeAll(fmt[start_index..end_index]);
80218ba2: 97 85 00 00  	auipc	a1, 8
80218ba6: 93 85 65 c8  	addi	a1, a1, -890
80218baa: 97 80 fe ff  	auipc	ra, 1048552
80218bae: e7 80 80 f0  	jalr	-248(ra)
80218bb2: 23 16 a4 fc  	sh	a0, -52(s0)
80218bb6: 01 45        	mv	a0, zero
; ) !void {
80218bb8: 23 17 a4 fe  	sh	a0, -18(s0)
80218bbc: 06 64        	ld	s0, 64(sp)
80218bbe: a6 60        	ld	ra, 72(sp)
80218bc0: 61 61        	addi	sp, sp, 80
80218bc2: 82 80        	ret

0000000080218bc4 <std.fmt.format.286>:
; pub fn format(
80218bc4: 79 71        	addi	sp, sp, -48
;             @field(args, fields_info[arg_to_print].name),
80218bc6: 06 f4        	sd	ra, 40(sp)
80218bc8: 22 f0        	sd	s0, 32(sp)
80218bca: 00 18        	addi	s0, sp, 48
80218bcc: 90 65        	ld	a2, 8(a1)
80218bce: 23 30 c4 fe  	sd	a2, -32(s0)
80218bd2: 90 61        	ld	a2, 0(a1)
80218bd4: 23 3c c4 fc  	sd	a2, -40(s0)

0000000080218bd8 <.LBB364_1>:
;         try formatType(
80218bd8: 17 86 00 00  	auipc	a2, 8
80218bdc: 13 06 06 cc  	addi	a2, a2, -832
80218be0: 8d 46        	addi	a3, zero, 3
80218be2: 97 80 fe ff  	auipc	ra, 1048552
80218be6: e7 80 00 fb  	jalr	-80(ra)
80218bea: 23 1b a4 fc  	sh	a0, -42(s0)
80218bee: 01 45        	mv	a0, zero
; ) !void {
80218bf0: 23 17 a4 fe  	sh	a0, -18(s0)
80218bf4: 02 74        	ld	s0, 32(sp)
80218bf6: a2 70        	ld	ra, 40(sp)
80218bf8: 45 61        	addi	sp, sp, 48
80218bfa: 82 80        	ret

0000000080218bfc <std.fmt.format.287>:
; pub fn format(
80218bfc: 5d 71        	addi	sp, sp, -80
;     args: anytype,
80218bfe: 86 e4        	sd	ra, 72(sp)
80218c00: a2 e0        	sd	s0, 64(sp)
80218c02: 80 08        	addi	s0, sp, 80
80218c04: 23 38 b4 fa  	sd	a1, -80(s0)
;             @field(args, fields_info[arg_to_print].name),
80218c08: 23 30 a4 fc  	sd	a0, -64(s0)
80218c0c: 8c 41        	lw	a1, 0(a1)
80218c0e: 23 24 b4 fe  	sw	a1, -24(s0)

0000000080218c12 <.LBB365_1>:
;         try formatType(
80218c12: 17 86 00 00  	auipc	a2, 8
80218c16: 13 06 e6 d0  	addi	a2, a2, -754
80218c1a: 8d 46        	addi	a3, zero, 3
80218c1c: 23 3c d4 fa  	sd	a3, -72(s0)
80218c20: 97 f0 ff ff  	auipc	ra, 1048575
80218c24: e7 80 40 52  	jalr	1316(ra)
80218c28: aa 85        	mv	a1, a0
80218c2a: 03 35 04 fc  	ld	a0, -64(s0)
80218c2e: 23 13 b4 fe  	sh	a1, -26(s0)

0000000080218c32 <.LBB365_2>:
;             try writer.writeAll(fmt[start_index..end_index]);
80218c32: 97 85 00 00  	auipc	a1, 8
80218c36: 93 85 65 d1  	addi	a1, a1, -746
80218c3a: 97 80 fe ff  	auipc	ra, 1048552
80218c3e: e7 80 80 e7  	jalr	-392(ra)
80218c42: 83 35 04 fb  	ld	a1, -80(s0)
80218c46: 83 36 84 fb  	ld	a3, -72(s0)
80218c4a: 2a 86        	mv	a2, a0
80218c4c: 03 35 04 fc  	ld	a0, -64(s0)
80218c50: 23 12 c4 fe  	sh	a2, -28(s0)
;             @field(args, fields_info[arg_to_print].name),
80218c54: cc 41        	lw	a1, 4(a1)
80218c56: 23 20 b4 fe  	sw	a1, -32(s0)

0000000080218c5a <.LBB365_3>:
;         try formatType(
80218c5a: 17 86 00 00  	auipc	a2, 8
80218c5e: 13 06 e6 d5  	addi	a2, a2, -674
80218c62: 97 f0 ff ff  	auipc	ra, 1048575
80218c66: e7 80 20 4e  	jalr	1250(ra)
80218c6a: aa 85        	mv	a1, a0
80218c6c: 03 35 04 fc  	ld	a0, -64(s0)
80218c70: 23 1f b4 fc  	sh	a1, -34(s0)

0000000080218c74 <.LBB365_4>:
;             try writer.writeAll(fmt[start_index..end_index]);
80218c74: 97 85 00 00  	auipc	a1, 8
80218c78: 93 85 c5 d6  	addi	a1, a1, -660
80218c7c: 97 80 fe ff  	auipc	ra, 1048552
80218c80: e7 80 60 e3  	jalr	-458(ra)
80218c84: 83 35 04 fb  	ld	a1, -80(s0)
80218c88: 83 36 84 fb  	ld	a3, -72(s0)
80218c8c: 2a 86        	mv	a2, a0
80218c8e: 03 35 04 fc  	ld	a0, -64(s0)
80218c92: 23 1e c4 fc  	sh	a2, -36(s0)
;             @field(args, fields_info[arg_to_print].name),
80218c96: 8c 45        	lw	a1, 8(a1)
80218c98: 23 2c b4 fc  	sw	a1, -40(s0)

0000000080218c9c <.LBB365_5>:
;         try formatType(
80218c9c: 17 86 00 00  	auipc	a2, 8
80218ca0: 13 06 46 db  	addi	a2, a2, -588
80218ca4: 97 f0 ff ff  	auipc	ra, 1048575
80218ca8: e7 80 00 4a  	jalr	1184(ra)
80218cac: aa 85        	mv	a1, a0
80218cae: 03 35 04 fc  	ld	a0, -64(s0)
80218cb2: 23 1b b4 fc  	sh	a1, -42(s0)

0000000080218cb6 <.LBB365_6>:
;             try writer.writeAll(fmt[start_index..end_index]);
80218cb6: 97 85 00 00  	auipc	a1, 8
80218cba: 93 85 25 dc  	addi	a1, a1, -574
80218cbe: 97 80 fe ff  	auipc	ra, 1048552
80218cc2: e7 80 40 df  	jalr	-524(ra)
80218cc6: 83 35 04 fb  	ld	a1, -80(s0)
80218cca: 83 36 84 fb  	ld	a3, -72(s0)
80218cce: 2a 86        	mv	a2, a0
80218cd0: 03 35 04 fc  	ld	a0, -64(s0)
80218cd4: 23 1a c4 fc  	sh	a2, -44(s0)
;             @field(args, fields_info[arg_to_print].name),
80218cd8: cc 45        	lw	a1, 12(a1)
80218cda: 23 28 b4 fc  	sw	a1, -48(s0)

0000000080218cde <.LBB365_7>:
;         try formatType(
80218cde: 17 86 00 00  	auipc	a2, 8
80218ce2: 13 06 a6 e0  	addi	a2, a2, -502
80218ce6: 97 f0 ff ff  	auipc	ra, 1048575
80218cea: e7 80 e0 45  	jalr	1118(ra)
80218cee: aa 85        	mv	a1, a0
80218cf0: 03 35 04 fc  	ld	a0, -64(s0)
80218cf4: 23 17 b4 fc  	sh	a1, -50(s0)

0000000080218cf8 <.LBB365_8>:
;             try writer.writeAll(fmt[start_index..end_index]);
80218cf8: 97 85 00 00  	auipc	a1, 8
80218cfc: 93 85 85 e1  	addi	a1, a1, -488
80218d00: 97 80 fe ff  	auipc	ra, 1048552
80218d04: e7 80 20 db  	jalr	-590(ra)
80218d08: 23 16 a4 fc  	sh	a0, -52(s0)
80218d0c: 01 45        	mv	a0, zero
; ) !void {
80218d0e: 23 17 a4 fe  	sh	a0, -18(s0)
80218d12: 06 64        	ld	s0, 64(sp)
80218d14: a6 60        	ld	ra, 72(sp)
80218d16: 61 61        	addi	sp, sp, 80
80218d18: 82 80        	ret

0000000080218d1a <std.fmt.format.288>:
; pub fn format(
80218d1a: 01 11        	addi	sp, sp, -32
;             try writer.writeAll(fmt[start_index..end_index]);
80218d1c: 06 ec        	sd	ra, 24(sp)
80218d1e: 22 e8        	sd	s0, 16(sp)
80218d20: 00 10        	addi	s0, sp, 32

0000000080218d22 <.LBB366_1>:
80218d22: 97 85 00 00  	auipc	a1, 8
80218d26: 93 85 e5 df  	addi	a1, a1, -514
80218d2a: 97 80 fe ff  	auipc	ra, 1048552
80218d2e: e7 80 80 d8  	jalr	-632(ra)
80218d32: 23 16 a4 fe  	sh	a0, -20(s0)
80218d36: 01 45        	mv	a0, zero
; ) !void {
80218d38: 23 17 a4 fe  	sh	a0, -18(s0)
80218d3c: 42 64        	ld	s0, 16(sp)
80218d3e: e2 60        	ld	ra, 24(sp)
80218d40: 05 61        	addi	sp, sp, 32
80218d42: 82 80        	ret

0000000080218d44 <std.log.log.289>:
; fn log(
80218d44: 01 11        	addi	sp, sp, -32
;     args: anytype,
80218d46: 06 ec        	sd	ra, 24(sp)
80218d48: 22 e8        	sd	s0, 16(sp)
80218d4a: 00 10        	addi	s0, sp, 32
80218d4c: 23 30 a4 fe  	sd	a0, -32(s0)
80218d50: 0d 45        	addi	a0, zero, 3
;         break :blk level;
80218d52: a3 07 a4 fe  	sb	a0, -17(s0)
80218d56: 09 a0        	j	0x80218d58 <std.log.log.289+0x14>
;             root.log(message_level, scope, format, args);
80218d58: 03 35 04 fe  	ld	a0, -32(s0)
80218d5c: 0c 41        	lw	a1, 0(a0)
80218d5e: 23 24 b4 fe  	sw	a1, -24(s0)
80218d62: 97 10 00 00  	auipc	ra, 1
80218d66: e7 80 80 4f  	jalr	1272(ra)
; ) void {
80218d6a: 42 64        	ld	s0, 16(sp)
80218d6c: e2 60        	ld	ra, 24(sp)
80218d6e: 05 61        	addi	sp, sp, 32
80218d70: 82 80        	ret

0000000080218d72 <std.log.scoped(PANIC).err.290>:
;         pub fn err(
80218d72: 01 11        	addi	sp, sp, -32
;             log(.err, scope, format, args);
80218d74: 06 ec        	sd	ra, 24(sp)
80218d76: 22 e8        	sd	s0, 16(sp)
80218d78: 00 10        	addi	s0, sp, 32
80218d7a: 0c 41        	lw	a1, 0(a0)
80218d7c: 23 24 b4 fe  	sw	a1, -24(s0)
80218d80: 97 10 00 00  	auipc	ra, 1
80218d84: e7 80 00 54  	jalr	1344(ra)
;         ) void {
80218d88: 42 64        	ld	s0, 16(sp)
80218d8a: e2 60        	ld	ra, 24(sp)
80218d8c: 05 61        	addi	sp, sp, 32
80218d8e: 82 80        	ret

0000000080218d90 <std.log.log.291>:
; fn log(
80218d90: 01 11        	addi	sp, sp, -32
;     args: anytype,
80218d92: 06 ec        	sd	ra, 24(sp)
80218d94: 22 e8        	sd	s0, 16(sp)
80218d96: 00 10        	addi	s0, sp, 32
80218d98: 23 30 a4 fe  	sd	a0, -32(s0)
80218d9c: 0d 45        	addi	a0, zero, 3
;         break :blk level;
80218d9e: a3 07 a4 fe  	sb	a0, -17(s0)
80218da2: 09 a0        	j	0x80218da4 <std.log.log.291+0x14>
;             root.log(message_level, scope, format, args);
80218da4: 03 35 04 fe  	ld	a0, -32(s0)
80218da8: 0c 41        	lw	a1, 0(a0)
80218daa: 23 24 b4 fe  	sw	a1, -24(s0)
80218dae: 97 10 00 00  	auipc	ra, 1
80218db2: e7 80 00 54  	jalr	1344(ra)
; ) void {
80218db6: 42 64        	ld	s0, 16(sp)
80218db8: e2 60        	ld	ra, 24(sp)
80218dba: 05 61        	addi	sp, sp, 32
80218dbc: 82 80        	ret

0000000080218dbe <log.0.292>:
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80218dbe: 4d 71        	addi	sp, sp, -336
80218dc0: 86 e6        	sd	ra, 328(sp)
80218dc2: a2 e2        	sd	s0, 320(sp)
80218dc4: 80 0a        	addi	s0, sp, 336
80218dc6: aa 85        	mv	a1, a0
80218dc8: 01 45        	mv	a0, zero
80218dca: 23 38 a4 ea  	sd	a0, -336(s0)
80218dce: 23 3c a4 ec  	sd	a0, -296(s0)
80218dd2: 13 05 04 ef  	addi	a0, s0, -272
80218dd6: 23 30 a4 ee  	sd	a0, -288(s0)
80218dda: 13 05 00 02  	addi	a0, zero, 32
80218dde: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80218de2: 88 61        	ld	a0, 0(a1)
80218de4: 23 34 a4 ec  	sd	a0, -312(s0)
80218de8: 88 65        	ld	a0, 8(a1)
80218dea: 23 38 a4 ec  	sd	a0, -304(s0)
80218dee: 13 05 84 ed  	addi	a0, s0, -296
80218df2: 97 10 00 00  	auipc	ra, 1
80218df6: e7 80 20 56  	jalr	1378(ra)
80218dfa: 83 35 04 eb  	ld	a1, -336(s0)
80218dfe: 23 13 a4 ec  	sh	a0, -314(s0)
80218e02: 41 66        	lui	a2, 16
80218e04: 7d 36        	addiw	a2, a2, -1
80218e06: 71 8d        	and	a0, a0, a2
80218e08: 23 3c a4 ea  	sd	a0, -328(s0)
80218e0c: 63 0b b5 00  	beq	a0, a1, 0x80218e22 <log.0.292+0x64>
80218e10: 09 a0        	j	0x80218e12 <log.0.292+0x54>
80218e12: 83 35 84 eb  	ld	a1, -328(s0)
80218e16: 13 05 84 ed  	addi	a0, s0, -296
80218e1a: 97 70 fe ff  	auipc	ra, 1048551
80218e1e: e7 80 40 7d  	jalr	2004(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80218e22: 16 64        	ld	s0, 320(sp)
80218e24: b6 60        	ld	ra, 328(sp)
80218e26: 71 61        	addi	sp, sp, 336
80218e28: 82 80        	ret

0000000080218e2a <log.0.293>:
80218e2a: 29 71        	addi	sp, sp, -320
80218e2c: 06 fe        	sd	ra, 312(sp)
80218e2e: 22 fa        	sd	s0, 304(sp)
80218e30: 80 02        	addi	s0, sp, 320
80218e32: 01 45        	mv	a0, zero
80218e34: 23 30 a4 ec  	sd	a0, -320(s0)
80218e38: 23 3c a4 ec  	sd	a0, -296(s0)
80218e3c: 13 05 04 ef  	addi	a0, s0, -272
80218e40: 23 30 a4 ee  	sd	a0, -288(s0)
80218e44: 13 05 00 02  	addi	a0, zero, 32
80218e48: 23 34 a4 ee  	sd	a0, -280(s0)
80218e4c: 13 05 84 ed  	addi	a0, s0, -296
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80218e50: 97 10 00 00  	auipc	ra, 1
80218e54: e7 80 40 55  	jalr	1364(ra)
80218e58: 83 35 04 ec  	ld	a1, -320(s0)
80218e5c: 23 1b a4 ec  	sh	a0, -298(s0)
80218e60: 41 66        	lui	a2, 16
80218e62: 7d 36        	addiw	a2, a2, -1
80218e64: 71 8d        	and	a0, a0, a2
80218e66: 23 34 a4 ec  	sd	a0, -312(s0)
80218e6a: 63 0b b5 00  	beq	a0, a1, 0x80218e80 <log.0.293+0x56>
80218e6e: 09 a0        	j	0x80218e70 <log.0.293+0x46>
80218e70: 83 35 84 ec  	ld	a1, -312(s0)
80218e74: 13 05 84 ed  	addi	a0, s0, -296
80218e78: 97 70 fe ff  	auipc	ra, 1048551
80218e7c: e7 80 60 77  	jalr	1910(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80218e80: 52 74        	ld	s0, 304(sp)
80218e82: f2 70        	ld	ra, 312(sp)
80218e84: 31 61        	addi	sp, sp, 320
80218e86: 82 80        	ret

0000000080218e88 <log.0.294>:
80218e88: 0d 71        	addi	sp, sp, -352
80218e8a: 86 ee        	sd	ra, 344(sp)
80218e8c: a2 ea        	sd	s0, 336(sp)
80218e8e: 80 12        	addi	s0, sp, 352
80218e90: aa 85        	mv	a1, a0
80218e92: 01 45        	mv	a0, zero
80218e94: 23 34 a4 ea  	sd	a0, -344(s0)
80218e98: 23 3c a4 ec  	sd	a0, -296(s0)
80218e9c: 13 05 04 ef  	addi	a0, s0, -272
80218ea0: 23 30 a4 ee  	sd	a0, -288(s0)
80218ea4: 13 05 00 02  	addi	a0, zero, 32
80218ea8: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80218eac: 88 61        	ld	a0, 0(a1)
80218eae: 23 30 a4 ec  	sd	a0, -320(s0)
80218eb2: 88 65        	ld	a0, 8(a1)
80218eb4: 23 34 a4 ec  	sd	a0, -312(s0)
80218eb8: 88 69        	ld	a0, 16(a1)
80218eba: 23 38 a4 ec  	sd	a0, -304(s0)
80218ebe: 13 05 84 ed  	addi	a0, s0, -296
80218ec2: 97 10 00 00  	auipc	ra, 1
80218ec6: e7 80 60 52  	jalr	1318(ra)
80218eca: 83 35 84 ea  	ld	a1, -344(s0)
80218ece: 23 1f a4 ea  	sh	a0, -322(s0)
80218ed2: 41 66        	lui	a2, 16
80218ed4: 7d 36        	addiw	a2, a2, -1
80218ed6: 71 8d        	and	a0, a0, a2
80218ed8: 23 38 a4 ea  	sd	a0, -336(s0)
80218edc: 63 0b b5 00  	beq	a0, a1, 0x80218ef2 <log.0.294+0x6a>
80218ee0: 09 a0        	j	0x80218ee2 <log.0.294+0x5a>
80218ee2: 83 35 04 eb  	ld	a1, -336(s0)
80218ee6: 13 05 84 ed  	addi	a0, s0, -296
80218eea: 97 70 fe ff  	auipc	ra, 1048551
80218eee: e7 80 40 70  	jalr	1796(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80218ef2: 56 64        	ld	s0, 336(sp)
80218ef4: f6 60        	ld	ra, 344(sp)
80218ef6: 35 61        	addi	sp, sp, 352
80218ef8: 82 80        	ret

0000000080218efa <log.0.295>:
80218efa: 29 71        	addi	sp, sp, -320
80218efc: 06 fe        	sd	ra, 312(sp)
80218efe: 22 fa        	sd	s0, 304(sp)
80218f00: 80 02        	addi	s0, sp, 320
80218f02: 01 45        	mv	a0, zero
80218f04: 23 30 a4 ec  	sd	a0, -320(s0)
80218f08: 23 3c a4 ec  	sd	a0, -296(s0)
80218f0c: 13 05 04 ef  	addi	a0, s0, -272
80218f10: 23 30 a4 ee  	sd	a0, -288(s0)
80218f14: 13 05 00 02  	addi	a0, zero, 32
80218f18: 23 34 a4 ee  	sd	a0, -280(s0)
80218f1c: 13 05 84 ed  	addi	a0, s0, -296
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80218f20: 97 10 00 00  	auipc	ra, 1
80218f24: e7 80 e0 51  	jalr	1310(ra)
80218f28: 83 35 04 ec  	ld	a1, -320(s0)
80218f2c: 23 1b a4 ec  	sh	a0, -298(s0)
80218f30: 41 66        	lui	a2, 16
80218f32: 7d 36        	addiw	a2, a2, -1
80218f34: 71 8d        	and	a0, a0, a2
80218f36: 23 34 a4 ec  	sd	a0, -312(s0)
80218f3a: 63 0b b5 00  	beq	a0, a1, 0x80218f50 <log.0.295+0x56>
80218f3e: 09 a0        	j	0x80218f40 <log.0.295+0x46>
80218f40: 83 35 84 ec  	ld	a1, -312(s0)
80218f44: 13 05 84 ed  	addi	a0, s0, -296
80218f48: 97 70 fe ff  	auipc	ra, 1048551
80218f4c: e7 80 60 6a  	jalr	1702(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80218f50: 52 74        	ld	s0, 304(sp)
80218f52: f2 70        	ld	ra, 312(sp)
80218f54: 31 61        	addi	sp, sp, 320
80218f56: 82 80        	ret

0000000080218f58 <log.0.296>:
80218f58: 0d 71        	addi	sp, sp, -352
80218f5a: 86 ee        	sd	ra, 344(sp)
80218f5c: a2 ea        	sd	s0, 336(sp)
80218f5e: 80 12        	addi	s0, sp, 352
80218f60: aa 85        	mv	a1, a0
80218f62: 01 45        	mv	a0, zero
80218f64: 23 34 a4 ea  	sd	a0, -344(s0)
80218f68: 23 3c a4 ec  	sd	a0, -296(s0)
80218f6c: 13 05 04 ef  	addi	a0, s0, -272
80218f70: 23 30 a4 ee  	sd	a0, -288(s0)
80218f74: 13 05 00 02  	addi	a0, zero, 32
80218f78: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80218f7c: 88 61        	ld	a0, 0(a1)
80218f7e: 23 30 a4 ec  	sd	a0, -320(s0)
80218f82: 88 65        	ld	a0, 8(a1)
80218f84: 23 34 a4 ec  	sd	a0, -312(s0)
80218f88: 88 69        	ld	a0, 16(a1)
80218f8a: 23 38 a4 ec  	sd	a0, -304(s0)
80218f8e: 13 05 84 ed  	addi	a0, s0, -296
80218f92: 97 10 00 00  	auipc	ra, 1
80218f96: e7 80 00 4f  	jalr	1264(ra)
80218f9a: 83 35 84 ea  	ld	a1, -344(s0)
80218f9e: 23 1f a4 ea  	sh	a0, -322(s0)
80218fa2: 41 66        	lui	a2, 16
80218fa4: 7d 36        	addiw	a2, a2, -1
80218fa6: 71 8d        	and	a0, a0, a2
80218fa8: 23 38 a4 ea  	sd	a0, -336(s0)
80218fac: 63 0b b5 00  	beq	a0, a1, 0x80218fc2 <log.0.296+0x6a>
80218fb0: 09 a0        	j	0x80218fb2 <log.0.296+0x5a>
80218fb2: 83 35 04 eb  	ld	a1, -336(s0)
80218fb6: 13 05 84 ed  	addi	a0, s0, -296
80218fba: 97 70 fe ff  	auipc	ra, 1048551
80218fbe: e7 80 40 63  	jalr	1588(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80218fc2: 56 64        	ld	s0, 336(sp)
80218fc4: f6 60        	ld	ra, 344(sp)
80218fc6: 35 61        	addi	sp, sp, 352
80218fc8: 82 80        	ret

0000000080218fca <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.297>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80218fca: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80218fcc: 06 ec        	sd	ra, 24(sp)
80218fce: 22 e8        	sd	s0, 16(sp)
80218fd0: 00 10        	addi	s0, sp, 32
80218fd2: 23 30 a4 fe  	sd	a0, -32(s0)
80218fd6: 97 10 00 00  	auipc	ra, 1
80218fda: e7 80 20 50  	jalr	1282(ra)
80218fde: aa 85        	mv	a1, a0
80218fe0: 41 65        	lui	a0, 16
80218fe2: 7d 35        	addiw	a0, a0, -1
80218fe4: 6d 8d        	and	a0, a0, a1
80218fe6: 23 17 b4 fe  	sh	a1, -18(s0)
80218fea: 81 45        	mv	a1, zero
80218fec: 63 0a b5 00  	beq	a0, a1, 0x80219000 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.297+0x36>
80218ff0: 09 a0        	j	0x80218ff2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.297+0x28>
80218ff2: 03 35 04 fe  	ld	a0, -32(s0)
80218ff6: 97 80 fe ff  	auipc	ra, 1048552
80218ffa: e7 80 c0 8a  	jalr	-1876(ra)
80218ffe: 11 a0        	j	0x80219002 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.297+0x38>
80219000: 09 a0        	j	0x80219002 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.297+0x38>
80219002: 03 15 e4 fe  	lh	a0, -18(s0)
80219006: 42 64        	ld	s0, 16(sp)
80219008: e2 60        	ld	ra, 24(sp)
8021900a: 05 61        	addi	sp, sp, 32
8021900c: 82 80        	ret

000000008021900e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.298>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021900e: 39 71        	addi	sp, sp, -64
;             return std.fmt.format(self, format, args);
80219010: 06 fc        	sd	ra, 56(sp)
80219012: 22 f8        	sd	s0, 48(sp)
80219014: 80 00        	addi	s0, sp, 64
80219016: 23 34 a4 fc  	sd	a0, -56(s0)
8021901a: 90 69        	ld	a2, 16(a1)
8021901c: 23 30 c4 fe  	sd	a2, -32(s0)
80219020: 90 65        	ld	a2, 8(a1)
80219022: 23 3c c4 fc  	sd	a2, -40(s0)
80219026: 90 61        	ld	a2, 0(a1)
80219028: 23 38 c4 fc  	sd	a2, -48(s0)
8021902c: 97 10 00 00  	auipc	ra, 1
80219030: e7 80 60 4d  	jalr	1238(ra)
80219034: aa 85        	mv	a1, a0
80219036: 41 65        	lui	a0, 16
80219038: 7d 35        	addiw	a0, a0, -1
8021903a: 6d 8d        	and	a0, a0, a1
8021903c: 23 17 b4 fe  	sh	a1, -18(s0)
80219040: 81 45        	mv	a1, zero
80219042: 63 0a b5 00  	beq	a0, a1, 0x80219056 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.298+0x48>
80219046: 09 a0        	j	0x80219048 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.298+0x3a>
80219048: 03 35 84 fc  	ld	a0, -56(s0)
8021904c: 97 80 fe ff  	auipc	ra, 1048552
80219050: e7 80 60 85  	jalr	-1962(ra)
80219054: 11 a0        	j	0x80219058 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.298+0x4a>
80219056: 09 a0        	j	0x80219058 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.298+0x4a>
80219058: 03 15 e4 fe  	lh	a0, -18(s0)
8021905c: 42 74        	ld	s0, 48(sp)
8021905e: e2 70        	ld	ra, 56(sp)
80219060: 21 61        	addi	sp, sp, 64
80219062: 82 80        	ret

0000000080219064 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.299>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80219064: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80219066: 06 ec        	sd	ra, 24(sp)
80219068: 22 e8        	sd	s0, 16(sp)
8021906a: 00 10        	addi	s0, sp, 32
8021906c: 23 30 a4 fe  	sd	a0, -32(s0)
80219070: 97 10 00 00  	auipc	ra, 1
80219074: e7 80 c0 58  	jalr	1420(ra)
80219078: aa 85        	mv	a1, a0
8021907a: 41 65        	lui	a0, 16
8021907c: 7d 35        	addiw	a0, a0, -1
8021907e: 6d 8d        	and	a0, a0, a1
80219080: 23 17 b4 fe  	sh	a1, -18(s0)
80219084: 81 45        	mv	a1, zero
80219086: 63 0a b5 00  	beq	a0, a1, 0x8021909a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.299+0x36>
8021908a: 09 a0        	j	0x8021908c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.299+0x28>
8021908c: 03 35 04 fe  	ld	a0, -32(s0)
80219090: 97 80 fe ff  	auipc	ra, 1048552
80219094: e7 80 20 81  	jalr	-2030(ra)
80219098: 11 a0        	j	0x8021909c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.299+0x38>
8021909a: 09 a0        	j	0x8021909c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.299+0x38>
8021909c: 03 15 e4 fe  	lh	a0, -18(s0)
802190a0: 42 64        	ld	s0, 16(sp)
802190a2: e2 60        	ld	ra, 24(sp)
802190a4: 05 61        	addi	sp, sp, 32
802190a6: 82 80        	ret

00000000802190a8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.300>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
802190a8: 39 71        	addi	sp, sp, -64
;             return std.fmt.format(self, format, args);
802190aa: 06 fc        	sd	ra, 56(sp)
802190ac: 22 f8        	sd	s0, 48(sp)
802190ae: 80 00        	addi	s0, sp, 64
802190b0: 23 30 a4 fc  	sd	a0, -64(s0)
802190b4: 90 6d        	ld	a2, 24(a1)
802190b6: 23 30 c4 fe  	sd	a2, -32(s0)
802190ba: 90 69        	ld	a2, 16(a1)
802190bc: 23 3c c4 fc  	sd	a2, -40(s0)
802190c0: 90 65        	ld	a2, 8(a1)
802190c2: 23 38 c4 fc  	sd	a2, -48(s0)
802190c6: 90 61        	ld	a2, 0(a1)
802190c8: 23 34 c4 fc  	sd	a2, -56(s0)
802190cc: 97 10 00 00  	auipc	ra, 1
802190d0: e7 80 a0 55  	jalr	1370(ra)
802190d4: aa 85        	mv	a1, a0
802190d6: 41 65        	lui	a0, 16
802190d8: 7d 35        	addiw	a0, a0, -1
802190da: 6d 8d        	and	a0, a0, a1
802190dc: 23 17 b4 fe  	sh	a1, -18(s0)
802190e0: 81 45        	mv	a1, zero
802190e2: 63 0a b5 00  	beq	a0, a1, 0x802190f6 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.300+0x4e>
802190e6: 09 a0        	j	0x802190e8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.300+0x40>
802190e8: 03 35 04 fc  	ld	a0, -64(s0)
802190ec: 97 70 fe ff  	auipc	ra, 1048551
802190f0: e7 80 60 7b  	jalr	1974(ra)
802190f4: 11 a0        	j	0x802190f8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.300+0x50>
802190f6: 09 a0        	j	0x802190f8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.300+0x50>
802190f8: 03 15 e4 fe  	lh	a0, -18(s0)
802190fc: 42 74        	ld	s0, 48(sp)
802190fe: e2 70        	ld	ra, 56(sp)
80219100: 21 61        	addi	sp, sp, 64
80219102: 82 80        	ret

0000000080219104 <log.0.301>:
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80219104: 0d 71        	addi	sp, sp, -352
80219106: 86 ee        	sd	ra, 344(sp)
80219108: a2 ea        	sd	s0, 336(sp)
8021910a: 80 12        	addi	s0, sp, 352
8021910c: aa 85        	mv	a1, a0
8021910e: 01 45        	mv	a0, zero
80219110: 23 30 a4 ea  	sd	a0, -352(s0)
80219114: 23 3c a4 ec  	sd	a0, -296(s0)
80219118: 13 05 04 ef  	addi	a0, s0, -272
8021911c: 23 30 a4 ee  	sd	a0, -288(s0)
80219120: 13 05 00 02  	addi	a0, zero, 32
80219124: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80219128: 88 61        	ld	a0, 0(a1)
8021912a: 23 3c a4 ea  	sd	a0, -328(s0)
8021912e: 88 65        	ld	a0, 8(a1)
80219130: 23 30 a4 ec  	sd	a0, -320(s0)
80219134: 88 69        	ld	a0, 16(a1)
80219136: 23 34 a4 ec  	sd	a0, -312(s0)
8021913a: 88 6d        	ld	a0, 24(a1)
8021913c: 23 38 a4 ec  	sd	a0, -304(s0)
80219140: 13 05 84 ed  	addi	a0, s0, -296
80219144: 97 10 00 00  	auipc	ra, 1
80219148: e7 80 e0 61  	jalr	1566(ra)
8021914c: 83 35 04 ea  	ld	a1, -352(s0)
80219150: 23 1b a4 ea  	sh	a0, -330(s0)
80219154: 41 66        	lui	a2, 16
80219156: 7d 36        	addiw	a2, a2, -1
80219158: 71 8d        	and	a0, a0, a2
8021915a: 23 34 a4 ea  	sd	a0, -344(s0)
8021915e: 63 0b b5 00  	beq	a0, a1, 0x80219174 <log.0.301+0x70>
80219162: 09 a0        	j	0x80219164 <log.0.301+0x60>
80219164: 83 35 84 ea  	ld	a1, -344(s0)
80219168: 13 05 84 ed  	addi	a0, s0, -296
8021916c: 97 70 fe ff  	auipc	ra, 1048551
80219170: e7 80 20 48  	jalr	1154(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80219174: 56 64        	ld	s0, 336(sp)
80219176: f6 60        	ld	ra, 344(sp)
80219178: 35 61        	addi	sp, sp, 352
8021917a: 82 80        	ret

000000008021917c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.302>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021917c: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
8021917e: 06 ec        	sd	ra, 24(sp)
80219180: 22 e8        	sd	s0, 16(sp)
80219182: 00 10        	addi	s0, sp, 32
80219184: 23 30 a4 fe  	sd	a0, -32(s0)
80219188: 97 10 00 00  	auipc	ra, 1
8021918c: e7 80 60 63  	jalr	1590(ra)
80219190: aa 85        	mv	a1, a0
80219192: 41 65        	lui	a0, 16
80219194: 7d 35        	addiw	a0, a0, -1
80219196: 6d 8d        	and	a0, a0, a1
80219198: 23 17 b4 fe  	sh	a1, -18(s0)
8021919c: 81 45        	mv	a1, zero
8021919e: 63 0a b5 00  	beq	a0, a1, 0x802191b2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.302+0x36>
802191a2: 09 a0        	j	0x802191a4 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.302+0x28>
802191a4: 03 35 04 fe  	ld	a0, -32(s0)
802191a8: 97 70 fe ff  	auipc	ra, 1048551
802191ac: e7 80 a0 6f  	jalr	1786(ra)
802191b0: 11 a0        	j	0x802191b4 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.302+0x38>
802191b2: 09 a0        	j	0x802191b4 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.302+0x38>
802191b4: 03 15 e4 fe  	lh	a0, -18(s0)
802191b8: 42 64        	ld	s0, 16(sp)
802191ba: e2 60        	ld	ra, 24(sp)
802191bc: 05 61        	addi	sp, sp, 32
802191be: 82 80        	ret

00000000802191c0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.303>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
802191c0: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
802191c2: 06 ec        	sd	ra, 24(sp)
802191c4: 22 e8        	sd	s0, 16(sp)
802191c6: 00 10        	addi	s0, sp, 32
802191c8: 23 30 a4 fe  	sd	a0, -32(s0)
802191cc: 97 10 00 00  	auipc	ra, 1
802191d0: e7 80 c0 61  	jalr	1564(ra)
802191d4: aa 85        	mv	a1, a0
802191d6: 41 65        	lui	a0, 16
802191d8: 7d 35        	addiw	a0, a0, -1
802191da: 6d 8d        	and	a0, a0, a1
802191dc: 23 17 b4 fe  	sh	a1, -18(s0)
802191e0: 81 45        	mv	a1, zero
802191e2: 63 0a b5 00  	beq	a0, a1, 0x802191f6 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.303+0x36>
802191e6: 09 a0        	j	0x802191e8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.303+0x28>
802191e8: 03 35 04 fe  	ld	a0, -32(s0)
802191ec: 97 70 fe ff  	auipc	ra, 1048551
802191f0: e7 80 60 6b  	jalr	1718(ra)
802191f4: 11 a0        	j	0x802191f8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.303+0x38>
802191f6: 09 a0        	j	0x802191f8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.303+0x38>
802191f8: 03 15 e4 fe  	lh	a0, -18(s0)
802191fc: 42 64        	ld	s0, 16(sp)
802191fe: e2 60        	ld	ra, 24(sp)
80219200: 05 61        	addi	sp, sp, 32
80219202: 82 80        	ret

0000000080219204 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.304>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80219204: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
80219206: 06 f4        	sd	ra, 40(sp)
80219208: 22 f0        	sd	s0, 32(sp)
8021920a: 00 18        	addi	s0, sp, 48
8021920c: 23 38 a4 fc  	sd	a0, -48(s0)
80219210: 90 65        	ld	a2, 8(a1)
80219212: 23 30 c4 fe  	sd	a2, -32(s0)
80219216: 90 61        	ld	a2, 0(a1)
80219218: 23 3c c4 fc  	sd	a2, -40(s0)
8021921c: 97 10 00 00  	auipc	ra, 1
80219220: e7 80 60 5f  	jalr	1526(ra)
80219224: aa 85        	mv	a1, a0
80219226: 41 65        	lui	a0, 16
80219228: 7d 35        	addiw	a0, a0, -1
8021922a: 6d 8d        	and	a0, a0, a1
8021922c: 23 17 b4 fe  	sh	a1, -18(s0)
80219230: 81 45        	mv	a1, zero
80219232: 63 0a b5 00  	beq	a0, a1, 0x80219246 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.304+0x42>
80219236: 09 a0        	j	0x80219238 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.304+0x34>
80219238: 03 35 04 fd  	ld	a0, -48(s0)
8021923c: 97 70 fe ff  	auipc	ra, 1048551
80219240: e7 80 60 66  	jalr	1638(ra)
80219244: 11 a0        	j	0x80219248 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.304+0x44>
80219246: 09 a0        	j	0x80219248 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.304+0x44>
80219248: 03 15 e4 fe  	lh	a0, -18(s0)
8021924c: 02 74        	ld	s0, 32(sp)
8021924e: a2 70        	ld	ra, 40(sp)
80219250: 45 61        	addi	sp, sp, 48
80219252: 82 80        	ret

0000000080219254 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.305>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80219254: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80219256: 06 ec        	sd	ra, 24(sp)
80219258: 22 e8        	sd	s0, 16(sp)
8021925a: 00 10        	addi	s0, sp, 32
8021925c: 23 30 a4 fe  	sd	a0, -32(s0)
80219260: 97 10 00 00  	auipc	ra, 1
80219264: e7 80 a0 66  	jalr	1642(ra)
80219268: aa 85        	mv	a1, a0
8021926a: 41 65        	lui	a0, 16
8021926c: 7d 35        	addiw	a0, a0, -1
8021926e: 6d 8d        	and	a0, a0, a1
80219270: 23 17 b4 fe  	sh	a1, -18(s0)
80219274: 81 45        	mv	a1, zero
80219276: 63 0a b5 00  	beq	a0, a1, 0x8021928a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.305+0x36>
8021927a: 09 a0        	j	0x8021927c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.305+0x28>
8021927c: 03 35 04 fe  	ld	a0, -32(s0)
80219280: 97 70 fe ff  	auipc	ra, 1048551
80219284: e7 80 20 62  	jalr	1570(ra)
80219288: 11 a0        	j	0x8021928c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.305+0x38>
8021928a: 09 a0        	j	0x8021928c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.305+0x38>
8021928c: 03 15 e4 fe  	lh	a0, -18(s0)
80219290: 42 64        	ld	s0, 16(sp)
80219292: e2 60        	ld	ra, 24(sp)
80219294: 05 61        	addi	sp, sp, 32
80219296: 82 80        	ret

0000000080219298 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.306>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80219298: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
8021929a: 06 f4        	sd	ra, 40(sp)
8021929c: 22 f0        	sd	s0, 32(sp)
8021929e: 00 18        	addi	s0, sp, 48
802192a0: 23 3c a4 fc  	sd	a0, -40(s0)
802192a4: 90 61        	ld	a2, 0(a1)
802192a6: 23 30 c4 fe  	sd	a2, -32(s0)
802192aa: 97 10 00 00  	auipc	ra, 1
802192ae: e7 80 a0 64  	jalr	1610(ra)
802192b2: aa 85        	mv	a1, a0
802192b4: 41 65        	lui	a0, 16
802192b6: 7d 35        	addiw	a0, a0, -1
802192b8: 6d 8d        	and	a0, a0, a1
802192ba: 23 17 b4 fe  	sh	a1, -18(s0)
802192be: 81 45        	mv	a1, zero
802192c0: 63 0a b5 00  	beq	a0, a1, 0x802192d4 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.306+0x3c>
802192c4: 09 a0        	j	0x802192c6 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.306+0x2e>
802192c6: 03 35 84 fd  	ld	a0, -40(s0)
802192ca: 97 70 fe ff  	auipc	ra, 1048551
802192ce: e7 80 80 5d  	jalr	1496(ra)
802192d2: 11 a0        	j	0x802192d6 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.306+0x3e>
802192d4: 09 a0        	j	0x802192d6 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.306+0x3e>
802192d6: 03 15 e4 fe  	lh	a0, -18(s0)
802192da: 02 74        	ld	s0, 32(sp)
802192dc: a2 70        	ld	ra, 40(sp)
802192de: 45 61        	addi	sp, sp, 48
802192e0: 82 80        	ret

00000000802192e2 <std.fmt.format.307>:
; pub fn format(
802192e2: 01 11        	addi	sp, sp, -32
;             try writer.writeAll(fmt[start_index..end_index]);
802192e4: 06 ec        	sd	ra, 24(sp)
802192e6: 22 e8        	sd	s0, 16(sp)
802192e8: 00 10        	addi	s0, sp, 32

00000000802192ea <.LBB385_1>:
802192ea: 97 85 00 00  	auipc	a1, 8
802192ee: 93 85 65 8a  	addi	a1, a1, -1882
802192f2: 97 70 fe ff  	auipc	ra, 1048551
802192f6: e7 80 00 7c  	jalr	1984(ra)
802192fa: 23 16 a4 fe  	sh	a0, -20(s0)
802192fe: 01 45        	mv	a0, zero
; ) !void {
80219300: 23 17 a4 fe  	sh	a0, -18(s0)
80219304: 42 64        	ld	s0, 16(sp)
80219306: e2 60        	ld	ra, 24(sp)
80219308: 05 61        	addi	sp, sp, 32
8021930a: 82 80        	ret

000000008021930c <log.0.308>:
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
8021930c: 49 71        	addi	sp, sp, -368
8021930e: 86 f6        	sd	ra, 360(sp)
80219310: a2 f2        	sd	s0, 352(sp)
80219312: 80 1a        	addi	s0, sp, 368
80219314: aa 85        	mv	a1, a0
80219316: 01 45        	mv	a0, zero
80219318: 23 3c a4 e8  	sd	a0, -360(s0)
8021931c: 23 3c a4 ec  	sd	a0, -296(s0)
80219320: 13 05 04 ef  	addi	a0, s0, -272
80219324: 23 30 a4 ee  	sd	a0, -288(s0)
80219328: 13 05 00 02  	addi	a0, zero, 32
8021932c: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80219330: 88 61        	ld	a0, 0(a1)
80219332: 23 38 a4 ea  	sd	a0, -336(s0)
80219336: 88 65        	ld	a0, 8(a1)
80219338: 23 3c a4 ea  	sd	a0, -328(s0)
8021933c: 88 69        	ld	a0, 16(a1)
8021933e: 23 30 a4 ec  	sd	a0, -320(s0)
80219342: 88 6d        	ld	a0, 24(a1)
80219344: 23 34 a4 ec  	sd	a0, -312(s0)
80219348: 88 71        	ld	a0, 32(a1)
8021934a: 23 38 a4 ec  	sd	a0, -304(s0)
8021934e: 13 05 84 ed  	addi	a0, s0, -296
80219352: 97 10 00 00  	auipc	ra, 1
80219356: e7 80 40 61  	jalr	1556(ra)
8021935a: 83 35 84 e9  	ld	a1, -360(s0)
8021935e: 23 17 a4 ea  	sh	a0, -338(s0)
80219362: 41 66        	lui	a2, 16
80219364: 7d 36        	addiw	a2, a2, -1
80219366: 71 8d        	and	a0, a0, a2
80219368: 23 30 a4 ea  	sd	a0, -352(s0)
8021936c: 63 0b b5 00  	beq	a0, a1, 0x80219382 <log.0.308+0x76>
80219370: 09 a0        	j	0x80219372 <log.0.308+0x66>
80219372: 83 35 04 ea  	ld	a1, -352(s0)
80219376: 13 05 84 ed  	addi	a0, s0, -296
8021937a: 97 70 fe ff  	auipc	ra, 1048551
8021937e: e7 80 40 27  	jalr	628(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80219382: 16 74        	ld	s0, 352(sp)
80219384: b6 70        	ld	ra, 360(sp)
80219386: 75 61        	addi	sp, sp, 368
80219388: 82 80        	ret

000000008021938a <std.fmt.format.309>:
; pub fn format(
8021938a: 01 11        	addi	sp, sp, -32
;             try writer.writeAll(fmt[start_index..end_index]);
8021938c: 06 ec        	sd	ra, 24(sp)
8021938e: 22 e8        	sd	s0, 16(sp)
80219390: 00 10        	addi	s0, sp, 32

0000000080219392 <.LBB387_1>:
80219392: 97 85 00 00  	auipc	a1, 8
80219396: 93 85 e5 81  	addi	a1, a1, -2018
8021939a: 97 70 fe ff  	auipc	ra, 1048551
8021939e: e7 80 80 71  	jalr	1816(ra)
802193a2: 23 16 a4 fe  	sh	a0, -20(s0)
802193a6: 01 45        	mv	a0, zero
; ) !void {
802193a8: 23 17 a4 fe  	sh	a0, -18(s0)
802193ac: 42 64        	ld	s0, 16(sp)
802193ae: e2 60        	ld	ra, 24(sp)
802193b0: 05 61        	addi	sp, sp, 32
802193b2: 82 80        	ret

00000000802193b4 <std.fmt.format.310>:
; pub fn format(
802193b4: 39 71        	addi	sp, sp, -64
;     args: anytype,
802193b6: 06 fc        	sd	ra, 56(sp)
802193b8: 22 f8        	sd	s0, 48(sp)
802193ba: 80 00        	addi	s0, sp, 64
802193bc: 23 34 b4 fc  	sd	a1, -56(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
802193c0: 23 38 a4 fc  	sd	a0, -48(s0)

00000000802193c4 <.LBB388_1>:
802193c4: 97 75 00 00  	auipc	a1, 7
802193c8: 93 85 c5 7f  	addi	a1, a1, 2044
802193cc: 97 70 fe ff  	auipc	ra, 1048551
802193d0: e7 80 60 6e  	jalr	1766(ra)
802193d4: 83 35 84 fc  	ld	a1, -56(s0)
802193d8: 2a 86        	mv	a2, a0
802193da: 03 35 04 fd  	ld	a0, -48(s0)
802193de: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
802193e2: 8c 61        	ld	a1, 0(a1)
802193e4: 23 30 b4 fe  	sd	a1, -32(s0)

00000000802193e8 <.LBB388_2>:
;         try formatType(
802193e8: 17 86 00 00  	auipc	a2, 8
802193ec: 13 06 86 84  	addi	a2, a2, -1976
802193f0: 8d 46        	addi	a3, zero, 3
802193f2: 97 f0 ff ff  	auipc	ra, 1048575
802193f6: e7 80 a0 ba  	jalr	-1110(ra)
802193fa: aa 85        	mv	a1, a0
802193fc: 03 35 04 fd  	ld	a0, -48(s0)
80219400: 23 1f b4 fc  	sh	a1, -34(s0)

0000000080219404 <.LBB388_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
80219404: 97 85 00 00  	auipc	a1, 8
80219408: 93 85 45 85  	addi	a1, a1, -1964
8021940c: 97 70 fe ff  	auipc	ra, 1048551
80219410: e7 80 60 6a  	jalr	1702(ra)
80219414: 23 1e a4 fc  	sh	a0, -36(s0)
80219418: 01 45        	mv	a0, zero
; ) !void {
8021941a: 23 17 a4 fe  	sh	a0, -18(s0)
8021941e: 42 74        	ld	s0, 48(sp)
80219420: e2 70        	ld	ra, 56(sp)
80219422: 21 61        	addi	sp, sp, 64
80219424: 82 80        	ret

0000000080219426 <log.0.311>:
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80219426: 49 71        	addi	sp, sp, -368
80219428: 86 f6        	sd	ra, 360(sp)
8021942a: a2 f2        	sd	s0, 352(sp)
8021942c: 80 1a        	addi	s0, sp, 368
8021942e: aa 85        	mv	a1, a0
80219430: 01 45        	mv	a0, zero
80219432: 23 3c a4 e8  	sd	a0, -360(s0)
80219436: 23 3c a4 ec  	sd	a0, -296(s0)
8021943a: 13 05 04 ef  	addi	a0, s0, -272
8021943e: 23 30 a4 ee  	sd	a0, -288(s0)
80219442: 13 05 00 02  	addi	a0, zero, 32
80219446: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
8021944a: 88 61        	ld	a0, 0(a1)
8021944c: 23 38 a4 ea  	sd	a0, -336(s0)
80219450: 88 65        	ld	a0, 8(a1)
80219452: 23 3c a4 ea  	sd	a0, -328(s0)
80219456: 88 69        	ld	a0, 16(a1)
80219458: 23 30 a4 ec  	sd	a0, -320(s0)
8021945c: 88 6d        	ld	a0, 24(a1)
8021945e: 23 34 a4 ec  	sd	a0, -312(s0)
80219462: 88 71        	ld	a0, 32(a1)
80219464: 23 38 a4 ec  	sd	a0, -304(s0)
80219468: 13 05 84 ed  	addi	a0, s0, -296
8021946c: 97 10 00 00  	auipc	ra, 1
80219470: e7 80 c0 55  	jalr	1372(ra)
80219474: 83 35 84 e9  	ld	a1, -360(s0)
80219478: 23 17 a4 ea  	sh	a0, -338(s0)
8021947c: 41 66        	lui	a2, 16
8021947e: 7d 36        	addiw	a2, a2, -1
80219480: 71 8d        	and	a0, a0, a2
80219482: 23 30 a4 ea  	sd	a0, -352(s0)
80219486: 63 0b b5 00  	beq	a0, a1, 0x8021949c <log.0.311+0x76>
8021948a: 09 a0        	j	0x8021948c <log.0.311+0x66>
8021948c: 83 35 04 ea  	ld	a1, -352(s0)
80219490: 13 05 84 ed  	addi	a0, s0, -296
80219494: 97 70 fe ff  	auipc	ra, 1048551
80219498: e7 80 a0 15  	jalr	346(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
8021949c: 16 74        	ld	s0, 352(sp)
8021949e: b6 70        	ld	ra, 360(sp)
802194a0: 75 61        	addi	sp, sp, 368
802194a2: 82 80        	ret

00000000802194a4 <std.fmt.format.312>:
; pub fn format(
802194a4: 01 11        	addi	sp, sp, -32
;             try writer.writeAll(fmt[start_index..end_index]);
802194a6: 06 ec        	sd	ra, 24(sp)
802194a8: 22 e8        	sd	s0, 16(sp)
802194aa: 00 10        	addi	s0, sp, 32

00000000802194ac <.LBB390_1>:
802194ac: 97 75 00 00  	auipc	a1, 7
802194b0: 93 85 c5 7c  	addi	a1, a1, 1996
802194b4: 97 70 fe ff  	auipc	ra, 1048551
802194b8: e7 80 e0 5f  	jalr	1534(ra)
802194bc: 23 16 a4 fe  	sh	a0, -20(s0)
802194c0: 01 45        	mv	a0, zero
; ) !void {
802194c2: 23 17 a4 fe  	sh	a0, -18(s0)
802194c6: 42 64        	ld	s0, 16(sp)
802194c8: e2 60        	ld	ra, 24(sp)
802194ca: 05 61        	addi	sp, sp, 32
802194cc: 82 80        	ret

00000000802194ce <std.log.log.313>:
; fn log(
802194ce: 79 71        	addi	sp, sp, -48
;     args: anytype,
802194d0: 06 f4        	sd	ra, 40(sp)
802194d2: 22 f0        	sd	s0, 32(sp)
802194d4: 00 18        	addi	s0, sp, 48
802194d6: 23 38 a4 fc  	sd	a0, -48(s0)
802194da: 0d 45        	addi	a0, zero, 3
;         break :blk level;
802194dc: a3 07 a4 fe  	sb	a0, -17(s0)
802194e0: 09 a0        	j	0x802194e2 <std.log.log.313+0x14>
;             root.log(message_level, scope, format, args);
802194e2: 03 35 04 fd  	ld	a0, -48(s0)
802194e6: 0c 61        	ld	a1, 0(a0)
802194e8: 23 3c b4 fc  	sd	a1, -40(s0)
802194ec: 0c 65        	ld	a1, 8(a0)
802194ee: 23 30 b4 fe  	sd	a1, -32(s0)
802194f2: 97 10 00 00  	auipc	ra, 1
802194f6: e7 80 80 53  	jalr	1336(ra)
; ) void {
802194fa: 02 74        	ld	s0, 32(sp)
802194fc: a2 70        	ld	ra, 40(sp)
802194fe: 45 61        	addi	sp, sp, 48
80219500: 82 80        	ret

0000000080219502 <std.log.log.314>:
; fn log(
80219502: 39 71        	addi	sp, sp, -64
;     args: anytype,
80219504: 06 fc        	sd	ra, 56(sp)
80219506: 22 f8        	sd	s0, 48(sp)
80219508: 80 00        	addi	s0, sp, 64
8021950a: 23 30 a4 fc  	sd	a0, -64(s0)
8021950e: 0d 45        	addi	a0, zero, 3
;         break :blk level;
80219510: a3 07 a4 fe  	sb	a0, -17(s0)
80219514: 09 a0        	j	0x80219516 <std.log.log.314+0x14>
;             root.log(message_level, scope, format, args);
80219516: 03 35 04 fc  	ld	a0, -64(s0)
8021951a: 0c 61        	ld	a1, 0(a0)
8021951c: 23 34 b4 fc  	sd	a1, -56(s0)
80219520: 0c 65        	ld	a1, 8(a0)
80219522: 23 38 b4 fc  	sd	a1, -48(s0)
80219526: 0c 69        	ld	a1, 16(a0)
80219528: 23 3c b4 fc  	sd	a1, -40(s0)
8021952c: 0c 6d        	ld	a1, 24(a0)
8021952e: 23 30 b4 fe  	sd	a1, -32(s0)
80219532: 97 10 00 00  	auipc	ra, 1
80219536: e7 80 40 56  	jalr	1380(ra)
; ) void {
8021953a: 42 74        	ld	s0, 48(sp)
8021953c: e2 70        	ld	ra, 56(sp)
8021953e: 21 61        	addi	sp, sp, 64
80219540: 82 80        	ret

0000000080219542 <log.0.315>:
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
80219542: 4d 71        	addi	sp, sp, -336
80219544: 86 e6        	sd	ra, 328(sp)
80219546: a2 e2        	sd	s0, 320(sp)
80219548: 80 0a        	addi	s0, sp, 336
8021954a: aa 85        	mv	a1, a0
8021954c: 01 45        	mv	a0, zero
8021954e: 23 38 a4 ea  	sd	a0, -336(s0)
80219552: 23 3c a4 ec  	sd	a0, -296(s0)
80219556: 13 05 04 ef  	addi	a0, s0, -272
8021955a: 23 30 a4 ee  	sd	a0, -288(s0)
8021955e: 13 05 00 02  	addi	a0, zero, 32
80219562: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
80219566: 88 61        	ld	a0, 0(a1)
80219568: 23 34 a4 ec  	sd	a0, -312(s0)
8021956c: 88 65        	ld	a0, 8(a1)
8021956e: 23 38 a4 ec  	sd	a0, -304(s0)
80219572: 13 05 84 ed  	addi	a0, s0, -296
80219576: 97 10 00 00  	auipc	ra, 1
8021957a: e7 80 80 59  	jalr	1432(ra)
8021957e: 83 35 04 eb  	ld	a1, -336(s0)
80219582: 23 13 a4 ec  	sh	a0, -314(s0)
80219586: 41 66        	lui	a2, 16
80219588: 7d 36        	addiw	a2, a2, -1
8021958a: 71 8d        	and	a0, a0, a2
8021958c: 23 3c a4 ea  	sd	a0, -328(s0)
80219590: 63 0b b5 00  	beq	a0, a1, 0x802195a6 <log.0.315+0x64>
80219594: 09 a0        	j	0x80219596 <log.0.315+0x54>
80219596: 83 35 84 eb  	ld	a1, -328(s0)
8021959a: 13 05 84 ed  	addi	a0, s0, -296
8021959e: 97 70 fe ff  	auipc	ra, 1048551
802195a2: e7 80 00 05  	jalr	80(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
802195a6: 16 64        	ld	s0, 320(sp)
802195a8: b6 60        	ld	ra, 328(sp)
802195aa: 71 61        	addi	sp, sp, 336
802195ac: 82 80        	ret

00000000802195ae <std.fmt.format.316>:
; pub fn format(
802195ae: 01 11        	addi	sp, sp, -32
;             try writer.writeAll(fmt[start_index..end_index]);
802195b0: 06 ec        	sd	ra, 24(sp)
802195b2: 22 e8        	sd	s0, 16(sp)
802195b4: 00 10        	addi	s0, sp, 32

00000000802195b6 <.LBB394_1>:
802195b6: 97 75 00 00  	auipc	a1, 7
802195ba: 93 85 25 6e  	addi	a1, a1, 1762
802195be: 97 70 fe ff  	auipc	ra, 1048551
802195c2: e7 80 40 4f  	jalr	1268(ra)
802195c6: 23 16 a4 fe  	sh	a0, -20(s0)
802195ca: 01 45        	mv	a0, zero
; ) !void {
802195cc: 23 17 a4 fe  	sh	a0, -18(s0)
802195d0: 42 64        	ld	s0, 16(sp)
802195d2: e2 60        	ld	ra, 24(sp)
802195d4: 05 61        	addi	sp, sp, 32
802195d6: 82 80        	ret

00000000802195d8 <std.fmt.format.317>:
; pub fn format(
802195d8: 1d 71        	addi	sp, sp, -96
;     args: anytype,
802195da: 86 ec        	sd	ra, 88(sp)
802195dc: a2 e8        	sd	s0, 80(sp)
802195de: 80 10        	addi	s0, sp, 96
802195e0: 23 30 b4 fa  	sd	a1, -96(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
802195e4: 23 38 a4 fa  	sd	a0, -80(s0)

00000000802195e8 <.LBB395_1>:
802195e8: 97 75 00 00  	auipc	a1, 7
802195ec: 93 85 05 6c  	addi	a1, a1, 1728
802195f0: 97 70 fe ff  	auipc	ra, 1048551
802195f4: e7 80 20 4c  	jalr	1218(ra)
802195f8: 83 35 04 fa  	ld	a1, -96(s0)
802195fc: 2a 86        	mv	a2, a0
802195fe: 03 35 04 fb  	ld	a0, -80(s0)
80219602: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
80219606: 8c 61        	ld	a1, 0(a1)
80219608: 23 30 b4 fe  	sd	a1, -32(s0)

000000008021960c <.LBB395_2>:
;         try formatType(
8021960c: 17 76 00 00  	auipc	a2, 7
80219610: 13 06 c6 70  	addi	a2, a2, 1804
80219614: 8d 46        	addi	a3, zero, 3
80219616: 23 34 d4 fa  	sd	a3, -88(s0)
8021961a: 97 10 00 00  	auipc	ra, 1
8021961e: e7 80 40 54  	jalr	1348(ra)
80219622: aa 85        	mv	a1, a0
80219624: 03 35 04 fb  	ld	a0, -80(s0)
80219628: 23 1f b4 fc  	sh	a1, -34(s0)

000000008021962c <.LBB395_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021962c: 97 75 00 00  	auipc	a1, 7
80219630: 93 85 45 71  	addi	a1, a1, 1812
80219634: 97 70 fe ff  	auipc	ra, 1048551
80219638: e7 80 e0 47  	jalr	1150(ra)
8021963c: 03 36 04 fa  	ld	a2, -96(s0)
80219640: 83 36 84 fa  	ld	a3, -88(s0)
80219644: aa 85        	mv	a1, a0
80219646: 03 35 04 fb  	ld	a0, -80(s0)
8021964a: 23 1e b4 fc  	sh	a1, -36(s0)
;             @field(args, fields_info[arg_to_print].name),
8021964e: 93 05 86 00  	addi	a1, a2, 8
80219652: 83 67 86 00  	lwu	a5, 8(a2)
80219656: 03 67 c6 00  	lwu	a4, 12(a2)
8021965a: 02 17        	slli	a4, a4, 32
8021965c: 5d 8f        	or	a4, a4, a5
8021965e: 23 30 e4 fc  	sd	a4, -64(s0)
80219662: 83 67 06 01  	lwu	a5, 16(a2)
80219666: 03 67 46 01  	lwu	a4, 20(a2)
8021966a: 02 17        	slli	a4, a4, 32
8021966c: 5d 8f        	or	a4, a4, a5
8021966e: 23 34 e4 fc  	sd	a4, -56(s0)
80219672: 03 67 86 01  	lwu	a4, 24(a2)
80219676: 03 66 c6 01  	lwu	a2, 28(a2)
8021967a: 02 16        	slli	a2, a2, 32
8021967c: 59 8e        	or	a2, a2, a4
8021967e: 23 38 c4 fc  	sd	a2, -48(s0)

0000000080219682 <.LBB395_4>:
;         try formatType(
80219682: 17 76 00 00  	auipc	a2, 7
80219686: 13 06 e6 72  	addi	a2, a2, 1838
8021968a: 97 10 00 00  	auipc	ra, 1
8021968e: e7 80 20 54  	jalr	1346(ra)
80219692: aa 85        	mv	a1, a0
80219694: 03 35 04 fb  	ld	a0, -80(s0)
80219698: 23 1f b4 fa  	sh	a1, -66(s0)

000000008021969c <.LBB395_5>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021969c: 97 75 00 00  	auipc	a1, 7
802196a0: 93 85 c5 73  	addi	a1, a1, 1852
802196a4: 97 70 fe ff  	auipc	ra, 1048551
802196a8: e7 80 e0 40  	jalr	1038(ra)
802196ac: 23 1e a4 fa  	sh	a0, -68(s0)
802196b0: 01 45        	mv	a0, zero
; ) !void {
802196b2: 23 17 a4 fe  	sh	a0, -18(s0)
802196b6: 46 64        	ld	s0, 80(sp)
802196b8: e6 60        	ld	ra, 88(sp)
802196ba: 25 61        	addi	sp, sp, 96
802196bc: 82 80        	ret

00000000802196be <std.fmt.format.318>:
; pub fn format(
802196be: 01 11        	addi	sp, sp, -32
;             try writer.writeAll(fmt[start_index..end_index]);
802196c0: 06 ec        	sd	ra, 24(sp)
802196c2: 22 e8        	sd	s0, 16(sp)
802196c4: 00 10        	addi	s0, sp, 32

00000000802196c6 <.LBB396_1>:
802196c6: 97 75 00 00  	auipc	a1, 7
802196ca: 93 85 25 7f  	addi	a1, a1, 2034
802196ce: 97 70 fe ff  	auipc	ra, 1048551
802196d2: e7 80 40 3e  	jalr	996(ra)
802196d6: 23 16 a4 fe  	sh	a0, -20(s0)
802196da: 01 45        	mv	a0, zero
; ) !void {
802196dc: 23 17 a4 fe  	sh	a0, -18(s0)
802196e0: 42 64        	ld	s0, 16(sp)
802196e2: e2 60        	ld	ra, 24(sp)
802196e4: 05 61        	addi	sp, sp, 32
802196e6: 82 80        	ret

00000000802196e8 <std.fmt.format.319>:
; pub fn format(
802196e8: 39 71        	addi	sp, sp, -64
;     args: anytype,
802196ea: 06 fc        	sd	ra, 56(sp)
802196ec: 22 f8        	sd	s0, 48(sp)
802196ee: 80 00        	addi	s0, sp, 64
802196f0: 23 34 b4 fc  	sd	a1, -56(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
802196f4: 23 38 a4 fc  	sd	a0, -48(s0)

00000000802196f8 <.LBB397_1>:
802196f8: 97 75 00 00  	auipc	a1, 7
802196fc: 93 85 05 7d  	addi	a1, a1, 2000
80219700: 97 70 fe ff  	auipc	ra, 1048551
80219704: e7 80 20 3b  	jalr	946(ra)
80219708: 83 35 84 fc  	ld	a1, -56(s0)
8021970c: 2a 86        	mv	a2, a0
8021970e: 03 35 04 fd  	ld	a0, -48(s0)
80219712: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
80219716: 8c 61        	ld	a1, 0(a1)
80219718: 23 30 b4 fe  	sd	a1, -32(s0)

000000008021971c <.LBB397_2>:
;         try formatType(
8021971c: 17 86 00 00  	auipc	a2, 8
80219720: 13 06 c6 81  	addi	a2, a2, -2020
80219724: 8d 46        	addi	a3, zero, 3
80219726: 97 f0 ff ff  	auipc	ra, 1048575
8021972a: e7 80 80 80  	jalr	-2040(ra)
8021972e: aa 85        	mv	a1, a0
80219730: 03 35 04 fd  	ld	a0, -48(s0)
80219734: 23 1f b4 fc  	sh	a1, -34(s0)

0000000080219738 <.LBB397_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
80219738: 97 85 00 00  	auipc	a1, 8
8021973c: 93 85 85 82  	addi	a1, a1, -2008
80219740: 97 70 fe ff  	auipc	ra, 1048551
80219744: e7 80 20 37  	jalr	882(ra)
80219748: 23 1e a4 fc  	sh	a0, -36(s0)
8021974c: 01 45        	mv	a0, zero
; ) !void {
8021974e: 23 17 a4 fe  	sh	a0, -18(s0)
80219752: 42 74        	ld	s0, 48(sp)
80219754: e2 70        	ld	ra, 56(sp)
80219756: 21 61        	addi	sp, sp, 64
80219758: 82 80        	ret

000000008021975a <std.fmt.format.320>:
; pub fn format(
8021975a: 79 71        	addi	sp, sp, -48
;     args: anytype,
8021975c: 06 f4        	sd	ra, 40(sp)
8021975e: 22 f0        	sd	s0, 32(sp)
80219760: 00 18        	addi	s0, sp, 48
80219762: 23 38 b4 fc  	sd	a1, -48(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
80219766: 23 3c a4 fc  	sd	a0, -40(s0)

000000008021976a <.LBB398_1>:
8021976a: 97 85 00 00  	auipc	a1, 8
8021976e: 93 85 65 80  	addi	a1, a1, -2042
80219772: 97 70 fe ff  	auipc	ra, 1048551
80219776: e7 80 00 34  	jalr	832(ra)
8021977a: 83 35 04 fd  	ld	a1, -48(s0)
8021977e: 2a 86        	mv	a2, a0
80219780: 03 35 84 fd  	ld	a0, -40(s0)
80219784: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
80219788: 83 c6 05 00  	lbu	a3, 0(a1)
8021978c: 03 c6 15 00  	lbu	a2, 1(a1)
80219790: 22 06        	slli	a2, a2, 8
80219792: d1 8e        	or	a3, a3, a2
80219794: 03 c7 25 00  	lbu	a4, 2(a1)
80219798: 03 86 35 00  	lb	a2, 3(a1)
8021979c: 22 06        	slli	a2, a2, 8
8021979e: 59 8e        	or	a2, a2, a4
802197a0: 42 06        	slli	a2, a2, 16
802197a2: 55 8e        	or	a2, a2, a3
802197a4: 23 24 c4 fe  	sw	a2, -24(s0)

00000000802197a8 <.LBB398_2>:
;         try formatType(
802197a8: 17 86 00 00  	auipc	a2, 8
802197ac: 13 06 86 83  	addi	a2, a2, -1992
802197b0: 8d 46        	addi	a3, zero, 3
802197b2: 97 20 00 00  	auipc	ra, 2
802197b6: e7 80 20 bf  	jalr	-1038(ra)
802197ba: aa 85        	mv	a1, a0
802197bc: 03 35 84 fd  	ld	a0, -40(s0)
802197c0: 23 13 b4 fe  	sh	a1, -26(s0)

00000000802197c4 <.LBB398_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
802197c4: 97 85 00 00  	auipc	a1, 8
802197c8: 93 85 45 84  	addi	a1, a1, -1980
802197cc: 97 70 fe ff  	auipc	ra, 1048551
802197d0: e7 80 60 2e  	jalr	742(ra)
802197d4: 23 12 a4 fe  	sh	a0, -28(s0)
802197d8: 01 45        	mv	a0, zero
; ) !void {
802197da: 23 17 a4 fe  	sh	a0, -18(s0)
802197de: 02 74        	ld	s0, 32(sp)
802197e0: a2 70        	ld	ra, 40(sp)
802197e2: 45 61        	addi	sp, sp, 48
802197e4: 82 80        	ret

00000000802197e6 <std.fmt.format.321>:
; pub fn format(
802197e6: 01 11        	addi	sp, sp, -32
;             try writer.writeAll(fmt[start_index..end_index]);
802197e8: 06 ec        	sd	ra, 24(sp)
802197ea: 22 e8        	sd	s0, 16(sp)
802197ec: 00 10        	addi	s0, sp, 32

00000000802197ee <.LBB399_1>:
802197ee: 97 85 00 00  	auipc	a1, 8
802197f2: 93 85 a5 8f  	addi	a1, a1, -1798
802197f6: 97 70 fe ff  	auipc	ra, 1048551
802197fa: e7 80 c0 2b  	jalr	700(ra)
802197fe: 23 16 a4 fe  	sh	a0, -20(s0)
80219802: 01 45        	mv	a0, zero
; ) !void {
80219804: 23 17 a4 fe  	sh	a0, -18(s0)
80219808: 42 64        	ld	s0, 16(sp)
8021980a: e2 60        	ld	ra, 24(sp)
8021980c: 05 61        	addi	sp, sp, 32
8021980e: 82 80        	ret

0000000080219810 <std.fmt.format.322>:
; pub fn format(
80219810: 01 11        	addi	sp, sp, -32
;             try writer.writeAll(fmt[start_index..end_index]);
80219812: 06 ec        	sd	ra, 24(sp)
80219814: 22 e8        	sd	s0, 16(sp)
80219816: 00 10        	addi	s0, sp, 32

0000000080219818 <.LBB400_1>:
80219818: 97 85 00 00  	auipc	a1, 8
8021981c: 93 85 05 8e  	addi	a1, a1, -1824
80219820: 97 70 fe ff  	auipc	ra, 1048551
80219824: e7 80 20 29  	jalr	658(ra)
80219828: 23 16 a4 fe  	sh	a0, -20(s0)
8021982c: 01 45        	mv	a0, zero
; ) !void {
8021982e: 23 17 a4 fe  	sh	a0, -18(s0)
80219832: 42 64        	ld	s0, 16(sp)
80219834: e2 60        	ld	ra, 24(sp)
80219836: 05 61        	addi	sp, sp, 32
80219838: 82 80        	ret

000000008021983a <std.fmt.formatIntValue>:
; pub fn formatIntValue(
8021983a: 59 71        	addi	sp, sp, -112
8021983c: 86 f4        	sd	ra, 104(sp)
8021983e: a2 f0        	sd	s0, 96(sp)
80219840: 80 18        	addi	s0, sp, 112
80219842: 32 87        	mv	a4, a2
80219844: 23 3c a4 f8  	sd	a0, -104(s0)
80219848: 23 34 b4 fa  	sd	a1, -88(s0)
;     } else value;
8021984c: 23 30 b4 fe  	sd	a1, -32(s0)
;     return formatInt(int_value, radix, case, options, writer);
80219850: 23 3c b4 fc  	sd	a1, -40(s0)
80219854: 10 63        	ld	a2, 0(a4)
80219856: 23 38 c4 fa  	sd	a2, -80(s0)
8021985a: 10 67        	ld	a2, 8(a4)
8021985c: 23 3c c4 fa  	sd	a2, -72(s0)
80219860: 10 6b        	ld	a2, 16(a4)
80219862: 23 30 c4 fc  	sd	a2, -64(s0)
80219866: 10 6f        	ld	a2, 24(a4)
80219868: 23 34 c4 fc  	sd	a2, -56(s0)
8021986c: 10 73        	ld	a2, 32(a4)
8021986e: 23 38 c4 fc  	sd	a2, -48(s0)
80219872: 29 46        	addi	a2, zero, 10
80219874: 81 46        	mv	a3, zero
80219876: 23 30 d4 fa  	sd	a3, -96(s0)
8021987a: 97 00 00 00  	auipc	ra, 0
8021987e: e7 80 a0 03  	jalr	58(ra)
80219882: 83 35 04 fa  	ld	a1, -96(s0)
80219886: 2a 86        	mv	a2, a0
80219888: 41 65        	lui	a0, 16
8021988a: 7d 35        	addiw	a0, a0, -1
8021988c: 71 8d        	and	a0, a0, a2
8021988e: 23 17 c4 fe  	sh	a2, -18(s0)
80219892: 63 0a b5 00  	beq	a0, a1, 0x802198a6 <std.fmt.formatIntValue+0x6c>
80219896: 09 a0        	j	0x80219898 <std.fmt.formatIntValue+0x5e>
80219898: 03 35 84 f9  	ld	a0, -104(s0)
8021989c: 97 70 fe ff  	auipc	ra, 1048551
802198a0: e7 80 60 00  	jalr	6(ra)
802198a4: 11 a0        	j	0x802198a8 <std.fmt.formatIntValue+0x6e>
802198a6: 09 a0        	j	0x802198a8 <std.fmt.formatIntValue+0x6e>
802198a8: 03 15 e4 fe  	lh	a0, -18(s0)
802198ac: 06 74        	ld	s0, 96(sp)
802198ae: a6 70        	ld	ra, 104(sp)
802198b0: 65 61        	addi	sp, sp, 112
802198b2: 82 80        	ret

00000000802198b4 <std.fmt.formatInt>:
; pub fn formatInt(
802198b4: 2d 71        	addi	sp, sp, -288
;     options: FormatOptions,
802198b6: 06 ee        	sd	ra, 280(sp)
802198b8: 22 ea        	sd	s0, 272(sp)
802198ba: 00 12        	addi	s0, sp, 288
802198bc: 23 38 e4 f2  	sd	a4, -208(s0)
802198c0: 23 3c b4 f2  	sd	a1, -200(s0)
802198c4: aa 85        	mv	a1, a0
802198c6: 03 35 84 f3  	ld	a0, -200(s0)
802198ca: 23 30 b4 f4  	sd	a1, -192(s0)
802198ce: 93 75 f6 0f  	andi	a1, a2, 255
802198d2: 23 3c a4 f4  	sd	a0, -168(s0)
802198d6: a3 0b c4 f4  	sb	a2, -169(s0)
802198da: 13 f5 16 00  	andi	a0, a3, 1
802198de: 23 0b a4 f4  	sb	a0, -170(s0)
802198e2: 05 45        	addi	a0, zero, 1
;     assert(base >= 2);
802198e4: 33 35 b5 00  	sltu	a0, a0, a1
802198e8: 97 70 fe ff  	auipc	ra, 1048551
802198ec: e7 80 20 87  	jalr	-1934(ra)
;     } else value;
802198f0: 03 35 84 f5  	ld	a0, -168(s0)
802198f4: 23 30 a4 fe  	sd	a0, -32(s0)
;     const abs_value = math.absCast(int_value);
802198f8: 23 3c a4 fc  	sd	a0, -40(s0)
802198fc: 97 00 00 00  	auipc	ra, 0
80219900: e7 80 00 1f  	jalr	496(ra)
80219904: 23 38 a4 fc  	sd	a0, -48(s0)
80219908: 13 05 f4 f8  	addi	a0, s0, -113
8021990c: 93 05 a0 0a  	addi	a1, zero, 170
80219910: 13 06 10 04  	addi	a2, zero, 65
;     var buf: [1 + math.max(value_info.bits, 1)]u8 = undefined;
80219914: 23 34 c4 f4  	sd	a2, -184(s0)
80219918: 97 30 00 00  	auipc	ra, 3
8021991c: e7 80 80 3f  	jalr	1016(ra)
;     var a: MinInt = abs_value;
80219920: 03 35 84 f4  	ld	a0, -184(s0)
80219924: 83 35 04 fd  	ld	a1, -48(s0)
80219928: 23 30 b4 f8  	sd	a1, -128(s0)
;     var index: usize = buf.len;
8021992c: 23 3c a4 f6  	sd	a0, -136(s0)
;     while (true) {
80219930: 09 a0        	j	0x80219932 <std.fmt.formatInt+0x7e>
80219932: 09 a0        	j	0x80219934 <std.fmt.formatInt+0x80>
;         const digit = a % base;
80219934: 03 35 04 f8  	ld	a0, -128(s0)
80219938: 23 30 a4 f2  	sd	a0, -224(s0)
8021993c: 03 45 74 f5  	lbu	a0, -169(s0)
80219940: 23 34 a4 f2  	sd	a0, -216(s0)
80219944: 81 45        	mv	a1, zero
80219946: 63 0e b5 04  	beq	a0, a1, 0x802199a2 <.LBB402_24>
8021994a: 1d a8        	j	0x80219980 <std.fmt.formatInt+0xcc>
;         if (a == 0) break;
8021994c: 19 a0        	j	0x80219952 <std.fmt.formatInt+0x9e>
8021994e: 09 a0        	j	0x80219950 <std.fmt.formatInt+0x9c>
;     while (true) {
80219950: cd b7        	j	0x80219932 <std.fmt.formatInt+0x7e>
;     return formatBuf(buf[index..], options, writer);
80219952: 03 35 84 f7  	ld	a0, -136(s0)
80219956: 23 3c a4 f0  	sd	a0, -232(s0)
8021995a: 93 05 20 04  	addi	a1, zero, 66
8021995e: 63 68 b5 12  	bltu	a0, a1, 0x80219a8e <.LBB402_29+0x12>
80219962: 29 aa        	j	0x80219a7c <.LBB402_29>
80219964: 03 35 04 f4  	ld	a0, -192(s0)
80219968: 97 70 fe ff  	auipc	ra, 1048551
8021996c: e7 80 a0 f3  	jalr	-198(ra)
80219970: 11 a0        	j	0x80219974 <std.fmt.formatInt+0xc0>
80219972: 09 a0        	j	0x80219974 <std.fmt.formatInt+0xc0>
80219974: 03 15 e4 fe  	lh	a0, -18(s0)
80219978: 52 64        	ld	s0, 272(sp)
8021997a: f2 60        	ld	ra, 280(sp)
8021997c: 15 61        	addi	sp, sp, 288
8021997e: 82 80        	ret
;         const digit = a % base;
80219980: 03 35 04 f2  	ld	a0, -224(s0)
80219984: 83 35 84 f2  	ld	a1, -216(s0)
80219988: 33 75 b5 02  	remu	a0, a0, a1
8021998c: 23 38 a4 f6  	sd	a0, -144(s0)
;         index -= 1;
80219990: 03 35 84 f7  	ld	a0, -136(s0)
80219994: 93 05 f5 ff  	addi	a1, a0, -1
80219998: 23 38 b4 f0  	sd	a1, -240(s0)
8021999c: 63 6c b5 00  	bltu	a0, a1, 0x802199b4 <.LBB402_25>
802199a0: 1d a0        	j	0x802199c6 <.LBB402_25+0x12>

00000000802199a2 <.LBB402_24>:
;         const digit = a % base;
802199a2: 17 45 00 00  	auipc	a0, 4
802199a6: 13 05 e5 93  	addi	a0, a0, -1730
802199aa: 81 45        	mv	a1, zero
802199ac: 97 60 fe ff  	auipc	ra, 1048550
802199b0: e7 80 40 6f  	jalr	1780(ra)

00000000802199b4 <.LBB402_25>:
;         index -= 1;
802199b4: 17 45 00 00  	auipc	a0, 4
802199b8: 13 05 c5 ac  	addi	a0, a0, -1332
802199bc: 81 45        	mv	a1, zero
802199be: 97 60 fe ff  	auipc	ra, 1048550
802199c2: e7 80 20 6e  	jalr	1762(ra)
802199c6: 03 35 04 f1  	ld	a0, -240(s0)
802199ca: 23 3c a4 f6  	sd	a0, -136(s0)
;         buf[index] = digitToChar(@intCast(u8, digit), case);
802199ce: aa 85        	mv	a1, a0
802199d0: 23 34 b4 f0  	sd	a1, -248(s0)
802199d4: 93 05 10 04  	addi	a1, zero, 65
802199d8: 63 6c b5 00  	bltu	a0, a1, 0x802199f0 <.LBB402_26+0x12>
802199dc: 09 a0        	j	0x802199de <.LBB402_26>

00000000802199de <.LBB402_26>:
802199de: 17 45 00 00  	auipc	a0, 4
802199e2: 13 05 25 92  	addi	a0, a0, -1758
802199e6: 81 45        	mv	a1, zero
802199e8: 97 60 fe ff  	auipc	ra, 1048550
802199ec: e7 80 80 6b  	jalr	1720(ra)
802199f0: 83 35 84 f0  	ld	a1, -248(s0)
802199f4: 13 05 f4 f8  	addi	a0, s0, -113
;         buf[index] = digitToChar(@intCast(u8, digit), case);
802199f8: 2e 95        	add	a0, a0, a1
802199fa: 23 3c a4 ee  	sd	a0, -264(s0)
802199fe: 03 35 04 f7  	ld	a0, -144(s0)
80219a02: 23 30 a4 f0  	sd	a0, -256(s0)
80219a06: 93 75 f5 0f  	andi	a1, a0, 255
80219a0a: 63 1b b5 02  	bne	a0, a1, 0x80219a40 <.LBB402_27>
80219a0e: 09 a0        	j	0x80219a10 <.LBB402_26+0x32>
80219a10: 03 35 04 f0  	ld	a0, -256(s0)
80219a14: 83 05 64 f5  	lb	a1, -170(s0)
80219a18: 97 00 00 00  	auipc	ra, 0
80219a1c: e7 80 c0 0e  	jalr	236(ra)
80219a20: 83 35 84 ef  	ld	a1, -264(s0)
80219a24: 23 80 a5 00  	sb	a0, 0(a1)
;         a /= base;
80219a28: 03 35 04 f8  	ld	a0, -128(s0)
80219a2c: 23 34 a4 ee  	sd	a0, -280(s0)
80219a30: 03 45 74 f5  	lbu	a0, -169(s0)
80219a34: 23 38 a4 ee  	sd	a0, -272(s0)
80219a38: 81 45        	mv	a1, zero
80219a3a: 63 0c b5 00  	beq	a0, a1, 0x80219a52 <.LBB402_28>
80219a3e: 1d a0        	j	0x80219a64 <.LBB402_28+0x12>

0000000080219a40 <.LBB402_27>:
;         buf[index] = digitToChar(@intCast(u8, digit), case);
80219a40: 17 45 00 00  	auipc	a0, 4
80219a44: 13 05 05 8b  	addi	a0, a0, -1872
80219a48: 81 45        	mv	a1, zero
80219a4a: 97 60 fe ff  	auipc	ra, 1048550
80219a4e: e7 80 60 65  	jalr	1622(ra)

0000000080219a52 <.LBB402_28>:
;         a /= base;
80219a52: 17 45 00 00  	auipc	a0, 4
80219a56: 13 05 e5 87  	addi	a0, a0, -1922
80219a5a: 81 45        	mv	a1, zero
80219a5c: 97 60 fe ff  	auipc	ra, 1048550
80219a60: e7 80 40 64  	jalr	1604(ra)
80219a64: 03 35 84 ee  	ld	a0, -280(s0)
80219a68: 83 35 04 ef  	ld	a1, -272(s0)
80219a6c: 33 55 b5 02  	divu	a0, a0, a1
80219a70: 23 30 a4 f8  	sd	a0, -128(s0)
80219a74: 81 45        	mv	a1, zero
;         if (a == 0) break;
80219a76: e3 0b b5 ec  	beq	a0, a1, 0x8021994c <std.fmt.formatInt+0x98>
80219a7a: d1 bd        	j	0x8021994e <std.fmt.formatInt+0x9a>

0000000080219a7c <.LBB402_29>:
;     return formatBuf(buf[index..], options, writer);
80219a7c: 17 45 00 00  	auipc	a0, 4
80219a80: 13 05 45 88  	addi	a0, a0, -1916
80219a84: 81 45        	mv	a1, zero
80219a86: 97 60 fe ff  	auipc	ra, 1048550
80219a8a: e7 80 a0 61  	jalr	1562(ra)
80219a8e: 81 45        	mv	a1, zero
80219a90: 05 45        	addi	a0, zero, 1
;     return formatBuf(buf[index..], options, writer);
80219a92: 63 1c b5 00  	bne	a0, a1, 0x80219aaa <.LBB402_30+0x12>
80219a96: 09 a0        	j	0x80219a98 <.LBB402_30>

0000000080219a98 <.LBB402_30>:
80219a98: 17 45 00 00  	auipc	a0, 4
80219a9c: 13 05 85 86  	addi	a0, a0, -1944
80219aa0: 81 45        	mv	a1, zero
80219aa2: 97 60 fe ff  	auipc	ra, 1048550
80219aa6: e7 80 e0 5f  	jalr	1534(ra)
80219aaa: 03 36 04 f3  	ld	a2, -208(s0)
80219aae: 03 35 04 f4  	ld	a0, -192(s0)
80219ab2: 03 37 84 f1  	ld	a4, -232(s0)
80219ab6: 93 05 f4 f8  	addi	a1, s0, -113
;     return formatBuf(buf[index..], options, writer);
80219aba: b3 86 e5 00  	add	a3, a1, a4
80219abe: 93 05 10 04  	addi	a1, zero, 65
80219ac2: 99 8d        	sub	a1, a1, a4
80219ac4: 23 30 d4 f6  	sd	a3, -160(s0)
80219ac8: 23 34 b4 f6  	sd	a1, -152(s0)
80219acc: 93 05 04 f6  	addi	a1, s0, -160
80219ad0: 97 80 fe ff  	auipc	ra, 1048552
80219ad4: e7 80 40 99  	jalr	-1644(ra)
80219ad8: aa 85        	mv	a1, a0
80219ada: 41 65        	lui	a0, 16
80219adc: 7d 35        	addiw	a0, a0, -1
80219ade: 6d 8d        	and	a0, a0, a1
80219ae0: 23 17 b4 fe  	sh	a1, -18(s0)
80219ae4: 81 45        	mv	a1, zero
80219ae6: e3 1f b5 e6  	bne	a0, a1, 0x80219964 <std.fmt.formatInt+0xb0>
80219aea: 61 b5        	j	0x80219972 <std.fmt.formatInt+0xbe>

0000000080219aec <std.math.absCast>:
; pub fn absCast(x: anytype) switch (@typeInfo(@TypeOf(x))) {
80219aec: 01 11        	addi	sp, sp, -32
80219aee: 06 ec        	sd	ra, 24(sp)
80219af0: 22 e8        	sd	s0, 16(sp)
80219af2: 00 10        	addi	s0, sp, 32
80219af4: 23 30 a4 fe  	sd	a0, -32(s0)
;                 return @intCast(Uint, x);
80219af8: 23 34 a4 fe  	sd	a0, -24(s0)
80219afc: 42 64        	ld	s0, 16(sp)
80219afe: e2 60        	ld	ra, 24(sp)
80219b00: 05 61        	addi	sp, sp, 32
80219b02: 82 80        	ret

0000000080219b04 <std.fmt.digitToChar>:
; pub fn digitToChar(digit: u8, case: Case) u8 {
80219b04: 5d 71        	addi	sp, sp, -80
80219b06: 86 e4        	sd	ra, 72(sp)
80219b08: a2 e0        	sd	s0, 64(sp)
80219b0a: 80 08        	addi	s0, sp, 80
80219b0c: a3 06 a4 fe  	sb	a0, -19(s0)
80219b10: 85 89        	andi	a1, a1, 1
80219b12: 23 06 b4 fe  	sb	a1, -20(s0)
;     return switch (digit) {
80219b16: 93 75 f5 0f  	andi	a1, a0, 255
80219b1a: 23 30 b4 fe  	sd	a1, -32(s0)
80219b1e: 25 45        	addi	a0, zero, 9
;         0...9 => digit + '0',
80219b20: 63 6e b5 00  	bltu	a0, a1, 0x80219b3c <std.fmt.digitToChar+0x38>
80219b24: 09 a0        	j	0x80219b26 <std.fmt.digitToChar+0x22>
80219b26: 03 45 d4 fe  	lbu	a0, -19(s0)
80219b2a: 93 05 05 03  	addi	a1, a0, 48
80219b2e: 23 3c b4 fc  	sd	a1, -40(s0)
80219b32: 13 f5 f5 0f  	andi	a0, a1, 255
80219b36: 63 13 b5 08  	bne	a0, a1, 0x80219bbc <.LBB404_17>
80219b3a: 51 a8        	j	0x80219bce <.LBB404_17+0x12>
;         10...35 => digit + ((if (case == .upper) @as(u8, 'A') else @as(u8, 'a')) - 10),
80219b3c: 03 36 04 fe  	ld	a2, -32(s0)
80219b40: 13 35 a6 00  	sltiu	a0, a2, 10
80219b44: 93 05 30 02  	addi	a1, zero, 35
80219b48: b3 b5 c5 00  	sltu	a1, a1, a2
80219b4c: 4d 8d        	or	a0, a0, a1
80219b4e: 81 45        	mv	a1, zero
80219b50: 63 16 b5 04  	bne	a0, a1, 0x80219b9c <std.fmt.digitToChar+0x98>
80219b54: 09 a0        	j	0x80219b56 <std.fmt.digitToChar+0x52>
80219b56: 03 45 d4 fe  	lbu	a0, -19(s0)
80219b5a: 23 38 a4 fc  	sd	a0, -48(s0)
80219b5e: 03 45 c4 fe  	lbu	a0, -20(s0)
80219b62: 81 45        	mv	a1, zero
80219b64: 63 0a b5 00  	beq	a0, a1, 0x80219b78 <std.fmt.digitToChar+0x74>
80219b68: 09 a0        	j	0x80219b6a <std.fmt.digitToChar+0x66>
80219b6a: 13 05 10 04  	addi	a0, zero, 65
;         10...35 => digit + ((if (case == .upper) @as(u8, 'A') else @as(u8, 'a')) - 10),
80219b6e: 23 07 a4 fe  	sb	a0, -18(s0)
80219b72: 23 34 a4 fc  	sd	a0, -56(s0)
80219b76: 01 a8        	j	0x80219b86 <std.fmt.digitToChar+0x82>
80219b78: 13 05 10 06  	addi	a0, zero, 97
;         10...35 => digit + ((if (case == .upper) @as(u8, 'A') else @as(u8, 'a')) - 10),
80219b7c: 23 07 a4 fe  	sb	a0, -18(s0)
80219b80: 23 34 a4 fc  	sd	a0, -56(s0)
80219b84: 09 a0        	j	0x80219b86 <std.fmt.digitToChar+0x82>
80219b86: 03 35 84 fc  	ld	a0, -56(s0)
80219b8a: 93 05 65 ff  	addi	a1, a0, -10
80219b8e: 23 30 b4 fc  	sd	a1, -64(s0)
80219b92: 13 f5 f5 0f  	andi	a0, a1, 255
80219b96: 63 11 b5 04  	bne	a0, a1, 0x80219bd8 <.LBB404_18>
80219b9a: 81 a8        	j	0x80219bea <.LBB404_18+0x12>
;     return switch (digit) {
80219b9c: 09 a0        	j	0x80219b9e <.LBB404_16>

0000000080219b9e <.LBB404_16>:
;         else => unreachable,
80219b9e: 17 45 00 00  	auipc	a0, 4
80219ba2: 13 05 25 8f  	addi	a0, a0, -1806
80219ba6: 81 45        	mv	a1, zero
80219ba8: 97 60 fe ff  	auipc	ra, 1048550
80219bac: e7 80 80 4f  	jalr	1272(ra)
;     return switch (digit) {
80219bb0: 03 05 f4 fe  	lb	a0, -17(s0)
80219bb4: 06 64        	ld	s0, 64(sp)
80219bb6: a6 60        	ld	ra, 72(sp)
80219bb8: 61 61        	addi	sp, sp, 80
80219bba: 82 80        	ret

0000000080219bbc <.LBB404_17>:
;         0...9 => digit + '0',
80219bbc: 17 45 00 00  	auipc	a0, 4
80219bc0: 13 05 45 8c  	addi	a0, a0, -1852
80219bc4: 81 45        	mv	a1, zero
80219bc6: 97 60 fe ff  	auipc	ra, 1048550
80219bca: e7 80 a0 4d  	jalr	1242(ra)
80219bce: 03 35 84 fd  	ld	a0, -40(s0)
80219bd2: a3 07 a4 fe  	sb	a0, -17(s0)
;     return switch (digit) {
80219bd6: e9 bf        	j	0x80219bb0 <.LBB404_16+0x12>

0000000080219bd8 <.LBB404_18>:
;         10...35 => digit + ((if (case == .upper) @as(u8, 'A') else @as(u8, 'a')) - 10),
80219bd8: 17 45 00 00  	auipc	a0, 4
80219bdc: 13 05 85 8a  	addi	a0, a0, -1880
80219be0: 81 45        	mv	a1, zero
80219be2: 97 60 fe ff  	auipc	ra, 1048550
80219be6: e7 80 e0 4b  	jalr	1214(ra)
80219bea: 03 35 04 fd  	ld	a0, -48(s0)
80219bee: 83 35 04 fc  	ld	a1, -64(s0)
80219bf2: 93 f5 f5 0f  	andi	a1, a1, 255
80219bf6: aa 95        	add	a1, a1, a0
80219bf8: 23 3c b4 fa  	sd	a1, -72(s0)
80219bfc: 13 f5 f5 0f  	andi	a0, a1, 255
80219c00: 63 0c b5 00  	beq	a0, a1, 0x80219c18 <.LBB404_19+0x12>
80219c04: 09 a0        	j	0x80219c06 <.LBB404_19>

0000000080219c06 <.LBB404_19>:
80219c06: 17 45 00 00  	auipc	a0, 4
80219c0a: 13 05 a5 87  	addi	a0, a0, -1926
80219c0e: 81 45        	mv	a1, zero
80219c10: 97 60 fe ff  	auipc	ra, 1048550
80219c14: e7 80 00 49  	jalr	1168(ra)
80219c18: 03 35 84 fb  	ld	a0, -72(s0)
80219c1c: a3 07 a4 fe  	sb	a0, -17(s0)
;     return switch (digit) {
80219c20: 41 bf        	j	0x80219bb0 <.LBB404_16+0x12>

0000000080219c22 <std.fmt.formatIntValue.323>:
; pub fn formatIntValue(
80219c22: 59 71        	addi	sp, sp, -112
80219c24: 86 f4        	sd	ra, 104(sp)
80219c26: a2 f0        	sd	s0, 96(sp)
80219c28: 80 18        	addi	s0, sp, 112
80219c2a: 32 87        	mv	a4, a2
80219c2c: 23 3c a4 f8  	sd	a0, -104(s0)
80219c30: 23 34 b4 fa  	sd	a1, -88(s0)
;     } else value;
80219c34: 23 30 b4 fe  	sd	a1, -32(s0)
;     return formatInt(int_value, radix, case, options, writer);
80219c38: 23 3c b4 fc  	sd	a1, -40(s0)
80219c3c: 10 63        	ld	a2, 0(a4)
80219c3e: 23 38 c4 fa  	sd	a2, -80(s0)
80219c42: 10 67        	ld	a2, 8(a4)
80219c44: 23 3c c4 fa  	sd	a2, -72(s0)
80219c48: 10 6b        	ld	a2, 16(a4)
80219c4a: 23 30 c4 fc  	sd	a2, -64(s0)
80219c4e: 10 6f        	ld	a2, 24(a4)
80219c50: 23 34 c4 fc  	sd	a2, -56(s0)
80219c54: 10 73        	ld	a2, 32(a4)
80219c56: 23 38 c4 fc  	sd	a2, -48(s0)
80219c5a: 41 46        	addi	a2, zero, 16
80219c5c: 81 46        	mv	a3, zero
80219c5e: 23 30 d4 fa  	sd	a3, -96(s0)
80219c62: 97 00 00 00  	auipc	ra, 0
80219c66: e7 80 20 c5  	jalr	-942(ra)
80219c6a: 83 35 04 fa  	ld	a1, -96(s0)
80219c6e: 2a 86        	mv	a2, a0
80219c70: 41 65        	lui	a0, 16
80219c72: 7d 35        	addiw	a0, a0, -1
80219c74: 71 8d        	and	a0, a0, a2
80219c76: 23 17 c4 fe  	sh	a2, -18(s0)
80219c7a: 63 0a b5 00  	beq	a0, a1, 0x80219c8e <std.fmt.formatIntValue.323+0x6c>
80219c7e: 09 a0        	j	0x80219c80 <std.fmt.formatIntValue.323+0x5e>
80219c80: 03 35 84 f9  	ld	a0, -104(s0)
80219c84: 97 70 fe ff  	auipc	ra, 1048551
80219c88: e7 80 e0 c1  	jalr	-994(ra)
80219c8c: 11 a0        	j	0x80219c90 <std.fmt.formatIntValue.323+0x6e>
80219c8e: 09 a0        	j	0x80219c90 <std.fmt.formatIntValue.323+0x6e>
80219c90: 03 15 e4 fe  	lh	a0, -18(s0)
80219c94: 06 74        	ld	s0, 96(sp)
80219c96: a6 70        	ld	ra, 104(sp)
80219c98: 65 61        	addi	sp, sp, 112
80219c9a: 82 80        	ret

0000000080219c9c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.324>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
80219c9c: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
80219c9e: 06 ec        	sd	ra, 24(sp)
80219ca0: 22 e8        	sd	s0, 16(sp)
80219ca2: 00 10        	addi	s0, sp, 32
80219ca4: 23 30 a4 fe  	sd	a0, -32(s0)
80219ca8: 90 41        	lw	a2, 0(a1)
80219caa: 23 24 c4 fe  	sw	a2, -24(s0)
80219cae: 97 20 00 00  	auipc	ra, 2
80219cb2: e7 80 e0 be  	jalr	-1042(ra)
80219cb6: aa 85        	mv	a1, a0
80219cb8: 41 65        	lui	a0, 16
80219cba: 7d 35        	addiw	a0, a0, -1
80219cbc: 6d 8d        	and	a0, a0, a1
80219cbe: 23 17 b4 fe  	sh	a1, -18(s0)
80219cc2: 81 45        	mv	a1, zero
80219cc4: 63 0a b5 00  	beq	a0, a1, 0x80219cd8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.324+0x3c>
80219cc8: 09 a0        	j	0x80219cca <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.324+0x2e>
80219cca: 03 35 04 fe  	ld	a0, -32(s0)
80219cce: 97 70 fe ff  	auipc	ra, 1048551
80219cd2: e7 80 40 bd  	jalr	-1068(ra)
80219cd6: 11 a0        	j	0x80219cda <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.324+0x3e>
80219cd8: 09 a0        	j	0x80219cda <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.324+0x3e>
80219cda: 03 15 e4 fe  	lh	a0, -18(s0)
80219cde: 42 64        	ld	s0, 16(sp)
80219ce0: e2 60        	ld	ra, 24(sp)
80219ce2: 05 61        	addi	sp, sp, 32
80219ce4: 82 80        	ret

0000000080219ce6 <std.fmt.formatIntValue.325>:
; pub fn formatIntValue(
80219ce6: 1d 71        	addi	sp, sp, -96
80219ce8: 86 ec        	sd	ra, 88(sp)
80219cea: a2 e8        	sd	s0, 80(sp)
80219cec: 80 10        	addi	s0, sp, 96
80219cee: 32 87        	mv	a4, a2
80219cf0: 23 30 a4 fa  	sd	a0, -96(s0)
80219cf4: 23 2a b4 fa  	sw	a1, -76(s0)
;     } else value;
80219cf8: 23 24 b4 fe  	sw	a1, -24(s0)
;     return formatInt(int_value, radix, case, options, writer);
80219cfc: 23 22 b4 fe  	sw	a1, -28(s0)
80219d00: 10 63        	ld	a2, 0(a4)
80219d02: 23 3c c4 fa  	sd	a2, -72(s0)
80219d06: 10 67        	ld	a2, 8(a4)
80219d08: 23 30 c4 fc  	sd	a2, -64(s0)
80219d0c: 10 6b        	ld	a2, 16(a4)
80219d0e: 23 34 c4 fc  	sd	a2, -56(s0)
80219d12: 10 6f        	ld	a2, 24(a4)
80219d14: 23 38 c4 fc  	sd	a2, -48(s0)
80219d18: 10 73        	ld	a2, 32(a4)
80219d1a: 23 3c c4 fc  	sd	a2, -40(s0)
80219d1e: 29 46        	addi	a2, zero, 10
80219d20: 81 46        	mv	a3, zero
80219d22: 23 34 d4 fa  	sd	a3, -88(s0)
80219d26: 97 00 00 00  	auipc	ra, 0
80219d2a: e7 80 a0 03  	jalr	58(ra)
80219d2e: 83 35 84 fa  	ld	a1, -88(s0)
80219d32: 2a 86        	mv	a2, a0
80219d34: 41 65        	lui	a0, 16
80219d36: 7d 35        	addiw	a0, a0, -1
80219d38: 71 8d        	and	a0, a0, a2
80219d3a: 23 17 c4 fe  	sh	a2, -18(s0)
80219d3e: 63 0a b5 00  	beq	a0, a1, 0x80219d52 <std.fmt.formatIntValue.325+0x6c>
80219d42: 09 a0        	j	0x80219d44 <std.fmt.formatIntValue.325+0x5e>
80219d44: 03 35 04 fa  	ld	a0, -96(s0)
80219d48: 97 70 fe ff  	auipc	ra, 1048551
80219d4c: e7 80 a0 b5  	jalr	-1190(ra)
80219d50: 11 a0        	j	0x80219d54 <std.fmt.formatIntValue.325+0x6e>
80219d52: 09 a0        	j	0x80219d54 <std.fmt.formatIntValue.325+0x6e>
80219d54: 03 15 e4 fe  	lh	a0, -18(s0)
80219d58: 46 64        	ld	s0, 80(sp)
80219d5a: e6 60        	ld	ra, 88(sp)
80219d5c: 25 61        	addi	sp, sp, 96
80219d5e: 82 80        	ret

0000000080219d60 <std.fmt.formatInt.326>:
; pub fn formatInt(
80219d60: 15 71        	addi	sp, sp, -224
;     options: FormatOptions,
80219d62: 86 ed        	sd	ra, 216(sp)
80219d64: a2 e9        	sd	s0, 208(sp)
80219d66: 80 11        	addi	s0, sp, 224
80219d68: 23 38 e4 f6  	sd	a4, -144(s0)
80219d6c: 23 3c b4 f6  	sd	a1, -136(s0)
80219d70: aa 85        	mv	a1, a0
80219d72: 03 35 84 f7  	ld	a0, -136(s0)
80219d76: 23 30 b4 f8  	sd	a1, -128(s0)
80219d7a: 93 75 f6 0f  	andi	a1, a2, 255
80219d7e: 23 26 a4 f8  	sw	a0, -116(s0)
80219d82: a3 05 c4 f8  	sb	a2, -117(s0)
80219d86: 13 f5 16 00  	andi	a0, a3, 1
80219d8a: 23 05 a4 f8  	sb	a0, -118(s0)
80219d8e: 05 45        	addi	a0, zero, 1
;     assert(base >= 2);
80219d90: 33 35 b5 00  	sltu	a0, a0, a1
80219d94: 97 60 fe ff  	auipc	ra, 1048550
80219d98: e7 80 60 3c  	jalr	966(ra)
;     } else value;
80219d9c: 03 25 c4 f8  	lw	a0, -116(s0)
80219da0: 23 24 a4 fe  	sw	a0, -24(s0)
;     const abs_value = math.absCast(int_value);
80219da4: 23 22 a4 fe  	sw	a0, -28(s0)
80219da8: 97 00 00 00  	auipc	ra, 0
80219dac: e7 80 60 20  	jalr	518(ra)
80219db0: 23 20 a4 fe  	sw	a0, -32(s0)
80219db4: b7 b5 aa fa  	lui	a1, 1026731
80219db8: 9b 85 b5 aa  	addiw	a1, a1, -1365
80219dbc: b2 05        	slli	a1, a1, 12
80219dbe: 93 85 b5 aa  	addi	a1, a1, -1365
80219dc2: b2 05        	slli	a1, a1, 12
80219dc4: 93 85 b5 aa  	addi	a1, a1, -1365
80219dc8: b2 05        	slli	a1, a1, 12
80219dca: 93 85 a5 aa  	addi	a1, a1, -1366
;     var buf: [1 + math.max(value_info.bits, 1)]u8 = undefined;
80219dce: 23 3c b4 fa  	sd	a1, -72(s0)
80219dd2: 23 30 b4 fc  	sd	a1, -64(s0)
80219dd6: 23 34 b4 fc  	sd	a1, -56(s0)
80219dda: 23 38 b4 fc  	sd	a1, -48(s0)
80219dde: 93 05 a0 fa  	addi	a1, zero, -86
80219de2: 23 0c b4 fc  	sb	a1, -40(s0)
;     var a: MinInt = abs_value;
80219de6: 23 2a a4 fa  	sw	a0, -76(s0)
80219dea: 13 05 10 02  	addi	a0, zero, 33
;     var index: usize = buf.len;
80219dee: 23 34 a4 fa  	sd	a0, -88(s0)
;     while (true) {
80219df2: 09 a0        	j	0x80219df4 <std.fmt.formatInt.326+0x94>
80219df4: 09 a0        	j	0x80219df6 <std.fmt.formatInt.326+0x96>
;         const digit = a % base;
80219df6: 03 65 44 fb  	lwu	a0, -76(s0)
80219dfa: 23 30 a4 f6  	sd	a0, -160(s0)
80219dfe: 03 45 b4 f8  	lbu	a0, -117(s0)
80219e02: 23 34 a4 f6  	sd	a0, -152(s0)
80219e06: 81 45        	mv	a1, zero
80219e08: 63 0e b5 04  	beq	a0, a1, 0x80219e64 <.LBB408_24>
80219e0c: 1d a8        	j	0x80219e42 <std.fmt.formatInt.326+0xe2>
;         if (a == 0) break;
80219e0e: 19 a0        	j	0x80219e14 <std.fmt.formatInt.326+0xb4>
80219e10: 09 a0        	j	0x80219e12 <std.fmt.formatInt.326+0xb2>
;     while (true) {
80219e12: cd b7        	j	0x80219df4 <std.fmt.formatInt.326+0x94>
;     return formatBuf(buf[index..], options, writer);
80219e14: 03 35 84 fa  	ld	a0, -88(s0)
80219e18: 23 3c a4 f4  	sd	a0, -168(s0)
80219e1c: 93 05 20 02  	addi	a1, zero, 34
80219e20: 63 68 b5 12  	bltu	a0, a1, 0x80219f50 <.LBB408_29+0x12>
80219e24: 29 aa        	j	0x80219f3e <.LBB408_29>
80219e26: 03 35 04 f8  	ld	a0, -128(s0)
80219e2a: 97 70 fe ff  	auipc	ra, 1048551
80219e2e: e7 80 80 a7  	jalr	-1416(ra)
80219e32: 11 a0        	j	0x80219e36 <std.fmt.formatInt.326+0xd6>
80219e34: 09 a0        	j	0x80219e36 <std.fmt.formatInt.326+0xd6>
80219e36: 03 15 e4 fe  	lh	a0, -18(s0)
80219e3a: 4e 64        	ld	s0, 208(sp)
80219e3c: ee 60        	ld	ra, 216(sp)
80219e3e: 2d 61        	addi	sp, sp, 224
80219e40: 82 80        	ret
;         const digit = a % base;
80219e42: 03 35 04 f6  	ld	a0, -160(s0)
80219e46: 83 35 84 f6  	ld	a1, -152(s0)
80219e4a: 3b 75 b5 02  	remuw	a0, a0, a1
80219e4e: 23 22 a4 fa  	sw	a0, -92(s0)
;         index -= 1;
80219e52: 03 35 84 fa  	ld	a0, -88(s0)
80219e56: 93 05 f5 ff  	addi	a1, a0, -1
80219e5a: 23 38 b4 f4  	sd	a1, -176(s0)
80219e5e: 63 6c b5 00  	bltu	a0, a1, 0x80219e76 <.LBB408_25>
80219e62: 1d a0        	j	0x80219e88 <.LBB408_25+0x12>

0000000080219e64 <.LBB408_24>:
;         const digit = a % base;
80219e64: 17 35 00 00  	auipc	a0, 3
80219e68: 13 05 c5 47  	addi	a0, a0, 1148
80219e6c: 81 45        	mv	a1, zero
80219e6e: 97 60 fe ff  	auipc	ra, 1048550
80219e72: e7 80 20 23  	jalr	562(ra)

0000000080219e76 <.LBB408_25>:
;         index -= 1;
80219e76: 17 35 00 00  	auipc	a0, 3
80219e7a: 13 05 a5 60  	addi	a0, a0, 1546
80219e7e: 81 45        	mv	a1, zero
80219e80: 97 60 fe ff  	auipc	ra, 1048550
80219e84: e7 80 00 22  	jalr	544(ra)
80219e88: 03 35 04 f5  	ld	a0, -176(s0)
80219e8c: 23 34 a4 fa  	sd	a0, -88(s0)
;         buf[index] = digitToChar(@intCast(u8, digit), case);
80219e90: aa 85        	mv	a1, a0
80219e92: 23 34 b4 f4  	sd	a1, -184(s0)
80219e96: 93 05 10 02  	addi	a1, zero, 33
80219e9a: 63 6c b5 00  	bltu	a0, a1, 0x80219eb2 <.LBB408_26+0x12>
80219e9e: 09 a0        	j	0x80219ea0 <.LBB408_26>

0000000080219ea0 <.LBB408_26>:
80219ea0: 17 35 00 00  	auipc	a0, 3
80219ea4: 13 05 05 46  	addi	a0, a0, 1120
80219ea8: 81 45        	mv	a1, zero
80219eaa: 97 60 fe ff  	auipc	ra, 1048550
80219eae: e7 80 60 1f  	jalr	502(ra)
80219eb2: 83 35 84 f4  	ld	a1, -184(s0)
80219eb6: 13 05 84 fb  	addi	a0, s0, -72
;         buf[index] = digitToChar(@intCast(u8, digit), case);
80219eba: 2e 95        	add	a0, a0, a1
80219ebc: 23 3c a4 f2  	sd	a0, -200(s0)
80219ec0: 03 25 44 fa  	lw	a0, -92(s0)
80219ec4: 23 30 a4 f4  	sd	a0, -192(s0)
80219ec8: 93 75 f5 0f  	andi	a1, a0, 255
80219ecc: 63 1b b5 02  	bne	a0, a1, 0x80219f02 <.LBB408_27>
80219ed0: 09 a0        	j	0x80219ed2 <.LBB408_26+0x32>
80219ed2: 03 35 04 f4  	ld	a0, -192(s0)
80219ed6: 83 05 a4 f8  	lb	a1, -118(s0)
80219eda: 97 00 00 00  	auipc	ra, 0
80219ede: e7 80 a0 c2  	jalr	-982(ra)
80219ee2: 83 35 84 f3  	ld	a1, -200(s0)
80219ee6: 23 80 a5 00  	sb	a0, 0(a1)
;         a /= base;
80219eea: 03 65 44 fb  	lwu	a0, -76(s0)
80219eee: 23 34 a4 f2  	sd	a0, -216(s0)
80219ef2: 03 45 b4 f8  	lbu	a0, -117(s0)
80219ef6: 23 38 a4 f2  	sd	a0, -208(s0)
80219efa: 81 45        	mv	a1, zero
80219efc: 63 0c b5 00  	beq	a0, a1, 0x80219f14 <.LBB408_28>
80219f00: 1d a0        	j	0x80219f26 <.LBB408_28+0x12>

0000000080219f02 <.LBB408_27>:
;         buf[index] = digitToChar(@intCast(u8, digit), case);
80219f02: 17 35 00 00  	auipc	a0, 3
80219f06: 13 05 e5 3e  	addi	a0, a0, 1006
80219f0a: 81 45        	mv	a1, zero
80219f0c: 97 60 fe ff  	auipc	ra, 1048550
80219f10: e7 80 40 19  	jalr	404(ra)

0000000080219f14 <.LBB408_28>:
;         a /= base;
80219f14: 17 35 00 00  	auipc	a0, 3
80219f18: 13 05 c5 3b  	addi	a0, a0, 956
80219f1c: 81 45        	mv	a1, zero
80219f1e: 97 60 fe ff  	auipc	ra, 1048550
80219f22: e7 80 20 18  	jalr	386(ra)
80219f26: 03 35 84 f2  	ld	a0, -216(s0)
80219f2a: 83 35 04 f3  	ld	a1, -208(s0)
80219f2e: 3b 55 b5 02  	divuw	a0, a0, a1
80219f32: 23 2a a4 fa  	sw	a0, -76(s0)
80219f36: 81 45        	mv	a1, zero
;         if (a == 0) break;
80219f38: e3 0b b5 ec  	beq	a0, a1, 0x80219e0e <std.fmt.formatInt.326+0xae>
80219f3c: d1 bd        	j	0x80219e10 <std.fmt.formatInt.326+0xb0>

0000000080219f3e <.LBB408_29>:
;     return formatBuf(buf[index..], options, writer);
80219f3e: 17 35 00 00  	auipc	a0, 3
80219f42: 13 05 25 3c  	addi	a0, a0, 962
80219f46: 81 45        	mv	a1, zero
80219f48: 97 60 fe ff  	auipc	ra, 1048550
80219f4c: e7 80 80 15  	jalr	344(ra)
80219f50: 81 45        	mv	a1, zero
80219f52: 05 45        	addi	a0, zero, 1
;     return formatBuf(buf[index..], options, writer);
80219f54: 63 1c b5 00  	bne	a0, a1, 0x80219f6c <.LBB408_30+0x12>
80219f58: 09 a0        	j	0x80219f5a <.LBB408_30>

0000000080219f5a <.LBB408_30>:
80219f5a: 17 35 00 00  	auipc	a0, 3
80219f5e: 13 05 65 3a  	addi	a0, a0, 934
80219f62: 81 45        	mv	a1, zero
80219f64: 97 60 fe ff  	auipc	ra, 1048550
80219f68: e7 80 c0 13  	jalr	316(ra)
80219f6c: 03 36 04 f7  	ld	a2, -144(s0)
80219f70: 03 35 04 f8  	ld	a0, -128(s0)
80219f74: 03 37 84 f5  	ld	a4, -168(s0)
80219f78: 93 05 84 fb  	addi	a1, s0, -72
;     return formatBuf(buf[index..], options, writer);
80219f7c: b3 86 e5 00  	add	a3, a1, a4
80219f80: 93 05 10 02  	addi	a1, zero, 33
80219f84: 99 8d        	sub	a1, a1, a4
80219f86: 23 38 d4 f8  	sd	a3, -112(s0)
80219f8a: 23 3c b4 f8  	sd	a1, -104(s0)
80219f8e: 93 05 04 f9  	addi	a1, s0, -112
80219f92: 97 70 fe ff  	auipc	ra, 1048551
80219f96: e7 80 20 4d  	jalr	1234(ra)
80219f9a: aa 85        	mv	a1, a0
80219f9c: 41 65        	lui	a0, 16
80219f9e: 7d 35        	addiw	a0, a0, -1
80219fa0: 6d 8d        	and	a0, a0, a1
80219fa2: 23 17 b4 fe  	sh	a1, -18(s0)
80219fa6: 81 45        	mv	a1, zero
80219fa8: e3 1f b5 e6  	bne	a0, a1, 0x80219e26 <std.fmt.formatInt.326+0xc6>
80219fac: 61 b5        	j	0x80219e34 <std.fmt.formatInt.326+0xd4>

0000000080219fae <std.math.absCast.327>:
; pub fn absCast(x: anytype) switch (@typeInfo(@TypeOf(x))) {
80219fae: 01 11        	addi	sp, sp, -32
80219fb0: 06 ec        	sd	ra, 24(sp)
80219fb2: 22 e8        	sd	s0, 16(sp)
80219fb4: 00 10        	addi	s0, sp, 32
80219fb6: 23 24 a4 fe  	sw	a0, -24(s0)
;                 return @intCast(Uint, x);
80219fba: 23 26 a4 fe  	sw	a0, -20(s0)
80219fbe: 42 64        	ld	s0, 16(sp)
80219fc0: e2 60        	ld	ra, 24(sp)
80219fc2: 05 61        	addi	sp, sp, 32
80219fc4: 82 80        	ret

0000000080219fc6 <std.fmt.format.328>:
; pub fn format(
80219fc6: 39 71        	addi	sp, sp, -64
;     args: anytype,
80219fc8: 06 fc        	sd	ra, 56(sp)
80219fca: 22 f8        	sd	s0, 48(sp)
80219fcc: 80 00        	addi	s0, sp, 64
80219fce: 23 30 b4 fc  	sd	a1, -64(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
80219fd2: 23 34 a4 fc  	sd	a0, -56(s0)

0000000080219fd6 <.LBB410_1>:
80219fd6: 97 75 00 00  	auipc	a1, 7
80219fda: 93 85 25 13  	addi	a1, a1, 306
80219fde: 97 70 fe ff  	auipc	ra, 1048551
80219fe2: e7 80 40 ad  	jalr	-1324(ra)
80219fe6: 83 35 04 fc  	ld	a1, -64(s0)
80219fea: 2a 86        	mv	a2, a0
80219fec: 03 35 84 fc  	ld	a0, -56(s0)
80219ff0: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
80219ff4: 90 61        	ld	a2, 0(a1)
80219ff6: 23 3c c4 fc  	sd	a2, -40(s0)
80219ffa: 90 65        	ld	a2, 8(a1)
80219ffc: 23 30 c4 fe  	sd	a2, -32(s0)

000000008021a000 <.LBB410_2>:
;         try formatType(
8021a000: 17 76 00 00  	auipc	a2, 7
8021a004: 13 06 86 17  	addi	a2, a2, 376
8021a008: 8d 46        	addi	a3, zero, 3
8021a00a: 97 70 fe ff  	auipc	ra, 1048551
8021a00e: e7 80 80 b8  	jalr	-1144(ra)
8021a012: aa 85        	mv	a1, a0
8021a014: 03 35 84 fc  	ld	a0, -56(s0)
8021a018: 23 1b b4 fc  	sh	a1, -42(s0)

000000008021a01c <.LBB410_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021a01c: 97 75 00 00  	auipc	a1, 7
8021a020: 93 85 45 18  	addi	a1, a1, 388
8021a024: 97 70 fe ff  	auipc	ra, 1048551
8021a028: e7 80 e0 a8  	jalr	-1394(ra)
8021a02c: 23 1a a4 fc  	sh	a0, -44(s0)
8021a030: 01 45        	mv	a0, zero
; ) !void {
8021a032: 23 17 a4 fe  	sh	a0, -18(s0)
8021a036: 42 74        	ld	s0, 48(sp)
8021a038: e2 70        	ld	ra, 56(sp)
8021a03a: 21 61        	addi	sp, sp, 64
8021a03c: 82 80        	ret

000000008021a03e <log.0.329>:
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
8021a03e: 4d 71        	addi	sp, sp, -336
8021a040: 86 e6        	sd	ra, 328(sp)
8021a042: a2 e2        	sd	s0, 320(sp)
8021a044: 80 0a        	addi	s0, sp, 336
8021a046: aa 85        	mv	a1, a0
8021a048: 01 45        	mv	a0, zero
8021a04a: 23 38 a4 ea  	sd	a0, -336(s0)
8021a04e: 23 3c a4 ec  	sd	a0, -296(s0)
8021a052: 13 05 04 ef  	addi	a0, s0, -272
8021a056: 23 30 a4 ee  	sd	a0, -288(s0)
8021a05a: 13 05 00 02  	addi	a0, zero, 32
8021a05e: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
8021a062: 88 61        	ld	a0, 0(a1)
8021a064: 23 34 a4 ec  	sd	a0, -312(s0)
8021a068: 88 65        	ld	a0, 8(a1)
8021a06a: 23 38 a4 ec  	sd	a0, -304(s0)
8021a06e: 13 05 84 ed  	addi	a0, s0, -296
8021a072: 97 20 00 00  	auipc	ra, 2
8021a076: e7 80 c0 89  	jalr	-1892(ra)
8021a07a: 83 35 04 eb  	ld	a1, -336(s0)
8021a07e: 23 13 a4 ec  	sh	a0, -314(s0)
8021a082: 41 66        	lui	a2, 16
8021a084: 7d 36        	addiw	a2, a2, -1
8021a086: 71 8d        	and	a0, a0, a2
8021a088: 23 3c a4 ea  	sd	a0, -328(s0)
8021a08c: 63 0b b5 00  	beq	a0, a1, 0x8021a0a2 <log.0.329+0x64>
8021a090: 09 a0        	j	0x8021a092 <log.0.329+0x54>
8021a092: 83 35 84 eb  	ld	a1, -328(s0)
8021a096: 13 05 84 ed  	addi	a0, s0, -296
8021a09a: 97 60 fe ff  	auipc	ra, 1048550
8021a09e: e7 80 40 55  	jalr	1364(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
8021a0a2: 16 64        	ld	s0, 320(sp)
8021a0a4: b6 60        	ld	ra, 328(sp)
8021a0a6: 71 61        	addi	sp, sp, 336
8021a0a8: 82 80        	ret

000000008021a0aa <std.fmt.format.330>:
; pub fn format(
8021a0aa: 39 71        	addi	sp, sp, -64
;             @field(args, fields_info[arg_to_print].name),
8021a0ac: 06 fc        	sd	ra, 56(sp)
8021a0ae: 22 f8        	sd	s0, 48(sp)
8021a0b0: 80 00        	addi	s0, sp, 64
8021a0b2: 23 34 a4 fc  	sd	a0, -56(s0)
8021a0b6: 90 65        	ld	a2, 8(a1)
8021a0b8: 23 30 c4 fe  	sd	a2, -32(s0)
8021a0bc: 90 61        	ld	a2, 0(a1)
8021a0be: 23 3c c4 fc  	sd	a2, -40(s0)

000000008021a0c2 <.LBB412_1>:
;         try formatType(
8021a0c2: 17 76 00 00  	auipc	a2, 7
8021a0c6: 13 06 e6 15  	addi	a2, a2, 350
8021a0ca: 8d 46        	addi	a3, zero, 3
8021a0cc: 97 70 fe ff  	auipc	ra, 1048551
8021a0d0: e7 80 60 ac  	jalr	-1338(ra)
8021a0d4: aa 85        	mv	a1, a0
8021a0d6: 03 35 84 fc  	ld	a0, -56(s0)
8021a0da: 23 1b b4 fc  	sh	a1, -42(s0)

000000008021a0de <.LBB412_2>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021a0de: 97 75 00 00  	auipc	a1, 7
8021a0e2: 93 85 a5 16  	addi	a1, a1, 362
8021a0e6: 97 70 fe ff  	auipc	ra, 1048551
8021a0ea: e7 80 c0 9c  	jalr	-1588(ra)
8021a0ee: 23 1a a4 fc  	sh	a0, -44(s0)
8021a0f2: 01 45        	mv	a0, zero
; ) !void {
8021a0f4: 23 17 a4 fe  	sh	a0, -18(s0)
8021a0f8: 42 74        	ld	s0, 48(sp)
8021a0fa: e2 70        	ld	ra, 56(sp)
8021a0fc: 21 61        	addi	sp, sp, 64
8021a0fe: 82 80        	ret

000000008021a100 <std.fmt.format.331>:
; pub fn format(
8021a100: 01 11        	addi	sp, sp, -32
;             @field(args, fields_info[arg_to_print].name),
8021a102: 06 ec        	sd	ra, 24(sp)
8021a104: 22 e8        	sd	s0, 16(sp)
8021a106: 00 10        	addi	s0, sp, 32
8021a108: 8c 41        	lw	a1, 0(a1)
8021a10a: 23 24 b4 fe  	sw	a1, -24(s0)

000000008021a10e <.LBB413_1>:
;         try formatType(
8021a10e: 17 76 00 00  	auipc	a2, 7
8021a112: 13 06 a6 1a  	addi	a2, a2, 426
8021a116: 8d 46        	addi	a3, zero, 3
8021a118: 97 e0 ff ff  	auipc	ra, 1048574
8021a11c: e7 80 c0 02  	jalr	44(ra)
8021a120: 23 13 a4 fe  	sh	a0, -26(s0)
8021a124: 01 45        	mv	a0, zero
; ) !void {
8021a126: 23 17 a4 fe  	sh	a0, -18(s0)
8021a12a: 42 64        	ld	s0, 16(sp)
8021a12c: e2 60        	ld	ra, 24(sp)
8021a12e: 05 61        	addi	sp, sp, 32
8021a130: 82 80        	ret

000000008021a132 <std.fmt.formatType.332>:
; pub fn formatType(
8021a132: 1d 71        	addi	sp, sp, -96
8021a134: 86 ec        	sd	ra, 88(sp)
8021a136: a2 e8        	sd	s0, 80(sp)
8021a138: 80 10        	addi	s0, sp, 96
8021a13a: 23 34 a4 fa  	sd	a0, -88(s0)
8021a13e: 23 2e b4 fa  	sw	a1, -68(s0)
8021a142: 23 38 d4 fa  	sd	a3, -80(s0)
;             return formatValue(value, actual_fmt, options, writer);
8021a146: 23 24 b4 fe  	sw	a1, -24(s0)
8021a14a: 14 62        	ld	a3, 0(a2)
8021a14c: 23 30 d4 fc  	sd	a3, -64(s0)
8021a150: 14 66        	ld	a3, 8(a2)
8021a152: 23 34 d4 fc  	sd	a3, -56(s0)
8021a156: 14 6a        	ld	a3, 16(a2)
8021a158: 23 38 d4 fc  	sd	a3, -48(s0)
8021a15c: 14 6e        	ld	a3, 24(a2)
8021a15e: 23 3c d4 fc  	sd	a3, -40(s0)
8021a162: 14 72        	ld	a3, 32(a2)
8021a164: 23 30 d4 fe  	sd	a3, -32(s0)
8021a168: 97 00 00 00  	auipc	ra, 0
8021a16c: e7 80 80 03  	jalr	56(ra)
8021a170: aa 85        	mv	a1, a0
8021a172: 41 65        	lui	a0, 16
8021a174: 7d 35        	addiw	a0, a0, -1
8021a176: 6d 8d        	and	a0, a0, a1
8021a178: 23 17 b4 fe  	sh	a1, -18(s0)
8021a17c: 81 45        	mv	a1, zero
8021a17e: 63 0a b5 00  	beq	a0, a1, 0x8021a192 <std.fmt.formatType.332+0x60>
8021a182: 09 a0        	j	0x8021a184 <std.fmt.formatType.332+0x52>
8021a184: 03 35 84 fa  	ld	a0, -88(s0)
8021a188: 97 60 fe ff  	auipc	ra, 1048550
8021a18c: e7 80 a0 71  	jalr	1818(ra)
8021a190: 11 a0        	j	0x8021a194 <std.fmt.formatType.332+0x62>
8021a192: 09 a0        	j	0x8021a194 <std.fmt.formatType.332+0x62>
8021a194: 03 15 e4 fe  	lh	a0, -18(s0)
8021a198: 46 64        	ld	s0, 80(sp)
8021a19a: e6 60        	ld	ra, 88(sp)
8021a19c: 25 61        	addi	sp, sp, 96
8021a19e: 82 80        	ret

000000008021a1a0 <std.fmt.formatValue.333>:
; fn formatValue(
8021a1a0: 5d 71        	addi	sp, sp, -80
8021a1a2: 86 e4        	sd	ra, 72(sp)
8021a1a4: a2 e0        	sd	s0, 64(sp)
8021a1a6: 80 08        	addi	s0, sp, 80
8021a1a8: 23 38 a4 fa  	sd	a0, -80(s0)
8021a1ac: 23 2e b4 fa  	sw	a1, -68(s0)
;         .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
8021a1b0: 23 24 b4 fe  	sw	a1, -24(s0)
8021a1b4: 14 62        	ld	a3, 0(a2)
8021a1b6: 23 30 d4 fc  	sd	a3, -64(s0)
8021a1ba: 14 66        	ld	a3, 8(a2)
8021a1bc: 23 34 d4 fc  	sd	a3, -56(s0)
8021a1c0: 14 6a        	ld	a3, 16(a2)
8021a1c2: 23 38 d4 fc  	sd	a3, -48(s0)
8021a1c6: 14 6e        	ld	a3, 24(a2)
8021a1c8: 23 3c d4 fc  	sd	a3, -40(s0)
8021a1cc: 14 72        	ld	a3, 32(a2)
8021a1ce: 23 30 d4 fe  	sd	a3, -32(s0)
8021a1d2: 97 10 00 00  	auipc	ra, 1
8021a1d6: e7 80 c0 78  	jalr	1932(ra)
8021a1da: aa 85        	mv	a1, a0
8021a1dc: 41 65        	lui	a0, 16
8021a1de: 7d 35        	addiw	a0, a0, -1
8021a1e0: 6d 8d        	and	a0, a0, a1
8021a1e2: 23 17 b4 fe  	sh	a1, -18(s0)
8021a1e6: 81 45        	mv	a1, zero
8021a1e8: 63 0a b5 00  	beq	a0, a1, 0x8021a1fc <std.fmt.formatValue.333+0x5c>
8021a1ec: 09 a0        	j	0x8021a1ee <std.fmt.formatValue.333+0x4e>
8021a1ee: 03 35 04 fb  	ld	a0, -80(s0)
8021a1f2: 97 60 fe ff  	auipc	ra, 1048550
8021a1f6: e7 80 00 6b  	jalr	1712(ra)
8021a1fa: 11 a0        	j	0x8021a1fe <std.fmt.formatValue.333+0x5e>
8021a1fc: 09 a0        	j	0x8021a1fe <std.fmt.formatValue.333+0x5e>
8021a1fe: 03 15 e4 fe  	lh	a0, -18(s0)
8021a202: 06 64        	ld	s0, 64(sp)
8021a204: a6 60        	ld	ra, 72(sp)
8021a206: 61 61        	addi	sp, sp, 80
8021a208: 82 80        	ret

000000008021a20a <std.fmt.format.334>:
; pub fn format(
8021a20a: 79 71        	addi	sp, sp, -48
;             @field(args, fields_info[arg_to_print].name),
8021a20c: 06 f4        	sd	ra, 40(sp)
8021a20e: 22 f0        	sd	s0, 32(sp)
8021a210: 00 18        	addi	s0, sp, 48
8021a212: 23 3c a4 fc  	sd	a0, -40(s0)
8021a216: 8c 41        	lw	a1, 0(a1)
8021a218: 23 24 b4 fe  	sw	a1, -24(s0)

000000008021a21c <.LBB416_1>:
;         try formatType(
8021a21c: 17 76 00 00  	auipc	a2, 7
8021a220: 13 06 46 12  	addi	a2, a2, 292
8021a224: 8d 46        	addi	a3, zero, 3
8021a226: 97 e0 ff ff  	auipc	ra, 1048574
8021a22a: e7 80 e0 f1  	jalr	-226(ra)
8021a22e: aa 85        	mv	a1, a0
8021a230: 03 35 84 fd  	ld	a0, -40(s0)
8021a234: 23 13 b4 fe  	sh	a1, -26(s0)

000000008021a238 <.LBB416_2>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021a238: 97 75 00 00  	auipc	a1, 7
8021a23c: 93 85 05 13  	addi	a1, a1, 304
8021a240: 97 70 fe ff  	auipc	ra, 1048551
8021a244: e7 80 20 87  	jalr	-1934(ra)
8021a248: 23 12 a4 fe  	sh	a0, -28(s0)
8021a24c: 01 45        	mv	a0, zero
; ) !void {
8021a24e: 23 17 a4 fe  	sh	a0, -18(s0)
8021a252: 02 74        	ld	s0, 32(sp)
8021a254: a2 70        	ld	ra, 40(sp)
8021a256: 45 61        	addi	sp, sp, 48
8021a258: 82 80        	ret

000000008021a25a <log.0.335>:
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
8021a25a: 4d 71        	addi	sp, sp, -336
8021a25c: 86 e6        	sd	ra, 328(sp)
8021a25e: a2 e2        	sd	s0, 320(sp)
8021a260: 80 0a        	addi	s0, sp, 336
8021a262: aa 85        	mv	a1, a0
8021a264: 01 45        	mv	a0, zero
8021a266: 23 3c a4 ea  	sd	a0, -328(s0)
8021a26a: 23 3c a4 ec  	sd	a0, -296(s0)
8021a26e: 13 05 04 ef  	addi	a0, s0, -272
8021a272: 23 30 a4 ee  	sd	a0, -288(s0)
8021a276: 13 05 00 02  	addi	a0, zero, 32
8021a27a: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
8021a27e: 88 41        	lw	a0, 0(a1)
8021a280: 23 28 a4 ec  	sw	a0, -304(s0)
8021a284: 13 05 84 ed  	addi	a0, s0, -296
8021a288: 97 10 00 00  	auipc	ra, 1
8021a28c: e7 80 00 75  	jalr	1872(ra)
8021a290: 83 35 84 eb  	ld	a1, -328(s0)
8021a294: 23 17 a4 ec  	sh	a0, -306(s0)
8021a298: 41 66        	lui	a2, 16
8021a29a: 7d 36        	addiw	a2, a2, -1
8021a29c: 71 8d        	and	a0, a0, a2
8021a29e: 23 30 a4 ec  	sd	a0, -320(s0)
8021a2a2: 63 0b b5 00  	beq	a0, a1, 0x8021a2b8 <log.0.335+0x5e>
8021a2a6: 09 a0        	j	0x8021a2a8 <log.0.335+0x4e>
8021a2a8: 83 35 04 ec  	ld	a1, -320(s0)
8021a2ac: 13 05 84 ed  	addi	a0, s0, -296
8021a2b0: 97 60 fe ff  	auipc	ra, 1048550
8021a2b4: e7 80 e0 33  	jalr	830(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
8021a2b8: 16 64        	ld	s0, 320(sp)
8021a2ba: b6 60        	ld	ra, 328(sp)
8021a2bc: 71 61        	addi	sp, sp, 336
8021a2be: 82 80        	ret

000000008021a2c0 <std.log.log.336>:
; fn log(
8021a2c0: 01 11        	addi	sp, sp, -32
;     args: anytype,
8021a2c2: 06 ec        	sd	ra, 24(sp)
8021a2c4: 22 e8        	sd	s0, 16(sp)
8021a2c6: 00 10        	addi	s0, sp, 32
8021a2c8: 23 30 a4 fe  	sd	a0, -32(s0)
8021a2cc: 0d 45        	addi	a0, zero, 3
;         break :blk level;
8021a2ce: a3 07 a4 fe  	sb	a0, -17(s0)
8021a2d2: 09 a0        	j	0x8021a2d4 <std.log.log.336+0x14>
;             root.log(message_level, scope, format, args);
8021a2d4: 03 35 04 fe  	ld	a0, -32(s0)
8021a2d8: 0c 41        	lw	a1, 0(a0)
8021a2da: 23 24 b4 fe  	sw	a1, -24(s0)
8021a2de: 97 10 00 00  	auipc	ra, 1
8021a2e2: e7 80 40 74  	jalr	1860(ra)
; ) void {
8021a2e6: 42 64        	ld	s0, 16(sp)
8021a2e8: e2 60        	ld	ra, 24(sp)
8021a2ea: 05 61        	addi	sp, sp, 32
8021a2ec: 82 80        	ret

000000008021a2ee <log.0.337>:
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
8021a2ee: 4d 71        	addi	sp, sp, -336
8021a2f0: 86 e6        	sd	ra, 328(sp)
8021a2f2: a2 e2        	sd	s0, 320(sp)
8021a2f4: 80 0a        	addi	s0, sp, 336
8021a2f6: aa 85        	mv	a1, a0
8021a2f8: 01 45        	mv	a0, zero
8021a2fa: 23 3c a4 ea  	sd	a0, -328(s0)
8021a2fe: 23 3c a4 ec  	sd	a0, -296(s0)
8021a302: 13 05 04 ef  	addi	a0, s0, -272
8021a306: 23 30 a4 ee  	sd	a0, -288(s0)
8021a30a: 13 05 00 02  	addi	a0, zero, 32
8021a30e: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
8021a312: 88 41        	lw	a0, 0(a1)
8021a314: 23 28 a4 ec  	sw	a0, -304(s0)
8021a318: 13 05 84 ed  	addi	a0, s0, -296
8021a31c: 97 10 00 00  	auipc	ra, 1
8021a320: e7 80 c0 76  	jalr	1900(ra)
8021a324: 83 35 84 eb  	ld	a1, -328(s0)
8021a328: 23 17 a4 ec  	sh	a0, -306(s0)
8021a32c: 41 66        	lui	a2, 16
8021a32e: 7d 36        	addiw	a2, a2, -1
8021a330: 71 8d        	and	a0, a0, a2
8021a332: 23 30 a4 ec  	sd	a0, -320(s0)
8021a336: 63 0b b5 00  	beq	a0, a1, 0x8021a34c <log.0.337+0x5e>
8021a33a: 09 a0        	j	0x8021a33c <log.0.337+0x4e>
8021a33c: 83 35 04 ec  	ld	a1, -320(s0)
8021a340: 13 05 84 ed  	addi	a0, s0, -296
8021a344: 97 60 fe ff  	auipc	ra, 1048550
8021a348: e7 80 a0 2a  	jalr	682(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
8021a34c: 16 64        	ld	s0, 320(sp)
8021a34e: b6 60        	ld	ra, 328(sp)
8021a350: 71 61        	addi	sp, sp, 336
8021a352: 82 80        	ret

000000008021a354 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.338>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021a354: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
8021a356: 06 f4        	sd	ra, 40(sp)
8021a358: 22 f0        	sd	s0, 32(sp)
8021a35a: 00 18        	addi	s0, sp, 48
8021a35c: 23 38 a4 fc  	sd	a0, -48(s0)
8021a360: 90 65        	ld	a2, 8(a1)
8021a362: 23 30 c4 fe  	sd	a2, -32(s0)
8021a366: 90 61        	ld	a2, 0(a1)
8021a368: 23 3c c4 fc  	sd	a2, -40(s0)
8021a36c: 97 10 00 00  	auipc	ra, 1
8021a370: e7 80 60 76  	jalr	1894(ra)
8021a374: aa 85        	mv	a1, a0
8021a376: 41 65        	lui	a0, 16
8021a378: 7d 35        	addiw	a0, a0, -1
8021a37a: 6d 8d        	and	a0, a0, a1
8021a37c: 23 17 b4 fe  	sh	a1, -18(s0)
8021a380: 81 45        	mv	a1, zero
8021a382: 63 0a b5 00  	beq	a0, a1, 0x8021a396 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.338+0x42>
8021a386: 09 a0        	j	0x8021a388 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.338+0x34>
8021a388: 03 35 04 fd  	ld	a0, -48(s0)
8021a38c: 97 60 fe ff  	auipc	ra, 1048550
8021a390: e7 80 60 51  	jalr	1302(ra)
8021a394: 11 a0        	j	0x8021a398 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.338+0x44>
8021a396: 09 a0        	j	0x8021a398 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.338+0x44>
8021a398: 03 15 e4 fe  	lh	a0, -18(s0)
8021a39c: 02 74        	ld	s0, 32(sp)
8021a39e: a2 70        	ld	ra, 40(sp)
8021a3a0: 45 61        	addi	sp, sp, 48
8021a3a2: 82 80        	ret

000000008021a3a4 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.339>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021a3a4: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
8021a3a6: 06 ec        	sd	ra, 24(sp)
8021a3a8: 22 e8        	sd	s0, 16(sp)
8021a3aa: 00 10        	addi	s0, sp, 32
8021a3ac: 23 30 a4 fe  	sd	a0, -32(s0)
8021a3b0: 97 10 00 00  	auipc	ra, 1
8021a3b4: e7 80 a0 79  	jalr	1946(ra)
8021a3b8: aa 85        	mv	a1, a0
8021a3ba: 41 65        	lui	a0, 16
8021a3bc: 7d 35        	addiw	a0, a0, -1
8021a3be: 6d 8d        	and	a0, a0, a1
8021a3c0: 23 17 b4 fe  	sh	a1, -18(s0)
8021a3c4: 81 45        	mv	a1, zero
8021a3c6: 63 0a b5 00  	beq	a0, a1, 0x8021a3da <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.339+0x36>
8021a3ca: 09 a0        	j	0x8021a3cc <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.339+0x28>
8021a3cc: 03 35 04 fe  	ld	a0, -32(s0)
8021a3d0: 97 60 fe ff  	auipc	ra, 1048550
8021a3d4: e7 80 20 4d  	jalr	1234(ra)
8021a3d8: 11 a0        	j	0x8021a3dc <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.339+0x38>
8021a3da: 09 a0        	j	0x8021a3dc <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.339+0x38>
8021a3dc: 03 15 e4 fe  	lh	a0, -18(s0)
8021a3e0: 42 64        	ld	s0, 16(sp)
8021a3e2: e2 60        	ld	ra, 24(sp)
8021a3e4: 05 61        	addi	sp, sp, 32
8021a3e6: 82 80        	ret

000000008021a3e8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.340>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021a3e8: 39 71        	addi	sp, sp, -64
;             return std.fmt.format(self, format, args);
8021a3ea: 06 fc        	sd	ra, 56(sp)
8021a3ec: 22 f8        	sd	s0, 48(sp)
8021a3ee: 80 00        	addi	s0, sp, 64
8021a3f0: 23 34 a4 fc  	sd	a0, -56(s0)
8021a3f4: 90 69        	ld	a2, 16(a1)
8021a3f6: 23 30 c4 fe  	sd	a2, -32(s0)
8021a3fa: 90 65        	ld	a2, 8(a1)
8021a3fc: 23 3c c4 fc  	sd	a2, -40(s0)
8021a400: 90 61        	ld	a2, 0(a1)
8021a402: 23 38 c4 fc  	sd	a2, -48(s0)
8021a406: 97 10 00 00  	auipc	ra, 1
8021a40a: e7 80 e0 76  	jalr	1902(ra)
8021a40e: aa 85        	mv	a1, a0
8021a410: 41 65        	lui	a0, 16
8021a412: 7d 35        	addiw	a0, a0, -1
8021a414: 6d 8d        	and	a0, a0, a1
8021a416: 23 17 b4 fe  	sh	a1, -18(s0)
8021a41a: 81 45        	mv	a1, zero
8021a41c: 63 0a b5 00  	beq	a0, a1, 0x8021a430 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.340+0x48>
8021a420: 09 a0        	j	0x8021a422 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.340+0x3a>
8021a422: 03 35 84 fc  	ld	a0, -56(s0)
8021a426: 97 60 fe ff  	auipc	ra, 1048550
8021a42a: e7 80 c0 47  	jalr	1148(ra)
8021a42e: 11 a0        	j	0x8021a432 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.340+0x4a>
8021a430: 09 a0        	j	0x8021a432 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.340+0x4a>
8021a432: 03 15 e4 fe  	lh	a0, -18(s0)
8021a436: 42 74        	ld	s0, 48(sp)
8021a438: e2 70        	ld	ra, 56(sp)
8021a43a: 21 61        	addi	sp, sp, 64
8021a43c: 82 80        	ret

000000008021a43e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.341>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021a43e: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
8021a440: 06 ec        	sd	ra, 24(sp)
8021a442: 22 e8        	sd	s0, 16(sp)
8021a444: 00 10        	addi	s0, sp, 32
8021a446: 23 30 a4 fe  	sd	a0, -32(s0)
8021a44a: 97 20 00 00  	auipc	ra, 2
8021a44e: e7 80 40 82  	jalr	-2012(ra)
8021a452: aa 85        	mv	a1, a0
8021a454: 41 65        	lui	a0, 16
8021a456: 7d 35        	addiw	a0, a0, -1
8021a458: 6d 8d        	and	a0, a0, a1
8021a45a: 23 17 b4 fe  	sh	a1, -18(s0)
8021a45e: 81 45        	mv	a1, zero
8021a460: 63 0a b5 00  	beq	a0, a1, 0x8021a474 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.341+0x36>
8021a464: 09 a0        	j	0x8021a466 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.341+0x28>
8021a466: 03 35 04 fe  	ld	a0, -32(s0)
8021a46a: 97 60 fe ff  	auipc	ra, 1048550
8021a46e: e7 80 80 43  	jalr	1080(ra)
8021a472: 11 a0        	j	0x8021a476 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.341+0x38>
8021a474: 09 a0        	j	0x8021a476 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.341+0x38>
8021a476: 03 15 e4 fe  	lh	a0, -18(s0)
8021a47a: 42 64        	ld	s0, 16(sp)
8021a47c: e2 60        	ld	ra, 24(sp)
8021a47e: 05 61        	addi	sp, sp, 32
8021a480: 82 80        	ret

000000008021a482 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.342>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021a482: 39 71        	addi	sp, sp, -64
;             return std.fmt.format(self, format, args);
8021a484: 06 fc        	sd	ra, 56(sp)
8021a486: 22 f8        	sd	s0, 48(sp)
8021a488: 80 00        	addi	s0, sp, 64
8021a48a: 23 34 a4 fc  	sd	a0, -56(s0)
8021a48e: 90 69        	ld	a2, 16(a1)
8021a490: 23 30 c4 fe  	sd	a2, -32(s0)
8021a494: 90 65        	ld	a2, 8(a1)
8021a496: 23 3c c4 fc  	sd	a2, -40(s0)
8021a49a: 90 61        	ld	a2, 0(a1)
8021a49c: 23 38 c4 fc  	sd	a2, -48(s0)
8021a4a0: 97 10 00 00  	auipc	ra, 1
8021a4a4: e7 80 80 7f  	jalr	2040(ra)
8021a4a8: aa 85        	mv	a1, a0
8021a4aa: 41 65        	lui	a0, 16
8021a4ac: 7d 35        	addiw	a0, a0, -1
8021a4ae: 6d 8d        	and	a0, a0, a1
8021a4b0: 23 17 b4 fe  	sh	a1, -18(s0)
8021a4b4: 81 45        	mv	a1, zero
8021a4b6: 63 0a b5 00  	beq	a0, a1, 0x8021a4ca <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.342+0x48>
8021a4ba: 09 a0        	j	0x8021a4bc <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.342+0x3a>
8021a4bc: 03 35 84 fc  	ld	a0, -56(s0)
8021a4c0: 97 60 fe ff  	auipc	ra, 1048550
8021a4c4: e7 80 20 3e  	jalr	994(ra)
8021a4c8: 11 a0        	j	0x8021a4cc <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.342+0x4a>
8021a4ca: 09 a0        	j	0x8021a4cc <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.342+0x4a>
8021a4cc: 03 15 e4 fe  	lh	a0, -18(s0)
8021a4d0: 42 74        	ld	s0, 48(sp)
8021a4d2: e2 70        	ld	ra, 56(sp)
8021a4d4: 21 61        	addi	sp, sp, 64
8021a4d6: 82 80        	ret

000000008021a4d8 <std.fmt.format.343>:
; pub fn format(
8021a4d8: 01 11        	addi	sp, sp, -32
;             try writer.writeAll(fmt[start_index..end_index]);
8021a4da: 06 ec        	sd	ra, 24(sp)
8021a4dc: 22 e8        	sd	s0, 16(sp)
8021a4de: 00 10        	addi	s0, sp, 32

000000008021a4e0 <.LBB425_1>:
8021a4e0: 97 75 00 00  	auipc	a1, 7
8021a4e4: 93 85 85 eb  	addi	a1, a1, -328
8021a4e8: 97 60 fe ff  	auipc	ra, 1048550
8021a4ec: e7 80 a0 5c  	jalr	1482(ra)
8021a4f0: 23 16 a4 fe  	sh	a0, -20(s0)
8021a4f4: 01 45        	mv	a0, zero
; ) !void {
8021a4f6: 23 17 a4 fe  	sh	a0, -18(s0)
8021a4fa: 42 64        	ld	s0, 16(sp)
8021a4fc: e2 60        	ld	ra, 24(sp)
8021a4fe: 05 61        	addi	sp, sp, 32
8021a500: 82 80        	ret

000000008021a502 <std.fmt.format.344>:
; pub fn format(
8021a502: 1d 71        	addi	sp, sp, -96
;     args: anytype,
8021a504: 86 ec        	sd	ra, 88(sp)
8021a506: a2 e8        	sd	s0, 80(sp)
8021a508: 80 10        	addi	s0, sp, 96
8021a50a: 23 30 b4 fa  	sd	a1, -96(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
8021a50e: 23 38 a4 fa  	sd	a0, -80(s0)

000000008021a512 <.LBB426_1>:
8021a512: 97 75 00 00  	auipc	a1, 7
8021a516: 93 85 65 e9  	addi	a1, a1, -362
8021a51a: 97 60 fe ff  	auipc	ra, 1048550
8021a51e: e7 80 80 59  	jalr	1432(ra)
8021a522: 83 35 04 fa  	ld	a1, -96(s0)
8021a526: 2a 86        	mv	a2, a0
8021a528: 03 35 04 fb  	ld	a0, -80(s0)
8021a52c: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
8021a530: 8c 61        	ld	a1, 0(a1)
8021a532: 23 30 b4 fe  	sd	a1, -32(s0)

000000008021a536 <.LBB426_2>:
;         try formatType(
8021a536: 17 76 00 00  	auipc	a2, 7
8021a53a: 13 06 26 ee  	addi	a2, a2, -286
8021a53e: 8d 46        	addi	a3, zero, 3
8021a540: 23 34 d4 fa  	sd	a3, -88(s0)
8021a544: 97 00 00 00  	auipc	ra, 0
8021a548: e7 80 a0 61  	jalr	1562(ra)
8021a54c: aa 85        	mv	a1, a0
8021a54e: 03 35 04 fb  	ld	a0, -80(s0)
8021a552: 23 1f b4 fc  	sh	a1, -34(s0)

000000008021a556 <.LBB426_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021a556: 97 75 00 00  	auipc	a1, 7
8021a55a: 93 85 a5 ee  	addi	a1, a1, -278
8021a55e: 97 60 fe ff  	auipc	ra, 1048550
8021a562: e7 80 40 55  	jalr	1364(ra)
8021a566: 83 35 04 fa  	ld	a1, -96(s0)
8021a56a: 83 36 84 fa  	ld	a3, -88(s0)
8021a56e: 2a 86        	mv	a2, a0
8021a570: 03 35 04 fb  	ld	a0, -80(s0)
8021a574: 23 1e c4 fc  	sh	a2, -36(s0)
;             @field(args, fields_info[arg_to_print].name),
8021a578: 8c 65        	ld	a1, 8(a1)
8021a57a: 23 38 b4 fc  	sd	a1, -48(s0)

000000008021a57e <.LBB426_4>:
;         try formatType(
8021a57e: 17 76 00 00  	auipc	a2, 7
8021a582: 13 06 26 f3  	addi	a2, a2, -206
8021a586: 97 e0 ff ff  	auipc	ra, 1048574
8021a58a: e7 80 60 a1  	jalr	-1514(ra)
8021a58e: aa 85        	mv	a1, a0
8021a590: 03 35 04 fb  	ld	a0, -80(s0)
8021a594: 23 17 b4 fc  	sh	a1, -50(s0)

000000008021a598 <.LBB426_5>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021a598: 97 75 00 00  	auipc	a1, 7
8021a59c: 93 85 05 f4  	addi	a1, a1, -192
8021a5a0: 97 60 fe ff  	auipc	ra, 1048550
8021a5a4: e7 80 20 51  	jalr	1298(ra)
8021a5a8: 83 35 04 fa  	ld	a1, -96(s0)
8021a5ac: 83 36 84 fa  	ld	a3, -88(s0)
8021a5b0: 2a 86        	mv	a2, a0
8021a5b2: 03 35 04 fb  	ld	a0, -80(s0)
8021a5b6: 23 16 c4 fc  	sh	a2, -52(s0)
;             @field(args, fields_info[arg_to_print].name),
8021a5ba: 8c 69        	ld	a1, 16(a1)
8021a5bc: 23 30 b4 fc  	sd	a1, -64(s0)

000000008021a5c0 <.LBB426_6>:
;         try formatType(
8021a5c0: 17 76 00 00  	auipc	a2, 7
8021a5c4: 13 06 86 f8  	addi	a2, a2, -120
8021a5c8: 97 e0 ff ff  	auipc	ra, 1048574
8021a5cc: e7 80 60 96  	jalr	-1690(ra)
8021a5d0: aa 85        	mv	a1, a0
8021a5d2: 03 35 04 fb  	ld	a0, -80(s0)
8021a5d6: 23 1f b4 fa  	sh	a1, -66(s0)

000000008021a5da <.LBB426_7>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021a5da: 97 75 00 00  	auipc	a1, 7
8021a5de: 93 85 65 f9  	addi	a1, a1, -106
8021a5e2: 97 60 fe ff  	auipc	ra, 1048550
8021a5e6: e7 80 00 4d  	jalr	1232(ra)
8021a5ea: 23 1e a4 fa  	sh	a0, -68(s0)
8021a5ee: 01 45        	mv	a0, zero
; ) !void {
8021a5f0: 23 17 a4 fe  	sh	a0, -18(s0)
8021a5f4: 46 64        	ld	s0, 80(sp)
8021a5f6: e6 60        	ld	ra, 88(sp)
8021a5f8: 25 61        	addi	sp, sp, 96
8021a5fa: 82 80        	ret

000000008021a5fc <std.fmt.format.345>:
; pub fn format(
8021a5fc: 01 11        	addi	sp, sp, -32
;             try writer.writeAll(fmt[start_index..end_index]);
8021a5fe: 06 ec        	sd	ra, 24(sp)
8021a600: 22 e8        	sd	s0, 16(sp)
8021a602: 00 10        	addi	s0, sp, 32

000000008021a604 <.LBB427_1>:
8021a604: 97 75 00 00  	auipc	a1, 7
8021a608: 93 85 c5 f7  	addi	a1, a1, -132
8021a60c: 97 60 fe ff  	auipc	ra, 1048550
8021a610: e7 80 60 4a  	jalr	1190(ra)
8021a614: 23 16 a4 fe  	sh	a0, -20(s0)
8021a618: 01 45        	mv	a0, zero
; ) !void {
8021a61a: 23 17 a4 fe  	sh	a0, -18(s0)
8021a61e: 42 64        	ld	s0, 16(sp)
8021a620: e2 60        	ld	ra, 24(sp)
8021a622: 05 61        	addi	sp, sp, 32
8021a624: 82 80        	ret

000000008021a626 <std.fmt.format.346>:
; pub fn format(
8021a626: 59 71        	addi	sp, sp, -112
;     args: anytype,
8021a628: 86 f4        	sd	ra, 104(sp)
8021a62a: a2 f0        	sd	s0, 96(sp)
8021a62c: 80 18        	addi	s0, sp, 112
8021a62e: 23 38 b4 f8  	sd	a1, -112(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
8021a632: 23 30 a4 fa  	sd	a0, -96(s0)

000000008021a636 <.LBB428_1>:
8021a636: 97 75 00 00  	auipc	a1, 7
8021a63a: 93 85 a5 f5  	addi	a1, a1, -166
8021a63e: 97 60 fe ff  	auipc	ra, 1048550
8021a642: e7 80 40 47  	jalr	1140(ra)
8021a646: 83 35 04 f9  	ld	a1, -112(s0)
8021a64a: 2a 86        	mv	a2, a0
8021a64c: 03 35 04 fa  	ld	a0, -96(s0)
8021a650: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
8021a654: 8c 61        	ld	a1, 0(a1)
8021a656: 23 30 b4 fe  	sd	a1, -32(s0)

000000008021a65a <.LBB428_2>:
;         try formatType(
8021a65a: 17 76 00 00  	auipc	a2, 7
8021a65e: 13 06 66 fa  	addi	a2, a2, -90
8021a662: 8d 46        	addi	a3, zero, 3
8021a664: 23 3c d4 f8  	sd	a3, -104(s0)
8021a668: 97 00 00 00  	auipc	ra, 0
8021a66c: e7 80 60 4f  	jalr	1270(ra)
8021a670: aa 85        	mv	a1, a0
8021a672: 03 35 04 fa  	ld	a0, -96(s0)
8021a676: 23 1f b4 fc  	sh	a1, -34(s0)

000000008021a67a <.LBB428_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021a67a: 97 75 00 00  	auipc	a1, 7
8021a67e: 93 85 e5 fa  	addi	a1, a1, -82
8021a682: 97 60 fe ff  	auipc	ra, 1048550
8021a686: e7 80 00 43  	jalr	1072(ra)
8021a68a: 83 35 04 f9  	ld	a1, -112(s0)
8021a68e: 83 36 84 f9  	ld	a3, -104(s0)
8021a692: 2a 86        	mv	a2, a0
8021a694: 03 35 04 fa  	ld	a0, -96(s0)
8021a698: 23 1e c4 fc  	sh	a2, -36(s0)
;             @field(args, fields_info[arg_to_print].name),
8021a69c: 8c 65        	ld	a1, 8(a1)
8021a69e: 23 38 b4 fc  	sd	a1, -48(s0)

000000008021a6a2 <.LBB428_4>:
;         try formatType(
8021a6a2: 17 76 00 00  	auipc	a2, 7
8021a6a6: 13 06 66 ff  	addi	a2, a2, -10
8021a6aa: 97 e0 ff ff  	auipc	ra, 1048574
8021a6ae: e7 80 20 8f  	jalr	-1806(ra)
8021a6b2: aa 85        	mv	a1, a0
8021a6b4: 03 35 04 fa  	ld	a0, -96(s0)
8021a6b8: 23 17 b4 fc  	sh	a1, -50(s0)

000000008021a6bc <.LBB428_5>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021a6bc: 97 75 00 00  	auipc	a1, 7
8021a6c0: 93 85 45 00  	addi	a1, a1, 4
8021a6c4: 97 60 fe ff  	auipc	ra, 1048550
8021a6c8: e7 80 e0 3e  	jalr	1006(ra)
8021a6cc: 83 35 04 f9  	ld	a1, -112(s0)
8021a6d0: 83 36 84 f9  	ld	a3, -104(s0)
8021a6d4: 2a 86        	mv	a2, a0
8021a6d6: 03 35 04 fa  	ld	a0, -96(s0)
8021a6da: 23 16 c4 fc  	sh	a2, -52(s0)
;             @field(args, fields_info[arg_to_print].name),
8021a6de: 8c 69        	ld	a1, 16(a1)
8021a6e0: 23 30 b4 fc  	sd	a1, -64(s0)

000000008021a6e4 <.LBB428_6>:
;         try formatType(
8021a6e4: 17 76 00 00  	auipc	a2, 7
8021a6e8: 13 06 c6 04  	addi	a2, a2, 76
8021a6ec: 97 e0 ff ff  	auipc	ra, 1048574
8021a6f0: e7 80 20 84  	jalr	-1982(ra)
8021a6f4: aa 85        	mv	a1, a0
8021a6f6: 03 35 04 fa  	ld	a0, -96(s0)
8021a6fa: 23 1f b4 fa  	sh	a1, -66(s0)

000000008021a6fe <.LBB428_7>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021a6fe: 97 75 00 00  	auipc	a1, 7
8021a702: 93 85 a5 05  	addi	a1, a1, 90
8021a706: 97 60 fe ff  	auipc	ra, 1048550
8021a70a: e7 80 c0 3a  	jalr	940(ra)
8021a70e: 83 35 04 f9  	ld	a1, -112(s0)
8021a712: 83 36 84 f9  	ld	a3, -104(s0)
8021a716: 2a 86        	mv	a2, a0
8021a718: 03 35 04 fa  	ld	a0, -96(s0)
8021a71c: 23 1e c4 fa  	sh	a2, -68(s0)
;             @field(args, fields_info[arg_to_print].name),
8021a720: 8c 6d        	ld	a1, 24(a1)
8021a722: 23 38 b4 fa  	sd	a1, -80(s0)

000000008021a726 <.LBB428_8>:
;         try formatType(
8021a726: 17 76 00 00  	auipc	a2, 7
8021a72a: 13 06 26 0a  	addi	a2, a2, 162
8021a72e: 97 e0 ff ff  	auipc	ra, 1048574
8021a732: e7 80 e0 86  	jalr	-1938(ra)
8021a736: aa 85        	mv	a1, a0
8021a738: 03 35 04 fa  	ld	a0, -96(s0)
8021a73c: 23 17 b4 fa  	sh	a1, -82(s0)

000000008021a740 <.LBB428_9>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021a740: 97 75 00 00  	auipc	a1, 7
8021a744: 93 85 05 0b  	addi	a1, a1, 176
8021a748: 97 60 fe ff  	auipc	ra, 1048550
8021a74c: e7 80 a0 36  	jalr	874(ra)
8021a750: 23 16 a4 fa  	sh	a0, -84(s0)
8021a754: 01 45        	mv	a0, zero
; ) !void {
8021a756: 23 17 a4 fe  	sh	a0, -18(s0)
8021a75a: 06 74        	ld	s0, 96(sp)
8021a75c: a6 70        	ld	ra, 104(sp)
8021a75e: 65 61        	addi	sp, sp, 112
8021a760: 82 80        	ret

000000008021a762 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.347>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021a762: 39 71        	addi	sp, sp, -64
;             return std.fmt.format(self, format, args);
8021a764: 06 fc        	sd	ra, 56(sp)
8021a766: 22 f8        	sd	s0, 48(sp)
8021a768: 80 00        	addi	s0, sp, 64
8021a76a: 23 30 a4 fc  	sd	a0, -64(s0)
8021a76e: 90 6d        	ld	a2, 24(a1)
8021a770: 23 30 c4 fe  	sd	a2, -32(s0)
8021a774: 90 69        	ld	a2, 16(a1)
8021a776: 23 3c c4 fc  	sd	a2, -40(s0)
8021a77a: 90 65        	ld	a2, 8(a1)
8021a77c: 23 38 c4 fc  	sd	a2, -48(s0)
8021a780: 90 61        	ld	a2, 0(a1)
8021a782: 23 34 c4 fc  	sd	a2, -56(s0)
8021a786: 97 10 00 00  	auipc	ra, 1
8021a78a: e7 80 c0 60  	jalr	1548(ra)
8021a78e: aa 85        	mv	a1, a0
8021a790: 41 65        	lui	a0, 16
8021a792: 7d 35        	addiw	a0, a0, -1
8021a794: 6d 8d        	and	a0, a0, a1
8021a796: 23 17 b4 fe  	sh	a1, -18(s0)
8021a79a: 81 45        	mv	a1, zero
8021a79c: 63 0a b5 00  	beq	a0, a1, 0x8021a7b0 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.347+0x4e>
8021a7a0: 09 a0        	j	0x8021a7a2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.347+0x40>
8021a7a2: 03 35 04 fc  	ld	a0, -64(s0)
8021a7a6: 97 60 fe ff  	auipc	ra, 1048550
8021a7aa: e7 80 c0 0f  	jalr	252(ra)
8021a7ae: 11 a0        	j	0x8021a7b2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.347+0x50>
8021a7b0: 09 a0        	j	0x8021a7b2 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.347+0x50>
8021a7b2: 03 15 e4 fe  	lh	a0, -18(s0)
8021a7b6: 42 74        	ld	s0, 48(sp)
8021a7b8: e2 70        	ld	ra, 56(sp)
8021a7ba: 21 61        	addi	sp, sp, 64
8021a7bc: 82 80        	ret

000000008021a7be <std.fmt.format.348>:
; pub fn format(
8021a7be: 01 11        	addi	sp, sp, -32
;             try writer.writeAll(fmt[start_index..end_index]);
8021a7c0: 06 ec        	sd	ra, 24(sp)
8021a7c2: 22 e8        	sd	s0, 16(sp)
8021a7c4: 00 10        	addi	s0, sp, 32

000000008021a7c6 <.LBB430_1>:
8021a7c6: 97 75 00 00  	auipc	a1, 7
8021a7ca: 93 85 a5 03  	addi	a1, a1, 58
8021a7ce: 97 60 fe ff  	auipc	ra, 1048550
8021a7d2: e7 80 40 2e  	jalr	740(ra)
8021a7d6: 23 16 a4 fe  	sh	a0, -20(s0)
8021a7da: 01 45        	mv	a0, zero
; ) !void {
8021a7dc: 23 17 a4 fe  	sh	a0, -18(s0)
8021a7e0: 42 64        	ld	s0, 16(sp)
8021a7e2: e2 60        	ld	ra, 24(sp)
8021a7e4: 05 61        	addi	sp, sp, 32
8021a7e6: 82 80        	ret

000000008021a7e8 <std.fmt.format.349>:
; pub fn format(
8021a7e8: 01 11        	addi	sp, sp, -32
;             try writer.writeAll(fmt[start_index..end_index]);
8021a7ea: 06 ec        	sd	ra, 24(sp)
8021a7ec: 22 e8        	sd	s0, 16(sp)
8021a7ee: 00 10        	addi	s0, sp, 32

000000008021a7f0 <.LBB431_1>:
8021a7f0: 97 75 00 00  	auipc	a1, 7
8021a7f4: 93 85 05 02  	addi	a1, a1, 32
8021a7f8: 97 60 fe ff  	auipc	ra, 1048550
8021a7fc: e7 80 a0 2b  	jalr	698(ra)
8021a800: 23 16 a4 fe  	sh	a0, -20(s0)
8021a804: 01 45        	mv	a0, zero
; ) !void {
8021a806: 23 17 a4 fe  	sh	a0, -18(s0)
8021a80a: 42 64        	ld	s0, 16(sp)
8021a80c: e2 60        	ld	ra, 24(sp)
8021a80e: 05 61        	addi	sp, sp, 32
8021a810: 82 80        	ret

000000008021a812 <std.fmt.format.350>:
; pub fn format(
8021a812: 5d 71        	addi	sp, sp, -80
;     args: anytype,
8021a814: 86 e4        	sd	ra, 72(sp)
8021a816: a2 e0        	sd	s0, 64(sp)
8021a818: 80 08        	addi	s0, sp, 80
8021a81a: 23 38 b4 fa  	sd	a1, -80(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
8021a81e: 23 30 a4 fc  	sd	a0, -64(s0)

000000008021a822 <.LBB432_1>:
8021a822: 97 75 00 00  	auipc	a1, 7
8021a826: 93 85 e5 ff  	addi	a1, a1, -2
8021a82a: 97 60 fe ff  	auipc	ra, 1048550
8021a82e: e7 80 80 28  	jalr	648(ra)
8021a832: 83 35 04 fb  	ld	a1, -80(s0)
8021a836: 2a 86        	mv	a2, a0
8021a838: 03 35 04 fc  	ld	a0, -64(s0)
8021a83c: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
8021a840: 8c 61        	ld	a1, 0(a1)
8021a842: 23 30 b4 fe  	sd	a1, -32(s0)

000000008021a846 <.LBB432_2>:
;         try formatType(
8021a846: 17 76 00 00  	auipc	a2, 7
8021a84a: 13 06 a6 04  	addi	a2, a2, 74
8021a84e: 8d 46        	addi	a3, zero, 3
8021a850: 23 3c d4 fa  	sd	a3, -72(s0)
8021a854: 97 d0 ff ff  	auipc	ra, 1048573
8021a858: e7 80 80 74  	jalr	1864(ra)
8021a85c: aa 85        	mv	a1, a0
8021a85e: 03 35 04 fc  	ld	a0, -64(s0)
8021a862: 23 1f b4 fc  	sh	a1, -34(s0)

000000008021a866 <.LBB432_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021a866: 97 75 00 00  	auipc	a1, 7
8021a86a: 93 85 25 05  	addi	a1, a1, 82
8021a86e: 97 60 fe ff  	auipc	ra, 1048550
8021a872: e7 80 40 24  	jalr	580(ra)
8021a876: 83 35 04 fb  	ld	a1, -80(s0)
8021a87a: 83 36 84 fb  	ld	a3, -72(s0)
8021a87e: 2a 86        	mv	a2, a0
8021a880: 03 35 04 fc  	ld	a0, -64(s0)
8021a884: 23 1e c4 fc  	sh	a2, -36(s0)
;             @field(args, fields_info[arg_to_print].name),
8021a888: 8c 65        	ld	a1, 8(a1)
8021a88a: 23 38 b4 fc  	sd	a1, -48(s0)

000000008021a88e <.LBB432_4>:
;         try formatType(
8021a88e: 17 76 00 00  	auipc	a2, 7
8021a892: 13 06 a6 09  	addi	a2, a2, 154
8021a896: 97 d0 ff ff  	auipc	ra, 1048573
8021a89a: e7 80 80 69  	jalr	1688(ra)
8021a89e: aa 85        	mv	a1, a0
8021a8a0: 03 35 04 fc  	ld	a0, -64(s0)
8021a8a4: 23 17 b4 fc  	sh	a1, -50(s0)

000000008021a8a8 <.LBB432_5>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021a8a8: 97 75 00 00  	auipc	a1, 7
8021a8ac: 93 85 85 0a  	addi	a1, a1, 168
8021a8b0: 97 60 fe ff  	auipc	ra, 1048550
8021a8b4: e7 80 20 20  	jalr	514(ra)
8021a8b8: 23 16 a4 fc  	sh	a0, -52(s0)
8021a8bc: 01 45        	mv	a0, zero
; ) !void {
8021a8be: 23 17 a4 fe  	sh	a0, -18(s0)
8021a8c2: 06 64        	ld	s0, 64(sp)
8021a8c4: a6 60        	ld	ra, 72(sp)
8021a8c6: 61 61        	addi	sp, sp, 80
8021a8c8: 82 80        	ret

000000008021a8ca <std.fmt.format.351>:
; pub fn format(
8021a8ca: 01 11        	addi	sp, sp, -32
;             try writer.writeAll(fmt[start_index..end_index]);
8021a8cc: 06 ec        	sd	ra, 24(sp)
8021a8ce: 22 e8        	sd	s0, 16(sp)
8021a8d0: 00 10        	addi	s0, sp, 32

000000008021a8d2 <.LBB433_1>:
8021a8d2: 97 75 00 00  	auipc	a1, 7
8021a8d6: 93 85 e5 08  	addi	a1, a1, 142
8021a8da: 97 60 fe ff  	auipc	ra, 1048550
8021a8de: e7 80 80 1d  	jalr	472(ra)
8021a8e2: 23 16 a4 fe  	sh	a0, -20(s0)
8021a8e6: 01 45        	mv	a0, zero
; ) !void {
8021a8e8: 23 17 a4 fe  	sh	a0, -18(s0)
8021a8ec: 42 64        	ld	s0, 16(sp)
8021a8ee: e2 60        	ld	ra, 24(sp)
8021a8f0: 05 61        	addi	sp, sp, 32
8021a8f2: 82 80        	ret

000000008021a8f4 <std.fmt.format.352>:
; pub fn format(
8021a8f4: 39 71        	addi	sp, sp, -64
;     args: anytype,
8021a8f6: 06 fc        	sd	ra, 56(sp)
8021a8f8: 22 f8        	sd	s0, 48(sp)
8021a8fa: 80 00        	addi	s0, sp, 64
8021a8fc: 23 34 b4 fc  	sd	a1, -56(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
8021a900: 23 38 a4 fc  	sd	a0, -48(s0)

000000008021a904 <.LBB434_1>:
8021a904: 97 75 00 00  	auipc	a1, 7
8021a908: 93 85 c5 06  	addi	a1, a1, 108
8021a90c: 97 60 fe ff  	auipc	ra, 1048550
8021a910: e7 80 60 1a  	jalr	422(ra)
8021a914: 83 35 84 fc  	ld	a1, -56(s0)
8021a918: 2a 86        	mv	a2, a0
8021a91a: 03 35 04 fd  	ld	a0, -48(s0)
8021a91e: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
8021a922: 8c 61        	ld	a1, 0(a1)
8021a924: 23 30 b4 fe  	sd	a1, -32(s0)

000000008021a928 <.LBB434_2>:
;         try formatType(
8021a928: 17 76 00 00  	auipc	a2, 7
8021a92c: 13 06 86 0b  	addi	a2, a2, 184
8021a930: 8d 46        	addi	a3, zero, 3
8021a932: 97 d0 ff ff  	auipc	ra, 1048573
8021a936: e7 80 c0 5f  	jalr	1532(ra)
8021a93a: aa 85        	mv	a1, a0
8021a93c: 03 35 04 fd  	ld	a0, -48(s0)
8021a940: 23 1f b4 fc  	sh	a1, -34(s0)

000000008021a944 <.LBB434_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021a944: 97 75 00 00  	auipc	a1, 7
8021a948: 93 85 45 0c  	addi	a1, a1, 196
8021a94c: 97 60 fe ff  	auipc	ra, 1048550
8021a950: e7 80 60 16  	jalr	358(ra)
8021a954: 23 1e a4 fc  	sh	a0, -36(s0)
8021a958: 01 45        	mv	a0, zero
; ) !void {
8021a95a: 23 17 a4 fe  	sh	a0, -18(s0)
8021a95e: 42 74        	ld	s0, 48(sp)
8021a960: e2 70        	ld	ra, 56(sp)
8021a962: 21 61        	addi	sp, sp, 64
8021a964: 82 80        	ret

000000008021a966 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.353>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021a966: 5d 71        	addi	sp, sp, -80
;             return std.fmt.format(self, format, args);
8021a968: 86 e4        	sd	ra, 72(sp)
8021a96a: a2 e0        	sd	s0, 64(sp)
8021a96c: 80 08        	addi	s0, sp, 80
8021a96e: 23 3c a4 fa  	sd	a0, -72(s0)
8021a972: 90 71        	ld	a2, 32(a1)
8021a974: 23 30 c4 fe  	sd	a2, -32(s0)
8021a978: 90 6d        	ld	a2, 24(a1)
8021a97a: 23 3c c4 fc  	sd	a2, -40(s0)
8021a97e: 90 69        	ld	a2, 16(a1)
8021a980: 23 38 c4 fc  	sd	a2, -48(s0)
8021a984: 90 65        	ld	a2, 8(a1)
8021a986: 23 34 c4 fc  	sd	a2, -56(s0)
8021a98a: 90 61        	ld	a2, 0(a1)
8021a98c: 23 30 c4 fc  	sd	a2, -64(s0)
8021a990: 97 10 00 00  	auipc	ra, 1
8021a994: e7 80 e0 53  	jalr	1342(ra)
8021a998: aa 85        	mv	a1, a0
8021a99a: 41 65        	lui	a0, 16
8021a99c: 7d 35        	addiw	a0, a0, -1
8021a99e: 6d 8d        	and	a0, a0, a1
8021a9a0: 23 17 b4 fe  	sh	a1, -18(s0)
8021a9a4: 81 45        	mv	a1, zero
8021a9a6: 63 0a b5 00  	beq	a0, a1, 0x8021a9ba <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.353+0x54>
8021a9aa: 09 a0        	j	0x8021a9ac <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.353+0x46>
8021a9ac: 03 35 84 fb  	ld	a0, -72(s0)
8021a9b0: 97 60 fe ff  	auipc	ra, 1048550
8021a9b4: e7 80 20 ef  	jalr	-270(ra)
8021a9b8: 11 a0        	j	0x8021a9bc <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.353+0x56>
8021a9ba: 09 a0        	j	0x8021a9bc <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.353+0x56>
8021a9bc: 03 15 e4 fe  	lh	a0, -18(s0)
8021a9c0: 06 64        	ld	s0, 64(sp)
8021a9c2: a6 60        	ld	ra, 72(sp)
8021a9c4: 61 61        	addi	sp, sp, 80
8021a9c6: 82 80        	ret

000000008021a9c8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.354>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021a9c8: 5d 71        	addi	sp, sp, -80
;             return std.fmt.format(self, format, args);
8021a9ca: 86 e4        	sd	ra, 72(sp)
8021a9cc: a2 e0        	sd	s0, 64(sp)
8021a9ce: 80 08        	addi	s0, sp, 80
8021a9d0: 23 3c a4 fa  	sd	a0, -72(s0)
8021a9d4: 90 71        	ld	a2, 32(a1)
8021a9d6: 23 30 c4 fe  	sd	a2, -32(s0)
8021a9da: 90 6d        	ld	a2, 24(a1)
8021a9dc: 23 3c c4 fc  	sd	a2, -40(s0)
8021a9e0: 90 69        	ld	a2, 16(a1)
8021a9e2: 23 38 c4 fc  	sd	a2, -48(s0)
8021a9e6: 90 65        	ld	a2, 8(a1)
8021a9e8: 23 34 c4 fc  	sd	a2, -56(s0)
8021a9ec: 90 61        	ld	a2, 0(a1)
8021a9ee: 23 30 c4 fc  	sd	a2, -64(s0)
8021a9f2: 97 10 00 00  	auipc	ra, 1
8021a9f6: e7 80 80 62  	jalr	1576(ra)
8021a9fa: aa 85        	mv	a1, a0
8021a9fc: 41 65        	lui	a0, 16
8021a9fe: 7d 35        	addiw	a0, a0, -1
8021aa00: 6d 8d        	and	a0, a0, a1
8021aa02: 23 17 b4 fe  	sh	a1, -18(s0)
8021aa06: 81 45        	mv	a1, zero
8021aa08: 63 0a b5 00  	beq	a0, a1, 0x8021aa1c <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.354+0x54>
8021aa0c: 09 a0        	j	0x8021aa0e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.354+0x46>
8021aa0e: 03 35 84 fb  	ld	a0, -72(s0)
8021aa12: 97 60 fe ff  	auipc	ra, 1048550
8021aa16: e7 80 00 e9  	jalr	-368(ra)
8021aa1a: 11 a0        	j	0x8021aa1e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.354+0x56>
8021aa1c: 09 a0        	j	0x8021aa1e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.354+0x56>
8021aa1e: 03 15 e4 fe  	lh	a0, -18(s0)
8021aa22: 06 64        	ld	s0, 64(sp)
8021aa24: a6 60        	ld	ra, 72(sp)
8021aa26: 61 61        	addi	sp, sp, 80
8021aa28: 82 80        	ret

000000008021aa2a <log.0.355>:
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
8021aa2a: 4d 71        	addi	sp, sp, -336
8021aa2c: 86 e6        	sd	ra, 328(sp)
8021aa2e: a2 e2        	sd	s0, 320(sp)
8021aa30: 80 0a        	addi	s0, sp, 336
8021aa32: aa 85        	mv	a1, a0
8021aa34: 01 45        	mv	a0, zero
8021aa36: 23 38 a4 ea  	sd	a0, -336(s0)
8021aa3a: 23 3c a4 ec  	sd	a0, -296(s0)
8021aa3e: 13 05 04 ef  	addi	a0, s0, -272
8021aa42: 23 30 a4 ee  	sd	a0, -288(s0)
8021aa46: 13 05 00 02  	addi	a0, zero, 32
8021aa4a: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
8021aa4e: 88 61        	ld	a0, 0(a1)
8021aa50: 23 34 a4 ec  	sd	a0, -312(s0)
8021aa54: 88 65        	ld	a0, 8(a1)
8021aa56: 23 38 a4 ec  	sd	a0, -304(s0)
8021aa5a: 13 05 84 ed  	addi	a0, s0, -296
8021aa5e: 97 10 00 00  	auipc	ra, 1
8021aa62: e7 80 80 70  	jalr	1800(ra)
8021aa66: 83 35 04 eb  	ld	a1, -336(s0)
8021aa6a: 23 13 a4 ec  	sh	a0, -314(s0)
8021aa6e: 41 66        	lui	a2, 16
8021aa70: 7d 36        	addiw	a2, a2, -1
8021aa72: 71 8d        	and	a0, a0, a2
8021aa74: 23 3c a4 ea  	sd	a0, -328(s0)
8021aa78: 63 0b b5 00  	beq	a0, a1, 0x8021aa8e <log.0.355+0x64>
8021aa7c: 09 a0        	j	0x8021aa7e <log.0.355+0x54>
8021aa7e: 83 35 84 eb  	ld	a1, -328(s0)
8021aa82: 13 05 84 ed  	addi	a0, s0, -296
8021aa86: 97 60 fe ff  	auipc	ra, 1048550
8021aa8a: e7 80 80 b6  	jalr	-1176(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
8021aa8e: 16 64        	ld	s0, 320(sp)
8021aa90: b6 60        	ld	ra, 328(sp)
8021aa92: 71 61        	addi	sp, sp, 336
8021aa94: 82 80        	ret

000000008021aa96 <log.0.356>:
8021aa96: 0d 71        	addi	sp, sp, -352
8021aa98: 86 ee        	sd	ra, 344(sp)
8021aa9a: a2 ea        	sd	s0, 336(sp)
8021aa9c: 80 12        	addi	s0, sp, 352
8021aa9e: aa 85        	mv	a1, a0
8021aaa0: 01 45        	mv	a0, zero
8021aaa2: 23 30 a4 ea  	sd	a0, -352(s0)
8021aaa6: 23 3c a4 ec  	sd	a0, -296(s0)
8021aaaa: 13 05 04 ef  	addi	a0, s0, -272
8021aaae: 23 30 a4 ee  	sd	a0, -288(s0)
8021aab2: 13 05 00 02  	addi	a0, zero, 32
8021aab6: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
8021aaba: 88 61        	ld	a0, 0(a1)
8021aabc: 23 3c a4 ea  	sd	a0, -328(s0)
8021aac0: 88 65        	ld	a0, 8(a1)
8021aac2: 23 30 a4 ec  	sd	a0, -320(s0)
8021aac6: 88 69        	ld	a0, 16(a1)
8021aac8: 23 34 a4 ec  	sd	a0, -312(s0)
8021aacc: 88 6d        	ld	a0, 24(a1)
8021aace: 23 38 a4 ec  	sd	a0, -304(s0)
8021aad2: 13 05 84 ed  	addi	a0, s0, -296
8021aad6: 97 10 00 00  	auipc	ra, 1
8021aada: e7 80 00 6e  	jalr	1760(ra)
8021aade: 83 35 04 ea  	ld	a1, -352(s0)
8021aae2: 23 1b a4 ea  	sh	a0, -330(s0)
8021aae6: 41 66        	lui	a2, 16
8021aae8: 7d 36        	addiw	a2, a2, -1
8021aaea: 71 8d        	and	a0, a0, a2
8021aaec: 23 34 a4 ea  	sd	a0, -344(s0)
8021aaf0: 63 0b b5 00  	beq	a0, a1, 0x8021ab06 <log.0.356+0x70>
8021aaf4: 09 a0        	j	0x8021aaf6 <log.0.356+0x60>
8021aaf6: 83 35 84 ea  	ld	a1, -344(s0)
8021aafa: 13 05 84 ed  	addi	a0, s0, -296
8021aafe: 97 60 fe ff  	auipc	ra, 1048550
8021ab02: e7 80 00 af  	jalr	-1296(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
8021ab06: 56 64        	ld	s0, 336(sp)
8021ab08: f6 60        	ld	ra, 344(sp)
8021ab0a: 35 61        	addi	sp, sp, 352
8021ab0c: 82 80        	ret

000000008021ab0e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.357>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021ab0e: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
8021ab10: 06 f4        	sd	ra, 40(sp)
8021ab12: 22 f0        	sd	s0, 32(sp)
8021ab14: 00 18        	addi	s0, sp, 48
8021ab16: 23 38 a4 fc  	sd	a0, -48(s0)
8021ab1a: 90 65        	ld	a2, 8(a1)
8021ab1c: 23 30 c4 fe  	sd	a2, -32(s0)
8021ab20: 90 61        	ld	a2, 0(a1)
8021ab22: 23 3c c4 fc  	sd	a2, -40(s0)
8021ab26: 97 10 00 00  	auipc	ra, 1
8021ab2a: e7 80 c0 6e  	jalr	1772(ra)
8021ab2e: aa 85        	mv	a1, a0
8021ab30: 41 65        	lui	a0, 16
8021ab32: 7d 35        	addiw	a0, a0, -1
8021ab34: 6d 8d        	and	a0, a0, a1
8021ab36: 23 17 b4 fe  	sh	a1, -18(s0)
8021ab3a: 81 45        	mv	a1, zero
8021ab3c: 63 0a b5 00  	beq	a0, a1, 0x8021ab50 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.357+0x42>
8021ab40: 09 a0        	j	0x8021ab42 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.357+0x34>
8021ab42: 03 35 04 fd  	ld	a0, -48(s0)
8021ab46: 97 60 fe ff  	auipc	ra, 1048550
8021ab4a: e7 80 c0 d5  	jalr	-676(ra)
8021ab4e: 11 a0        	j	0x8021ab52 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.357+0x44>
8021ab50: 09 a0        	j	0x8021ab52 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.357+0x44>
8021ab52: 03 15 e4 fe  	lh	a0, -18(s0)
8021ab56: 02 74        	ld	s0, 32(sp)
8021ab58: a2 70        	ld	ra, 40(sp)
8021ab5a: 45 61        	addi	sp, sp, 48
8021ab5c: 82 80        	ret

000000008021ab5e <std.fmt.formatType.358>:
; pub fn formatType(
8021ab5e: 1d 71        	addi	sp, sp, -96
8021ab60: 86 ec        	sd	ra, 88(sp)
8021ab62: a2 e8        	sd	s0, 80(sp)
8021ab64: 80 10        	addi	s0, sp, 96
8021ab66: 23 30 a4 fa  	sd	a0, -96(s0)
8021ab6a: 23 38 b4 fa  	sd	a1, -80(s0)
8021ab6e: 23 34 d4 fa  	sd	a3, -88(s0)
;             return formatValue(value, actual_fmt, options, writer);
8021ab72: 23 30 b4 fe  	sd	a1, -32(s0)
8021ab76: 14 62        	ld	a3, 0(a2)
8021ab78: 23 3c d4 fa  	sd	a3, -72(s0)
8021ab7c: 14 66        	ld	a3, 8(a2)
8021ab7e: 23 30 d4 fc  	sd	a3, -64(s0)
8021ab82: 14 6a        	ld	a3, 16(a2)
8021ab84: 23 34 d4 fc  	sd	a3, -56(s0)
8021ab88: 14 6e        	ld	a3, 24(a2)
8021ab8a: 23 38 d4 fc  	sd	a3, -48(s0)
8021ab8e: 14 72        	ld	a3, 32(a2)
8021ab90: 23 3c d4 fc  	sd	a3, -40(s0)
8021ab94: 97 00 00 00  	auipc	ra, 0
8021ab98: e7 80 20 36  	jalr	866(ra)
8021ab9c: aa 85        	mv	a1, a0
8021ab9e: 41 65        	lui	a0, 16
8021aba0: 7d 35        	addiw	a0, a0, -1
8021aba2: 6d 8d        	and	a0, a0, a1
8021aba4: 23 17 b4 fe  	sh	a1, -18(s0)
8021aba8: 81 45        	mv	a1, zero
8021abaa: 63 0a b5 00  	beq	a0, a1, 0x8021abbe <std.fmt.formatType.358+0x60>
8021abae: 09 a0        	j	0x8021abb0 <std.fmt.formatType.358+0x52>
8021abb0: 03 35 04 fa  	ld	a0, -96(s0)
8021abb4: 97 60 fe ff  	auipc	ra, 1048550
8021abb8: e7 80 e0 ce  	jalr	-786(ra)
8021abbc: 11 a0        	j	0x8021abc0 <std.fmt.formatType.358+0x62>
8021abbe: 09 a0        	j	0x8021abc0 <std.fmt.formatType.358+0x62>
8021abc0: 03 15 e4 fe  	lh	a0, -18(s0)
8021abc4: 46 64        	ld	s0, 80(sp)
8021abc6: e6 60        	ld	ra, 88(sp)
8021abc8: 25 61        	addi	sp, sp, 96
8021abca: 82 80        	ret

000000008021abcc <std.fmt.formatType.359>:
; pub fn formatType(
8021abcc: 29 71        	addi	sp, sp, -320
;     options: FormatOptions,
8021abce: 06 fe        	sd	ra, 312(sp)
8021abd0: 22 fa        	sd	s0, 304(sp)
8021abd2: 80 02        	addi	s0, sp, 320
8021abd4: 23 3c c4 ee  	sd	a2, -264(s0)
;     value: anytype,
8021abd8: 23 30 b4 f0  	sd	a1, -256(s0)
8021abdc: 23 34 a4 f0  	sd	a0, -248(s0)
8021abe0: 23 38 d4 f0  	sd	a3, -240(s0)

000000008021abe4 <.LBB441_13>:
;             try writer.writeAll(@typeName(T));
8021abe4: 97 65 00 00  	auipc	a1, 6
8021abe8: 93 85 45 20  	addi	a1, a1, 516
8021abec: 97 60 fe ff  	auipc	ra, 1048550
8021abf0: e7 80 60 ec  	jalr	-314(ra)
8021abf4: 23 16 a4 fe  	sh	a0, -20(s0)
;             if (max_depth == 0) {
8021abf8: 03 35 04 f1  	ld	a0, -240(s0)
8021abfc: 81 45        	mv	a1, zero
8021abfe: 63 15 b5 04  	bne	a0, a1, 0x8021ac48 <.LBB441_14+0x40>
8021ac02: 09 a0        	j	0x8021ac04 <.LBB441_13+0x20>
;                 return writer.writeAll("{ ... }");
8021ac04: 03 35 84 f0  	ld	a0, -248(s0)

000000008021ac08 <.LBB441_14>:
8021ac08: 97 65 00 00  	auipc	a1, 6
8021ac0c: 93 85 05 1f  	addi	a1, a1, 496
8021ac10: 97 60 fe ff  	auipc	ra, 1048550
8021ac14: e7 80 20 ea  	jalr	-350(ra)
8021ac18: aa 85        	mv	a1, a0
8021ac1a: 41 65        	lui	a0, 16
8021ac1c: 7d 35        	addiw	a0, a0, -1
8021ac1e: 6d 8d        	and	a0, a0, a1
8021ac20: 23 17 b4 fe  	sh	a1, -18(s0)
8021ac24: 81 45        	mv	a1, zero
8021ac26: 63 0a b5 00  	beq	a0, a1, 0x8021ac3a <.LBB441_14+0x32>
8021ac2a: 09 a0        	j	0x8021ac2c <.LBB441_14+0x24>
8021ac2c: 03 35 84 f0  	ld	a0, -248(s0)
8021ac30: 97 60 fe ff  	auipc	ra, 1048550
8021ac34: e7 80 20 c7  	jalr	-910(ra)
8021ac38: 11 a0        	j	0x8021ac3c <.LBB441_14+0x34>
8021ac3a: 09 a0        	j	0x8021ac3c <.LBB441_14+0x34>
8021ac3c: 03 15 e4 fe  	lh	a0, -18(s0)
8021ac40: 52 74        	ld	s0, 304(sp)
8021ac42: f2 70        	ld	ra, 312(sp)
8021ac44: 31 61        	addi	sp, sp, 320
8021ac46: 82 80        	ret
;             if (max_depth == 0) {
8021ac48: 09 a0        	j	0x8021ac4a <.LBB441_14+0x42>
;             try writer.writeAll("{");
8021ac4a: 03 35 84 f0  	ld	a0, -248(s0)

000000008021ac4e <.LBB441_15>:
8021ac4e: 97 65 00 00  	auipc	a1, 6
8021ac52: 93 85 a5 1b  	addi	a1, a1, 442
8021ac56: 97 60 fe ff  	auipc	ra, 1048550
8021ac5a: e7 80 c0 e5  	jalr	-420(ra)
8021ac5e: aa 85        	mv	a1, a0
8021ac60: 03 35 84 f0  	ld	a0, -248(s0)
8021ac64: 23 15 b4 fe  	sh	a1, -22(s0)

000000008021ac68 <.LBB441_16>:
;                     try writer.writeAll(" .");
8021ac68: 97 65 00 00  	auipc	a1, 6
8021ac6c: 93 85 05 1b  	addi	a1, a1, 432
8021ac70: 97 60 fe ff  	auipc	ra, 1048550
8021ac74: e7 80 20 e4  	jalr	-446(ra)
8021ac78: aa 85        	mv	a1, a0
8021ac7a: 03 35 84 f0  	ld	a0, -248(s0)
8021ac7e: 23 14 b4 fe  	sh	a1, -24(s0)

000000008021ac82 <.LBB441_17>:
;                 try writer.writeAll(f.name);
8021ac82: 97 65 00 00  	auipc	a1, 6
8021ac86: 93 85 65 1a  	addi	a1, a1, 422
8021ac8a: 97 60 fe ff  	auipc	ra, 1048550
8021ac8e: e7 80 80 e2  	jalr	-472(ra)
8021ac92: aa 85        	mv	a1, a0
8021ac94: 03 35 84 f0  	ld	a0, -248(s0)
8021ac98: 23 13 b4 fe  	sh	a1, -26(s0)

000000008021ac9c <.LBB441_18>:
;                 try writer.writeAll(" = ");
8021ac9c: 97 65 00 00  	auipc	a1, 6
8021aca0: 93 85 c5 19  	addi	a1, a1, 412
8021aca4: 97 60 fe ff  	auipc	ra, 1048550
8021aca8: e7 80 e0 e0  	jalr	-498(ra)
8021acac: 83 35 04 f0  	ld	a1, -256(s0)
8021acb0: 2a 86        	mv	a2, a0
8021acb2: 03 35 84 ef  	ld	a0, -264(s0)
8021acb6: 23 12 c4 fe  	sh	a2, -28(s0)
;                 try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
8021acba: 2e 86        	mv	a2, a1
8021acbc: 23 34 c4 ee  	sd	a2, -280(s0)
8021acc0: 83 e6 05 00  	lwu	a3, 0(a1)
8021acc4: 03 e6 45 00  	lwu	a2, 4(a1)
8021acc8: 02 16        	slli	a2, a2, 32
8021acca: 55 8e        	or	a2, a2, a3
8021accc: 23 38 c4 fc  	sd	a2, -48(s0)
8021acd0: 03 e6 85 00  	lwu	a2, 8(a1)
8021acd4: 83 e5 c5 00  	lwu	a1, 12(a1)
8021acd8: 82 15        	slli	a1, a1, 32
8021acda: d1 8d        	or	a1, a1, a2
8021acdc: 23 3c b4 fc  	sd	a1, -40(s0)
8021ace0: 0c 6d        	ld	a1, 24(a0)
8021ace2: 23 30 b4 fc  	sd	a1, -64(s0)
8021ace6: 0c 69        	ld	a1, 16(a0)
8021ace8: 23 3c b4 fa  	sd	a1, -72(s0)
8021acec: 0c 65        	ld	a1, 8(a0)
8021acee: 23 38 b4 fa  	sd	a1, -80(s0)
8021acf2: 0c 61        	ld	a1, 0(a0)
8021acf4: 23 34 b4 fa  	sd	a1, -88(s0)
8021acf8: 08 71        	ld	a0, 32(a0)
8021acfa: 23 34 a4 fc  	sd	a0, -56(s0)
8021acfe: 03 35 04 f1  	ld	a0, -240(s0)
8021ad02: 93 05 f5 ff  	addi	a1, a0, -1
8021ad06: 23 38 b4 ee  	sd	a1, -272(s0)
8021ad0a: 63 7c b5 00  	bgeu	a0, a1, 0x8021ad22 <.LBB441_19+0x12>
8021ad0e: 09 a0        	j	0x8021ad10 <.LBB441_19>

000000008021ad10 <.LBB441_19>:
8021ad10: 17 25 00 00  	auipc	a0, 2
8021ad14: 13 05 05 77  	addi	a0, a0, 1904
8021ad18: 81 45        	mv	a1, zero
8021ad1a: 97 50 fe ff  	auipc	ra, 1048549
8021ad1e: e7 80 60 38  	jalr	902(ra)
8021ad22: 03 36 84 ef  	ld	a2, -264(s0)
8021ad26: 03 35 84 f0  	ld	a0, -248(s0)
8021ad2a: 83 36 04 ef  	ld	a3, -272(s0)
8021ad2e: 83 35 84 ee  	ld	a1, -280(s0)
8021ad32: 23 30 d4 fa  	sd	a3, -96(s0)
8021ad36: 97 00 00 00  	auipc	ra, 0
8021ad3a: e7 80 a0 22  	jalr	554(ra)
8021ad3e: aa 85        	mv	a1, a0
8021ad40: 03 35 84 f0  	ld	a0, -248(s0)
8021ad44: 23 1f b4 f8  	sh	a1, -98(s0)

000000008021ad48 <.LBB441_20>:
;                     try writer.writeAll(", .");
8021ad48: 97 65 00 00  	auipc	a1, 6
8021ad4c: 93 85 05 10  	addi	a1, a1, 256
8021ad50: 97 60 fe ff  	auipc	ra, 1048550
8021ad54: e7 80 20 d6  	jalr	-670(ra)
8021ad58: aa 85        	mv	a1, a0
8021ad5a: 03 35 84 f0  	ld	a0, -248(s0)
8021ad5e: 23 1e b4 f8  	sh	a1, -100(s0)

000000008021ad62 <.LBB441_21>:
;                 try writer.writeAll(f.name);
8021ad62: 97 65 00 00  	auipc	a1, 6
8021ad66: 93 85 65 0f  	addi	a1, a1, 246
8021ad6a: 97 60 fe ff  	auipc	ra, 1048550
8021ad6e: e7 80 80 d4  	jalr	-696(ra)
8021ad72: aa 85        	mv	a1, a0
8021ad74: 03 35 84 f0  	ld	a0, -248(s0)
8021ad78: 23 1d b4 f8  	sh	a1, -102(s0)

000000008021ad7c <.LBB441_22>:
;                 try writer.writeAll(" = ");
8021ad7c: 97 65 00 00  	auipc	a1, 6
8021ad80: 93 85 c5 0e  	addi	a1, a1, 236
8021ad84: 97 60 fe ff  	auipc	ra, 1048550
8021ad88: e7 80 e0 d2  	jalr	-722(ra)
8021ad8c: 83 35 04 f0  	ld	a1, -256(s0)
8021ad90: 2a 86        	mv	a2, a0
8021ad92: 03 35 84 ef  	ld	a0, -264(s0)
8021ad96: 23 1c c4 f8  	sh	a2, -104(s0)
;                 try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
8021ad9a: 83 e5 05 01  	lwu	a1, 16(a1)
8021ad9e: 23 3c b4 ec  	sd	a1, -296(s0)
8021ada2: 23 2a b4 f8  	sw	a1, -108(s0)
8021ada6: 0c 71        	ld	a1, 32(a0)
8021ada8: 23 34 b4 f8  	sd	a1, -120(s0)
8021adac: 0c 6d        	ld	a1, 24(a0)
8021adae: 23 30 b4 f8  	sd	a1, -128(s0)
8021adb2: 0c 69        	ld	a1, 16(a0)
8021adb4: 23 3c b4 f6  	sd	a1, -136(s0)
8021adb8: 0c 65        	ld	a1, 8(a0)
8021adba: 23 38 b4 f6  	sd	a1, -144(s0)
8021adbe: 08 61        	ld	a0, 0(a0)
8021adc0: 23 34 a4 f6  	sd	a0, -152(s0)
8021adc4: 03 35 04 f1  	ld	a0, -240(s0)
8021adc8: 93 05 f5 ff  	addi	a1, a0, -1
8021adcc: 23 30 b4 ee  	sd	a1, -288(s0)
8021add0: 63 7c b5 00  	bgeu	a0, a1, 0x8021ade8 <.LBB441_23+0x12>
8021add4: 09 a0        	j	0x8021add6 <.LBB441_23>

000000008021add6 <.LBB441_23>:
8021add6: 17 25 00 00  	auipc	a0, 2
8021adda: 13 05 a5 6a  	addi	a0, a0, 1706
8021adde: 81 45        	mv	a1, zero
8021ade0: 97 50 fe ff  	auipc	ra, 1048549
8021ade4: e7 80 00 2c  	jalr	704(ra)
8021ade8: 03 36 84 ef  	ld	a2, -264(s0)
8021adec: 03 35 84 f0  	ld	a0, -248(s0)
8021adf0: 83 36 04 ee  	ld	a3, -288(s0)
8021adf4: 83 35 84 ed  	ld	a1, -296(s0)
8021adf8: 23 30 d4 f6  	sd	a3, -160(s0)
8021adfc: 97 00 00 00  	auipc	ra, 0
8021ae00: e7 80 a0 53  	jalr	1338(ra)
8021ae04: aa 85        	mv	a1, a0
8021ae06: 03 35 84 f0  	ld	a0, -248(s0)
8021ae0a: 23 1f b4 f4  	sh	a1, -162(s0)

000000008021ae0e <.LBB441_24>:
;                     try writer.writeAll(", .");
8021ae0e: 97 65 00 00  	auipc	a1, 6
8021ae12: 93 85 a5 06  	addi	a1, a1, 106
8021ae16: 97 60 fe ff  	auipc	ra, 1048550
8021ae1a: e7 80 c0 c9  	jalr	-868(ra)
8021ae1e: aa 85        	mv	a1, a0
8021ae20: 03 35 84 f0  	ld	a0, -248(s0)
8021ae24: 23 1e b4 f4  	sh	a1, -164(s0)

000000008021ae28 <.LBB441_25>:
;                 try writer.writeAll(f.name);
8021ae28: 97 65 00 00  	auipc	a1, 6
8021ae2c: 93 85 05 06  	addi	a1, a1, 96
8021ae30: 97 60 fe ff  	auipc	ra, 1048550
8021ae34: e7 80 20 c8  	jalr	-894(ra)
8021ae38: aa 85        	mv	a1, a0
8021ae3a: 03 35 84 f0  	ld	a0, -248(s0)
8021ae3e: 23 1d b4 f4  	sh	a1, -166(s0)

000000008021ae42 <.LBB441_26>:
;                 try writer.writeAll(" = ");
8021ae42: 97 65 00 00  	auipc	a1, 6
8021ae46: 93 85 65 05  	addi	a1, a1, 86
8021ae4a: 97 60 fe ff  	auipc	ra, 1048550
8021ae4e: e7 80 80 c6  	jalr	-920(ra)
8021ae52: 83 35 04 f0  	ld	a1, -256(s0)
8021ae56: 2a 86        	mv	a2, a0
8021ae58: 03 35 84 ef  	ld	a0, -264(s0)
8021ae5c: 23 1c c4 f4  	sh	a2, -168(s0)
;                 try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
8021ae60: 83 e5 45 01  	lwu	a1, 20(a1)
8021ae64: 23 34 b4 ec  	sd	a1, -312(s0)
8021ae68: 23 2a b4 f4  	sw	a1, -172(s0)
8021ae6c: 0c 71        	ld	a1, 32(a0)
8021ae6e: 23 34 b4 f4  	sd	a1, -184(s0)
8021ae72: 0c 6d        	ld	a1, 24(a0)
8021ae74: 23 30 b4 f4  	sd	a1, -192(s0)
8021ae78: 0c 69        	ld	a1, 16(a0)
8021ae7a: 23 3c b4 f2  	sd	a1, -200(s0)
8021ae7e: 0c 65        	ld	a1, 8(a0)
8021ae80: 23 38 b4 f2  	sd	a1, -208(s0)
8021ae84: 08 61        	ld	a0, 0(a0)
8021ae86: 23 34 a4 f2  	sd	a0, -216(s0)
8021ae8a: 03 35 04 f1  	ld	a0, -240(s0)
8021ae8e: 93 05 f5 ff  	addi	a1, a0, -1
8021ae92: 23 38 b4 ec  	sd	a1, -304(s0)
8021ae96: 63 7c b5 00  	bgeu	a0, a1, 0x8021aeae <.LBB441_27+0x12>
8021ae9a: 09 a0        	j	0x8021ae9c <.LBB441_27>

000000008021ae9c <.LBB441_27>:
8021ae9c: 17 25 00 00  	auipc	a0, 2
8021aea0: 13 05 45 5e  	addi	a0, a0, 1508
8021aea4: 81 45        	mv	a1, zero
8021aea6: 97 50 fe ff  	auipc	ra, 1048549
8021aeaa: e7 80 a0 1f  	jalr	506(ra)
8021aeae: 03 35 84 f0  	ld	a0, -248(s0)
8021aeb2: 83 36 04 ed  	ld	a3, -304(s0)
8021aeb6: 03 36 84 ef  	ld	a2, -264(s0)
8021aeba: 83 35 84 ec  	ld	a1, -312(s0)
8021aebe: 23 30 d4 f2  	sd	a3, -224(s0)
8021aec2: 97 00 00 00  	auipc	ra, 0
8021aec6: e7 80 40 47  	jalr	1140(ra)
8021aeca: aa 85        	mv	a1, a0
8021aecc: 03 35 84 f0  	ld	a0, -248(s0)
8021aed0: 23 1f b4 f0  	sh	a1, -226(s0)

000000008021aed4 <.LBB441_28>:
;             try writer.writeAll(" }");
8021aed4: 97 65 00 00  	auipc	a1, 6
8021aed8: 93 85 45 fd  	addi	a1, a1, -44
8021aedc: 97 60 fe ff  	auipc	ra, 1048550
8021aee0: e7 80 60 bd  	jalr	-1066(ra)
8021aee4: 23 1e a4 f0  	sh	a0, -228(s0)
8021aee8: 01 45        	mv	a0, zero
; ) @TypeOf(writer).Error!void {
8021aeea: 23 17 a4 fe  	sh	a0, -18(s0)
8021aeee: 52 74        	ld	s0, 304(sp)
8021aef0: f2 70        	ld	ra, 312(sp)
8021aef2: 31 61        	addi	sp, sp, 320
8021aef4: 82 80        	ret

000000008021aef6 <std.fmt.formatValue.360>:
; fn formatValue(
8021aef6: 1d 71        	addi	sp, sp, -96
8021aef8: 86 ec        	sd	ra, 88(sp)
8021aefa: a2 e8        	sd	s0, 80(sp)
8021aefc: 80 10        	addi	s0, sp, 96
8021aefe: 23 34 a4 fa  	sd	a0, -88(s0)
8021af02: 23 38 b4 fa  	sd	a1, -80(s0)
;         .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
8021af06: 23 30 b4 fe  	sd	a1, -32(s0)
8021af0a: 14 62        	ld	a3, 0(a2)
8021af0c: 23 3c d4 fa  	sd	a3, -72(s0)
8021af10: 14 66        	ld	a3, 8(a2)
8021af12: 23 30 d4 fc  	sd	a3, -64(s0)
8021af16: 14 6a        	ld	a3, 16(a2)
8021af18: 23 34 d4 fc  	sd	a3, -56(s0)
8021af1c: 14 6e        	ld	a3, 24(a2)
8021af1e: 23 38 d4 fc  	sd	a3, -48(s0)
8021af22: 14 72        	ld	a3, 32(a2)
8021af24: 23 3c d4 fc  	sd	a3, -40(s0)
8021af28: 97 10 00 00  	auipc	ra, 1
8021af2c: e7 80 20 36  	jalr	866(ra)
8021af30: aa 85        	mv	a1, a0
8021af32: 41 65        	lui	a0, 16
8021af34: 7d 35        	addiw	a0, a0, -1
8021af36: 6d 8d        	and	a0, a0, a1
8021af38: 23 17 b4 fe  	sh	a1, -18(s0)
8021af3c: 81 45        	mv	a1, zero
8021af3e: 63 0a b5 00  	beq	a0, a1, 0x8021af52 <std.fmt.formatValue.360+0x5c>
8021af42: 09 a0        	j	0x8021af44 <std.fmt.formatValue.360+0x4e>
8021af44: 03 35 84 fa  	ld	a0, -88(s0)
8021af48: 97 60 fe ff  	auipc	ra, 1048550
8021af4c: e7 80 a0 95  	jalr	-1702(ra)
8021af50: 11 a0        	j	0x8021af54 <std.fmt.formatValue.360+0x5e>
8021af52: 09 a0        	j	0x8021af54 <std.fmt.formatValue.360+0x5e>
8021af54: 03 15 e4 fe  	lh	a0, -18(s0)
8021af58: 46 64        	ld	s0, 80(sp)
8021af5a: e6 60        	ld	ra, 88(sp)
8021af5c: 25 61        	addi	sp, sp, 96
8021af5e: 82 80        	ret

000000008021af60 <std.fmt.formatType.361>:
; pub fn formatType(
8021af60: 09 71        	addi	sp, sp, -384
;     options: FormatOptions,
8021af62: 86 fe        	sd	ra, 376(sp)
8021af64: a2 fa        	sd	s0, 368(sp)
8021af66: 00 03        	addi	s0, sp, 384
8021af68: 23 34 c4 ec  	sd	a2, -312(s0)
;     value: anytype,
8021af6c: 23 38 b4 ec  	sd	a1, -304(s0)
8021af70: 23 3c a4 ec  	sd	a0, -296(s0)
8021af74: 23 30 d4 ee  	sd	a3, -288(s0)

000000008021af78 <.LBB443_15>:
;             try writer.writeAll(@typeName(T));
8021af78: 97 75 00 00  	auipc	a1, 7
8021af7c: 93 85 05 ad  	addi	a1, a1, -1328
8021af80: 97 60 fe ff  	auipc	ra, 1048550
8021af84: e7 80 20 b3  	jalr	-1230(ra)
8021af88: 23 16 a4 fe  	sh	a0, -20(s0)
;             if (max_depth == 0) {
8021af8c: 03 35 04 ee  	ld	a0, -288(s0)
8021af90: 81 45        	mv	a1, zero
8021af92: 63 15 b5 04  	bne	a0, a1, 0x8021afdc <.LBB443_16+0x40>
8021af96: 09 a0        	j	0x8021af98 <.LBB443_15+0x20>
;                 return writer.writeAll("{ ... }");
8021af98: 03 35 84 ed  	ld	a0, -296(s0)

000000008021af9c <.LBB443_16>:
8021af9c: 97 75 00 00  	auipc	a1, 7
8021afa0: 93 85 c5 ab  	addi	a1, a1, -1348
8021afa4: 97 60 fe ff  	auipc	ra, 1048550
8021afa8: e7 80 e0 b0  	jalr	-1266(ra)
8021afac: aa 85        	mv	a1, a0
8021afae: 41 65        	lui	a0, 16
8021afb0: 7d 35        	addiw	a0, a0, -1
8021afb2: 6d 8d        	and	a0, a0, a1
8021afb4: 23 17 b4 fe  	sh	a1, -18(s0)
8021afb8: 81 45        	mv	a1, zero
8021afba: 63 0a b5 00  	beq	a0, a1, 0x8021afce <.LBB443_16+0x32>
8021afbe: 09 a0        	j	0x8021afc0 <.LBB443_16+0x24>
8021afc0: 03 35 84 ed  	ld	a0, -296(s0)
8021afc4: 97 60 fe ff  	auipc	ra, 1048550
8021afc8: e7 80 e0 8d  	jalr	-1826(ra)
8021afcc: 11 a0        	j	0x8021afd0 <.LBB443_16+0x34>
8021afce: 09 a0        	j	0x8021afd0 <.LBB443_16+0x34>
8021afd0: 03 15 e4 fe  	lh	a0, -18(s0)
8021afd4: 56 74        	ld	s0, 368(sp)
8021afd6: f6 70        	ld	ra, 376(sp)
8021afd8: 19 61        	addi	sp, sp, 384
8021afda: 82 80        	ret
;             if (max_depth == 0) {
8021afdc: 09 a0        	j	0x8021afde <.LBB443_16+0x42>
;             try writer.writeAll("{");
8021afde: 03 35 84 ed  	ld	a0, -296(s0)

000000008021afe2 <.LBB443_17>:
8021afe2: 97 75 00 00  	auipc	a1, 7
8021afe6: 93 85 65 a8  	addi	a1, a1, -1402
8021afea: 97 60 fe ff  	auipc	ra, 1048550
8021afee: e7 80 80 ac  	jalr	-1336(ra)
8021aff2: aa 85        	mv	a1, a0
8021aff4: 03 35 84 ed  	ld	a0, -296(s0)
8021aff8: 23 15 b4 fe  	sh	a1, -22(s0)

000000008021affc <.LBB443_18>:
;                     try writer.writeAll(" .");
8021affc: 97 75 00 00  	auipc	a1, 7
8021b000: 93 85 c5 a7  	addi	a1, a1, -1412
8021b004: 97 60 fe ff  	auipc	ra, 1048550
8021b008: e7 80 e0 aa  	jalr	-1362(ra)
8021b00c: aa 85        	mv	a1, a0
8021b00e: 03 35 84 ed  	ld	a0, -296(s0)
8021b012: 23 14 b4 fe  	sh	a1, -24(s0)

000000008021b016 <.LBB443_19>:
;                 try writer.writeAll(f.name);
8021b016: 97 75 00 00  	auipc	a1, 7
8021b01a: 93 85 25 a7  	addi	a1, a1, -1422
8021b01e: 97 60 fe ff  	auipc	ra, 1048550
8021b022: e7 80 40 a9  	jalr	-1388(ra)
8021b026: aa 85        	mv	a1, a0
8021b028: 03 35 84 ed  	ld	a0, -296(s0)
8021b02c: 23 13 b4 fe  	sh	a1, -26(s0)

000000008021b030 <.LBB443_20>:
;                 try writer.writeAll(" = ");
8021b030: 97 75 00 00  	auipc	a1, 7
8021b034: 93 85 85 a6  	addi	a1, a1, -1432
8021b038: 97 60 fe ff  	auipc	ra, 1048550
8021b03c: e7 80 a0 a7  	jalr	-1414(ra)
8021b040: 83 35 04 ed  	ld	a1, -304(s0)
8021b044: 2a 86        	mv	a2, a0
8021b046: 03 35 84 ec  	ld	a0, -312(s0)
8021b04a: 23 12 c4 fe  	sh	a2, -28(s0)
;                 try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
8021b04e: 83 e5 05 00  	lwu	a1, 0(a1)
8021b052: 23 3c b4 ea  	sd	a1, -328(s0)
8021b056: 23 20 b4 fe  	sw	a1, -32(s0)
8021b05a: 0c 71        	ld	a1, 32(a0)
8021b05c: 23 3c b4 fc  	sd	a1, -40(s0)
8021b060: 0c 6d        	ld	a1, 24(a0)
8021b062: 23 38 b4 fc  	sd	a1, -48(s0)
8021b066: 0c 69        	ld	a1, 16(a0)
8021b068: 23 34 b4 fc  	sd	a1, -56(s0)
8021b06c: 0c 65        	ld	a1, 8(a0)
8021b06e: 23 30 b4 fc  	sd	a1, -64(s0)
8021b072: 08 61        	ld	a0, 0(a0)
8021b074: 23 3c a4 fa  	sd	a0, -72(s0)
8021b078: 03 35 04 ee  	ld	a0, -288(s0)
8021b07c: 93 05 f5 ff  	addi	a1, a0, -1
8021b080: 23 30 b4 ec  	sd	a1, -320(s0)
8021b084: 63 7c b5 00  	bgeu	a0, a1, 0x8021b09c <.LBB443_21+0x12>
8021b088: 09 a0        	j	0x8021b08a <.LBB443_21>

000000008021b08a <.LBB443_21>:
8021b08a: 17 25 00 00  	auipc	a0, 2
8021b08e: 13 05 65 3f  	addi	a0, a0, 1014
8021b092: 81 45        	mv	a1, zero
8021b094: 97 50 fe ff  	auipc	ra, 1048549
8021b098: e7 80 c0 00  	jalr	12(ra)
8021b09c: 03 36 84 ec  	ld	a2, -312(s0)
8021b0a0: 03 35 84 ed  	ld	a0, -296(s0)
8021b0a4: 83 36 04 ec  	ld	a3, -320(s0)
8021b0a8: 83 35 84 eb  	ld	a1, -328(s0)
8021b0ac: 23 38 d4 fa  	sd	a3, -80(s0)
8021b0b0: 97 00 00 00  	auipc	ra, 0
8021b0b4: e7 80 60 28  	jalr	646(ra)
8021b0b8: aa 85        	mv	a1, a0
8021b0ba: 03 35 84 ed  	ld	a0, -296(s0)
8021b0be: 23 17 b4 fa  	sh	a1, -82(s0)

000000008021b0c2 <.LBB443_22>:
;                     try writer.writeAll(", .");
8021b0c2: 97 75 00 00  	auipc	a1, 7
8021b0c6: 93 85 65 9e  	addi	a1, a1, -1562
8021b0ca: 97 60 fe ff  	auipc	ra, 1048550
8021b0ce: e7 80 80 9e  	jalr	-1560(ra)
8021b0d2: aa 85        	mv	a1, a0
8021b0d4: 03 35 84 ed  	ld	a0, -296(s0)
8021b0d8: 23 16 b4 fa  	sh	a1, -84(s0)

000000008021b0dc <.LBB443_23>:
;                 try writer.writeAll(f.name);
8021b0dc: 97 75 00 00  	auipc	a1, 7
8021b0e0: 93 85 c5 9d  	addi	a1, a1, -1572
8021b0e4: 97 60 fe ff  	auipc	ra, 1048550
8021b0e8: e7 80 e0 9c  	jalr	-1586(ra)
8021b0ec: aa 85        	mv	a1, a0
8021b0ee: 03 35 84 ed  	ld	a0, -296(s0)
8021b0f2: 23 15 b4 fa  	sh	a1, -86(s0)

000000008021b0f6 <.LBB443_24>:
;                 try writer.writeAll(" = ");
8021b0f6: 97 75 00 00  	auipc	a1, 7
8021b0fa: 93 85 25 9d  	addi	a1, a1, -1582
8021b0fe: 97 60 fe ff  	auipc	ra, 1048550
8021b102: e7 80 40 9b  	jalr	-1612(ra)
8021b106: 83 35 04 ed  	ld	a1, -304(s0)
8021b10a: 2a 86        	mv	a2, a0
8021b10c: 03 35 84 ec  	ld	a0, -312(s0)
8021b110: 23 14 c4 fa  	sh	a2, -88(s0)
;                 try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
8021b114: 83 e5 45 00  	lwu	a1, 4(a1)
8021b118: 23 34 b4 ea  	sd	a1, -344(s0)
8021b11c: 23 22 b4 fa  	sw	a1, -92(s0)
8021b120: 0c 71        	ld	a1, 32(a0)
8021b122: 23 3c b4 f8  	sd	a1, -104(s0)
8021b126: 0c 6d        	ld	a1, 24(a0)
8021b128: 23 38 b4 f8  	sd	a1, -112(s0)
8021b12c: 0c 69        	ld	a1, 16(a0)
8021b12e: 23 34 b4 f8  	sd	a1, -120(s0)
8021b132: 0c 65        	ld	a1, 8(a0)
8021b134: 23 30 b4 f8  	sd	a1, -128(s0)
8021b138: 08 61        	ld	a0, 0(a0)
8021b13a: 23 3c a4 f6  	sd	a0, -136(s0)
8021b13e: 03 35 04 ee  	ld	a0, -288(s0)
8021b142: 93 05 f5 ff  	addi	a1, a0, -1
8021b146: 23 38 b4 ea  	sd	a1, -336(s0)
8021b14a: 63 7c b5 00  	bgeu	a0, a1, 0x8021b162 <.LBB443_25+0x12>
8021b14e: 09 a0        	j	0x8021b150 <.LBB443_25>

000000008021b150 <.LBB443_25>:
8021b150: 17 25 00 00  	auipc	a0, 2
8021b154: 13 05 05 33  	addi	a0, a0, 816
8021b158: 81 45        	mv	a1, zero
8021b15a: 97 50 fe ff  	auipc	ra, 1048549
8021b15e: e7 80 60 f4  	jalr	-186(ra)
8021b162: 03 36 84 ec  	ld	a2, -312(s0)
8021b166: 03 35 84 ed  	ld	a0, -296(s0)
8021b16a: 83 36 04 eb  	ld	a3, -336(s0)
8021b16e: 83 35 84 ea  	ld	a1, -344(s0)
8021b172: 23 38 d4 f6  	sd	a3, -144(s0)
8021b176: 97 00 00 00  	auipc	ra, 0
8021b17a: e7 80 00 1c  	jalr	448(ra)
8021b17e: aa 85        	mv	a1, a0
8021b180: 03 35 84 ed  	ld	a0, -296(s0)
8021b184: 23 17 b4 f6  	sh	a1, -146(s0)

000000008021b188 <.LBB443_26>:
;                     try writer.writeAll(", .");
8021b188: 97 75 00 00  	auipc	a1, 7
8021b18c: 93 85 05 95  	addi	a1, a1, -1712
8021b190: 97 60 fe ff  	auipc	ra, 1048550
8021b194: e7 80 20 92  	jalr	-1758(ra)
8021b198: aa 85        	mv	a1, a0
8021b19a: 03 35 84 ed  	ld	a0, -296(s0)
8021b19e: 23 16 b4 f6  	sh	a1, -148(s0)

000000008021b1a2 <.LBB443_27>:
;                 try writer.writeAll(f.name);
8021b1a2: 97 75 00 00  	auipc	a1, 7
8021b1a6: 93 85 65 94  	addi	a1, a1, -1722
8021b1aa: 97 60 fe ff  	auipc	ra, 1048550
8021b1ae: e7 80 80 90  	jalr	-1784(ra)
8021b1b2: aa 85        	mv	a1, a0
8021b1b4: 03 35 84 ed  	ld	a0, -296(s0)
8021b1b8: 23 15 b4 f6  	sh	a1, -150(s0)

000000008021b1bc <.LBB443_28>:
;                 try writer.writeAll(" = ");
8021b1bc: 97 75 00 00  	auipc	a1, 7
8021b1c0: 93 85 c5 93  	addi	a1, a1, -1732
8021b1c4: 97 60 fe ff  	auipc	ra, 1048550
8021b1c8: e7 80 e0 8e  	jalr	-1810(ra)
8021b1cc: 83 35 04 ed  	ld	a1, -304(s0)
8021b1d0: 2a 86        	mv	a2, a0
8021b1d2: 03 35 84 ec  	ld	a0, -312(s0)
8021b1d6: 23 14 c4 f6  	sh	a2, -152(s0)
;                 try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
8021b1da: 83 e5 85 00  	lwu	a1, 8(a1)
8021b1de: 23 3c b4 e8  	sd	a1, -360(s0)
8021b1e2: 23 22 b4 f6  	sw	a1, -156(s0)
8021b1e6: 0c 71        	ld	a1, 32(a0)
8021b1e8: 23 3c b4 f4  	sd	a1, -168(s0)
8021b1ec: 0c 6d        	ld	a1, 24(a0)
8021b1ee: 23 38 b4 f4  	sd	a1, -176(s0)
8021b1f2: 0c 69        	ld	a1, 16(a0)
8021b1f4: 23 34 b4 f4  	sd	a1, -184(s0)
8021b1f8: 0c 65        	ld	a1, 8(a0)
8021b1fa: 23 30 b4 f4  	sd	a1, -192(s0)
8021b1fe: 08 61        	ld	a0, 0(a0)
8021b200: 23 3c a4 f2  	sd	a0, -200(s0)
8021b204: 03 35 04 ee  	ld	a0, -288(s0)
8021b208: 93 05 f5 ff  	addi	a1, a0, -1
8021b20c: 23 30 b4 ea  	sd	a1, -352(s0)
8021b210: 63 7c b5 00  	bgeu	a0, a1, 0x8021b228 <.LBB443_29+0x12>
8021b214: 09 a0        	j	0x8021b216 <.LBB443_29>

000000008021b216 <.LBB443_29>:
8021b216: 17 25 00 00  	auipc	a0, 2
8021b21a: 13 05 a5 26  	addi	a0, a0, 618
8021b21e: 81 45        	mv	a1, zero
8021b220: 97 50 fe ff  	auipc	ra, 1048549
8021b224: e7 80 00 e8  	jalr	-384(ra)
8021b228: 03 36 84 ec  	ld	a2, -312(s0)
8021b22c: 03 35 84 ed  	ld	a0, -296(s0)
8021b230: 83 36 04 ea  	ld	a3, -352(s0)
8021b234: 83 35 84 e9  	ld	a1, -360(s0)
8021b238: 23 38 d4 f2  	sd	a3, -208(s0)
8021b23c: 97 00 00 00  	auipc	ra, 0
8021b240: e7 80 a0 0f  	jalr	250(ra)
8021b244: aa 85        	mv	a1, a0
8021b246: 03 35 84 ed  	ld	a0, -296(s0)
8021b24a: 23 17 b4 f2  	sh	a1, -210(s0)

000000008021b24e <.LBB443_30>:
;                     try writer.writeAll(", .");
8021b24e: 97 75 00 00  	auipc	a1, 7
8021b252: 93 85 a5 8b  	addi	a1, a1, -1862
8021b256: 97 60 fe ff  	auipc	ra, 1048550
8021b25a: e7 80 c0 85  	jalr	-1956(ra)
8021b25e: aa 85        	mv	a1, a0
8021b260: 03 35 84 ed  	ld	a0, -296(s0)
8021b264: 23 16 b4 f2  	sh	a1, -212(s0)

000000008021b268 <.LBB443_31>:
;                 try writer.writeAll(f.name);
8021b268: 97 75 00 00  	auipc	a1, 7
8021b26c: 93 85 05 8b  	addi	a1, a1, -1872
8021b270: 97 60 fe ff  	auipc	ra, 1048550
8021b274: e7 80 20 84  	jalr	-1982(ra)
8021b278: aa 85        	mv	a1, a0
8021b27a: 03 35 84 ed  	ld	a0, -296(s0)
8021b27e: 23 15 b4 f2  	sh	a1, -214(s0)

000000008021b282 <.LBB443_32>:
;                 try writer.writeAll(" = ");
8021b282: 97 75 00 00  	auipc	a1, 7
8021b286: 93 85 65 8a  	addi	a1, a1, -1882
8021b28a: 97 60 fe ff  	auipc	ra, 1048550
8021b28e: e7 80 80 82  	jalr	-2008(ra)
8021b292: 83 35 04 ed  	ld	a1, -304(s0)
8021b296: 2a 86        	mv	a2, a0
8021b298: 03 35 84 ec  	ld	a0, -312(s0)
8021b29c: 23 14 c4 f2  	sh	a2, -216(s0)
;                 try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
8021b2a0: 83 e5 c5 00  	lwu	a1, 12(a1)
8021b2a4: 23 34 b4 e8  	sd	a1, -376(s0)
8021b2a8: 23 22 b4 f2  	sw	a1, -220(s0)
8021b2ac: 0c 71        	ld	a1, 32(a0)
8021b2ae: 23 3c b4 f0  	sd	a1, -232(s0)
8021b2b2: 0c 6d        	ld	a1, 24(a0)
8021b2b4: 23 38 b4 f0  	sd	a1, -240(s0)
8021b2b8: 0c 69        	ld	a1, 16(a0)
8021b2ba: 23 34 b4 f0  	sd	a1, -248(s0)
8021b2be: 0c 65        	ld	a1, 8(a0)
8021b2c0: 23 30 b4 f0  	sd	a1, -256(s0)
8021b2c4: 08 61        	ld	a0, 0(a0)
8021b2c6: 23 3c a4 ee  	sd	a0, -264(s0)
8021b2ca: 03 35 04 ee  	ld	a0, -288(s0)
8021b2ce: 93 05 f5 ff  	addi	a1, a0, -1
8021b2d2: 23 38 b4 e8  	sd	a1, -368(s0)
8021b2d6: 63 7c b5 00  	bgeu	a0, a1, 0x8021b2ee <.LBB443_33+0x12>
8021b2da: 09 a0        	j	0x8021b2dc <.LBB443_33>

000000008021b2dc <.LBB443_33>:
8021b2dc: 17 25 00 00  	auipc	a0, 2
8021b2e0: 13 05 45 1a  	addi	a0, a0, 420
8021b2e4: 81 45        	mv	a1, zero
8021b2e6: 97 50 fe ff  	auipc	ra, 1048549
8021b2ea: e7 80 a0 db  	jalr	-582(ra)
8021b2ee: 03 35 84 ed  	ld	a0, -296(s0)
8021b2f2: 83 36 04 e9  	ld	a3, -368(s0)
8021b2f6: 03 36 84 ec  	ld	a2, -312(s0)
8021b2fa: 83 35 84 e8  	ld	a1, -376(s0)
8021b2fe: 23 38 d4 ee  	sd	a3, -272(s0)
8021b302: 97 00 00 00  	auipc	ra, 0
8021b306: e7 80 40 03  	jalr	52(ra)
8021b30a: aa 85        	mv	a1, a0
8021b30c: 03 35 84 ed  	ld	a0, -296(s0)
8021b310: 23 17 b4 ee  	sh	a1, -274(s0)

000000008021b314 <.LBB443_34>:
;             try writer.writeAll(" }");
8021b314: 97 75 00 00  	auipc	a1, 7
8021b318: 93 85 45 82  	addi	a1, a1, -2012
8021b31c: 97 50 fe ff  	auipc	ra, 1048549
8021b320: e7 80 60 79  	jalr	1942(ra)
8021b324: 23 16 a4 ee  	sh	a0, -276(s0)
8021b328: 01 45        	mv	a0, zero
; ) @TypeOf(writer).Error!void {
8021b32a: 23 17 a4 fe  	sh	a0, -18(s0)
8021b32e: 56 74        	ld	s0, 368(sp)
8021b330: f6 70        	ld	ra, 376(sp)
8021b332: 19 61        	addi	sp, sp, 384
8021b334: 82 80        	ret

000000008021b336 <std.fmt.formatType.362>:
; pub fn formatType(
8021b336: 1d 71        	addi	sp, sp, -96
8021b338: 86 ec        	sd	ra, 88(sp)
8021b33a: a2 e8        	sd	s0, 80(sp)
8021b33c: 80 10        	addi	s0, sp, 96
8021b33e: 23 34 a4 fa  	sd	a0, -88(s0)
8021b342: 23 2e b4 fa  	sw	a1, -68(s0)
8021b346: 23 38 d4 fa  	sd	a3, -80(s0)
;             return formatValue(value, actual_fmt, options, writer);
8021b34a: 23 24 b4 fe  	sw	a1, -24(s0)
8021b34e: 14 62        	ld	a3, 0(a2)
8021b350: 23 30 d4 fc  	sd	a3, -64(s0)
8021b354: 14 66        	ld	a3, 8(a2)
8021b356: 23 34 d4 fc  	sd	a3, -56(s0)
8021b35a: 14 6a        	ld	a3, 16(a2)
8021b35c: 23 38 d4 fc  	sd	a3, -48(s0)
8021b360: 14 6e        	ld	a3, 24(a2)
8021b362: 23 3c d4 fc  	sd	a3, -40(s0)
8021b366: 14 72        	ld	a3, 32(a2)
8021b368: 23 30 d4 fe  	sd	a3, -32(s0)
8021b36c: 97 10 00 00  	auipc	ra, 1
8021b370: e7 80 80 1e  	jalr	488(ra)
8021b374: aa 85        	mv	a1, a0
8021b376: 41 65        	lui	a0, 16
8021b378: 7d 35        	addiw	a0, a0, -1
8021b37a: 6d 8d        	and	a0, a0, a1
8021b37c: 23 17 b4 fe  	sh	a1, -18(s0)
8021b380: 81 45        	mv	a1, zero
8021b382: 63 0a b5 00  	beq	a0, a1, 0x8021b396 <std.fmt.formatType.362+0x60>
8021b386: 09 a0        	j	0x8021b388 <std.fmt.formatType.362+0x52>
8021b388: 03 35 84 fa  	ld	a0, -88(s0)
8021b38c: 97 50 fe ff  	auipc	ra, 1048549
8021b390: e7 80 60 51  	jalr	1302(ra)
8021b394: 11 a0        	j	0x8021b398 <std.fmt.formatType.362+0x62>
8021b396: 09 a0        	j	0x8021b398 <std.fmt.formatType.362+0x62>
8021b398: 03 15 e4 fe  	lh	a0, -18(s0)
8021b39c: 46 64        	ld	s0, 80(sp)
8021b39e: e6 60        	ld	ra, 88(sp)
8021b3a0: 25 61        	addi	sp, sp, 96
8021b3a2: 82 80        	ret

000000008021b3a4 <std.fmt.formatType.363>:
; pub fn formatType(
8021b3a4: 69 71        	addi	sp, sp, -304
;     options: FormatOptions,
8021b3a6: 06 f6        	sd	ra, 296(sp)
8021b3a8: 22 f2        	sd	s0, 288(sp)
8021b3aa: 00 1a        	addi	s0, sp, 304
8021b3ac: 23 34 c4 f0  	sd	a2, -248(s0)
;     value: anytype,
8021b3b0: 23 38 b4 f0  	sd	a1, -240(s0)
8021b3b4: 23 3c a4 f0  	sd	a0, -232(s0)
8021b3b8: 23 30 d4 f2  	sd	a3, -224(s0)

000000008021b3bc <.LBB445_13>:
;             try writer.writeAll(@typeName(T));
8021b3bc: 97 65 00 00  	auipc	a1, 6
8021b3c0: 93 85 c5 c5  	addi	a1, a1, -932
8021b3c4: 97 50 fe ff  	auipc	ra, 1048549
8021b3c8: e7 80 e0 6e  	jalr	1774(ra)
8021b3cc: 23 16 a4 fe  	sh	a0, -20(s0)
;             if (max_depth == 0) {
8021b3d0: 03 35 04 f2  	ld	a0, -224(s0)
8021b3d4: 81 45        	mv	a1, zero
8021b3d6: 63 15 b5 04  	bne	a0, a1, 0x8021b420 <.LBB445_14+0x40>
8021b3da: 09 a0        	j	0x8021b3dc <.LBB445_13+0x20>
;                 return writer.writeAll("{ ... }");
8021b3dc: 03 35 84 f1  	ld	a0, -232(s0)

000000008021b3e0 <.LBB445_14>:
8021b3e0: 97 65 00 00  	auipc	a1, 6
8021b3e4: 93 85 85 c4  	addi	a1, a1, -952
8021b3e8: 97 50 fe ff  	auipc	ra, 1048549
8021b3ec: e7 80 a0 6c  	jalr	1738(ra)
8021b3f0: aa 85        	mv	a1, a0
8021b3f2: 41 65        	lui	a0, 16
8021b3f4: 7d 35        	addiw	a0, a0, -1
8021b3f6: 6d 8d        	and	a0, a0, a1
8021b3f8: 23 17 b4 fe  	sh	a1, -18(s0)
8021b3fc: 81 45        	mv	a1, zero
8021b3fe: 63 0a b5 00  	beq	a0, a1, 0x8021b412 <.LBB445_14+0x32>
8021b402: 09 a0        	j	0x8021b404 <.LBB445_14+0x24>
8021b404: 03 35 84 f1  	ld	a0, -232(s0)
8021b408: 97 50 fe ff  	auipc	ra, 1048549
8021b40c: e7 80 a0 49  	jalr	1178(ra)
8021b410: 11 a0        	j	0x8021b414 <.LBB445_14+0x34>
8021b412: 09 a0        	j	0x8021b414 <.LBB445_14+0x34>
8021b414: 03 15 e4 fe  	lh	a0, -18(s0)
8021b418: 12 74        	ld	s0, 288(sp)
8021b41a: b2 70        	ld	ra, 296(sp)
8021b41c: 55 61        	addi	sp, sp, 304
8021b41e: 82 80        	ret
;             if (max_depth == 0) {
8021b420: 09 a0        	j	0x8021b422 <.LBB445_14+0x42>
;             try writer.writeAll("{");
8021b422: 03 35 84 f1  	ld	a0, -232(s0)

000000008021b426 <.LBB445_15>:
8021b426: 97 65 00 00  	auipc	a1, 6
8021b42a: 93 85 25 c1  	addi	a1, a1, -1006
8021b42e: 97 50 fe ff  	auipc	ra, 1048549
8021b432: e7 80 40 68  	jalr	1668(ra)
8021b436: aa 85        	mv	a1, a0
8021b438: 03 35 84 f1  	ld	a0, -232(s0)
8021b43c: 23 15 b4 fe  	sh	a1, -22(s0)

000000008021b440 <.LBB445_16>:
;                     try writer.writeAll(" .");
8021b440: 97 65 00 00  	auipc	a1, 6
8021b444: 93 85 85 c0  	addi	a1, a1, -1016
8021b448: 97 50 fe ff  	auipc	ra, 1048549
8021b44c: e7 80 a0 66  	jalr	1642(ra)
8021b450: aa 85        	mv	a1, a0
8021b452: 03 35 84 f1  	ld	a0, -232(s0)
8021b456: 23 14 b4 fe  	sh	a1, -24(s0)

000000008021b45a <.LBB445_17>:
;                 try writer.writeAll(f.name);
8021b45a: 97 65 00 00  	auipc	a1, 6
8021b45e: 93 85 e5 bf  	addi	a1, a1, -1026
8021b462: 97 50 fe ff  	auipc	ra, 1048549
8021b466: e7 80 00 65  	jalr	1616(ra)
8021b46a: aa 85        	mv	a1, a0
8021b46c: 03 35 84 f1  	ld	a0, -232(s0)
8021b470: 23 13 b4 fe  	sh	a1, -26(s0)

000000008021b474 <.LBB445_18>:
;                 try writer.writeAll(" = ");
8021b474: 97 65 00 00  	auipc	a1, 6
8021b478: 93 85 45 bf  	addi	a1, a1, -1036
8021b47c: 97 50 fe ff  	auipc	ra, 1048549
8021b480: e7 80 60 63  	jalr	1590(ra)
8021b484: 83 35 04 f1  	ld	a1, -240(s0)
8021b488: 2a 86        	mv	a2, a0
8021b48a: 03 35 84 f0  	ld	a0, -248(s0)
8021b48e: 23 12 c4 fe  	sh	a2, -28(s0)
;                 try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
8021b492: 2e 86        	mv	a2, a1
8021b494: 23 3c c4 ee  	sd	a2, -264(s0)
8021b498: 03 c6 05 00  	lbu	a2, 0(a1)
8021b49c: 83 85 15 00  	lb	a1, 1(a1)
8021b4a0: a2 05        	slli	a1, a1, 8
8021b4a2: d1 8d        	or	a1, a1, a2
8021b4a4: 23 11 b4 fe  	sh	a1, -30(s0)
8021b4a8: 0c 6d        	ld	a1, 24(a0)
8021b4aa: 23 38 b4 fc  	sd	a1, -48(s0)
8021b4ae: 0c 69        	ld	a1, 16(a0)
8021b4b0: 23 34 b4 fc  	sd	a1, -56(s0)
8021b4b4: 0c 65        	ld	a1, 8(a0)
8021b4b6: 23 30 b4 fc  	sd	a1, -64(s0)
8021b4ba: 0c 61        	ld	a1, 0(a0)
8021b4bc: 23 3c b4 fa  	sd	a1, -72(s0)
8021b4c0: 08 71        	ld	a0, 32(a0)
8021b4c2: 23 3c a4 fc  	sd	a0, -40(s0)
8021b4c6: 03 35 04 f2  	ld	a0, -224(s0)
8021b4ca: 93 05 f5 ff  	addi	a1, a0, -1
8021b4ce: 23 30 b4 f0  	sd	a1, -256(s0)
8021b4d2: 63 7c b5 00  	bgeu	a0, a1, 0x8021b4ea <.LBB445_19+0x12>
8021b4d6: 09 a0        	j	0x8021b4d8 <.LBB445_19>

000000008021b4d8 <.LBB445_19>:
8021b4d8: 17 25 00 00  	auipc	a0, 2
8021b4dc: 13 05 85 fa  	addi	a0, a0, -88
8021b4e0: 81 45        	mv	a1, zero
8021b4e2: 97 50 fe ff  	auipc	ra, 1048549
8021b4e6: e7 80 e0 bb  	jalr	-1090(ra)
8021b4ea: 03 36 84 f0  	ld	a2, -248(s0)
8021b4ee: 03 35 84 f1  	ld	a0, -232(s0)
8021b4f2: 83 36 04 f0  	ld	a3, -256(s0)
8021b4f6: 83 35 84 ef  	ld	a1, -264(s0)
8021b4fa: 23 38 d4 fa  	sd	a3, -80(s0)
8021b4fe: 97 00 00 00  	auipc	ra, 0
8021b502: e7 80 00 1c  	jalr	448(ra)
8021b506: aa 85        	mv	a1, a0
8021b508: 03 35 84 f1  	ld	a0, -232(s0)
8021b50c: 23 17 b4 fa  	sh	a1, -82(s0)

000000008021b510 <.LBB445_20>:
;                     try writer.writeAll(", .");
8021b510: 97 65 00 00  	auipc	a1, 6
8021b514: 93 85 85 b6  	addi	a1, a1, -1176
8021b518: 97 50 fe ff  	auipc	ra, 1048549
8021b51c: e7 80 a0 59  	jalr	1434(ra)
8021b520: aa 85        	mv	a1, a0
8021b522: 03 35 84 f1  	ld	a0, -232(s0)
8021b526: 23 16 b4 fa  	sh	a1, -84(s0)

000000008021b52a <.LBB445_21>:
;                 try writer.writeAll(f.name);
8021b52a: 97 65 00 00  	auipc	a1, 6
8021b52e: 93 85 e5 b5  	addi	a1, a1, -1186
8021b532: 97 50 fe ff  	auipc	ra, 1048549
8021b536: e7 80 00 58  	jalr	1408(ra)
8021b53a: aa 85        	mv	a1, a0
8021b53c: 03 35 84 f1  	ld	a0, -232(s0)
8021b540: 23 15 b4 fa  	sh	a1, -86(s0)

000000008021b544 <.LBB445_22>:
;                 try writer.writeAll(" = ");
8021b544: 97 65 00 00  	auipc	a1, 6
8021b548: 93 85 45 b5  	addi	a1, a1, -1196
8021b54c: 97 50 fe ff  	auipc	ra, 1048549
8021b550: e7 80 60 56  	jalr	1382(ra)
8021b554: 83 35 04 f1  	ld	a1, -240(s0)
8021b558: 2a 86        	mv	a2, a0
8021b55a: 03 35 84 f0  	ld	a0, -248(s0)
8021b55e: 23 14 c4 fa  	sh	a2, -88(s0)
;                 try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
8021b562: 83 c5 25 00  	lbu	a1, 2(a1)
8021b566: 23 34 b4 ee  	sd	a1, -280(s0)
8021b56a: a3 03 b4 fa  	sb	a1, -89(s0)
8021b56e: 0c 71        	ld	a1, 32(a0)
8021b570: 23 3c b4 f8  	sd	a1, -104(s0)
8021b574: 0c 6d        	ld	a1, 24(a0)
8021b576: 23 38 b4 f8  	sd	a1, -112(s0)
8021b57a: 0c 69        	ld	a1, 16(a0)
8021b57c: 23 34 b4 f8  	sd	a1, -120(s0)
8021b580: 0c 65        	ld	a1, 8(a0)
8021b582: 23 30 b4 f8  	sd	a1, -128(s0)
8021b586: 08 61        	ld	a0, 0(a0)
8021b588: 23 3c a4 f6  	sd	a0, -136(s0)
8021b58c: 03 35 04 f2  	ld	a0, -224(s0)
8021b590: 93 05 f5 ff  	addi	a1, a0, -1
8021b594: 23 38 b4 ee  	sd	a1, -272(s0)
8021b598: 63 7c b5 00  	bgeu	a0, a1, 0x8021b5b0 <.LBB445_23+0x12>
8021b59c: 09 a0        	j	0x8021b59e <.LBB445_23>

000000008021b59e <.LBB445_23>:
8021b59e: 17 25 00 00  	auipc	a0, 2
8021b5a2: 13 05 25 ee  	addi	a0, a0, -286
8021b5a6: 81 45        	mv	a1, zero
8021b5a8: 97 50 fe ff  	auipc	ra, 1048549
8021b5ac: e7 80 80 af  	jalr	-1288(ra)
8021b5b0: 03 36 84 f0  	ld	a2, -248(s0)
8021b5b4: 03 35 84 f1  	ld	a0, -232(s0)
8021b5b8: 83 36 04 ef  	ld	a3, -272(s0)
8021b5bc: 83 35 84 ee  	ld	a1, -280(s0)
8021b5c0: 23 38 d4 f6  	sd	a3, -144(s0)
8021b5c4: 97 00 00 00  	auipc	ra, 0
8021b5c8: e7 80 a0 26  	jalr	618(ra)
8021b5cc: aa 85        	mv	a1, a0
8021b5ce: 03 35 84 f1  	ld	a0, -232(s0)
8021b5d2: 23 17 b4 f6  	sh	a1, -146(s0)

000000008021b5d6 <.LBB445_24>:
;                     try writer.writeAll(", .");
8021b5d6: 97 65 00 00  	auipc	a1, 6
8021b5da: 93 85 25 ad  	addi	a1, a1, -1326
8021b5de: 97 50 fe ff  	auipc	ra, 1048549
8021b5e2: e7 80 40 4d  	jalr	1236(ra)
8021b5e6: aa 85        	mv	a1, a0
8021b5e8: 03 35 84 f1  	ld	a0, -232(s0)
8021b5ec: 23 16 b4 f6  	sh	a1, -148(s0)

000000008021b5f0 <.LBB445_25>:
;                 try writer.writeAll(f.name);
8021b5f0: 97 65 00 00  	auipc	a1, 6
8021b5f4: 93 85 85 ac  	addi	a1, a1, -1336
8021b5f8: 97 50 fe ff  	auipc	ra, 1048549
8021b5fc: e7 80 a0 4b  	jalr	1210(ra)
8021b600: aa 85        	mv	a1, a0
8021b602: 03 35 84 f1  	ld	a0, -232(s0)
8021b606: 23 15 b4 f6  	sh	a1, -150(s0)

000000008021b60a <.LBB445_26>:
;                 try writer.writeAll(" = ");
8021b60a: 97 65 00 00  	auipc	a1, 6
8021b60e: 93 85 e5 ab  	addi	a1, a1, -1346
8021b612: 97 50 fe ff  	auipc	ra, 1048549
8021b616: e7 80 00 4a  	jalr	1184(ra)
8021b61a: 83 35 04 f1  	ld	a1, -240(s0)
8021b61e: 2a 86        	mv	a2, a0
8021b620: 03 35 84 f0  	ld	a0, -248(s0)
8021b624: 23 14 c4 f6  	sh	a2, -152(s0)
;                 try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
8021b628: 83 c5 35 00  	lbu	a1, 3(a1)
8021b62c: 23 3c b4 ec  	sd	a1, -296(s0)
8021b630: a3 03 b4 f6  	sb	a1, -153(s0)
8021b634: 0c 71        	ld	a1, 32(a0)
8021b636: 23 3c b4 f4  	sd	a1, -168(s0)
8021b63a: 0c 6d        	ld	a1, 24(a0)
8021b63c: 23 38 b4 f4  	sd	a1, -176(s0)
8021b640: 0c 69        	ld	a1, 16(a0)
8021b642: 23 34 b4 f4  	sd	a1, -184(s0)
8021b646: 0c 65        	ld	a1, 8(a0)
8021b648: 23 30 b4 f4  	sd	a1, -192(s0)
8021b64c: 08 61        	ld	a0, 0(a0)
8021b64e: 23 3c a4 f2  	sd	a0, -200(s0)
8021b652: 03 35 04 f2  	ld	a0, -224(s0)
8021b656: 93 05 f5 ff  	addi	a1, a0, -1
8021b65a: 23 30 b4 ee  	sd	a1, -288(s0)
8021b65e: 63 7c b5 00  	bgeu	a0, a1, 0x8021b676 <.LBB445_27+0x12>
8021b662: 09 a0        	j	0x8021b664 <.LBB445_27>

000000008021b664 <.LBB445_27>:
8021b664: 17 25 00 00  	auipc	a0, 2
8021b668: 13 05 c5 e1  	addi	a0, a0, -484
8021b66c: 81 45        	mv	a1, zero
8021b66e: 97 50 fe ff  	auipc	ra, 1048549
8021b672: e7 80 20 a3  	jalr	-1486(ra)
8021b676: 03 35 84 f1  	ld	a0, -232(s0)
8021b67a: 83 36 04 ee  	ld	a3, -288(s0)
8021b67e: 03 36 84 f0  	ld	a2, -248(s0)
8021b682: 83 35 84 ed  	ld	a1, -296(s0)
8021b686: 23 38 d4 f2  	sd	a3, -208(s0)
8021b68a: 97 00 00 00  	auipc	ra, 0
8021b68e: e7 80 40 1a  	jalr	420(ra)
8021b692: aa 85        	mv	a1, a0
8021b694: 03 35 84 f1  	ld	a0, -232(s0)
8021b698: 23 17 b4 f2  	sh	a1, -210(s0)

000000008021b69c <.LBB445_28>:
;             try writer.writeAll(" }");
8021b69c: 97 65 00 00  	auipc	a1, 6
8021b6a0: 93 85 c5 a3  	addi	a1, a1, -1476
8021b6a4: 97 50 fe ff  	auipc	ra, 1048549
8021b6a8: e7 80 e0 40  	jalr	1038(ra)
8021b6ac: 23 16 a4 f2  	sh	a0, -212(s0)
8021b6b0: 01 45        	mv	a0, zero
; ) @TypeOf(writer).Error!void {
8021b6b2: 23 17 a4 fe  	sh	a0, -18(s0)
8021b6b6: 12 74        	ld	s0, 288(sp)
8021b6b8: b2 70        	ld	ra, 296(sp)
8021b6ba: 55 61        	addi	sp, sp, 304
8021b6bc: 82 80        	ret

000000008021b6be <std.fmt.formatType.364>:
; pub fn formatType(
8021b6be: 35 71        	addi	sp, sp, -160
;     options: FormatOptions,
8021b6c0: 06 ed        	sd	ra, 152(sp)
8021b6c2: 22 e9        	sd	s0, 144(sp)
8021b6c4: 00 11        	addi	s0, sp, 160
8021b6c6: 23 30 c4 f8  	sd	a2, -128(s0)
;     value: anytype,
8021b6ca: 23 34 b4 f8  	sd	a1, -120(s0)
8021b6ce: 23 38 a4 f8  	sd	a0, -112(s0)
8021b6d2: 23 3c d4 f8  	sd	a3, -104(s0)
8021b6d6: 01 45        	mv	a0, zero
;             if (max_depth == 0) {
8021b6d8: 63 95 a6 04  	bne	a3, a0, 0x8021b722 <.LBB446_15+0x40>
8021b6dc: 09 a0        	j	0x8021b6de <std.fmt.formatType.364+0x20>
;                 return writer.writeAll("{ ... }");
8021b6de: 03 35 04 f9  	ld	a0, -112(s0)

000000008021b6e2 <.LBB446_15>:
8021b6e2: 97 65 00 00  	auipc	a1, 6
8021b6e6: 93 85 65 48  	addi	a1, a1, 1158
8021b6ea: 97 50 fe ff  	auipc	ra, 1048549
8021b6ee: e7 80 80 3c  	jalr	968(ra)
8021b6f2: aa 85        	mv	a1, a0
8021b6f4: 41 65        	lui	a0, 16
8021b6f6: 7d 35        	addiw	a0, a0, -1
8021b6f8: 6d 8d        	and	a0, a0, a1
8021b6fa: 23 17 b4 fe  	sh	a1, -18(s0)
8021b6fe: 81 45        	mv	a1, zero
8021b700: 63 0a b5 00  	beq	a0, a1, 0x8021b714 <.LBB446_15+0x32>
8021b704: 09 a0        	j	0x8021b706 <.LBB446_15+0x24>
8021b706: 03 35 04 f9  	ld	a0, -112(s0)
8021b70a: 97 50 fe ff  	auipc	ra, 1048549
8021b70e: e7 80 80 19  	jalr	408(ra)
8021b712: 11 a0        	j	0x8021b716 <.LBB446_15+0x34>
8021b714: 09 a0        	j	0x8021b716 <.LBB446_15+0x34>
8021b716: 03 15 e4 fe  	lh	a0, -18(s0)
8021b71a: 4a 64        	ld	s0, 144(sp)
8021b71c: ea 60        	ld	ra, 152(sp)
8021b71e: 0d 61        	addi	sp, sp, 160
8021b720: 82 80        	ret
;             if (max_depth == 0) {
8021b722: 09 a0        	j	0x8021b724 <.LBB446_15+0x42>
;             try writer.writeAll("{ ");
8021b724: 03 35 04 f9  	ld	a0, -112(s0)

000000008021b728 <.LBB446_16>:
8021b728: 97 65 00 00  	auipc	a1, 6
8021b72c: 93 85 05 45  	addi	a1, a1, 1104
8021b730: 97 50 fe ff  	auipc	ra, 1048549
8021b734: e7 80 20 38  	jalr	898(ra)
8021b738: 23 16 a4 fe  	sh	a0, -20(s0)
8021b73c: 01 45        	mv	a0, zero
;             for (value) |elem, i| {
8021b73e: 23 30 a4 fe  	sd	a0, -32(s0)
8021b742: 09 a0        	j	0x8021b744 <.LBB446_16+0x1c>
8021b744: 83 35 04 fe  	ld	a1, -32(s0)
8021b748: 23 3c b4 f6  	sd	a1, -136(s0)
8021b74c: 05 45        	addi	a0, zero, 1
8021b74e: 63 6e b5 06  	bltu	a0, a1, 0x8021b7ca <.LBB446_17+0x24>
8021b752: 09 a0        	j	0x8021b754 <.LBB446_16+0x2c>
8021b754: 03 35 04 f8  	ld	a0, -128(s0)
8021b758: 83 35 84 f8  	ld	a1, -120(s0)
8021b75c: 03 36 84 f7  	ld	a2, -136(s0)
8021b760: b2 95        	add	a1, a1, a2
8021b762: 83 c5 05 00  	lbu	a1, 0(a1)
8021b766: 23 34 b4 f6  	sd	a1, -152(s0)
8021b76a: a3 0f b4 fc  	sb	a1, -33(s0)
;                 try formatType(elem, actual_fmt, options, writer, max_depth - 1);
8021b76e: 23 0f b4 fc  	sb	a1, -34(s0)
8021b772: 0c 61        	ld	a1, 0(a0)
8021b774: 23 38 b4 fa  	sd	a1, -80(s0)
8021b778: 0c 65        	ld	a1, 8(a0)
8021b77a: 23 3c b4 fa  	sd	a1, -72(s0)
8021b77e: 0c 69        	ld	a1, 16(a0)
8021b780: 23 30 b4 fc  	sd	a1, -64(s0)
8021b784: 0c 6d        	ld	a1, 24(a0)
8021b786: 23 34 b4 fc  	sd	a1, -56(s0)
8021b78a: 08 71        	ld	a0, 32(a0)
8021b78c: 23 38 a4 fc  	sd	a0, -48(s0)
8021b790: 03 35 84 f9  	ld	a0, -104(s0)
8021b794: 93 05 f5 ff  	addi	a1, a0, -1
8021b798: 23 38 b4 f6  	sd	a1, -144(s0)
8021b79c: 63 6a b5 04  	bltu	a0, a1, 0x8021b7f0 <.LBB446_19>
8021b7a0: 8d a0        	j	0x8021b802 <.LBB446_19+0x12>
;                     try writer.writeAll(", ");
8021b7a2: 03 35 04 f9  	ld	a0, -112(s0)

000000008021b7a6 <.LBB446_17>:
8021b7a6: 97 65 00 00  	auipc	a1, 6
8021b7aa: 93 85 25 3e  	addi	a1, a1, 994
8021b7ae: 97 50 fe ff  	auipc	ra, 1048549
8021b7b2: e7 80 40 30  	jalr	772(ra)
8021b7b6: 23 12 a4 fa  	sh	a0, -92(s0)
;                 if (i < value.len - 1) {
8021b7ba: 11 a0        	j	0x8021b7be <.LBB446_17+0x18>
8021b7bc: 09 a0        	j	0x8021b7be <.LBB446_17+0x18>
;             for (value) |elem, i| {
8021b7be: 03 35 84 f7  	ld	a0, -136(s0)
8021b7c2: 05 05        	addi	a0, a0, 1
8021b7c4: 23 30 a4 fe  	sd	a0, -32(s0)
8021b7c8: b5 bf        	j	0x8021b744 <.LBB446_16+0x1c>
;             try writer.writeAll(" }");
8021b7ca: 03 35 04 f9  	ld	a0, -112(s0)

000000008021b7ce <.LBB446_18>:
8021b7ce: 97 65 00 00  	auipc	a1, 6
8021b7d2: 93 85 a5 3c  	addi	a1, a1, 970
8021b7d6: 97 50 fe ff  	auipc	ra, 1048549
8021b7da: e7 80 c0 2d  	jalr	732(ra)
8021b7de: 23 11 a4 fa  	sh	a0, -94(s0)
8021b7e2: 01 45        	mv	a0, zero
; ) @TypeOf(writer).Error!void {
8021b7e4: 23 17 a4 fe  	sh	a0, -18(s0)
8021b7e8: 4a 64        	ld	s0, 144(sp)
8021b7ea: ea 60        	ld	ra, 152(sp)
8021b7ec: 0d 61        	addi	sp, sp, 160
8021b7ee: 82 80        	ret

000000008021b7f0 <.LBB446_19>:
;                 try formatType(elem, actual_fmt, options, writer, max_depth - 1);
8021b7f0: 17 25 00 00  	auipc	a0, 2
8021b7f4: 13 05 05 c9  	addi	a0, a0, -880
8021b7f8: 81 45        	mv	a1, zero
8021b7fa: 97 50 fe ff  	auipc	ra, 1048549
8021b7fe: e7 80 60 8a  	jalr	-1882(ra)
8021b802: 83 36 04 f7  	ld	a3, -144(s0)
8021b806: 03 36 04 f8  	ld	a2, -128(s0)
8021b80a: 83 35 84 f6  	ld	a1, -152(s0)
8021b80e: 03 35 04 f9  	ld	a0, -112(s0)
8021b812: 23 34 d4 fa  	sd	a3, -88(s0)
8021b816: 97 00 00 00  	auipc	ra, 0
8021b81a: e7 80 80 01  	jalr	24(ra)
8021b81e: 23 13 a4 fa  	sh	a0, -90(s0)
;                 if (i < value.len - 1) {
8021b822: 03 35 04 fe  	ld	a0, -32(s0)
8021b826: 81 45        	mv	a1, zero
8021b828: e3 0d b5 f6  	beq	a0, a1, 0x8021b7a2 <.LBB446_16+0x7a>
8021b82c: 41 bf        	j	0x8021b7bc <.LBB446_17+0x16>

000000008021b82e <std.fmt.formatType.365>:
; pub fn formatType(
8021b82e: 1d 71        	addi	sp, sp, -96
8021b830: 86 ec        	sd	ra, 88(sp)
8021b832: a2 e8        	sd	s0, 80(sp)
8021b834: 80 10        	addi	s0, sp, 96
8021b836: 23 34 a4 fa  	sd	a0, -88(s0)
8021b83a: a3 0f b4 fa  	sb	a1, -65(s0)
8021b83e: 23 38 d4 fa  	sd	a3, -80(s0)
;             return formatValue(value, actual_fmt, options, writer);
8021b842: a3 06 b4 fe  	sb	a1, -19(s0)
8021b846: 14 62        	ld	a3, 0(a2)
8021b848: 23 30 d4 fc  	sd	a3, -64(s0)
8021b84c: 14 66        	ld	a3, 8(a2)
8021b84e: 23 34 d4 fc  	sd	a3, -56(s0)
8021b852: 14 6a        	ld	a3, 16(a2)
8021b854: 23 38 d4 fc  	sd	a3, -48(s0)
8021b858: 14 6e        	ld	a3, 24(a2)
8021b85a: 23 3c d4 fc  	sd	a3, -40(s0)
8021b85e: 14 72        	ld	a3, 32(a2)
8021b860: 23 30 d4 fe  	sd	a3, -32(s0)
8021b864: 97 10 00 00  	auipc	ra, 1
8021b868: e7 80 a0 d5  	jalr	-678(ra)
8021b86c: aa 85        	mv	a1, a0
8021b86e: 41 65        	lui	a0, 16
8021b870: 7d 35        	addiw	a0, a0, -1
8021b872: 6d 8d        	and	a0, a0, a1
8021b874: 23 17 b4 fe  	sh	a1, -18(s0)
8021b878: 81 45        	mv	a1, zero
8021b87a: 63 0a b5 00  	beq	a0, a1, 0x8021b88e <std.fmt.formatType.365+0x60>
8021b87e: 09 a0        	j	0x8021b880 <std.fmt.formatType.365+0x52>
8021b880: 03 35 84 fa  	ld	a0, -88(s0)
8021b884: 97 50 fe ff  	auipc	ra, 1048549
8021b888: e7 80 e0 01  	jalr	30(ra)
8021b88c: 11 a0        	j	0x8021b890 <std.fmt.formatType.365+0x62>
8021b88e: 09 a0        	j	0x8021b890 <std.fmt.formatType.365+0x62>
8021b890: 03 15 e4 fe  	lh	a0, -18(s0)
8021b894: 46 64        	ld	s0, 80(sp)
8021b896: e6 60        	ld	ra, 88(sp)
8021b898: 25 61        	addi	sp, sp, 96
8021b89a: 82 80        	ret

000000008021b89c <std.fmt.format.366>:
; pub fn format(
8021b89c: 79 71        	addi	sp, sp, -48
;     args: anytype,
8021b89e: 06 f4        	sd	ra, 40(sp)
8021b8a0: 22 f0        	sd	s0, 32(sp)
8021b8a2: 00 18        	addi	s0, sp, 48
8021b8a4: 23 38 b4 fc  	sd	a1, -48(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
8021b8a8: 23 3c a4 fc  	sd	a0, -40(s0)

000000008021b8ac <.LBB448_1>:
8021b8ac: 97 65 00 00  	auipc	a1, 6
8021b8b0: 93 85 c5 30  	addi	a1, a1, 780
8021b8b4: 97 50 fe ff  	auipc	ra, 1048549
8021b8b8: e7 80 e0 1f  	jalr	510(ra)
8021b8bc: 83 35 04 fd  	ld	a1, -48(s0)
8021b8c0: 2a 86        	mv	a2, a0
8021b8c2: 03 35 84 fd  	ld	a0, -40(s0)
8021b8c6: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
8021b8ca: 8c 41        	lw	a1, 0(a1)
8021b8cc: 23 24 b4 fe  	sw	a1, -24(s0)

000000008021b8d0 <.LBB448_2>:
;         try formatType(
8021b8d0: 17 66 00 00  	auipc	a2, 6
8021b8d4: 13 06 86 35  	addi	a2, a2, 856
8021b8d8: 8d 46        	addi	a3, zero, 3
8021b8da: 97 10 00 00  	auipc	ra, 1
8021b8de: e7 80 e0 d4  	jalr	-690(ra)
8021b8e2: aa 85        	mv	a1, a0
8021b8e4: 03 35 84 fd  	ld	a0, -40(s0)
8021b8e8: 23 13 b4 fe  	sh	a1, -26(s0)

000000008021b8ec <.LBB448_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021b8ec: 97 65 00 00  	auipc	a1, 6
8021b8f0: 93 85 45 36  	addi	a1, a1, 868
8021b8f4: 97 50 fe ff  	auipc	ra, 1048549
8021b8f8: e7 80 e0 1b  	jalr	446(ra)
8021b8fc: 23 12 a4 fe  	sh	a0, -28(s0)
8021b900: 01 45        	mv	a0, zero
; ) !void {
8021b902: 23 17 a4 fe  	sh	a0, -18(s0)
8021b906: 02 74        	ld	s0, 32(sp)
8021b908: a2 70        	ld	ra, 40(sp)
8021b90a: 45 61        	addi	sp, sp, 48
8021b90c: 82 80        	ret

000000008021b90e <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.367>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021b90e: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
8021b910: 06 f4        	sd	ra, 40(sp)
8021b912: 22 f0        	sd	s0, 32(sp)
8021b914: 00 18        	addi	s0, sp, 48
8021b916: 23 38 a4 fc  	sd	a0, -48(s0)
8021b91a: 90 65        	ld	a2, 8(a1)
8021b91c: 23 30 c4 fe  	sd	a2, -32(s0)
8021b920: 90 61        	ld	a2, 0(a1)
8021b922: 23 3c c4 fc  	sd	a2, -40(s0)
8021b926: 97 10 00 00  	auipc	ra, 1
8021b92a: e7 80 00 d7  	jalr	-656(ra)
8021b92e: aa 85        	mv	a1, a0
8021b930: 41 65        	lui	a0, 16
8021b932: 7d 35        	addiw	a0, a0, -1
8021b934: 6d 8d        	and	a0, a0, a1
8021b936: 23 17 b4 fe  	sh	a1, -18(s0)
8021b93a: 81 45        	mv	a1, zero
8021b93c: 63 0a b5 00  	beq	a0, a1, 0x8021b950 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.367+0x42>
8021b940: 09 a0        	j	0x8021b942 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.367+0x34>
8021b942: 03 35 04 fd  	ld	a0, -48(s0)
8021b946: 97 50 fe ff  	auipc	ra, 1048549
8021b94a: e7 80 c0 f5  	jalr	-164(ra)
8021b94e: 11 a0        	j	0x8021b952 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.367+0x44>
8021b950: 09 a0        	j	0x8021b952 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.367+0x44>
8021b952: 03 15 e4 fe  	lh	a0, -18(s0)
8021b956: 02 74        	ld	s0, 32(sp)
8021b958: a2 70        	ld	ra, 40(sp)
8021b95a: 45 61        	addi	sp, sp, 48
8021b95c: 82 80        	ret

000000008021b95e <std.fmt.formatIntValue.368>:
; pub fn formatIntValue(
8021b95e: 1d 71        	addi	sp, sp, -96
8021b960: 86 ec        	sd	ra, 88(sp)
8021b962: a2 e8        	sd	s0, 80(sp)
8021b964: 80 10        	addi	s0, sp, 96
8021b966: 32 87        	mv	a4, a2
8021b968: 23 30 a4 fa  	sd	a0, -96(s0)
8021b96c: 23 2a b4 fa  	sw	a1, -76(s0)
;     } else value;
8021b970: 23 24 b4 fe  	sw	a1, -24(s0)
;     return formatInt(int_value, radix, case, options, writer);
8021b974: 23 22 b4 fe  	sw	a1, -28(s0)
8021b978: 10 63        	ld	a2, 0(a4)
8021b97a: 23 3c c4 fa  	sd	a2, -72(s0)
8021b97e: 10 67        	ld	a2, 8(a4)
8021b980: 23 30 c4 fc  	sd	a2, -64(s0)
8021b984: 10 6b        	ld	a2, 16(a4)
8021b986: 23 34 c4 fc  	sd	a2, -56(s0)
8021b98a: 10 6f        	ld	a2, 24(a4)
8021b98c: 23 38 c4 fc  	sd	a2, -48(s0)
8021b990: 10 73        	ld	a2, 32(a4)
8021b992: 23 3c c4 fc  	sd	a2, -40(s0)
8021b996: 41 46        	addi	a2, zero, 16
8021b998: 81 46        	mv	a3, zero
8021b99a: 23 34 d4 fa  	sd	a3, -88(s0)
8021b99e: 97 e0 ff ff  	auipc	ra, 1048574
8021b9a2: e7 80 20 3c  	jalr	962(ra)
8021b9a6: 83 35 84 fa  	ld	a1, -88(s0)
8021b9aa: 2a 86        	mv	a2, a0
8021b9ac: 41 65        	lui	a0, 16
8021b9ae: 7d 35        	addiw	a0, a0, -1
8021b9b0: 71 8d        	and	a0, a0, a2
8021b9b2: 23 17 c4 fe  	sh	a2, -18(s0)
8021b9b6: 63 0a b5 00  	beq	a0, a1, 0x8021b9ca <std.fmt.formatIntValue.368+0x6c>
8021b9ba: 09 a0        	j	0x8021b9bc <std.fmt.formatIntValue.368+0x5e>
8021b9bc: 03 35 04 fa  	ld	a0, -96(s0)
8021b9c0: 97 50 fe ff  	auipc	ra, 1048549
8021b9c4: e7 80 20 ee  	jalr	-286(ra)
8021b9c8: 11 a0        	j	0x8021b9cc <std.fmt.formatIntValue.368+0x6e>
8021b9ca: 09 a0        	j	0x8021b9cc <std.fmt.formatIntValue.368+0x6e>
8021b9cc: 03 15 e4 fe  	lh	a0, -18(s0)
8021b9d0: 46 64        	ld	s0, 80(sp)
8021b9d2: e6 60        	ld	ra, 88(sp)
8021b9d4: 25 61        	addi	sp, sp, 96
8021b9d6: 82 80        	ret

000000008021b9d8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.369>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021b9d8: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
8021b9da: 06 ec        	sd	ra, 24(sp)
8021b9dc: 22 e8        	sd	s0, 16(sp)
8021b9de: 00 10        	addi	s0, sp, 32
8021b9e0: 23 30 a4 fe  	sd	a0, -32(s0)
8021b9e4: 90 41        	lw	a2, 0(a1)
8021b9e6: 23 24 c4 fe  	sw	a2, -24(s0)
8021b9ea: 97 10 00 00  	auipc	ra, 1
8021b9ee: e7 80 40 d2  	jalr	-732(ra)
8021b9f2: aa 85        	mv	a1, a0
8021b9f4: 41 65        	lui	a0, 16
8021b9f6: 7d 35        	addiw	a0, a0, -1
8021b9f8: 6d 8d        	and	a0, a0, a1
8021b9fa: 23 17 b4 fe  	sh	a1, -18(s0)
8021b9fe: 81 45        	mv	a1, zero
8021ba00: 63 0a b5 00  	beq	a0, a1, 0x8021ba14 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.369+0x3c>
8021ba04: 09 a0        	j	0x8021ba06 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.369+0x2e>
8021ba06: 03 35 04 fe  	ld	a0, -32(s0)
8021ba0a: 97 50 fe ff  	auipc	ra, 1048549
8021ba0e: e7 80 80 e9  	jalr	-360(ra)
8021ba12: 11 a0        	j	0x8021ba16 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.369+0x3e>
8021ba14: 09 a0        	j	0x8021ba16 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.369+0x3e>
8021ba16: 03 15 e4 fe  	lh	a0, -18(s0)
8021ba1a: 42 64        	ld	s0, 16(sp)
8021ba1c: e2 60        	ld	ra, 24(sp)
8021ba1e: 05 61        	addi	sp, sp, 32
8021ba20: 82 80        	ret

000000008021ba22 <log.0.370>:
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
8021ba22: 4d 71        	addi	sp, sp, -336
8021ba24: 86 e6        	sd	ra, 328(sp)
8021ba26: a2 e2        	sd	s0, 320(sp)
8021ba28: 80 0a        	addi	s0, sp, 336
8021ba2a: aa 85        	mv	a1, a0
8021ba2c: 01 45        	mv	a0, zero
8021ba2e: 23 3c a4 ea  	sd	a0, -328(s0)
8021ba32: 23 3c a4 ec  	sd	a0, -296(s0)
8021ba36: 13 05 04 ef  	addi	a0, s0, -272
8021ba3a: 23 30 a4 ee  	sd	a0, -288(s0)
8021ba3e: 13 05 00 02  	addi	a0, zero, 32
8021ba42: 23 34 a4 ee  	sd	a0, -280(s0)
;     kernel.arch.writer.print(prefix ++ format ++ "\n", args) catch unreachable;
8021ba46: 88 41        	lw	a0, 0(a1)
8021ba48: 23 28 a4 ec  	sw	a0, -304(s0)
8021ba4c: 13 05 84 ed  	addi	a0, s0, -296
8021ba50: 97 10 00 00  	auipc	ra, 1
8021ba54: e7 80 00 d3  	jalr	-720(ra)
8021ba58: 83 35 84 eb  	ld	a1, -328(s0)
8021ba5c: 23 17 a4 ec  	sh	a0, -306(s0)
8021ba60: 41 66        	lui	a2, 16
8021ba62: 7d 36        	addiw	a2, a2, -1
8021ba64: 71 8d        	and	a0, a0, a2
8021ba66: 23 30 a4 ec  	sd	a0, -320(s0)
8021ba6a: 63 0b b5 00  	beq	a0, a1, 0x8021ba80 <log.0.370+0x5e>
8021ba6e: 09 a0        	j	0x8021ba70 <log.0.370+0x4e>
8021ba70: 83 35 04 ec  	ld	a1, -320(s0)
8021ba74: 13 05 84 ed  	addi	a0, s0, -296
8021ba78: 97 50 fe ff  	auipc	ra, 1048549
8021ba7c: e7 80 60 b7  	jalr	-1162(ra)
; pub fn log(comptime level: std.log.Level, comptime scope: @TypeOf(.EnumLiteral), comptime format: []const u8, args: anytype) void {
8021ba80: 16 64        	ld	s0, 320(sp)
8021ba82: b6 60        	ld	ra, 328(sp)
8021ba84: 71 61        	addi	sp, sp, 336
8021ba86: 82 80        	ret

000000008021ba88 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.371>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021ba88: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
8021ba8a: 06 ec        	sd	ra, 24(sp)
8021ba8c: 22 e8        	sd	s0, 16(sp)
8021ba8e: 00 10        	addi	s0, sp, 32
8021ba90: 23 30 a4 fe  	sd	a0, -32(s0)
8021ba94: 90 41        	lw	a2, 0(a1)
8021ba96: 23 24 c4 fe  	sw	a2, -24(s0)
8021ba9a: 97 10 00 00  	auipc	ra, 1
8021ba9e: e7 80 00 d3  	jalr	-720(ra)
8021baa2: aa 85        	mv	a1, a0
8021baa4: 41 65        	lui	a0, 16
8021baa6: 7d 35        	addiw	a0, a0, -1
8021baa8: 6d 8d        	and	a0, a0, a1
8021baaa: 23 17 b4 fe  	sh	a1, -18(s0)
8021baae: 81 45        	mv	a1, zero
8021bab0: 63 0a b5 00  	beq	a0, a1, 0x8021bac4 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.371+0x3c>
8021bab4: 09 a0        	j	0x8021bab6 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.371+0x2e>
8021bab6: 03 35 04 fe  	ld	a0, -32(s0)
8021baba: 97 50 fe ff  	auipc	ra, 1048549
8021babe: e7 80 80 de  	jalr	-536(ra)
8021bac2: 11 a0        	j	0x8021bac6 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.371+0x3e>
8021bac4: 09 a0        	j	0x8021bac6 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.371+0x3e>
8021bac6: 03 15 e4 fe  	lh	a0, -18(s0)
8021baca: 42 64        	ld	s0, 16(sp)
8021bacc: e2 60        	ld	ra, 24(sp)
8021bace: 05 61        	addi	sp, sp, 32
8021bad0: 82 80        	ret

000000008021bad2 <std.fmt.format.372>:
; pub fn format(
8021bad2: 39 71        	addi	sp, sp, -64
;     args: anytype,
8021bad4: 06 fc        	sd	ra, 56(sp)
8021bad6: 22 f8        	sd	s0, 48(sp)
8021bad8: 80 00        	addi	s0, sp, 64
8021bada: 23 30 b4 fc  	sd	a1, -64(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
8021bade: 23 34 a4 fc  	sd	a0, -56(s0)

000000008021bae2 <.LBB454_1>:
8021bae2: 97 65 00 00  	auipc	a1, 6
8021bae6: 93 85 e5 1a  	addi	a1, a1, 430
8021baea: 97 50 fe ff  	auipc	ra, 1048549
8021baee: e7 80 80 fc  	jalr	-56(ra)
8021baf2: 83 35 04 fc  	ld	a1, -64(s0)
8021baf6: 2a 86        	mv	a2, a0
8021baf8: 03 35 84 fc  	ld	a0, -56(s0)
8021bafc: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
8021bb00: 90 61        	ld	a2, 0(a1)
8021bb02: 23 3c c4 fc  	sd	a2, -40(s0)
8021bb06: 90 65        	ld	a2, 8(a1)
8021bb08: 23 30 c4 fe  	sd	a2, -32(s0)

000000008021bb0c <.LBB454_2>:
;         try formatType(
8021bb0c: 17 66 00 00  	auipc	a2, 6
8021bb10: 13 06 46 1f  	addi	a2, a2, 500
8021bb14: 8d 46        	addi	a3, zero, 3
8021bb16: 97 50 fe ff  	auipc	ra, 1048549
8021bb1a: e7 80 c0 07  	jalr	124(ra)
8021bb1e: aa 85        	mv	a1, a0
8021bb20: 03 35 84 fc  	ld	a0, -56(s0)
8021bb24: 23 1b b4 fc  	sh	a1, -42(s0)

000000008021bb28 <.LBB454_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021bb28: 97 65 00 00  	auipc	a1, 6
8021bb2c: 93 85 05 20  	addi	a1, a1, 512
8021bb30: 97 50 fe ff  	auipc	ra, 1048549
8021bb34: e7 80 20 f8  	jalr	-126(ra)
8021bb38: 23 1a a4 fc  	sh	a0, -44(s0)
8021bb3c: 01 45        	mv	a0, zero
; ) !void {
8021bb3e: 23 17 a4 fe  	sh	a0, -18(s0)
8021bb42: 42 74        	ld	s0, 48(sp)
8021bb44: e2 70        	ld	ra, 56(sp)
8021bb46: 21 61        	addi	sp, sp, 64
8021bb48: 82 80        	ret

000000008021bb4a <std.fmt.format.373>:
; pub fn format(
8021bb4a: 01 11        	addi	sp, sp, -32
;             try writer.writeAll(fmt[start_index..end_index]);
8021bb4c: 06 ec        	sd	ra, 24(sp)
8021bb4e: 22 e8        	sd	s0, 16(sp)
8021bb50: 00 10        	addi	s0, sp, 32

000000008021bb52 <.LBB455_1>:
8021bb52: 97 65 00 00  	auipc	a1, 6
8021bb56: 93 85 65 1e  	addi	a1, a1, 486
8021bb5a: 97 50 fe ff  	auipc	ra, 1048549
8021bb5e: e7 80 80 f5  	jalr	-168(ra)
8021bb62: 23 16 a4 fe  	sh	a0, -20(s0)
8021bb66: 01 45        	mv	a0, zero
; ) !void {
8021bb68: 23 17 a4 fe  	sh	a0, -18(s0)
8021bb6c: 42 64        	ld	s0, 16(sp)
8021bb6e: e2 60        	ld	ra, 24(sp)
8021bb70: 05 61        	addi	sp, sp, 32
8021bb72: 82 80        	ret

000000008021bb74 <std.fmt.format.374>:
; pub fn format(
8021bb74: 1d 71        	addi	sp, sp, -96
;     args: anytype,
8021bb76: 86 ec        	sd	ra, 88(sp)
8021bb78: a2 e8        	sd	s0, 80(sp)
8021bb7a: 80 10        	addi	s0, sp, 96
8021bb7c: 23 30 b4 fa  	sd	a1, -96(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
8021bb80: 23 38 a4 fa  	sd	a0, -80(s0)

000000008021bb84 <.LBB456_1>:
8021bb84: 97 65 00 00  	auipc	a1, 6
8021bb88: 93 85 45 1c  	addi	a1, a1, 452
8021bb8c: 97 50 fe ff  	auipc	ra, 1048549
8021bb90: e7 80 60 f2  	jalr	-218(ra)
8021bb94: 83 35 04 fa  	ld	a1, -96(s0)
8021bb98: 2a 86        	mv	a2, a0
8021bb9a: 03 35 04 fb  	ld	a0, -80(s0)
8021bb9e: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
8021bba2: 8c 61        	ld	a1, 0(a1)
8021bba4: 23 30 b4 fe  	sd	a1, -32(s0)

000000008021bba8 <.LBB456_2>:
;         try formatType(
8021bba8: 17 66 00 00  	auipc	a2, 6
8021bbac: 13 06 06 21  	addi	a2, a2, 528
8021bbb0: 8d 46        	addi	a3, zero, 3
8021bbb2: 23 34 d4 fa  	sd	a3, -88(s0)
8021bbb6: 97 f0 ff ff  	auipc	ra, 1048575
8021bbba: e7 80 80 fa  	jalr	-88(ra)
8021bbbe: aa 85        	mv	a1, a0
8021bbc0: 03 35 04 fb  	ld	a0, -80(s0)
8021bbc4: 23 1f b4 fc  	sh	a1, -34(s0)

000000008021bbc8 <.LBB456_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021bbc8: 97 65 00 00  	auipc	a1, 6
8021bbcc: 93 85 85 21  	addi	a1, a1, 536
8021bbd0: 97 50 fe ff  	auipc	ra, 1048549
8021bbd4: e7 80 20 ee  	jalr	-286(ra)
8021bbd8: 83 35 04 fa  	ld	a1, -96(s0)
8021bbdc: 83 36 84 fa  	ld	a3, -88(s0)
8021bbe0: 2a 86        	mv	a2, a0
8021bbe2: 03 35 04 fb  	ld	a0, -80(s0)
8021bbe6: 23 1e c4 fc  	sh	a2, -36(s0)
;             @field(args, fields_info[arg_to_print].name),
8021bbea: 8c 65        	ld	a1, 8(a1)
8021bbec: 23 38 b4 fc  	sd	a1, -48(s0)

000000008021bbf0 <.LBB456_4>:
;         try formatType(
8021bbf0: 17 66 00 00  	auipc	a2, 6
8021bbf4: 13 06 06 26  	addi	a2, a2, 608
8021bbf8: 97 c0 ff ff  	auipc	ra, 1048572
8021bbfc: e7 80 40 3a  	jalr	932(ra)
8021bc00: aa 85        	mv	a1, a0
8021bc02: 03 35 04 fb  	ld	a0, -80(s0)
8021bc06: 23 17 b4 fc  	sh	a1, -50(s0)

000000008021bc0a <.LBB456_5>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021bc0a: 97 65 00 00  	auipc	a1, 6
8021bc0e: 93 85 e5 26  	addi	a1, a1, 622
8021bc12: 97 50 fe ff  	auipc	ra, 1048549
8021bc16: e7 80 00 ea  	jalr	-352(ra)
8021bc1a: 83 35 04 fa  	ld	a1, -96(s0)
8021bc1e: 83 36 84 fa  	ld	a3, -88(s0)
8021bc22: 2a 86        	mv	a2, a0
8021bc24: 03 35 04 fb  	ld	a0, -80(s0)
8021bc28: 23 16 c4 fc  	sh	a2, -52(s0)
;             @field(args, fields_info[arg_to_print].name),
8021bc2c: 8c 69        	ld	a1, 16(a1)
8021bc2e: 23 30 b4 fc  	sd	a1, -64(s0)

000000008021bc32 <.LBB456_6>:
;         try formatType(
8021bc32: 17 66 00 00  	auipc	a2, 6
8021bc36: 13 06 66 2b  	addi	a2, a2, 694
8021bc3a: 97 c0 ff ff  	auipc	ra, 1048572
8021bc3e: e7 80 40 2f  	jalr	756(ra)
8021bc42: aa 85        	mv	a1, a0
8021bc44: 03 35 04 fb  	ld	a0, -80(s0)
8021bc48: 23 1f b4 fa  	sh	a1, -66(s0)

000000008021bc4c <.LBB456_7>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021bc4c: 97 65 00 00  	auipc	a1, 6
8021bc50: 93 85 45 2c  	addi	a1, a1, 708
8021bc54: 97 50 fe ff  	auipc	ra, 1048549
8021bc58: e7 80 e0 e5  	jalr	-418(ra)
8021bc5c: 23 1e a4 fa  	sh	a0, -68(s0)
8021bc60: 01 45        	mv	a0, zero
; ) !void {
8021bc62: 23 17 a4 fe  	sh	a0, -18(s0)
8021bc66: 46 64        	ld	s0, 80(sp)
8021bc68: e6 60        	ld	ra, 88(sp)
8021bc6a: 25 61        	addi	sp, sp, 96
8021bc6c: 82 80        	ret

000000008021bc6e <std.fmt.format.375>:
; pub fn format(
8021bc6e: 01 11        	addi	sp, sp, -32
;             try writer.writeAll(fmt[start_index..end_index]);
8021bc70: 06 ec        	sd	ra, 24(sp)
8021bc72: 22 e8        	sd	s0, 16(sp)
8021bc74: 00 10        	addi	s0, sp, 32

000000008021bc76 <.LBB457_1>:
8021bc76: 97 65 00 00  	auipc	a1, 6
8021bc7a: 93 85 a5 2a  	addi	a1, a1, 682
8021bc7e: 97 50 fe ff  	auipc	ra, 1048549
8021bc82: e7 80 40 e3  	jalr	-460(ra)
8021bc86: 23 16 a4 fe  	sh	a0, -20(s0)
8021bc8a: 01 45        	mv	a0, zero
; ) !void {
8021bc8c: 23 17 a4 fe  	sh	a0, -18(s0)
8021bc90: 42 64        	ld	s0, 16(sp)
8021bc92: e2 60        	ld	ra, 24(sp)
8021bc94: 05 61        	addi	sp, sp, 32
8021bc96: 82 80        	ret

000000008021bc98 <std.fmt.format.376>:
; pub fn format(
8021bc98: 1d 71        	addi	sp, sp, -96
;     args: anytype,
8021bc9a: 86 ec        	sd	ra, 88(sp)
8021bc9c: a2 e8        	sd	s0, 80(sp)
8021bc9e: 80 10        	addi	s0, sp, 96
8021bca0: 23 30 b4 fa  	sd	a1, -96(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
8021bca4: 23 38 a4 fa  	sd	a0, -80(s0)

000000008021bca8 <.LBB458_1>:
8021bca8: 97 65 00 00  	auipc	a1, 6
8021bcac: 93 85 85 28  	addi	a1, a1, 648
8021bcb0: 97 50 fe ff  	auipc	ra, 1048549
8021bcb4: e7 80 20 e0  	jalr	-510(ra)
8021bcb8: 83 35 04 fa  	ld	a1, -96(s0)
8021bcbc: 2a 86        	mv	a2, a0
8021bcbe: 03 35 04 fb  	ld	a0, -80(s0)
8021bcc2: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
8021bcc6: 8c 61        	ld	a1, 0(a1)
8021bcc8: 23 30 b4 fe  	sd	a1, -32(s0)

000000008021bccc <.LBB458_2>:
;         try formatType(
8021bccc: 17 66 00 00  	auipc	a2, 6
8021bcd0: 13 06 46 2d  	addi	a2, a2, 724
8021bcd4: 8d 46        	addi	a3, zero, 3
8021bcd6: 23 34 d4 fa  	sd	a3, -88(s0)
8021bcda: 97 f0 ff ff  	auipc	ra, 1048575
8021bcde: e7 80 40 e8  	jalr	-380(ra)
8021bce2: aa 85        	mv	a1, a0
8021bce4: 03 35 04 fb  	ld	a0, -80(s0)
8021bce8: 23 1f b4 fc  	sh	a1, -34(s0)

000000008021bcec <.LBB458_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021bcec: 97 65 00 00  	auipc	a1, 6
8021bcf0: 93 85 c5 2d  	addi	a1, a1, 732
8021bcf4: 97 50 fe ff  	auipc	ra, 1048549
8021bcf8: e7 80 e0 db  	jalr	-578(ra)
8021bcfc: 83 35 04 fa  	ld	a1, -96(s0)
8021bd00: 83 36 84 fa  	ld	a3, -88(s0)
8021bd04: 2a 86        	mv	a2, a0
8021bd06: 03 35 04 fb  	ld	a0, -80(s0)
8021bd0a: 23 1e c4 fc  	sh	a2, -36(s0)
;             @field(args, fields_info[arg_to_print].name),
8021bd0e: 8c 65        	ld	a1, 8(a1)
8021bd10: 23 38 b4 fc  	sd	a1, -48(s0)

000000008021bd14 <.LBB458_4>:
;         try formatType(
8021bd14: 17 66 00 00  	auipc	a2, 6
8021bd18: 13 06 46 32  	addi	a2, a2, 804
8021bd1c: 97 c0 ff ff  	auipc	ra, 1048572
8021bd20: e7 80 00 28  	jalr	640(ra)
8021bd24: aa 85        	mv	a1, a0
8021bd26: 03 35 04 fb  	ld	a0, -80(s0)
8021bd2a: 23 17 b4 fc  	sh	a1, -50(s0)

000000008021bd2e <.LBB458_5>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021bd2e: 97 65 00 00  	auipc	a1, 6
8021bd32: 93 85 25 33  	addi	a1, a1, 818
8021bd36: 97 50 fe ff  	auipc	ra, 1048549
8021bd3a: e7 80 c0 d7  	jalr	-644(ra)
8021bd3e: 83 35 04 fa  	ld	a1, -96(s0)
8021bd42: 83 36 84 fa  	ld	a3, -88(s0)
8021bd46: 2a 86        	mv	a2, a0
8021bd48: 03 35 04 fb  	ld	a0, -80(s0)
8021bd4c: 23 16 c4 fc  	sh	a2, -52(s0)
;             @field(args, fields_info[arg_to_print].name),
8021bd50: 8c 69        	ld	a1, 16(a1)
8021bd52: 23 30 b4 fc  	sd	a1, -64(s0)

000000008021bd56 <.LBB458_6>:
;         try formatType(
8021bd56: 17 66 00 00  	auipc	a2, 6
8021bd5a: 13 06 a6 37  	addi	a2, a2, 890
8021bd5e: 97 c0 ff ff  	auipc	ra, 1048572
8021bd62: e7 80 00 1d  	jalr	464(ra)
8021bd66: aa 85        	mv	a1, a0
8021bd68: 03 35 04 fb  	ld	a0, -80(s0)
8021bd6c: 23 1f b4 fa  	sh	a1, -66(s0)

000000008021bd70 <.LBB458_7>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021bd70: 97 65 00 00  	auipc	a1, 6
8021bd74: 93 85 85 38  	addi	a1, a1, 904
8021bd78: 97 50 fe ff  	auipc	ra, 1048549
8021bd7c: e7 80 a0 d3  	jalr	-710(ra)
8021bd80: 23 1e a4 fa  	sh	a0, -68(s0)
8021bd84: 01 45        	mv	a0, zero
; ) !void {
8021bd86: 23 17 a4 fe  	sh	a0, -18(s0)
8021bd8a: 46 64        	ld	s0, 80(sp)
8021bd8c: e6 60        	ld	ra, 88(sp)
8021bd8e: 25 61        	addi	sp, sp, 96
8021bd90: 82 80        	ret

000000008021bd92 <std.fmt.format.377>:
; pub fn format(
8021bd92: 59 71        	addi	sp, sp, -112
;     args: anytype,
8021bd94: 86 f4        	sd	ra, 104(sp)
8021bd96: a2 f0        	sd	s0, 96(sp)
8021bd98: 80 18        	addi	s0, sp, 112
8021bd9a: 23 38 b4 f8  	sd	a1, -112(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
8021bd9e: 23 30 a4 fa  	sd	a0, -96(s0)

000000008021bda2 <.LBB459_1>:
8021bda2: 97 65 00 00  	auipc	a1, 6
8021bda6: 93 85 65 36  	addi	a1, a1, 870
8021bdaa: 97 50 fe ff  	auipc	ra, 1048549
8021bdae: e7 80 80 d0  	jalr	-760(ra)
8021bdb2: 83 35 04 f9  	ld	a1, -112(s0)
8021bdb6: 2a 86        	mv	a2, a0
8021bdb8: 03 35 04 fa  	ld	a0, -96(s0)
8021bdbc: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
8021bdc0: 8c 61        	ld	a1, 0(a1)
8021bdc2: 23 30 b4 fe  	sd	a1, -32(s0)

000000008021bdc6 <.LBB459_2>:
;         try formatType(
8021bdc6: 17 66 00 00  	auipc	a2, 6
8021bdca: 13 06 26 3b  	addi	a2, a2, 946
8021bdce: 8d 46        	addi	a3, zero, 3
8021bdd0: 23 3c d4 f8  	sd	a3, -104(s0)
8021bdd4: 97 c0 ff ff  	auipc	ra, 1048572
8021bdd8: e7 80 a0 15  	jalr	346(ra)
8021bddc: aa 85        	mv	a1, a0
8021bdde: 03 35 04 fa  	ld	a0, -96(s0)
8021bde2: 23 1f b4 fc  	sh	a1, -34(s0)

000000008021bde6 <.LBB459_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021bde6: 97 65 00 00  	auipc	a1, 6
8021bdea: 93 85 a5 3b  	addi	a1, a1, 954
8021bdee: 97 50 fe ff  	auipc	ra, 1048549
8021bdf2: e7 80 40 cc  	jalr	-828(ra)
8021bdf6: 83 35 04 f9  	ld	a1, -112(s0)
8021bdfa: 83 36 84 f9  	ld	a3, -104(s0)
8021bdfe: 2a 86        	mv	a2, a0
8021be00: 03 35 04 fa  	ld	a0, -96(s0)
8021be04: 23 1e c4 fc  	sh	a2, -36(s0)
;             @field(args, fields_info[arg_to_print].name),
8021be08: 8c 65        	ld	a1, 8(a1)
8021be0a: 23 38 b4 fc  	sd	a1, -48(s0)

000000008021be0e <.LBB459_4>:
;         try formatType(
8021be0e: 17 66 00 00  	auipc	a2, 6
8021be12: 13 06 26 40  	addi	a2, a2, 1026
8021be16: 97 c0 ff ff  	auipc	ra, 1048572
8021be1a: e7 80 80 11  	jalr	280(ra)
8021be1e: aa 85        	mv	a1, a0
8021be20: 03 35 04 fa  	ld	a0, -96(s0)
8021be24: 23 17 b4 fc  	sh	a1, -50(s0)

000000008021be28 <.LBB459_5>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021be28: 97 65 00 00  	auipc	a1, 6
8021be2c: 93 85 05 41  	addi	a1, a1, 1040
8021be30: 97 50 fe ff  	auipc	ra, 1048549
8021be34: e7 80 20 c8  	jalr	-894(ra)
8021be38: 83 35 04 f9  	ld	a1, -112(s0)
8021be3c: 83 36 84 f9  	ld	a3, -104(s0)
8021be40: 2a 86        	mv	a2, a0
8021be42: 03 35 04 fa  	ld	a0, -96(s0)
8021be46: 23 16 c4 fc  	sh	a2, -52(s0)
;             @field(args, fields_info[arg_to_print].name),
8021be4a: 8c 69        	ld	a1, 16(a1)
8021be4c: 23 30 b4 fc  	sd	a1, -64(s0)

000000008021be50 <.LBB459_6>:
;         try formatType(
8021be50: 17 66 00 00  	auipc	a2, 6
8021be54: 13 06 86 45  	addi	a2, a2, 1112
8021be58: 97 c0 ff ff  	auipc	ra, 1048572
8021be5c: e7 80 60 0d  	jalr	214(ra)
8021be60: aa 85        	mv	a1, a0
8021be62: 03 35 04 fa  	ld	a0, -96(s0)
8021be66: 23 1f b4 fa  	sh	a1, -66(s0)

000000008021be6a <.LBB459_7>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021be6a: 97 65 00 00  	auipc	a1, 6
8021be6e: 93 85 65 46  	addi	a1, a1, 1126
8021be72: 97 50 fe ff  	auipc	ra, 1048549
8021be76: e7 80 00 c4  	jalr	-960(ra)
8021be7a: 83 35 04 f9  	ld	a1, -112(s0)
8021be7e: 83 36 84 f9  	ld	a3, -104(s0)
8021be82: 2a 86        	mv	a2, a0
8021be84: 03 35 04 fa  	ld	a0, -96(s0)
8021be88: 23 1e c4 fa  	sh	a2, -68(s0)
;             @field(args, fields_info[arg_to_print].name),
8021be8c: 8c 6d        	ld	a1, 24(a1)
8021be8e: 23 38 b4 fa  	sd	a1, -80(s0)

000000008021be92 <.LBB459_8>:
;         try formatType(
8021be92: 17 66 00 00  	auipc	a2, 6
8021be96: 13 06 e6 4a  	addi	a2, a2, 1198
8021be9a: 97 c0 ff ff  	auipc	ra, 1048572
8021be9e: e7 80 40 09  	jalr	148(ra)
8021bea2: aa 85        	mv	a1, a0
8021bea4: 03 35 04 fa  	ld	a0, -96(s0)
8021bea8: 23 17 b4 fa  	sh	a1, -82(s0)

000000008021beac <.LBB459_9>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021beac: 97 65 00 00  	auipc	a1, 6
8021beb0: 93 85 c5 4b  	addi	a1, a1, 1212
8021beb4: 97 50 fe ff  	auipc	ra, 1048549
8021beb8: e7 80 e0 bf  	jalr	-1026(ra)
8021bebc: 23 16 a4 fa  	sh	a0, -84(s0)
8021bec0: 01 45        	mv	a0, zero
; ) !void {
8021bec2: 23 17 a4 fe  	sh	a0, -18(s0)
8021bec6: 06 74        	ld	s0, 96(sp)
8021bec8: a6 70        	ld	ra, 104(sp)
8021beca: 65 61        	addi	sp, sp, 112
8021becc: 82 80        	ret

000000008021bece <std.fmt.format.378>:
; pub fn format(
8021bece: 59 71        	addi	sp, sp, -112
;     args: anytype,
8021bed0: 86 f4        	sd	ra, 104(sp)
8021bed2: a2 f0        	sd	s0, 96(sp)
8021bed4: 80 18        	addi	s0, sp, 112
8021bed6: 23 38 b4 f8  	sd	a1, -112(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
8021beda: 23 30 a4 fa  	sd	a0, -96(s0)

000000008021bede <.LBB460_1>:
8021bede: 97 65 00 00  	auipc	a1, 6
8021bee2: 93 85 a5 49  	addi	a1, a1, 1178
8021bee6: 97 50 fe ff  	auipc	ra, 1048549
8021beea: e7 80 c0 bc  	jalr	-1076(ra)
8021beee: 83 35 04 f9  	ld	a1, -112(s0)
8021bef2: 2a 86        	mv	a2, a0
8021bef4: 03 35 04 fa  	ld	a0, -96(s0)
8021bef8: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
8021befc: 90 61        	ld	a2, 0(a1)
8021befe: 23 3c c4 fc  	sd	a2, -40(s0)
8021bf02: 90 65        	ld	a2, 8(a1)
8021bf04: 23 30 c4 fe  	sd	a2, -32(s0)

000000008021bf08 <.LBB460_2>:
;         try formatType(
8021bf08: 17 66 00 00  	auipc	a2, 6
8021bf0c: 13 06 06 4e  	addi	a2, a2, 1248
8021bf10: 8d 46        	addi	a3, zero, 3
8021bf12: 23 3c d4 f8  	sd	a3, -104(s0)
8021bf16: 97 c0 ff ff  	auipc	ra, 1048572
8021bf1a: e7 80 e0 f6  	jalr	-146(ra)
8021bf1e: aa 85        	mv	a1, a0
8021bf20: 03 35 04 fa  	ld	a0, -96(s0)
8021bf24: 23 1b b4 fc  	sh	a1, -42(s0)

000000008021bf28 <.LBB460_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021bf28: 97 65 00 00  	auipc	a1, 6
8021bf2c: 93 85 85 4e  	addi	a1, a1, 1256
8021bf30: 97 50 fe ff  	auipc	ra, 1048549
8021bf34: e7 80 20 b8  	jalr	-1150(ra)
8021bf38: 83 35 04 f9  	ld	a1, -112(s0)
8021bf3c: 83 36 84 f9  	ld	a3, -104(s0)
8021bf40: 2a 86        	mv	a2, a0
8021bf42: 03 35 04 fa  	ld	a0, -96(s0)
8021bf46: 23 1a c4 fc  	sh	a2, -44(s0)
;             @field(args, fields_info[arg_to_print].name),
8021bf4a: 8c 49        	lw	a1, 16(a1)
8021bf4c: 23 28 b4 fc  	sw	a1, -48(s0)

000000008021bf50 <.LBB460_4>:
;         try formatType(
8021bf50: 17 66 00 00  	auipc	a2, 6
8021bf54: 13 06 06 53  	addi	a2, a2, 1328
8021bf58: 97 c0 ff ff  	auipc	ra, 1048572
8021bf5c: e7 80 c0 1e  	jalr	492(ra)
8021bf60: aa 85        	mv	a1, a0
8021bf62: 03 35 04 fa  	ld	a0, -96(s0)
8021bf66: 23 17 b4 fc  	sh	a1, -50(s0)

000000008021bf6a <.LBB460_5>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021bf6a: 97 65 00 00  	auipc	a1, 6
8021bf6e: 93 85 e5 53  	addi	a1, a1, 1342
8021bf72: 97 50 fe ff  	auipc	ra, 1048549
8021bf76: e7 80 00 b4  	jalr	-1216(ra)
8021bf7a: 83 35 04 f9  	ld	a1, -112(s0)
8021bf7e: 83 36 84 f9  	ld	a3, -104(s0)
8021bf82: 2a 86        	mv	a2, a0
8021bf84: 03 35 04 fa  	ld	a0, -96(s0)
8021bf88: 23 16 c4 fc  	sh	a2, -52(s0)
;             @field(args, fields_info[arg_to_print].name),
8021bf8c: cc 49        	lw	a1, 20(a1)
8021bf8e: 23 24 b4 fc  	sw	a1, -56(s0)

000000008021bf92 <.LBB460_6>:
;         try formatType(
8021bf92: 17 66 00 00  	auipc	a2, 6
8021bf96: 13 06 66 58  	addi	a2, a2, 1414
8021bf9a: 97 c0 ff ff  	auipc	ra, 1048572
8021bf9e: e7 80 a0 1a  	jalr	426(ra)
8021bfa2: aa 85        	mv	a1, a0
8021bfa4: 03 35 04 fa  	ld	a0, -96(s0)
8021bfa8: 23 13 b4 fc  	sh	a1, -58(s0)

000000008021bfac <.LBB460_7>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021bfac: 97 65 00 00  	auipc	a1, 6
8021bfb0: 93 85 45 59  	addi	a1, a1, 1428
8021bfb4: 97 50 fe ff  	auipc	ra, 1048549
8021bfb8: e7 80 e0 af  	jalr	-1282(ra)
8021bfbc: 03 36 04 f9  	ld	a2, -112(s0)
8021bfc0: 83 36 84 f9  	ld	a3, -104(s0)
8021bfc4: aa 85        	mv	a1, a0
8021bfc6: 03 35 04 fa  	ld	a0, -96(s0)
8021bfca: 23 12 b4 fc  	sh	a1, -60(s0)
;             @field(args, fields_info[arg_to_print].name),
8021bfce: 93 05 86 01  	addi	a1, a2, 24
8021bfd2: 18 6e        	ld	a4, 24(a2)
8021bfd4: 23 38 e4 fa  	sd	a4, -80(s0)
8021bfd8: 10 72        	ld	a2, 32(a2)
8021bfda: 23 3c c4 fa  	sd	a2, -72(s0)

000000008021bfde <.LBB460_8>:
;         try formatType(
8021bfde: 17 66 00 00  	auipc	a2, 6
8021bfe2: 13 06 26 5d  	addi	a2, a2, 1490
8021bfe6: 97 c0 ff ff  	auipc	ra, 1048572
8021bfea: e7 80 e0 e9  	jalr	-354(ra)
8021bfee: aa 85        	mv	a1, a0
8021bff0: 03 35 04 fa  	ld	a0, -96(s0)
8021bff4: 23 17 b4 fa  	sh	a1, -82(s0)

000000008021bff8 <.LBB460_9>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021bff8: 97 65 00 00  	auipc	a1, 6
8021bffc: 93 85 05 5e  	addi	a1, a1, 1504
8021c000: 97 50 fe ff  	auipc	ra, 1048549
8021c004: e7 80 20 ab  	jalr	-1358(ra)
8021c008: 23 16 a4 fa  	sh	a0, -84(s0)
8021c00c: 01 45        	mv	a0, zero
; ) !void {
8021c00e: 23 17 a4 fe  	sh	a0, -18(s0)
8021c012: 06 74        	ld	s0, 96(sp)
8021c014: a6 70        	ld	ra, 104(sp)
8021c016: 65 61        	addi	sp, sp, 112
8021c018: 82 80        	ret

000000008021c01a <std.fmt.format.379>:
; pub fn format(
8021c01a: 59 71        	addi	sp, sp, -112
;     args: anytype,
8021c01c: 86 f4        	sd	ra, 104(sp)
8021c01e: a2 f0        	sd	s0, 96(sp)
8021c020: 80 18        	addi	s0, sp, 112
8021c022: 23 38 b4 f8  	sd	a1, -112(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
8021c026: 23 30 a4 fa  	sd	a0, -96(s0)

000000008021c02a <.LBB461_1>:
8021c02a: 97 65 00 00  	auipc	a1, 6
8021c02e: 93 85 e5 5b  	addi	a1, a1, 1470
8021c032: 97 50 fe ff  	auipc	ra, 1048549
8021c036: e7 80 00 a8  	jalr	-1408(ra)
8021c03a: 83 35 04 f9  	ld	a1, -112(s0)
8021c03e: 2a 86        	mv	a2, a0
8021c040: 03 35 04 fa  	ld	a0, -96(s0)
8021c044: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
8021c048: 90 61        	ld	a2, 0(a1)
8021c04a: 23 3c c4 fc  	sd	a2, -40(s0)
8021c04e: 90 65        	ld	a2, 8(a1)
8021c050: 23 30 c4 fe  	sd	a2, -32(s0)

000000008021c054 <.LBB461_2>:
;         try formatType(
8021c054: 17 66 00 00  	auipc	a2, 6
8021c058: 13 06 46 60  	addi	a2, a2, 1540
8021c05c: 8d 46        	addi	a3, zero, 3
8021c05e: 23 3c d4 f8  	sd	a3, -104(s0)
8021c062: 97 c0 ff ff  	auipc	ra, 1048572
8021c066: e7 80 20 e2  	jalr	-478(ra)
8021c06a: aa 85        	mv	a1, a0
8021c06c: 03 35 04 fa  	ld	a0, -96(s0)
8021c070: 23 1b b4 fc  	sh	a1, -42(s0)

000000008021c074 <.LBB461_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021c074: 97 65 00 00  	auipc	a1, 6
8021c078: 93 85 c5 60  	addi	a1, a1, 1548
8021c07c: 97 50 fe ff  	auipc	ra, 1048549
8021c080: e7 80 60 a3  	jalr	-1482(ra)
8021c084: 83 35 04 f9  	ld	a1, -112(s0)
8021c088: 83 36 84 f9  	ld	a3, -104(s0)
8021c08c: 2a 86        	mv	a2, a0
8021c08e: 03 35 04 fa  	ld	a0, -96(s0)
8021c092: 23 1a c4 fc  	sh	a2, -44(s0)
;             @field(args, fields_info[arg_to_print].name),
8021c096: 8c 49        	lw	a1, 16(a1)
8021c098: 23 28 b4 fc  	sw	a1, -48(s0)

000000008021c09c <.LBB461_4>:
;         try formatType(
8021c09c: 17 66 00 00  	auipc	a2, 6
8021c0a0: 13 06 46 65  	addi	a2, a2, 1620
8021c0a4: 97 c0 ff ff  	auipc	ra, 1048572
8021c0a8: e7 80 00 0a  	jalr	160(ra)
8021c0ac: aa 85        	mv	a1, a0
8021c0ae: 03 35 04 fa  	ld	a0, -96(s0)
8021c0b2: 23 17 b4 fc  	sh	a1, -50(s0)

000000008021c0b6 <.LBB461_5>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021c0b6: 97 65 00 00  	auipc	a1, 6
8021c0ba: 93 85 25 66  	addi	a1, a1, 1634
8021c0be: 97 50 fe ff  	auipc	ra, 1048549
8021c0c2: e7 80 40 9f  	jalr	-1548(ra)
8021c0c6: 83 35 04 f9  	ld	a1, -112(s0)
8021c0ca: 83 36 84 f9  	ld	a3, -104(s0)
8021c0ce: 2a 86        	mv	a2, a0
8021c0d0: 03 35 04 fa  	ld	a0, -96(s0)
8021c0d4: 23 16 c4 fc  	sh	a2, -52(s0)
;             @field(args, fields_info[arg_to_print].name),
8021c0d8: cc 49        	lw	a1, 20(a1)
8021c0da: 23 24 b4 fc  	sw	a1, -56(s0)

000000008021c0de <.LBB461_6>:
;         try formatType(
8021c0de: 17 66 00 00  	auipc	a2, 6
8021c0e2: 13 06 a6 6a  	addi	a2, a2, 1706
8021c0e6: 97 c0 ff ff  	auipc	ra, 1048572
8021c0ea: e7 80 e0 05  	jalr	94(ra)
8021c0ee: aa 85        	mv	a1, a0
8021c0f0: 03 35 04 fa  	ld	a0, -96(s0)
8021c0f4: 23 13 b4 fc  	sh	a1, -58(s0)

000000008021c0f8 <.LBB461_7>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021c0f8: 97 65 00 00  	auipc	a1, 6
8021c0fc: 93 85 85 6b  	addi	a1, a1, 1720
8021c100: 97 50 fe ff  	auipc	ra, 1048549
8021c104: e7 80 20 9b  	jalr	-1614(ra)
8021c108: 03 36 04 f9  	ld	a2, -112(s0)
8021c10c: 83 36 84 f9  	ld	a3, -104(s0)
8021c110: aa 85        	mv	a1, a0
8021c112: 03 35 04 fa  	ld	a0, -96(s0)
8021c116: 23 12 b4 fc  	sh	a1, -60(s0)
;             @field(args, fields_info[arg_to_print].name),
8021c11a: 93 05 86 01  	addi	a1, a2, 24
8021c11e: 18 6e        	ld	a4, 24(a2)
8021c120: 23 38 e4 fa  	sd	a4, -80(s0)
8021c124: 10 72        	ld	a2, 32(a2)
8021c126: 23 3c c4 fa  	sd	a2, -72(s0)

000000008021c12a <.LBB461_8>:
;         try formatType(
8021c12a: 17 66 00 00  	auipc	a2, 6
8021c12e: 13 06 66 6f  	addi	a2, a2, 1782
8021c132: 97 c0 ff ff  	auipc	ra, 1048572
8021c136: e7 80 20 d5  	jalr	-686(ra)
8021c13a: aa 85        	mv	a1, a0
8021c13c: 03 35 04 fa  	ld	a0, -96(s0)
8021c140: 23 17 b4 fa  	sh	a1, -82(s0)

000000008021c144 <.LBB461_9>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021c144: 97 65 00 00  	auipc	a1, 6
8021c148: 93 85 45 70  	addi	a1, a1, 1796
8021c14c: 97 50 fe ff  	auipc	ra, 1048549
8021c150: e7 80 60 96  	jalr	-1690(ra)
8021c154: 23 16 a4 fa  	sh	a0, -84(s0)
8021c158: 01 45        	mv	a0, zero
; ) !void {
8021c15a: 23 17 a4 fe  	sh	a0, -18(s0)
8021c15e: 06 74        	ld	s0, 96(sp)
8021c160: a6 70        	ld	ra, 104(sp)
8021c162: 65 61        	addi	sp, sp, 112
8021c164: 82 80        	ret

000000008021c166 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.380>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021c166: 79 71        	addi	sp, sp, -48
;             return std.fmt.format(self, format, args);
8021c168: 06 f4        	sd	ra, 40(sp)
8021c16a: 22 f0        	sd	s0, 32(sp)
8021c16c: 00 18        	addi	s0, sp, 48
8021c16e: 23 38 a4 fc  	sd	a0, -48(s0)
8021c172: 90 65        	ld	a2, 8(a1)
8021c174: 23 30 c4 fe  	sd	a2, -32(s0)
8021c178: 90 61        	ld	a2, 0(a1)
8021c17a: 23 3c c4 fc  	sd	a2, -40(s0)
8021c17e: 97 00 00 00  	auipc	ra, 0
8021c182: e7 80 e0 6b  	jalr	1726(ra)
8021c186: aa 85        	mv	a1, a0
8021c188: 41 65        	lui	a0, 16
8021c18a: 7d 35        	addiw	a0, a0, -1
8021c18c: 6d 8d        	and	a0, a0, a1
8021c18e: 23 17 b4 fe  	sh	a1, -18(s0)
8021c192: 81 45        	mv	a1, zero
8021c194: 63 0a b5 00  	beq	a0, a1, 0x8021c1a8 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.380+0x42>
8021c198: 09 a0        	j	0x8021c19a <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.380+0x34>
8021c19a: 03 35 04 fd  	ld	a0, -48(s0)
8021c19e: 97 40 fe ff  	auipc	ra, 1048548
8021c1a2: e7 80 40 70  	jalr	1796(ra)
8021c1a6: 11 a0        	j	0x8021c1aa <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.380+0x44>
8021c1a8: 09 a0        	j	0x8021c1aa <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.380+0x44>
8021c1aa: 03 15 e4 fe  	lh	a0, -18(s0)
8021c1ae: 02 74        	ld	s0, 32(sp)
8021c1b0: a2 70        	ld	ra, 40(sp)
8021c1b2: 45 61        	addi	sp, sp, 48
8021c1b4: 82 80        	ret

000000008021c1b6 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.381>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021c1b6: 39 71        	addi	sp, sp, -64
;             return std.fmt.format(self, format, args);
8021c1b8: 06 fc        	sd	ra, 56(sp)
8021c1ba: 22 f8        	sd	s0, 48(sp)
8021c1bc: 80 00        	addi	s0, sp, 64
8021c1be: 23 30 a4 fc  	sd	a0, -64(s0)
8021c1c2: 90 6d        	ld	a2, 24(a1)
8021c1c4: 23 30 c4 fe  	sd	a2, -32(s0)
8021c1c8: 90 69        	ld	a2, 16(a1)
8021c1ca: 23 3c c4 fc  	sd	a2, -40(s0)
8021c1ce: 90 65        	ld	a2, 8(a1)
8021c1d0: 23 38 c4 fc  	sd	a2, -48(s0)
8021c1d4: 90 61        	ld	a2, 0(a1)
8021c1d6: 23 34 c4 fc  	sd	a2, -56(s0)
8021c1da: 97 00 00 00  	auipc	ra, 0
8021c1de: e7 80 a0 6d  	jalr	1754(ra)
8021c1e2: aa 85        	mv	a1, a0
8021c1e4: 41 65        	lui	a0, 16
8021c1e6: 7d 35        	addiw	a0, a0, -1
8021c1e8: 6d 8d        	and	a0, a0, a1
8021c1ea: 23 17 b4 fe  	sh	a1, -18(s0)
8021c1ee: 81 45        	mv	a1, zero
8021c1f0: 63 0a b5 00  	beq	a0, a1, 0x8021c204 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.381+0x4e>
8021c1f4: 09 a0        	j	0x8021c1f6 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.381+0x40>
8021c1f6: 03 35 04 fc  	ld	a0, -64(s0)
8021c1fa: 97 40 fe ff  	auipc	ra, 1048548
8021c1fe: e7 80 80 6a  	jalr	1704(ra)
8021c202: 11 a0        	j	0x8021c206 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.381+0x50>
8021c204: 09 a0        	j	0x8021c206 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.381+0x50>
8021c206: 03 15 e4 fe  	lh	a0, -18(s0)
8021c20a: 42 74        	ld	s0, 48(sp)
8021c20c: e2 70        	ld	ra, 56(sp)
8021c20e: 21 61        	addi	sp, sp, 64
8021c210: 82 80        	ret

000000008021c212 <std.fmt.format.382>:
; pub fn format(
8021c212: 39 71        	addi	sp, sp, -64
;     args: anytype,
8021c214: 06 fc        	sd	ra, 56(sp)
8021c216: 22 f8        	sd	s0, 48(sp)
8021c218: 80 00        	addi	s0, sp, 64
8021c21a: 23 30 b4 fc  	sd	a1, -64(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
8021c21e: 23 34 a4 fc  	sd	a0, -56(s0)

000000008021c222 <.LBB464_1>:
8021c222: 97 65 00 00  	auipc	a1, 6
8021c226: 93 85 65 63  	addi	a1, a1, 1590
8021c22a: 97 50 fe ff  	auipc	ra, 1048549
8021c22e: e7 80 80 88  	jalr	-1912(ra)
8021c232: 83 35 04 fc  	ld	a1, -64(s0)
8021c236: 2a 86        	mv	a2, a0
8021c238: 03 35 84 fc  	ld	a0, -56(s0)
8021c23c: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
8021c240: 90 61        	ld	a2, 0(a1)
8021c242: 23 3c c4 fc  	sd	a2, -40(s0)
8021c246: 90 65        	ld	a2, 8(a1)
8021c248: 23 30 c4 fe  	sd	a2, -32(s0)

000000008021c24c <.LBB464_2>:
;         try formatType(
8021c24c: 17 66 00 00  	auipc	a2, 6
8021c250: 13 06 c6 67  	addi	a2, a2, 1660
8021c254: 8d 46        	addi	a3, zero, 3
8021c256: 97 c0 ff ff  	auipc	ra, 1048572
8021c25a: e7 80 e0 c2  	jalr	-978(ra)
8021c25e: aa 85        	mv	a1, a0
8021c260: 03 35 84 fc  	ld	a0, -56(s0)
8021c264: 23 1b b4 fc  	sh	a1, -42(s0)

000000008021c268 <.LBB464_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021c268: 97 65 00 00  	auipc	a1, 6
8021c26c: 93 85 85 68  	addi	a1, a1, 1672
8021c270: 97 50 fe ff  	auipc	ra, 1048549
8021c274: e7 80 20 84  	jalr	-1982(ra)
8021c278: 23 1a a4 fc  	sh	a0, -44(s0)
8021c27c: 01 45        	mv	a0, zero
; ) !void {
8021c27e: 23 17 a4 fe  	sh	a0, -18(s0)
8021c282: 42 74        	ld	s0, 48(sp)
8021c284: e2 70        	ld	ra, 56(sp)
8021c286: 21 61        	addi	sp, sp, 64
8021c288: 82 80        	ret

000000008021c28a <std.fmt.formatIntValue.383>:
; pub fn formatIntValue(
8021c28a: 59 71        	addi	sp, sp, -112
8021c28c: 86 f4        	sd	ra, 104(sp)
8021c28e: a2 f0        	sd	s0, 96(sp)
8021c290: 80 18        	addi	s0, sp, 112
8021c292: 32 87        	mv	a4, a2
8021c294: 23 3c a4 f8  	sd	a0, -104(s0)
8021c298: 23 34 b4 fa  	sd	a1, -88(s0)
;     } else value;
8021c29c: 23 30 b4 fe  	sd	a1, -32(s0)
;     return formatInt(int_value, radix, case, options, writer);
8021c2a0: 23 3c b4 fc  	sd	a1, -40(s0)
8021c2a4: 10 63        	ld	a2, 0(a4)
8021c2a6: 23 38 c4 fa  	sd	a2, -80(s0)
8021c2aa: 10 67        	ld	a2, 8(a4)
8021c2ac: 23 3c c4 fa  	sd	a2, -72(s0)
8021c2b0: 10 6b        	ld	a2, 16(a4)
8021c2b2: 23 30 c4 fc  	sd	a2, -64(s0)
8021c2b6: 10 6f        	ld	a2, 24(a4)
8021c2b8: 23 34 c4 fc  	sd	a2, -56(s0)
8021c2bc: 10 73        	ld	a2, 32(a4)
8021c2be: 23 38 c4 fc  	sd	a2, -48(s0)
8021c2c2: 29 46        	addi	a2, zero, 10
8021c2c4: 81 46        	mv	a3, zero
8021c2c6: 23 30 d4 fa  	sd	a3, -96(s0)
8021c2ca: 97 00 00 00  	auipc	ra, 0
8021c2ce: e7 80 a0 03  	jalr	58(ra)
8021c2d2: 83 35 04 fa  	ld	a1, -96(s0)
8021c2d6: 2a 86        	mv	a2, a0
8021c2d8: 41 65        	lui	a0, 16
8021c2da: 7d 35        	addiw	a0, a0, -1
8021c2dc: 71 8d        	and	a0, a0, a2
8021c2de: 23 17 c4 fe  	sh	a2, -18(s0)
8021c2e2: 63 0a b5 00  	beq	a0, a1, 0x8021c2f6 <std.fmt.formatIntValue.383+0x6c>
8021c2e6: 09 a0        	j	0x8021c2e8 <std.fmt.formatIntValue.383+0x5e>
8021c2e8: 03 35 84 f9  	ld	a0, -104(s0)
8021c2ec: 97 40 fe ff  	auipc	ra, 1048548
8021c2f0: e7 80 60 5b  	jalr	1462(ra)
8021c2f4: 11 a0        	j	0x8021c2f8 <std.fmt.formatIntValue.383+0x6e>
8021c2f6: 09 a0        	j	0x8021c2f8 <std.fmt.formatIntValue.383+0x6e>
8021c2f8: 03 15 e4 fe  	lh	a0, -18(s0)
8021c2fc: 06 74        	ld	s0, 96(sp)
8021c2fe: a6 70        	ld	ra, 104(sp)
8021c300: 65 61        	addi	sp, sp, 112
8021c302: 82 80        	ret

000000008021c304 <std.fmt.formatInt.384>:
; pub fn formatInt(
8021c304: 2d 71        	addi	sp, sp, -288
;     options: FormatOptions,
8021c306: 06 ee        	sd	ra, 280(sp)
8021c308: 22 ea        	sd	s0, 272(sp)
8021c30a: 00 12        	addi	s0, sp, 288
8021c30c: 23 38 e4 f2  	sd	a4, -208(s0)
8021c310: 23 3c b4 f2  	sd	a1, -200(s0)
8021c314: aa 85        	mv	a1, a0
8021c316: 03 35 84 f3  	ld	a0, -200(s0)
8021c31a: 23 30 b4 f4  	sd	a1, -192(s0)
8021c31e: 93 75 f6 0f  	andi	a1, a2, 255
8021c322: 23 3c a4 f4  	sd	a0, -168(s0)
8021c326: a3 0b c4 f4  	sb	a2, -169(s0)
8021c32a: 13 f5 16 00  	andi	a0, a3, 1
8021c32e: 23 0b a4 f4  	sb	a0, -170(s0)
8021c332: 05 45        	addi	a0, zero, 1
;     assert(base >= 2);
8021c334: 33 35 b5 00  	sltu	a0, a0, a1
8021c338: 97 40 fe ff  	auipc	ra, 1048548
8021c33c: e7 80 20 e2  	jalr	-478(ra)
;     } else value;
8021c340: 03 35 84 f5  	ld	a0, -168(s0)
8021c344: 23 30 a4 fe  	sd	a0, -32(s0)
;     const abs_value = math.absCast(int_value);
8021c348: 23 3c a4 fc  	sd	a0, -40(s0)
8021c34c: 97 00 00 00  	auipc	ra, 0
8021c350: e7 80 00 1f  	jalr	496(ra)
8021c354: 23 38 a4 fc  	sd	a0, -48(s0)
8021c358: 13 05 f4 f8  	addi	a0, s0, -113
8021c35c: 93 05 a0 0a  	addi	a1, zero, 170
8021c360: 13 06 10 04  	addi	a2, zero, 65
;     var buf: [1 + math.max(value_info.bits, 1)]u8 = undefined;
8021c364: 23 34 c4 f4  	sd	a2, -184(s0)
8021c368: 97 10 00 00  	auipc	ra, 1
8021c36c: e7 80 80 9a  	jalr	-1624(ra)
;     var a: MinInt = abs_value;
8021c370: 03 35 84 f4  	ld	a0, -184(s0)
8021c374: 83 35 04 fd  	ld	a1, -48(s0)
8021c378: 23 30 b4 f8  	sd	a1, -128(s0)
;     var index: usize = buf.len;
8021c37c: 23 3c a4 f6  	sd	a0, -136(s0)
;     while (true) {
8021c380: 09 a0        	j	0x8021c382 <std.fmt.formatInt.384+0x7e>
8021c382: 09 a0        	j	0x8021c384 <std.fmt.formatInt.384+0x80>
;         const digit = a % base;
8021c384: 03 35 04 f8  	ld	a0, -128(s0)
8021c388: 23 30 a4 f2  	sd	a0, -224(s0)
8021c38c: 03 45 74 f5  	lbu	a0, -169(s0)
8021c390: 23 34 a4 f2  	sd	a0, -216(s0)
8021c394: 81 45        	mv	a1, zero
8021c396: 63 0e b5 04  	beq	a0, a1, 0x8021c3f2 <.LBB466_24>
8021c39a: 1d a8        	j	0x8021c3d0 <std.fmt.formatInt.384+0xcc>
;         if (a == 0) break;
8021c39c: 19 a0        	j	0x8021c3a2 <std.fmt.formatInt.384+0x9e>
8021c39e: 09 a0        	j	0x8021c3a0 <std.fmt.formatInt.384+0x9c>
;     while (true) {
8021c3a0: cd b7        	j	0x8021c382 <std.fmt.formatInt.384+0x7e>
;     return formatBuf(buf[index..], options, writer);
8021c3a2: 03 35 84 f7  	ld	a0, -136(s0)
8021c3a6: 23 3c a4 f0  	sd	a0, -232(s0)
8021c3aa: 93 05 20 04  	addi	a1, zero, 66
8021c3ae: 63 68 b5 12  	bltu	a0, a1, 0x8021c4de <.LBB466_29+0x12>
8021c3b2: 29 aa        	j	0x8021c4cc <.LBB466_29>
8021c3b4: 03 35 04 f4  	ld	a0, -192(s0)
8021c3b8: 97 40 fe ff  	auipc	ra, 1048548
8021c3bc: e7 80 a0 4e  	jalr	1258(ra)
8021c3c0: 11 a0        	j	0x8021c3c4 <std.fmt.formatInt.384+0xc0>
8021c3c2: 09 a0        	j	0x8021c3c4 <std.fmt.formatInt.384+0xc0>
8021c3c4: 03 15 e4 fe  	lh	a0, -18(s0)
8021c3c8: 52 64        	ld	s0, 272(sp)
8021c3ca: f2 60        	ld	ra, 280(sp)
8021c3cc: 15 61        	addi	sp, sp, 288
8021c3ce: 82 80        	ret
;         const digit = a % base;
8021c3d0: 03 35 04 f2  	ld	a0, -224(s0)
8021c3d4: 83 35 84 f2  	ld	a1, -216(s0)
8021c3d8: 33 75 b5 02  	remu	a0, a0, a1
8021c3dc: 23 38 a4 f6  	sd	a0, -144(s0)
;         index -= 1;
8021c3e0: 03 35 84 f7  	ld	a0, -136(s0)
8021c3e4: 93 05 f5 ff  	addi	a1, a0, -1
8021c3e8: 23 38 b4 f0  	sd	a1, -240(s0)
8021c3ec: 63 6c b5 00  	bltu	a0, a1, 0x8021c404 <.LBB466_25>
8021c3f0: 1d a0        	j	0x8021c416 <.LBB466_25+0x12>

000000008021c3f2 <.LBB466_24>:
;         const digit = a % base;
8021c3f2: 17 15 00 00  	auipc	a0, 1
8021c3f6: 13 05 e5 ee  	addi	a0, a0, -274
8021c3fa: 81 45        	mv	a1, zero
8021c3fc: 97 40 fe ff  	auipc	ra, 1048548
8021c400: e7 80 40 ca  	jalr	-860(ra)

000000008021c404 <.LBB466_25>:
;         index -= 1;
8021c404: 17 15 00 00  	auipc	a0, 1
8021c408: 13 05 c5 07  	addi	a0, a0, 124
8021c40c: 81 45        	mv	a1, zero
8021c40e: 97 40 fe ff  	auipc	ra, 1048548
8021c412: e7 80 20 c9  	jalr	-878(ra)
8021c416: 03 35 04 f1  	ld	a0, -240(s0)
8021c41a: 23 3c a4 f6  	sd	a0, -136(s0)
;         buf[index] = digitToChar(@intCast(u8, digit), case);
8021c41e: aa 85        	mv	a1, a0
8021c420: 23 34 b4 f0  	sd	a1, -248(s0)
8021c424: 93 05 10 04  	addi	a1, zero, 65
8021c428: 63 6c b5 00  	bltu	a0, a1, 0x8021c440 <.LBB466_26+0x12>
8021c42c: 09 a0        	j	0x8021c42e <.LBB466_26>

000000008021c42e <.LBB466_26>:
8021c42e: 17 15 00 00  	auipc	a0, 1
8021c432: 13 05 25 ed  	addi	a0, a0, -302
8021c436: 81 45        	mv	a1, zero
8021c438: 97 40 fe ff  	auipc	ra, 1048548
8021c43c: e7 80 80 c6  	jalr	-920(ra)
8021c440: 83 35 84 f0  	ld	a1, -248(s0)
8021c444: 13 05 f4 f8  	addi	a0, s0, -113
;         buf[index] = digitToChar(@intCast(u8, digit), case);
8021c448: 2e 95        	add	a0, a0, a1
8021c44a: 23 3c a4 ee  	sd	a0, -264(s0)
8021c44e: 03 35 04 f7  	ld	a0, -144(s0)
8021c452: 23 30 a4 f0  	sd	a0, -256(s0)
8021c456: 93 75 f5 0f  	andi	a1, a0, 255
8021c45a: 63 1b b5 02  	bne	a0, a1, 0x8021c490 <.LBB466_27>
8021c45e: 09 a0        	j	0x8021c460 <.LBB466_26+0x32>
8021c460: 03 35 04 f0  	ld	a0, -256(s0)
8021c464: 83 05 64 f5  	lb	a1, -170(s0)
8021c468: 97 d0 ff ff  	auipc	ra, 1048573
8021c46c: e7 80 c0 69  	jalr	1692(ra)
8021c470: 83 35 84 ef  	ld	a1, -264(s0)
8021c474: 23 80 a5 00  	sb	a0, 0(a1)
;         a /= base;
8021c478: 03 35 04 f8  	ld	a0, -128(s0)
8021c47c: 23 34 a4 ee  	sd	a0, -280(s0)
8021c480: 03 45 74 f5  	lbu	a0, -169(s0)
8021c484: 23 38 a4 ee  	sd	a0, -272(s0)
8021c488: 81 45        	mv	a1, zero
8021c48a: 63 0c b5 00  	beq	a0, a1, 0x8021c4a2 <.LBB466_28>
8021c48e: 1d a0        	j	0x8021c4b4 <.LBB466_28+0x12>

000000008021c490 <.LBB466_27>:
;         buf[index] = digitToChar(@intCast(u8, digit), case);
8021c490: 17 15 00 00  	auipc	a0, 1
8021c494: 13 05 05 e6  	addi	a0, a0, -416
8021c498: 81 45        	mv	a1, zero
8021c49a: 97 40 fe ff  	auipc	ra, 1048548
8021c49e: e7 80 60 c0  	jalr	-1018(ra)

000000008021c4a2 <.LBB466_28>:
;         a /= base;
8021c4a2: 17 15 00 00  	auipc	a0, 1
8021c4a6: 13 05 e5 e2  	addi	a0, a0, -466
8021c4aa: 81 45        	mv	a1, zero
8021c4ac: 97 40 fe ff  	auipc	ra, 1048548
8021c4b0: e7 80 40 bf  	jalr	-1036(ra)
8021c4b4: 03 35 84 ee  	ld	a0, -280(s0)
8021c4b8: 83 35 04 ef  	ld	a1, -272(s0)
8021c4bc: 33 55 b5 02  	divu	a0, a0, a1
8021c4c0: 23 30 a4 f8  	sd	a0, -128(s0)
8021c4c4: 81 45        	mv	a1, zero
;         if (a == 0) break;
8021c4c6: e3 0b b5 ec  	beq	a0, a1, 0x8021c39c <std.fmt.formatInt.384+0x98>
8021c4ca: d1 bd        	j	0x8021c39e <std.fmt.formatInt.384+0x9a>

000000008021c4cc <.LBB466_29>:
;     return formatBuf(buf[index..], options, writer);
8021c4cc: 17 15 00 00  	auipc	a0, 1
8021c4d0: 13 05 45 e3  	addi	a0, a0, -460
8021c4d4: 81 45        	mv	a1, zero
8021c4d6: 97 40 fe ff  	auipc	ra, 1048548
8021c4da: e7 80 a0 bc  	jalr	-1078(ra)
8021c4de: 81 45        	mv	a1, zero
8021c4e0: 05 45        	addi	a0, zero, 1
;     return formatBuf(buf[index..], options, writer);
8021c4e2: 63 1c b5 00  	bne	a0, a1, 0x8021c4fa <.LBB466_30+0x12>
8021c4e6: 09 a0        	j	0x8021c4e8 <.LBB466_30>

000000008021c4e8 <.LBB466_30>:
8021c4e8: 17 15 00 00  	auipc	a0, 1
8021c4ec: 13 05 85 e1  	addi	a0, a0, -488
8021c4f0: 81 45        	mv	a1, zero
8021c4f2: 97 40 fe ff  	auipc	ra, 1048548
8021c4f6: e7 80 e0 ba  	jalr	-1106(ra)
8021c4fa: 03 36 04 f3  	ld	a2, -208(s0)
8021c4fe: 03 35 04 f4  	ld	a0, -192(s0)
8021c502: 03 37 84 f1  	ld	a4, -232(s0)
8021c506: 93 05 f4 f8  	addi	a1, s0, -113
;     return formatBuf(buf[index..], options, writer);
8021c50a: b3 86 e5 00  	add	a3, a1, a4
8021c50e: 93 05 10 04  	addi	a1, zero, 65
8021c512: 99 8d        	sub	a1, a1, a4
8021c514: 23 30 d4 f6  	sd	a3, -160(s0)
8021c518: 23 34 b4 f6  	sd	a1, -152(s0)
8021c51c: 93 05 04 f6  	addi	a1, s0, -160
8021c520: 97 50 fe ff  	auipc	ra, 1048549
8021c524: e7 80 40 f4  	jalr	-188(ra)
8021c528: aa 85        	mv	a1, a0
8021c52a: 41 65        	lui	a0, 16
8021c52c: 7d 35        	addiw	a0, a0, -1
8021c52e: 6d 8d        	and	a0, a0, a1
8021c530: 23 17 b4 fe  	sh	a1, -18(s0)
8021c534: 81 45        	mv	a1, zero
8021c536: e3 1f b5 e6  	bne	a0, a1, 0x8021c3b4 <std.fmt.formatInt.384+0xb0>
8021c53a: 61 b5        	j	0x8021c3c2 <std.fmt.formatInt.384+0xbe>

000000008021c53c <std.math.absCast.385>:
; pub fn absCast(x: anytype) switch (@typeInfo(@TypeOf(x))) {
8021c53c: 01 11        	addi	sp, sp, -32
8021c53e: 06 ec        	sd	ra, 24(sp)
8021c540: 22 e8        	sd	s0, 16(sp)
8021c542: 00 10        	addi	s0, sp, 32
8021c544: 23 30 a4 fe  	sd	a0, -32(s0)
;                 return @intCast(Uint, x);
8021c548: 23 34 a4 fe  	sd	a0, -24(s0)
8021c54c: 42 64        	ld	s0, 16(sp)
8021c54e: e2 60        	ld	ra, 24(sp)
8021c550: 05 61        	addi	sp, sp, 32
8021c552: 82 80        	ret

000000008021c554 <std.fmt.formatValue.386>:
; fn formatValue(
8021c554: 5d 71        	addi	sp, sp, -80
8021c556: 86 e4        	sd	ra, 72(sp)
8021c558: a2 e0        	sd	s0, 64(sp)
8021c55a: 80 08        	addi	s0, sp, 80
8021c55c: 23 38 a4 fa  	sd	a0, -80(s0)
8021c560: 23 2e b4 fa  	sw	a1, -68(s0)
;         .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
8021c564: 23 24 b4 fe  	sw	a1, -24(s0)
8021c568: 14 62        	ld	a3, 0(a2)
8021c56a: 23 30 d4 fc  	sd	a3, -64(s0)
8021c56e: 14 66        	ld	a3, 8(a2)
8021c570: 23 34 d4 fc  	sd	a3, -56(s0)
8021c574: 14 6a        	ld	a3, 16(a2)
8021c576: 23 38 d4 fc  	sd	a3, -48(s0)
8021c57a: 14 6e        	ld	a3, 24(a2)
8021c57c: 23 3c d4 fc  	sd	a3, -40(s0)
8021c580: 14 72        	ld	a3, 32(a2)
8021c582: 23 30 d4 fe  	sd	a3, -32(s0)
8021c586: 97 00 00 00  	auipc	ra, 0
8021c58a: e7 80 60 3f  	jalr	1014(ra)
8021c58e: aa 85        	mv	a1, a0
8021c590: 41 65        	lui	a0, 16
8021c592: 7d 35        	addiw	a0, a0, -1
8021c594: 6d 8d        	and	a0, a0, a1
8021c596: 23 17 b4 fe  	sh	a1, -18(s0)
8021c59a: 81 45        	mv	a1, zero
8021c59c: 63 0a b5 00  	beq	a0, a1, 0x8021c5b0 <std.fmt.formatValue.386+0x5c>
8021c5a0: 09 a0        	j	0x8021c5a2 <std.fmt.formatValue.386+0x4e>
8021c5a2: 03 35 04 fb  	ld	a0, -80(s0)
8021c5a6: 97 40 fe ff  	auipc	ra, 1048548
8021c5aa: e7 80 c0 2f  	jalr	764(ra)
8021c5ae: 11 a0        	j	0x8021c5b2 <std.fmt.formatValue.386+0x5e>
8021c5b0: 09 a0        	j	0x8021c5b2 <std.fmt.formatValue.386+0x5e>
8021c5b2: 03 15 e4 fe  	lh	a0, -18(s0)
8021c5b6: 06 64        	ld	s0, 64(sp)
8021c5b8: a6 60        	ld	ra, 72(sp)
8021c5ba: 61 61        	addi	sp, sp, 80
8021c5bc: 82 80        	ret

000000008021c5be <std.fmt.formatValue.387>:
; fn formatValue(
8021c5be: 5d 71        	addi	sp, sp, -80
8021c5c0: 86 e4        	sd	ra, 72(sp)
8021c5c2: a2 e0        	sd	s0, 64(sp)
8021c5c4: 80 08        	addi	s0, sp, 80
8021c5c6: 23 38 a4 fa  	sd	a0, -80(s0)
8021c5ca: a3 0f b4 fa  	sb	a1, -65(s0)
;         .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
8021c5ce: a3 06 b4 fe  	sb	a1, -19(s0)
8021c5d2: 14 62        	ld	a3, 0(a2)
8021c5d4: 23 30 d4 fc  	sd	a3, -64(s0)
8021c5d8: 14 66        	ld	a3, 8(a2)
8021c5da: 23 34 d4 fc  	sd	a3, -56(s0)
8021c5de: 14 6a        	ld	a3, 16(a2)
8021c5e0: 23 38 d4 fc  	sd	a3, -48(s0)
8021c5e4: 14 6e        	ld	a3, 24(a2)
8021c5e6: 23 3c d4 fc  	sd	a3, -40(s0)
8021c5ea: 14 72        	ld	a3, 32(a2)
8021c5ec: 23 30 d4 fe  	sd	a3, -32(s0)
8021c5f0: 97 00 00 00  	auipc	ra, 0
8021c5f4: e7 80 60 40  	jalr	1030(ra)
8021c5f8: aa 85        	mv	a1, a0
8021c5fa: 41 65        	lui	a0, 16
8021c5fc: 7d 35        	addiw	a0, a0, -1
8021c5fe: 6d 8d        	and	a0, a0, a1
8021c600: 23 17 b4 fe  	sh	a1, -18(s0)
8021c604: 81 45        	mv	a1, zero
8021c606: 63 0a b5 00  	beq	a0, a1, 0x8021c61a <std.fmt.formatValue.387+0x5c>
8021c60a: 09 a0        	j	0x8021c60c <std.fmt.formatValue.387+0x4e>
8021c60c: 03 35 04 fb  	ld	a0, -80(s0)
8021c610: 97 40 fe ff  	auipc	ra, 1048548
8021c614: e7 80 20 29  	jalr	658(ra)
8021c618: 11 a0        	j	0x8021c61c <std.fmt.formatValue.387+0x5e>
8021c61a: 09 a0        	j	0x8021c61c <std.fmt.formatValue.387+0x5e>
8021c61c: 03 15 e4 fe  	lh	a0, -18(s0)
8021c620: 06 64        	ld	s0, 64(sp)
8021c622: a6 60        	ld	ra, 72(sp)
8021c624: 61 61        	addi	sp, sp, 80
8021c626: 82 80        	ret

000000008021c628 <std.fmt.formatType.388>:
; pub fn formatType(
8021c628: 79 71        	addi	sp, sp, -48
8021c62a: 06 f4        	sd	ra, 40(sp)
8021c62c: 22 f0        	sd	s0, 32(sp)
8021c62e: 00 18        	addi	s0, sp, 48
8021c630: 23 38 a4 fc  	sd	a0, -48(s0)
8021c634: 23 22 b4 fe  	sw	a1, -28(s0)
8021c638: 23 3c d4 fc  	sd	a3, -40(s0)

000000008021c63c <.LBB470_1>:
;             try writer.writeAll(@typeName(T));
8021c63c: 97 55 00 00  	auipc	a1, 5
8021c640: 93 85 45 62  	addi	a1, a1, 1572
8021c644: 97 40 fe ff  	auipc	ra, 1048548
8021c648: e7 80 e0 46  	jalr	1134(ra)
8021c64c: aa 85        	mv	a1, a0
8021c64e: 03 35 04 fd  	ld	a0, -48(s0)
8021c652: 23 16 b4 fe  	sh	a1, -20(s0)

000000008021c656 <.LBB470_2>:
;                 try writer.writeAll(".");
8021c656: 97 55 00 00  	auipc	a1, 5
8021c65a: 93 85 a5 61  	addi	a1, a1, 1562
8021c65e: 97 40 fe ff  	auipc	ra, 1048548
8021c662: e7 80 40 45  	jalr	1108(ra)
8021c666: 23 15 a4 fe  	sh	a0, -22(s0)
;                 try writer.writeAll(@tagName(value));
8021c66a: 03 25 44 fe  	lw	a0, -28(s0)
8021c66e: 97 80 ff ff  	auipc	ra, 1048568
8021c672: e7 80 00 09  	jalr	144(ra)
8021c676: aa 85        	mv	a1, a0
8021c678: 03 35 04 fd  	ld	a0, -48(s0)
8021c67c: 97 40 fe ff  	auipc	ra, 1048548
8021c680: e7 80 60 43  	jalr	1078(ra)
8021c684: 23 14 a4 fe  	sh	a0, -24(s0)
8021c688: 01 45        	mv	a0, zero
;                 return;
8021c68a: 23 17 a4 fe  	sh	a0, -18(s0)
8021c68e: 02 74        	ld	s0, 32(sp)
8021c690: a2 70        	ld	ra, 40(sp)
8021c692: 45 61        	addi	sp, sp, 48
8021c694: 82 80        	ret

000000008021c696 <std.fmt.format.389>:
; pub fn format(
8021c696: 39 71        	addi	sp, sp, -64
;     args: anytype,
8021c698: 06 fc        	sd	ra, 56(sp)
8021c69a: 22 f8        	sd	s0, 48(sp)
8021c69c: 80 00        	addi	s0, sp, 64
8021c69e: 23 30 b4 fc  	sd	a1, -64(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
8021c6a2: 23 34 a4 fc  	sd	a0, -56(s0)

000000008021c6a6 <.LBB471_1>:
8021c6a6: 97 65 00 00  	auipc	a1, 6
8021c6aa: 93 85 a5 25  	addi	a1, a1, 602
8021c6ae: 97 40 fe ff  	auipc	ra, 1048548
8021c6b2: e7 80 40 40  	jalr	1028(ra)
8021c6b6: 83 35 04 fc  	ld	a1, -64(s0)
8021c6ba: 2a 86        	mv	a2, a0
8021c6bc: 03 35 84 fc  	ld	a0, -56(s0)
8021c6c0: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
8021c6c4: 90 61        	ld	a2, 0(a1)
8021c6c6: 23 3c c4 fc  	sd	a2, -40(s0)
8021c6ca: 90 65        	ld	a2, 8(a1)
8021c6cc: 23 30 c4 fe  	sd	a2, -32(s0)

000000008021c6d0 <.LBB471_2>:
;         try formatType(
8021c6d0: 17 66 00 00  	auipc	a2, 6
8021c6d4: 13 06 06 2a  	addi	a2, a2, 672
8021c6d8: 8d 46        	addi	a3, zero, 3
8021c6da: 97 b0 ff ff  	auipc	ra, 1048571
8021c6de: e7 80 a0 7a  	jalr	1962(ra)
8021c6e2: aa 85        	mv	a1, a0
8021c6e4: 03 35 84 fc  	ld	a0, -56(s0)
8021c6e8: 23 1b b4 fc  	sh	a1, -42(s0)

000000008021c6ec <.LBB471_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021c6ec: 97 65 00 00  	auipc	a1, 6
8021c6f0: 93 85 c5 2a  	addi	a1, a1, 684
8021c6f4: 97 40 fe ff  	auipc	ra, 1048548
8021c6f8: e7 80 e0 3b  	jalr	958(ra)
8021c6fc: 23 1a a4 fc  	sh	a0, -44(s0)
8021c700: 01 45        	mv	a0, zero
; ) !void {
8021c702: 23 17 a4 fe  	sh	a0, -18(s0)
8021c706: 42 74        	ld	s0, 48(sp)
8021c708: e2 70        	ld	ra, 56(sp)
8021c70a: 21 61        	addi	sp, sp, 64
8021c70c: 82 80        	ret

000000008021c70e <std.fmt.format.390>:
; pub fn format(
8021c70e: 79 71        	addi	sp, sp, -48
;     args: anytype,
8021c710: 06 f4        	sd	ra, 40(sp)
8021c712: 22 f0        	sd	s0, 32(sp)
8021c714: 00 18        	addi	s0, sp, 48
8021c716: 23 38 b4 fc  	sd	a1, -48(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
8021c71a: 23 3c a4 fc  	sd	a0, -40(s0)

000000008021c71e <.LBB472_1>:
8021c71e: 97 65 00 00  	auipc	a1, 6
8021c722: 93 85 a5 28  	addi	a1, a1, 650
8021c726: 97 40 fe ff  	auipc	ra, 1048548
8021c72a: e7 80 c0 38  	jalr	908(ra)
8021c72e: 83 35 04 fd  	ld	a1, -48(s0)
8021c732: 2a 86        	mv	a2, a0
8021c734: 03 35 84 fd  	ld	a0, -40(s0)
8021c738: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
8021c73c: 8c 41        	lw	a1, 0(a1)
8021c73e: 23 24 b4 fe  	sw	a1, -24(s0)

000000008021c742 <.LBB472_2>:
;         try formatType(
8021c742: 17 66 00 00  	auipc	a2, 6
8021c746: 13 06 66 2d  	addi	a2, a2, 726
8021c74a: 8d 46        	addi	a3, zero, 3
8021c74c: 97 00 00 00  	auipc	ra, 0
8021c750: e7 80 c0 ed  	jalr	-292(ra)
8021c754: aa 85        	mv	a1, a0
8021c756: 03 35 84 fd  	ld	a0, -40(s0)
8021c75a: 23 13 b4 fe  	sh	a1, -26(s0)

000000008021c75e <.LBB472_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021c75e: 97 65 00 00  	auipc	a1, 6
8021c762: 93 85 25 2e  	addi	a1, a1, 738
8021c766: 97 40 fe ff  	auipc	ra, 1048548
8021c76a: e7 80 c0 34  	jalr	844(ra)
8021c76e: 23 12 a4 fe  	sh	a0, -28(s0)
8021c772: 01 45        	mv	a0, zero
; ) !void {
8021c774: 23 17 a4 fe  	sh	a0, -18(s0)
8021c778: 02 74        	ld	s0, 32(sp)
8021c77a: a2 70        	ld	ra, 40(sp)
8021c77c: 45 61        	addi	sp, sp, 48
8021c77e: 82 80        	ret

000000008021c780 <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.391>:
;         pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {
8021c780: 01 11        	addi	sp, sp, -32
;             return std.fmt.format(self, format, args);
8021c782: 06 ec        	sd	ra, 24(sp)
8021c784: 22 e8        	sd	s0, 16(sp)
8021c786: 00 10        	addi	s0, sp, 32
8021c788: 23 30 a4 fe  	sd	a0, -32(s0)
8021c78c: 90 41        	lw	a2, 0(a1)
8021c78e: 23 24 c4 fe  	sw	a2, -24(s0)
8021c792: 97 00 00 00  	auipc	ra, 0
8021c796: e7 80 c0 50  	jalr	1292(ra)
8021c79a: aa 85        	mv	a1, a0
8021c79c: 41 65        	lui	a0, 16
8021c79e: 7d 35        	addiw	a0, a0, -1
8021c7a0: 6d 8d        	and	a0, a0, a1
8021c7a2: 23 17 b4 fe  	sh	a1, -18(s0)
8021c7a6: 81 45        	mv	a1, zero
8021c7a8: 63 0a b5 00  	beq	a0, a1, 0x8021c7bc <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.391+0x3c>
8021c7ac: 09 a0        	j	0x8021c7ae <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.391+0x2e>
8021c7ae: 03 35 04 fe  	ld	a0, -32(s0)
8021c7b2: 97 40 fe ff  	auipc	ra, 1048548
8021c7b6: e7 80 00 0f  	jalr	240(ra)
8021c7ba: 11 a0        	j	0x8021c7be <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.391+0x3e>
8021c7bc: 09 a0        	j	0x8021c7be <std.io.writer.Writer(void,arch.riscv.Error,arch.riscv.Writer.write).print.391+0x3e>
8021c7be: 03 15 e4 fe  	lh	a0, -18(s0)
8021c7c2: 42 64        	ld	s0, 16(sp)
8021c7c4: e2 60        	ld	ra, 24(sp)
8021c7c6: 05 61        	addi	sp, sp, 32
8021c7c8: 82 80        	ret

000000008021c7ca <std.fmt.format.392>:
; pub fn format(
8021c7ca: 79 71        	addi	sp, sp, -48
;     args: anytype,
8021c7cc: 06 f4        	sd	ra, 40(sp)
8021c7ce: 22 f0        	sd	s0, 32(sp)
8021c7d0: 00 18        	addi	s0, sp, 48
8021c7d2: 23 38 b4 fc  	sd	a1, -48(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
8021c7d6: 23 3c a4 fc  	sd	a0, -40(s0)

000000008021c7da <.LBB474_1>:
8021c7da: 97 65 00 00  	auipc	a1, 6
8021c7de: 93 85 65 27  	addi	a1, a1, 630
8021c7e2: 97 40 fe ff  	auipc	ra, 1048548
8021c7e6: e7 80 00 2d  	jalr	720(ra)
8021c7ea: 83 35 04 fd  	ld	a1, -48(s0)
8021c7ee: 2a 86        	mv	a2, a0
8021c7f0: 03 35 84 fd  	ld	a0, -40(s0)
8021c7f4: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
8021c7f8: 8c 41        	lw	a1, 0(a1)
8021c7fa: 23 24 b4 fe  	sw	a1, -24(s0)

000000008021c7fe <.LBB474_2>:
;         try formatType(
8021c7fe: 17 66 00 00  	auipc	a2, 6
8021c802: 13 06 26 2c  	addi	a2, a2, 706
8021c806: 8d 46        	addi	a3, zero, 3
8021c808: 97 00 00 00  	auipc	ra, 0
8021c80c: e7 80 00 e2  	jalr	-480(ra)
8021c810: aa 85        	mv	a1, a0
8021c812: 03 35 84 fd  	ld	a0, -40(s0)
8021c816: 23 13 b4 fe  	sh	a1, -26(s0)

000000008021c81a <.LBB474_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021c81a: 97 65 00 00  	auipc	a1, 6
8021c81e: 93 85 e5 2c  	addi	a1, a1, 718
8021c822: 97 40 fe ff  	auipc	ra, 1048548
8021c826: e7 80 00 29  	jalr	656(ra)
8021c82a: 23 12 a4 fe  	sh	a0, -28(s0)
8021c82e: 01 45        	mv	a0, zero
; ) !void {
8021c830: 23 17 a4 fe  	sh	a0, -18(s0)
8021c834: 02 74        	ld	s0, 32(sp)
8021c836: a2 70        	ld	ra, 40(sp)
8021c838: 45 61        	addi	sp, sp, 48
8021c83a: 82 80        	ret

000000008021c83c <std.fmt.format.393>:
; pub fn format(
8021c83c: 39 71        	addi	sp, sp, -64
;     args: anytype,
8021c83e: 06 fc        	sd	ra, 56(sp)
8021c840: 22 f8        	sd	s0, 48(sp)
8021c842: 80 00        	addi	s0, sp, 64
8021c844: 23 30 b4 fc  	sd	a1, -64(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
8021c848: 23 34 a4 fc  	sd	a0, -56(s0)

000000008021c84c <.LBB475_1>:
8021c84c: 97 65 00 00  	auipc	a1, 6
8021c850: 93 85 c5 2a  	addi	a1, a1, 684
8021c854: 97 40 fe ff  	auipc	ra, 1048548
8021c858: e7 80 e0 25  	jalr	606(ra)
8021c85c: 83 35 04 fc  	ld	a1, -64(s0)
8021c860: 2a 86        	mv	a2, a0
8021c862: 03 35 84 fc  	ld	a0, -56(s0)
8021c866: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
8021c86a: 90 61        	ld	a2, 0(a1)
8021c86c: 23 3c c4 fc  	sd	a2, -40(s0)
8021c870: 90 65        	ld	a2, 8(a1)
8021c872: 23 30 c4 fe  	sd	a2, -32(s0)

000000008021c876 <.LBB475_2>:
;         try formatType(
8021c876: 17 66 00 00  	auipc	a2, 6
8021c87a: 13 06 26 2f  	addi	a2, a2, 754
8021c87e: 8d 46        	addi	a3, zero, 3
8021c880: 97 b0 ff ff  	auipc	ra, 1048571
8021c884: e7 80 40 60  	jalr	1540(ra)
8021c888: aa 85        	mv	a1, a0
8021c88a: 03 35 84 fc  	ld	a0, -56(s0)
8021c88e: 23 1b b4 fc  	sh	a1, -42(s0)

000000008021c892 <.LBB475_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021c892: 97 65 00 00  	auipc	a1, 6
8021c896: 93 85 e5 2f  	addi	a1, a1, 766
8021c89a: 97 40 fe ff  	auipc	ra, 1048548
8021c89e: e7 80 80 21  	jalr	536(ra)
8021c8a2: 23 1a a4 fc  	sh	a0, -44(s0)
8021c8a6: 01 45        	mv	a0, zero
; ) !void {
8021c8a8: 23 17 a4 fe  	sh	a0, -18(s0)
8021c8ac: 42 74        	ld	s0, 48(sp)
8021c8ae: e2 70        	ld	ra, 56(sp)
8021c8b0: 21 61        	addi	sp, sp, 64
8021c8b2: 82 80        	ret

000000008021c8b4 <std.fmt.format.394>:
; pub fn format(
8021c8b4: 1d 71        	addi	sp, sp, -96
;     args: anytype,
8021c8b6: 86 ec        	sd	ra, 88(sp)
8021c8b8: a2 e8        	sd	s0, 80(sp)
8021c8ba: 80 10        	addi	s0, sp, 96
8021c8bc: 23 30 b4 fa  	sd	a1, -96(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
8021c8c0: 23 38 a4 fa  	sd	a0, -80(s0)

000000008021c8c4 <.LBB476_1>:
8021c8c4: 97 65 00 00  	auipc	a1, 6
8021c8c8: 93 85 c5 2d  	addi	a1, a1, 732
8021c8cc: 97 40 fe ff  	auipc	ra, 1048548
8021c8d0: e7 80 60 1e  	jalr	486(ra)
8021c8d4: 83 35 04 fa  	ld	a1, -96(s0)
8021c8d8: 2a 86        	mv	a2, a0
8021c8da: 03 35 04 fb  	ld	a0, -80(s0)
8021c8de: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
8021c8e2: 90 61        	ld	a2, 0(a1)
8021c8e4: 23 3c c4 fc  	sd	a2, -40(s0)
8021c8e8: 90 65        	ld	a2, 8(a1)
8021c8ea: 23 30 c4 fe  	sd	a2, -32(s0)

000000008021c8ee <.LBB476_2>:
;         try formatType(
8021c8ee: 17 66 00 00  	auipc	a2, 6
8021c8f2: 13 06 26 32  	addi	a2, a2, 802
8021c8f6: 8d 46        	addi	a3, zero, 3
8021c8f8: 23 34 d4 fa  	sd	a3, -88(s0)
8021c8fc: 97 b0 ff ff  	auipc	ra, 1048571
8021c900: e7 80 80 58  	jalr	1416(ra)
8021c904: aa 85        	mv	a1, a0
8021c906: 03 35 04 fb  	ld	a0, -80(s0)
8021c90a: 23 1b b4 fc  	sh	a1, -42(s0)

000000008021c90e <.LBB476_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021c90e: 97 65 00 00  	auipc	a1, 6
8021c912: 93 85 a5 32  	addi	a1, a1, 810
8021c916: 97 40 fe ff  	auipc	ra, 1048548
8021c91a: e7 80 c0 19  	jalr	412(ra)
8021c91e: 03 36 04 fa  	ld	a2, -96(s0)
8021c922: 83 36 84 fa  	ld	a3, -88(s0)
8021c926: aa 85        	mv	a1, a0
8021c928: 03 35 04 fb  	ld	a0, -80(s0)
8021c92c: 23 1a b4 fc  	sh	a1, -44(s0)
;             @field(args, fields_info[arg_to_print].name),
8021c930: 93 05 06 01  	addi	a1, a2, 16
8021c934: 18 6a        	ld	a4, 16(a2)
8021c936: 23 30 e4 fc  	sd	a4, -64(s0)
8021c93a: 10 6e        	ld	a2, 24(a2)
8021c93c: 23 34 c4 fc  	sd	a2, -56(s0)

000000008021c940 <.LBB476_4>:
;         try formatType(
8021c940: 17 66 00 00  	auipc	a2, 6
8021c944: 13 06 86 36  	addi	a2, a2, 872
8021c948: 97 b0 ff ff  	auipc	ra, 1048571
8021c94c: e7 80 c0 53  	jalr	1340(ra)
8021c950: aa 85        	mv	a1, a0
8021c952: 03 35 04 fb  	ld	a0, -80(s0)
8021c956: 23 1f b4 fa  	sh	a1, -66(s0)

000000008021c95a <.LBB476_5>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021c95a: 97 65 00 00  	auipc	a1, 6
8021c95e: 93 85 65 37  	addi	a1, a1, 886
8021c962: 97 40 fe ff  	auipc	ra, 1048548
8021c966: e7 80 00 15  	jalr	336(ra)
8021c96a: 23 1e a4 fa  	sh	a0, -68(s0)
8021c96e: 01 45        	mv	a0, zero
; ) !void {
8021c970: 23 17 a4 fe  	sh	a0, -18(s0)
8021c974: 46 64        	ld	s0, 80(sp)
8021c976: e6 60        	ld	ra, 88(sp)
8021c978: 25 61        	addi	sp, sp, 96
8021c97a: 82 80        	ret

000000008021c97c <std.fmt.formatIntValue.395>:
; pub fn formatIntValue(
8021c97c: 1d 71        	addi	sp, sp, -96
8021c97e: 86 ec        	sd	ra, 88(sp)
8021c980: a2 e8        	sd	s0, 80(sp)
8021c982: 80 10        	addi	s0, sp, 96
8021c984: 32 87        	mv	a4, a2
8021c986: 23 30 a4 fa  	sd	a0, -96(s0)
8021c98a: 23 2a b4 fa  	sw	a1, -76(s0)
;     } else value;
8021c98e: 23 24 b4 fe  	sw	a1, -24(s0)
;     return formatInt(int_value, radix, case, options, writer);
8021c992: 23 22 b4 fe  	sw	a1, -28(s0)
8021c996: 10 63        	ld	a2, 0(a4)
8021c998: 23 3c c4 fa  	sd	a2, -72(s0)
8021c99c: 10 67        	ld	a2, 8(a4)
8021c99e: 23 30 c4 fc  	sd	a2, -64(s0)
8021c9a2: 10 6b        	ld	a2, 16(a4)
8021c9a4: 23 34 c4 fc  	sd	a2, -56(s0)
8021c9a8: 10 6f        	ld	a2, 24(a4)
8021c9aa: 23 38 c4 fc  	sd	a2, -48(s0)
8021c9ae: 10 73        	ld	a2, 32(a4)
8021c9b0: 23 3c c4 fc  	sd	a2, -40(s0)
8021c9b4: 29 46        	addi	a2, zero, 10
8021c9b6: 81 46        	mv	a3, zero
8021c9b8: 23 34 d4 fa  	sd	a3, -88(s0)
8021c9bc: 97 d0 ff ff  	auipc	ra, 1048573
8021c9c0: e7 80 40 3a  	jalr	932(ra)
8021c9c4: 83 35 84 fa  	ld	a1, -88(s0)
8021c9c8: 2a 86        	mv	a2, a0
8021c9ca: 41 65        	lui	a0, 16
8021c9cc: 7d 35        	addiw	a0, a0, -1
8021c9ce: 71 8d        	and	a0, a0, a2
8021c9d0: 23 17 c4 fe  	sh	a2, -18(s0)
8021c9d4: 63 0a b5 00  	beq	a0, a1, 0x8021c9e8 <std.fmt.formatIntValue.395+0x6c>
8021c9d8: 09 a0        	j	0x8021c9da <std.fmt.formatIntValue.395+0x5e>
8021c9da: 03 35 04 fa  	ld	a0, -96(s0)
8021c9de: 97 40 fe ff  	auipc	ra, 1048548
8021c9e2: e7 80 40 ec  	jalr	-316(ra)
8021c9e6: 11 a0        	j	0x8021c9ea <std.fmt.formatIntValue.395+0x6e>
8021c9e8: 09 a0        	j	0x8021c9ea <std.fmt.formatIntValue.395+0x6e>
8021c9ea: 03 15 e4 fe  	lh	a0, -18(s0)
8021c9ee: 46 64        	ld	s0, 80(sp)
8021c9f0: e6 60        	ld	ra, 88(sp)
8021c9f2: 25 61        	addi	sp, sp, 96
8021c9f4: 82 80        	ret

000000008021c9f6 <std.fmt.formatIntValue.396>:
; pub fn formatIntValue(
8021c9f6: 1d 71        	addi	sp, sp, -96
8021c9f8: 86 ec        	sd	ra, 88(sp)
8021c9fa: a2 e8        	sd	s0, 80(sp)
8021c9fc: 80 10        	addi	s0, sp, 96
8021c9fe: 32 87        	mv	a4, a2
8021ca00: 23 34 a4 fa  	sd	a0, -88(s0)
8021ca04: a3 0f b4 fa  	sb	a1, -65(s0)
;     } else value;
8021ca08: a3 06 b4 fe  	sb	a1, -19(s0)
;     return formatInt(int_value, radix, case, options, writer);
8021ca0c: 23 06 b4 fe  	sb	a1, -20(s0)
8021ca10: 10 63        	ld	a2, 0(a4)
8021ca12: 23 30 c4 fc  	sd	a2, -64(s0)
8021ca16: 10 67        	ld	a2, 8(a4)
8021ca18: 23 34 c4 fc  	sd	a2, -56(s0)
8021ca1c: 10 6b        	ld	a2, 16(a4)
8021ca1e: 23 38 c4 fc  	sd	a2, -48(s0)
8021ca22: 10 6f        	ld	a2, 24(a4)
8021ca24: 23 3c c4 fc  	sd	a2, -40(s0)
8021ca28: 10 73        	ld	a2, 32(a4)
8021ca2a: 23 30 c4 fe  	sd	a2, -32(s0)
8021ca2e: 29 46        	addi	a2, zero, 10
8021ca30: 81 46        	mv	a3, zero
8021ca32: 23 38 d4 fa  	sd	a3, -80(s0)
8021ca36: 97 00 00 00  	auipc	ra, 0
8021ca3a: e7 80 a0 03  	jalr	58(ra)
8021ca3e: 83 35 04 fb  	ld	a1, -80(s0)
8021ca42: 2a 86        	mv	a2, a0
8021ca44: 41 65        	lui	a0, 16
8021ca46: 7d 35        	addiw	a0, a0, -1
8021ca48: 71 8d        	and	a0, a0, a2
8021ca4a: 23 17 c4 fe  	sh	a2, -18(s0)
8021ca4e: 63 0a b5 00  	beq	a0, a1, 0x8021ca62 <std.fmt.formatIntValue.396+0x6c>
8021ca52: 09 a0        	j	0x8021ca54 <std.fmt.formatIntValue.396+0x5e>
8021ca54: 03 35 84 fa  	ld	a0, -88(s0)
8021ca58: 97 40 fe ff  	auipc	ra, 1048548
8021ca5c: e7 80 a0 e4  	jalr	-438(ra)
8021ca60: 11 a0        	j	0x8021ca64 <std.fmt.formatIntValue.396+0x6e>
8021ca62: 09 a0        	j	0x8021ca64 <std.fmt.formatIntValue.396+0x6e>
8021ca64: 03 15 e4 fe  	lh	a0, -18(s0)
8021ca68: 46 64        	ld	s0, 80(sp)
8021ca6a: e6 60        	ld	ra, 88(sp)
8021ca6c: 25 61        	addi	sp, sp, 96
8021ca6e: 82 80        	ret

000000008021ca70 <std.fmt.formatInt.397>:
; pub fn formatInt(
8021ca70: 71 71        	addi	sp, sp, -176
;     options: FormatOptions,
8021ca72: 06 f5        	sd	ra, 168(sp)
8021ca74: 22 f1        	sd	s0, 160(sp)
8021ca76: 00 19        	addi	s0, sp, 176
8021ca78: 23 3c e4 f8  	sd	a4, -104(s0)
8021ca7c: 23 30 b4 fa  	sd	a1, -96(s0)
8021ca80: aa 85        	mv	a1, a0
8021ca82: 03 35 04 fa  	ld	a0, -96(s0)
8021ca86: 23 34 b4 fa  	sd	a1, -88(s0)
8021ca8a: 93 75 f6 0f  	andi	a1, a2, 255
8021ca8e: a3 0b a4 fa  	sb	a0, -73(s0)
8021ca92: 23 0b c4 fa  	sb	a2, -74(s0)
8021ca96: 13 f5 16 00  	andi	a0, a3, 1
8021ca9a: a3 0a a4 fa  	sb	a0, -75(s0)
8021ca9e: 05 45        	addi	a0, zero, 1
;     assert(base >= 2);
8021caa0: 33 35 b5 00  	sltu	a0, a0, a1
8021caa4: 97 30 fe ff  	auipc	ra, 1048547
8021caa8: e7 80 60 6b  	jalr	1718(ra)
;     } else value;
8021caac: 03 05 74 fb  	lb	a0, -73(s0)
8021cab0: a3 06 a4 fe  	sb	a0, -19(s0)
;     const abs_value = math.absCast(int_value);
8021cab4: 23 06 a4 fe  	sb	a0, -20(s0)
8021cab8: 97 00 00 00  	auipc	ra, 0
8021cabc: e7 80 e0 1c  	jalr	462(ra)
8021cac0: a3 05 a4 fe  	sb	a0, -21(s0)
8021cac4: b7 b5 aa fa  	lui	a1, 1026731
8021cac8: 9b 85 b5 aa  	addiw	a1, a1, -1365
8021cacc: b2 05        	slli	a1, a1, 12
8021cace: 93 85 b5 aa  	addi	a1, a1, -1365
8021cad2: b2 05        	slli	a1, a1, 12
8021cad4: 93 85 b5 aa  	addi	a1, a1, -1365
8021cad8: b2 05        	slli	a1, a1, 12
8021cada: 93 85 a5 aa  	addi	a1, a1, -1366
;     var buf: [1 + math.max(value_info.bits, 1)]u8 = undefined;
8021cade: 23 30 b4 fe  	sd	a1, -32(s0)
8021cae2: 93 05 a0 fa  	addi	a1, zero, -86
8021cae6: 23 04 b4 fe  	sb	a1, -24(s0)
;     var a: MinInt = abs_value;
8021caea: a3 0f a4 fc  	sb	a0, -33(s0)
8021caee: 25 45        	addi	a0, zero, 9
;     var index: usize = buf.len;
8021caf0: 23 38 a4 fc  	sd	a0, -48(s0)
;     while (true) {
8021caf4: 09 a0        	j	0x8021caf6 <std.fmt.formatInt.397+0x86>
8021caf6: 09 a0        	j	0x8021caf8 <std.fmt.formatInt.397+0x88>
;         const digit = a % base;
8021caf8: 03 45 f4 fd  	lbu	a0, -33(s0)
8021cafc: 23 34 a4 f8  	sd	a0, -120(s0)
8021cb00: 03 45 64 fb  	lbu	a0, -74(s0)
8021cb04: 23 38 a4 f8  	sd	a0, -112(s0)
8021cb08: 81 45        	mv	a1, zero
8021cb0a: 63 0d b5 04  	beq	a0, a1, 0x8021cb64 <.LBB479_22>
8021cb0e: 15 a8        	j	0x8021cb42 <std.fmt.formatInt.397+0xd2>
;         if (a == 0) break;
8021cb10: 19 a0        	j	0x8021cb16 <std.fmt.formatInt.397+0xa6>
8021cb12: 09 a0        	j	0x8021cb14 <std.fmt.formatInt.397+0xa4>
;     while (true) {
8021cb14: cd b7        	j	0x8021caf6 <std.fmt.formatInt.397+0x86>
;     return formatBuf(buf[index..], options, writer);
8021cb16: 03 35 04 fd  	ld	a0, -48(s0)
8021cb1a: 23 30 a4 f8  	sd	a0, -128(s0)
8021cb1e: a9 45        	addi	a1, zero, 10
8021cb20: 63 65 b5 10  	bltu	a0, a1, 0x8021cc2a <.LBB479_26+0x12>
8021cb24: d5 a8        	j	0x8021cc18 <.LBB479_26>
8021cb26: 03 35 84 fa  	ld	a0, -88(s0)
8021cb2a: 97 40 fe ff  	auipc	ra, 1048548
8021cb2e: e7 80 80 d7  	jalr	-648(ra)
8021cb32: 11 a0        	j	0x8021cb36 <std.fmt.formatInt.397+0xc6>
8021cb34: 09 a0        	j	0x8021cb36 <std.fmt.formatInt.397+0xc6>
8021cb36: 03 15 e4 fe  	lh	a0, -18(s0)
8021cb3a: 0a 74        	ld	s0, 160(sp)
8021cb3c: aa 70        	ld	ra, 168(sp)
8021cb3e: 4d 61        	addi	sp, sp, 176
8021cb40: 82 80        	ret
;         const digit = a % base;
8021cb42: 03 35 84 f8  	ld	a0, -120(s0)
8021cb46: 83 35 04 f9  	ld	a1, -112(s0)
8021cb4a: 3b 75 b5 02  	remuw	a0, a0, a1
8021cb4e: a3 07 a4 fc  	sb	a0, -49(s0)
;         index -= 1;
8021cb52: 03 35 04 fd  	ld	a0, -48(s0)
8021cb56: 93 05 f5 ff  	addi	a1, a0, -1
8021cb5a: 23 3c b4 f6  	sd	a1, -136(s0)
8021cb5e: 63 6c b5 00  	bltu	a0, a1, 0x8021cb76 <.LBB479_23>
8021cb62: 1d a0        	j	0x8021cb88 <.LBB479_23+0x12>

000000008021cb64 <.LBB479_22>:
;         const digit = a % base;
8021cb64: 17 05 00 00  	auipc	a0, 0
8021cb68: 13 05 c5 77  	addi	a0, a0, 1916
8021cb6c: 81 45        	mv	a1, zero
8021cb6e: 97 30 fe ff  	auipc	ra, 1048547
8021cb72: e7 80 20 53  	jalr	1330(ra)

000000008021cb76 <.LBB479_23>:
;         index -= 1;
8021cb76: 17 15 00 00  	auipc	a0, 1
8021cb7a: 13 05 a5 90  	addi	a0, a0, -1782
8021cb7e: 81 45        	mv	a1, zero
8021cb80: 97 30 fe ff  	auipc	ra, 1048547
8021cb84: e7 80 00 52  	jalr	1312(ra)
8021cb88: 03 35 84 f7  	ld	a0, -136(s0)
8021cb8c: 23 38 a4 fc  	sd	a0, -48(s0)
;         buf[index] = digitToChar(@intCast(u8, digit), case);
8021cb90: aa 85        	mv	a1, a0
8021cb92: 23 38 b4 f6  	sd	a1, -144(s0)
8021cb96: a5 45        	addi	a1, zero, 9
8021cb98: 63 6c b5 00  	bltu	a0, a1, 0x8021cbb0 <.LBB479_24+0x12>
8021cb9c: 09 a0        	j	0x8021cb9e <.LBB479_24>

000000008021cb9e <.LBB479_24>:
8021cb9e: 17 05 00 00  	auipc	a0, 0
8021cba2: 13 05 25 76  	addi	a0, a0, 1890
8021cba6: 81 45        	mv	a1, zero
8021cba8: 97 30 fe ff  	auipc	ra, 1048547
8021cbac: e7 80 80 4f  	jalr	1272(ra)
8021cbb0: 83 35 04 f7  	ld	a1, -144(s0)
8021cbb4: 13 05 04 fe  	addi	a0, s0, -32
;         buf[index] = digitToChar(@intCast(u8, digit), case);
8021cbb8: 2e 95        	add	a0, a0, a1
8021cbba: 23 3c a4 f4  	sd	a0, -168(s0)
8021cbbe: 83 05 54 fb  	lb	a1, -75(s0)
8021cbc2: 03 05 f4 fc  	lb	a0, -49(s0)
8021cbc6: 97 d0 ff ff  	auipc	ra, 1048573
8021cbca: e7 80 e0 f3  	jalr	-194(ra)
8021cbce: 83 35 84 f5  	ld	a1, -168(s0)
8021cbd2: 23 80 a5 00  	sb	a0, 0(a1)
;         a /= base;
8021cbd6: 03 45 f4 fd  	lbu	a0, -33(s0)
8021cbda: 23 30 a4 f6  	sd	a0, -160(s0)
8021cbde: 03 45 64 fb  	lbu	a0, -74(s0)
8021cbe2: 23 34 a4 f6  	sd	a0, -152(s0)
8021cbe6: 81 45        	mv	a1, zero
8021cbe8: 63 1c b5 00  	bne	a0, a1, 0x8021cc00 <.LBB479_25+0x12>
8021cbec: 09 a0        	j	0x8021cbee <.LBB479_25>

000000008021cbee <.LBB479_25>:
8021cbee: 17 05 00 00  	auipc	a0, 0
8021cbf2: 13 05 25 6e  	addi	a0, a0, 1762
8021cbf6: 81 45        	mv	a1, zero
8021cbf8: 97 30 fe ff  	auipc	ra, 1048547
8021cbfc: e7 80 80 4a  	jalr	1192(ra)
8021cc00: 03 35 04 f6  	ld	a0, -160(s0)
8021cc04: 83 35 84 f6  	ld	a1, -152(s0)
8021cc08: 3b 55 b5 02  	divuw	a0, a0, a1
8021cc0c: a3 0f a4 fc  	sb	a0, -33(s0)
8021cc10: 81 45        	mv	a1, zero
;         if (a == 0) break;
8021cc12: e3 0f b5 ee  	beq	a0, a1, 0x8021cb10 <std.fmt.formatInt.397+0xa0>
8021cc16: f5 bd        	j	0x8021cb12 <std.fmt.formatInt.397+0xa2>

000000008021cc18 <.LBB479_26>:
;     return formatBuf(buf[index..], options, writer);
8021cc18: 17 05 00 00  	auipc	a0, 0
8021cc1c: 13 05 85 6e  	addi	a0, a0, 1768
8021cc20: 81 45        	mv	a1, zero
8021cc22: 97 30 fe ff  	auipc	ra, 1048547
8021cc26: e7 80 e0 47  	jalr	1150(ra)
8021cc2a: 81 45        	mv	a1, zero
8021cc2c: 05 45        	addi	a0, zero, 1
;     return formatBuf(buf[index..], options, writer);
8021cc2e: 63 1c b5 00  	bne	a0, a1, 0x8021cc46 <.LBB479_27+0x12>
8021cc32: 09 a0        	j	0x8021cc34 <.LBB479_27>

000000008021cc34 <.LBB479_27>:
8021cc34: 17 05 00 00  	auipc	a0, 0
8021cc38: 13 05 c5 6c  	addi	a0, a0, 1740
8021cc3c: 81 45        	mv	a1, zero
8021cc3e: 97 30 fe ff  	auipc	ra, 1048547
8021cc42: e7 80 20 46  	jalr	1122(ra)
8021cc46: 03 36 84 f9  	ld	a2, -104(s0)
8021cc4a: 03 35 84 fa  	ld	a0, -88(s0)
8021cc4e: 03 37 04 f8  	ld	a4, -128(s0)
8021cc52: 93 05 04 fe  	addi	a1, s0, -32
;     return formatBuf(buf[index..], options, writer);
8021cc56: b3 86 e5 00  	add	a3, a1, a4
8021cc5a: a5 45        	addi	a1, zero, 9
8021cc5c: 99 8d        	sub	a1, a1, a4
8021cc5e: 23 3c d4 fa  	sd	a3, -72(s0)
8021cc62: 23 30 b4 fc  	sd	a1, -64(s0)
8021cc66: 93 05 84 fb  	addi	a1, s0, -72
8021cc6a: 97 40 fe ff  	auipc	ra, 1048548
8021cc6e: e7 80 a0 7f  	jalr	2042(ra)
8021cc72: aa 85        	mv	a1, a0
8021cc74: 41 65        	lui	a0, 16
8021cc76: 7d 35        	addiw	a0, a0, -1
8021cc78: 6d 8d        	and	a0, a0, a1
8021cc7a: 23 17 b4 fe  	sh	a1, -18(s0)
8021cc7e: 81 45        	mv	a1, zero
8021cc80: e3 13 b5 ea  	bne	a0, a1, 0x8021cb26 <std.fmt.formatInt.397+0xb6>
8021cc84: 45 bd        	j	0x8021cb34 <std.fmt.formatInt.397+0xc4>

000000008021cc86 <std.math.absCast.398>:
; pub fn absCast(x: anytype) switch (@typeInfo(@TypeOf(x))) {
8021cc86: 01 11        	addi	sp, sp, -32
8021cc88: 06 ec        	sd	ra, 24(sp)
8021cc8a: 22 e8        	sd	s0, 16(sp)
8021cc8c: 00 10        	addi	s0, sp, 32
8021cc8e: 23 07 a4 fe  	sb	a0, -18(s0)
;                 return @intCast(Uint, x);
8021cc92: a3 07 a4 fe  	sb	a0, -17(s0)
8021cc96: 42 64        	ld	s0, 16(sp)
8021cc98: e2 60        	ld	ra, 24(sp)
8021cc9a: 05 61        	addi	sp, sp, 32
8021cc9c: 82 80        	ret

000000008021cc9e <std.fmt.format.399>:
; pub fn format(
8021cc9e: 79 71        	addi	sp, sp, -48
;     args: anytype,
8021cca0: 06 f4        	sd	ra, 40(sp)
8021cca2: 22 f0        	sd	s0, 32(sp)
8021cca4: 00 18        	addi	s0, sp, 48
8021cca6: 23 38 b4 fc  	sd	a1, -48(s0)
;             try writer.writeAll(fmt[start_index..end_index]);
8021ccaa: 23 3c a4 fc  	sd	a0, -40(s0)

000000008021ccae <.LBB481_1>:
8021ccae: 97 65 00 00  	auipc	a1, 6
8021ccb2: 93 85 25 03  	addi	a1, a1, 50
8021ccb6: 97 40 fe ff  	auipc	ra, 1048548
8021ccba: e7 80 c0 df  	jalr	-516(ra)
8021ccbe: 83 35 04 fd  	ld	a1, -48(s0)
8021ccc2: 2a 86        	mv	a2, a0
8021ccc4: 03 35 84 fd  	ld	a0, -40(s0)
8021ccc8: 23 16 c4 fe  	sh	a2, -20(s0)
;             @field(args, fields_info[arg_to_print].name),
8021cccc: 8c 41        	lw	a1, 0(a1)
8021ccce: 23 24 b4 fe  	sw	a1, -24(s0)

000000008021ccd2 <.LBB481_2>:
;         try formatType(
8021ccd2: 17 66 00 00  	auipc	a2, 6
8021ccd6: 13 06 e6 07  	addi	a2, a2, 126
8021ccda: 8d 46        	addi	a3, zero, 3
8021ccdc: 97 00 00 00  	auipc	ra, 0
8021cce0: e7 80 c0 94  	jalr	-1716(ra)
8021cce4: aa 85        	mv	a1, a0
8021cce6: 03 35 84 fd  	ld	a0, -40(s0)
8021ccea: 23 13 b4 fe  	sh	a1, -26(s0)

000000008021ccee <.LBB481_3>:
;             try writer.writeAll(fmt[start_index..end_index]);
8021ccee: 97 65 00 00  	auipc	a1, 6
8021ccf2: 93 85 a5 08  	addi	a1, a1, 138
8021ccf6: 97 40 fe ff  	auipc	ra, 1048548
8021ccfa: e7 80 c0 db  	jalr	-580(ra)
8021ccfe: 23 12 a4 fe  	sh	a0, -28(s0)
8021cd02: 01 45        	mv	a0, zero
; ) !void {
8021cd04: 23 17 a4 fe  	sh	a0, -18(s0)
8021cd08: 02 74        	ld	s0, 32(sp)
8021cd0a: a2 70        	ld	ra, 40(sp)
8021cd0c: 45 61        	addi	sp, sp, 48
8021cd0e: 82 80        	ret

000000008021cd10 <memset>:
8021cd10: 41 11        	addi	sp, sp, -16
8021cd12: 06 e4        	sd	ra, 8(sp)
8021cd14: 22 e0        	sd	s0, 0(sp)
8021cd16: 00 08        	addi	s0, sp, 16
8021cd18: 19 c6        	beqz	a2, 0x8021cd26 <memset+0x16>
8021cd1a: aa 86        	mv	a3, a0
8021cd1c: 23 80 b6 00  	sb	a1, 0(a3)
8021cd20: 7d 16        	addi	a2, a2, -1
8021cd22: 85 06        	addi	a3, a3, 1
8021cd24: 65 fe        	bnez	a2, 0x8021cd1c <memset+0xc>
8021cd26: 02 64        	ld	s0, 0(sp)
8021cd28: a2 60        	ld	ra, 8(sp)
8021cd2a: 41 01        	addi	sp, sp, 16
8021cd2c: 82 80        	ret

000000008021cd2e <memcpy>:
8021cd2e: 41 11        	addi	sp, sp, -16
8021cd30: 06 e4        	sd	ra, 8(sp)
8021cd32: 22 e0        	sd	s0, 0(sp)
8021cd34: 00 08        	addi	s0, sp, 16
8021cd36: 11 ca        	beqz	a2, 0x8021cd4a <memcpy+0x1c>
8021cd38: aa 86        	mv	a3, a0
8021cd3a: 03 87 05 00  	lb	a4, 0(a1)
8021cd3e: 23 80 e6 00  	sb	a4, 0(a3)
8021cd42: 7d 16        	addi	a2, a2, -1
8021cd44: 85 05        	addi	a1, a1, 1
8021cd46: 85 06        	addi	a3, a3, 1
8021cd48: 6d fa        	bnez	a2, 0x8021cd3a <memcpy+0xc>
8021cd4a: 02 64        	ld	s0, 0(sp)
8021cd4c: a2 60        	ld	ra, 8(sp)
8021cd4e: 41 01        	addi	sp, sp, 16
8021cd50: 82 80        	ret
